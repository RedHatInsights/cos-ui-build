{"version":3,"file":"5910.61b632e4.js","mappings":"gMAqDO,MA2bMA,EAAgB,EAC3BC,YAAAA,EACAC,sBAAAA,EACAC,2BAAAA,EACAC,MAAAA,EACAC,QAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,KAAAA,EACAC,mBAAAA,EACAC,iBAAAA,EACAC,MAAAA,MAEA,MAAMC,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGRc,EAAc,IAAI,EAAAC,YACtB,IAAI,EAAAH,cAAc,CAChBb,YAAAA,EACAc,SAAUZ,KA0Bd,OAAQe,IACN,MACMC,EADc,gBACOA,SA0D3B,MAlFgC,CAAOA,IAA8B,iD,MACrE,GAAIV,EAAoB,OAAOW,QAAQC,QAAQZ,GAI/C,MAAMa,QAAiBN,EAAYO,qBACjC,CACEf,KAAM,aAAkD,QAApC,EAAAF,EAAkCkB,UAAE,eAAEC,WACxD,SACA,QACGC,KAAKC,SAEZ,CACEC,YAAaT,EAAOU,QAGxB,MAAO,CACLC,SAAUR,EAASS,KAAKC,UACxBC,aAAcX,EAASS,KAAKG,kBAQ9BC,CAA0BhB,GACvBiB,MAAK,EAAGN,SAAAA,EAAUG,aAAAA,MACjB,IAAII,EAAyB,GAE3BA,EADE3B,EACuB,OAAH,wBACjBH,GACA,CACD+B,cAAe,CACb,CAAC5B,GAAmBC,EAAQ,CAAEA,MAAOA,GAAU,MAK5BJ,EAE3B,MAAMgC,EAAuB,CAC3BC,KAAM,YACNhC,KAAMA,EACNiC,QAAS,EAAAC,QAAA,OACTC,oBAAqB,CACnBH,KAAM,QACNI,WAAYvC,EAAQmB,IAEtBqB,cAAe,EAAAC,sBAAA,MACfC,kBAAoBzC,EAAkCkB,GACtDpB,MAAO,CACLoB,GAAIpB,EAAMoB,GACVwB,IAAK5C,EAAM6C,uBAAyB,QAEtCC,gBAAiB,CACflB,UAAWF,EACXI,cAAeD,GAEjBM,UAAWF,GAEbzB,EACGuC,gBArCO,KAqCgBZ,EAAW,CACjCX,YAAaT,EAAOU,QAErBO,MAAK,KACJlB,EAAS,CAAEkC,KAAM,eAElBC,OAAOC,IACD,aAAeA,IAClBpC,EAAS,CACPkC,KAAM,UACNG,QAASD,EAAMhC,SAASS,KAAKyB,eAKtCH,OAAOC,IACD,aAAeA,IAClBpC,EAAS,CAAEkC,KAAM,UAAWG,QAASD,EAAMhC,SAASS,KAAKyB,YAGxD,KACLrC,EAAOsC,OAAO,sC,yDC5kBb,MAAMC,EAA2D,EACtElD,KAAAA,EACAmD,OAAAA,MAEA,MAAMC,EAsDD,SAAiCD,G,MACtC,MAAM,EAAEE,IAAM,IAAAC,kBAERC,EAAgB,CACpB,CAAEC,MAAOC,EAAkBC,MAAON,MAAOC,EAAE,YAC3C,CAAEG,MAAOC,EAAkBE,OAAQP,MAAOC,EAAE,WAC5C,CAAEG,MAAOC,EAAkBG,UAAWR,MAAOC,EAAE,qBAC/C,CAAEG,MAAOC,EAAkBI,SAAUT,MAAOC,EAAE,yBAC9C,CAAEG,MAAOC,EAAkBK,SAAUV,MAAOC,EAAE,yBAC9C,CAAEG,MAAOC,EAAkBM,aAAcX,MAAOC,EAAE,yBAClD,CAAEG,MAAOC,EAAkBO,SAAUZ,MAAOC,EAAE,aAC9C,CAAEG,MAAOC,EAAkBQ,QAASb,MAAOC,EAAE,aAG/C,OAAoD,QAA7C,EAAAE,EAAcW,MAAMC,GAAMA,EAAEX,QAAUL,WAAO,eAAEC,QAASD,EApEjDiB,CAAwBjB,GAEtC,OACE,kBAAC,EAAAkB,KAAI,KACH,kBAAC,EAAAC,SAAQ,CAACC,OAAQ,CAAEC,QAAS,aAC3B,kBAACC,EAAmB,CAACzE,KAAMA,EAAMmD,OAAQA,KAE3C,kBAAC,EAAAmB,SAAQ,KAAElB,KAKJqB,EAA+D,EAC1EzE,KAAAA,EACAmD,OAAAA,MAEA,OAAQA,MAAAA,OAAM,EAANA,EAAQuB,eACd,IAAK,QACH,OACE,kBAAC,EAAAC,gBAAe,CAACC,UAAU,4CAE/B,IAAK,SACH,OACE,kBAAC,EAAAC,sBAAqB,CAACD,UAAU,yCAErC,IAAK,WACH,OAAO,kBAAC,EAAAE,YAAW,MACrB,IAAK,eACL,IAAK,YACH,OACE,kBAAC,EAAAC,QAAO,CACNC,KAAK,KAAI,aACGhF,EAAI,iBACD,yBAGrB,IAAK,cACL,IAAK,UACH,OAAO,KAEX,OAAO,kBAAC,EAAA8E,YAAW,OAGrB,IAAYrB,GAAZ,SAAYA,GACV,gBACA,kBACA,wBACA,sBACA,sBACA,8BACA,sBACA,oBARF,CAAYA,IAAAA,EAAiB,K,eChEtB,MAAMwB,EAAuB,eAGpC,IAAYC,GAAZ,SAAYA,GACV,sBACA,gCAFF,CAAYA,IAAAA,EAAsB,KAK3B,MCSDC,GAAa,IAAAC,eAAqC,MAE3CC,EAAwD,EACnEC,SAAAA,EACA5F,sBAAAA,EACAC,2BAAAA,EACA4F,SAAAA,KAEA,kBAACJ,EAAWK,SAAQ,CAClBhC,MAAO,CACL8B,SAAAA,EACA5F,sBAAAA,EACAC,2BAAAA,IAGD4F,GAIQE,EAAS,KACpB,MAAMC,GAAU,IAAAC,YAAWR,GAC3B,IAAKO,EACH,MAAM,IAAIE,MAAM,2DAElB,OAAO,OAAP,UACKF,I,oCCvCP,MAAMG,EAAqD,EAAG/C,MAAAA,KAE1D,yBAAKgD,KAAK,SACR,oDACA,6BAAMhD,EAAMC,UAKLgD,EAAuC,EAAGR,SAAAA,KACrD,kBAAC,EAAAS,cAAa,CAACC,kBAAmBJ,EAAeK,UAAW,CAAChF,KAAKC,QAC/DoE,GCWQY,EAAoB,CAC/BpE,EACAqE,KAC2C,iDAC3C,MAAMC,EAAgBzF,QAAQC,QAAuC,CACnEyF,OAAO,EACPC,cAAc,IAEhB,OAAO,IAAI3F,SAAeC,IAAY,iDACpC,IACE,MAAM2F,QACEC,EAA0CL,EAAQrE,SACpD2E,EACJF,EAAsBG,aAExB9F,EA2EC,SACL+F,EACAC,G,4DAGM,IAAyB,WAC/B,MAAMC,EAAaC,OAAeH,SAE5BE,EAAUE,KAAK,IAAyBxC,SAC9C,MACMyC,SADiBF,OAAeH,GAAOM,IAAIL,MAOjD,OAJAM,QAAQC,IACN,oDAAoDR,IACpDK,GAEKA,EAA6BzC,WA1F9B6C,CACEb,EAAsBI,MACtBJ,EAAsBK,SAG1B,MAAOS,GACPzG,EAAQwF,YAcRI,EAA4C,CAChDL,EACArE,KAC8C,iDAC9CoF,QAAQC,IAAI,uDAAwDhB,GACpE,MAAMmB,EACJnB,EAAQrE,EAA8Bf,KACtCoF,EAAQrE,EAA8Bf,GAAIwG,MAAM,KAAK,IAKvD,OAJAL,QAAQC,IACN,gCAAiCrF,EAA8Bf,MAC/DuG,GAEGA,GArBcE,EAyBHF,IAvBhBE,EAAUd,aACuB,iBAA1Bc,EAAUd,aACjBc,EAAUb,OACiB,iBAApBa,EAAUb,OACjBa,EAAUZ,QACkB,iBAArBY,EAAUZ,QAmBfM,QAAQC,IACN,kDACAG,GAEKA,IAETJ,QAAQC,IACN,mEAEKxG,QAAQ8G,WAbbP,QAAQC,IAAI,+DACLxG,QAAQ8G,UAvBC,IAACD,KAsCRf,EAAqClE,IAAgB,iDAChE,OAAO,IAAI5B,SAAc,CAACC,EAAS6G,KACjC,MAAMC,EAAUC,SAASC,cAAc,UAEvCF,EAAQG,IAAMtF,EACdmF,EAAQ/E,KAAO,kBACf+E,EAAQI,OAAQ,EAEhBJ,EAAQK,OAAS,KACfb,QAAQC,IAAI,oCAAoC5E,KAChDoF,SAASK,KAAKC,YAAYP,GAC1B9G,KAGF8G,EAAQQ,QAAU,KAChBhB,QAAQrE,MAAM,mCAAmCN,KACjD2E,QAAQC,IAAI,qCAAqC5E,KACjDoF,SAASK,KAAKC,YAAYP,GAC1BD,KAGFE,SAASK,KAAKG,YAAYT,SC/GvB,MAAMU,EAAeC,IAC1B,MAAMC,EAAM,GAIZ,OAHAD,EAASE,SAAQ,CAAChF,EAAOiF,KACvBF,EAAIE,GAAOjF,KAEN+E,GCkBIG,EAAiC,EAC5CC,SAAAA,EACA5I,cAAAA,EACA6I,cAAAA,EACAC,sBAAAA,M,MAEA,MAAM,EAAExF,IAAM,IAAAC,kBAOd,OACE,oCACE,kBAAC,EAAAwF,MAAK,CACJC,aAAa,KACb/D,KAAM,EAAAgE,WAAA,OACNpE,UAAW,yBAEVvB,EAAE,WAEL,kBAAC,EAAA4F,KAAI,KACH,kBAAC,EAAAC,UAAS,CACR9F,MAAOC,EAAE,kBACT8F,YAAU,EACVC,QAAQ,iBACRC,UACE,kBAAC,EAAAC,QAAO,CAACC,YAAa,2BAAIlG,EAAE,oCAC1B,4BACET,KAAK,SAAQ,aACF,4BACX4G,QAAUlC,GAAMA,EAAEmC,iBAAgB,mBACjB,sBACjB7E,UAAU,+BAEV,kBAAC,EAAA8E,SAAQ,CAACC,iBAAe,OAK9BhB,EACC,kBAAC,EAAAiB,UAAS,CACRpG,MAAOzD,EAAcC,KACrB6J,SAAWC,GApCF,CAACA,IACpBjB,EAAsB,SAAU,OAAF,wBAAO9I,GAAa,CAAEC,KAAM8J,KAC7ClB,EAAL,KAARkB,IAkC6BC,CAAaD,GAChC9I,GAAG,mBAGL,kBAAC,EAAAgJ,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBnK,EAAcC,OAGpD,kBAAC,EAAAkJ,UAAS,CAAC9F,MAAOC,EAAE,mBAAoB+F,QAAQ,mBAE5C,oCACE,kBAAC,EAAAF,UAAS,CAAC9F,MAAOC,EAAE,aAAc8F,YAAU,EAACC,QAAQ,YACnD,kBAAC,EAAAe,cAAa,CAACC,YAAU,EAACC,SAAS,OAAOC,SAAS,UAClB,QAA9B,EAAAvK,MAAAA,OAAa,EAAbA,EAAe2C,uBAAe,eAAElB,iB,0BC7EnD,MAAM+I,EAAM,I,MAAI,GAAJ,CAAQ,CAClBC,WAAW,EACXC,aAAa,EACbC,OAAQ,MACRC,cAAc,IAET,SAASC,EAAgBC,GAC9B,MAAMC,EAAYP,EAAIQ,QAAQF,GAE9B,OAAQG,I,MAEN,OADAF,EAAUE,IACa,QAAhB,EAAAF,EAAUG,cAAM,eAAEC,QAAS,CAAEC,QAASL,EAAUG,QAAW,M,qCCStE,MAAMG,EAAW,IAAI,EAAAC,SAERC,EACX,EAAGT,OAAAA,EAAQ9K,cAAAA,EAAe8J,SAAAA,EAAU0B,SAAAA,MAClCV,EAAOjI,KAAOiI,EAAOjI,MAAQ,SAE7B,WACSiI,EAAOW,WAAWlF,MACzB,MAAOgB,IAET,MAAMmE,EAAkBb,EAAgBC,GAClCa,EAAS,IAAI,EAAAC,iBAAiBd,EAAQY,IACtC,SAAEG,GAAaF,EAAOb,OAiB5B,MAAMgB,EAAiB,CAAOb,EAAYc,KAAqB,iDAC7D,MAAMC,EAAcC,KAAKC,MAAMD,KAAKE,UAAUlB,IAC9C,IAAImB,EAAwB,GAC5B,QAA+BC,IAA3BL,EAAYM,WAA0B,CACxCF,QAnBJ,W,4DACE,MAAMG,EAAeN,KAAKC,MAAMD,KAAKE,UAAUR,IAC/C,IAAInD,EAAW,GACf,IAAK,MAAOE,KAAQ8D,OAAOC,QACgB,QAAzC,EAAAF,EAAazB,OAAOW,WAAWa,kBAAU,eAAEb,YAC1C,CACD,MAAMiB,QAAyBrB,EAASvK,QAAQyL,EAAazB,OAAQ,CACnE6B,YAAa,sBAAsBjE,MAE/BkE,QAAeF,EAAiBE,OACtCpE,EAAM,OAAH,wBAAQA,GAAG,CAAE,CAACE,GAAMkE,IAEzB,OAAOpE,KAOoBqE,GACzB,MAAM,WAAEP,GAAeN,EACvBQ,OAAOM,KAAKR,GAAYS,KAAKrE,I,QAC3B,MAAMsE,EACoC,QAAxC,EAAgC,QAAhC,EAAAZ,EAAiB1D,GAAK+C,kBAAU,eAAEwB,cAAM,eAAExI,QACxC,YAAU6H,EAAW5D,MACvBsD,EAAYM,WAAW5D,GAAO,CAAEuE,OAAQD,OAK9C,MAAME,EAAkB,GACxB,IAAK,MAAOxE,EAAKjF,KAAU+I,OAAOC,QAAQT,GACxC,IAAK,MAAMmB,KAAKtB,EACd,GAAInD,IAAQmD,EAASsB,SAAgBd,IAAV5I,EAAqB,CAC9C,MAAM+E,EAAM,CAAE,CAACE,GAAMjF,GACrB+I,OAAOY,OAAOF,EAAiB1E,GAIrC,MAAM6E,EAA6B,CACjCH,EACArB,KAEA,MAAMyB,EAAQd,OAAOM,KAAKI,GAAiBK,OACrCC,EAAQ3B,EAAS4B,QAAQF,OAC/B,OAAOtB,KAAKE,UAAUmB,KAAWrB,KAAKE,UAAUqB,IAGhDxB,EAAYM,WADdP,EAEMsB,EAA2BH,EAAiBrB,GAIhD/B,EAASkC,EADPD,IAGoB,MAI1B,OACE,kBAAC,EAAA2B,KAAI,CAACC,WAAS,GACb,kBAACC,EAAW,CACV9C,OAAQa,EACRV,MAAOjL,EACP6N,cAAgB5C,GAAea,EAAeb,GAAO,GACrDpG,UAAU,iDAET2H,OAAOM,KAAKnB,EAAOb,OAAOW,YAAYsB,KAAKrE,IACrC,CAAC,aAAc,iBAAiBoF,SAASpF,IAE1C,kBAAC,EAAAqF,UAAS,CACRrF,IAAKA,EACLzI,KAAMyI,EACNsF,SACExC,GACA,SAAOG,EAAOb,OAAOW,WAAW/C,GAAKuF,MAAO,CAC1ChB,OAAQ,oBAuB9B,MAAMW,EAXN,SAASM,EAAKC,GACZ,MAAMC,UAAU,EAAAC,SAAAH,KAAcC,IAE5BrE,SAASpB,EAAajF,GACpB,GAAc,KAAVA,EAAc,OAAO6K,MAAMxE,SAASpB,OAAK2D,GAC7CiC,MAAMxE,SAASpB,EAAKjF,IAGxB,OANS,EAAAyK,KAAOA,EAMTE,EAGWF,CAAK,EAAAK,oBC5GZC,EAAgD,EAC3D5F,SAAAA,EACAkC,OAAAA,EACA9K,cAAAA,EACA6I,cAAAA,EACAC,sBAAAA,MAEA,MAAM,EAAExF,IAAM,IAAAC,kBAERkL,EAAoBxC,KAAKC,MAAMD,KAAKE,UAAUnM,IACpDwM,OAAOM,KAAK2B,GAA6B1B,KAAKrE,IACxC,YAAW+F,EAA6C/F,MACzD+F,EAA6C/F,GAAO,OASzD,OACE,oCACE,kBAAC,EAAAK,MAAK,CACJC,aAAa,KACb/D,KAAM,EAAAgE,WAAA,OACNpE,UAAW,yBAEVvB,EAAE,uBAEJsF,EACC,kBAAC2C,EAAsB,CACrBT,OAAQA,EACR9K,cAAeyO,GAAqB,GACpC3E,SAlBS,CAACzD,EAAiB0F,KACjCjD,EAAsB,YAAazC,GACnCwC,EAAckD,IAiBRP,UAAU,IAGZ,kBAAC,EAAAtC,KAAI,KACFsD,OAAOC,QAAQ3B,EAAOW,YACpBiD,QAAO,EAAEhG,EAAKjF,MACT,CAAC,SAAU,SAASqK,SAASrK,EAAMZ,OACzB,eAAR6F,IAOPqE,KAAI,EAAErE,EAAKjF,KACV,kBAAC,EAAA0F,UAAS,CACRT,IAAKA,EACLrF,MAAOI,EAAMkL,OAAS,eAAajG,EAAIkG,QAAQ,IAAK,MACpDvF,QAASX,EACTU,WAAY0B,EAAOe,SAASiC,SAASpF,GACrCY,UACE,kBAAC,EAAAC,QAAO,CACNC,YACE,2BACG/F,EAAMoL,YACHpL,EAAMoL,YACN,eAAanG,EAAIkG,QAAQ,IAAK,QAItC,4BACE/L,KAAK,SAAQ,aACF,2BACX4G,QAAUlC,GAAMA,EAAEmC,iBAAgB,mBACjB,sBACjB7E,UAAU,+BAEV,kBAAC,EAAA8E,SAAQ,CAACC,iBAAe,OAK/B,kBAAC,EAAAK,KAAI,CAACC,UAAW,EAAAC,aAAA,GACd,aAAYsE,EAAwC/F,IACjDuD,KAAKE,UACFsC,EAAwC/F,IAE1C+F,EAAwC/F,UC5ElDoG,EAA8C,EACzDlG,SAAAA,EACAkC,OAAAA,EACA9K,cAAAA,EACA6I,cAAAA,EACAC,sBAAAA,M,MAEA,MAAOiG,EAAQC,IAAW,IAAAC,WAAkB,IACrC7O,EAAO8O,IAAY,IAAAD,aACnBE,EAAcC,IAAmB,IAAAH,aAClC,EAAE3L,IAAM,IAAAC,kBA0BR8L,EAAiB,KACrBL,GAAQ,KAGV,IAAAM,YAAU,KACRF,EAAgB5C,OAAOM,KAAK9M,GAAe,IAEP,sBAAlCwM,OAAOM,KAAK9M,GAAe,IAC1B,YAAUA,EAAcuP,oBAEzBL,EACElP,EAAcuP,kBACZ/C,OAAOM,KAAK9M,EAAcuP,mBAAmB,KAI5C,SAEN,CAACvP,IAEJ,MAMM0L,EAAkBb,EAAgBC,GAClCa,EAAS,IAAI,EAAAC,iBAAiBd,EAAQY,IACtC,cAAE3J,GAA+B,QAAb,EAAA4J,EAAOb,cAAM,eAAEW,WAGnC+D,EAFQzN,EAAqB,MAEPgL,KAAK0C,IAC/B,MAAM3C,EAAON,OAAOM,KAAK2C,EAAKhE,YAC9B,OAAO,kBAAC,EAAAiE,aAAY,CAAChH,IAAKoE,EAAK,GAAIrJ,MAAOqJ,EAAK,QAEjD,OACE,oCACE,kBAAC,EAAA/D,MAAK,CACJC,aAAa,KACb/D,KAAM,EAAAgE,WAAA,OACNpE,UAAW,yBAAuB,kBAIpC,kBAAC,EAAAqE,KAAI,KACH,kBAAC,EAAAC,UAAS,CACR9F,MAAOC,EAAE,iBACT+F,QAAQ,yBACRxE,UAAU,0BAET+D,EACC,kBAAC,EAAA+G,OAAM,CACLC,QAAS,EAAAC,cAAA,OAAoB,aAClB,uBACXC,SA9EK,IAAMd,GAASD,IAAYA,IA+EhCgB,SAnEK,CAAC3B,EAAQ4B,EAAgBC,KACpCA,EACFZ,KAEAL,GAAQ,GACRE,EAAS,IACTE,EAAgBY,GAdhBnH,EADY,sBAgBEmH,KAdL5P,GAeT0I,EAAsB,QAAS,CAAE,CAACkH,GAAY,OA4DtCE,WAAYf,EACZJ,OAAQA,EACRoB,gBAAgB,eAEfX,GAGH,kBAAC,EAAAvF,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBgF,IAGpB,sBAAjBA,GACC,kBAAC,EAAAhG,UAAS,CACR9F,MAAM,yBACN+F,YAAU,EACVC,QAAQ,QACRC,UACE,kBAAC,EAAAC,QAAO,CACNC,YACE,qFAGF,4BACE3G,KAAK,SAAQ,aACF,2BACX4G,QAAUlC,GAAMA,EAAEmC,iBAAgB,mBACjB,sBACjB7E,UAAU,+BAEV,kBAAC,EAAA8E,SAAQ,CAACC,iBAAe,OAK9BhB,EACC,kBAAC,EAAAiB,UAAS,CAACpG,MAAOrD,EAAO0J,SAtEhBC,IACnBmF,EAASnF,GACHlB,IAANkB,GACAjB,EAAsB,QAAS,CAAEyG,kBAAmB,CAAEnP,MAAO2J,MAmEH9I,GAAG,UAEnD,kBAAC,EAAAgJ,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiB/J,OCpG1CgQ,EAAiB,CAACC,EAAuBC,IAVlC,EAACC,EAAgBC,KAC5B,IAAIrD,EAAc,GAMlB,OALA,SAAOoD,GAAW,CAACxG,EAAKrB,UACJ2D,IAAdmE,GAA2BA,EAAU9H,KAASqB,GAC9CyG,EAAU9H,KAAS,IAAc,KAARqB,GAC7BoD,EAAEsD,KAAK/H,MAEFyE,GAIUuD,CAAKL,EAAkBC,GACxBK,QAAO,CAACC,EAAKlI,IACpB,OAAP,wBAAYkI,GAAG,CAAE,CAAClI,GAAM2H,EAAiB3H,MACxC,IAGQmI,EAAgD,EAC3DC,OAAAA,EACAlI,SAAAA,EACAmI,eAAAA,EACAC,cAAAA,EACAC,qBAAAA,M,QAEA,MAAM,EAAE3N,IAAM,IAAAC,kBACR2N,GAAQ,IAAAC,YACR9K,GAAS,IAAA+K,cAET,sBAAEzR,EAAqB,SAAE4F,GAAaG,KAErC2L,EAAoBC,IAAyB,IAAArC,WAAS,IACtDsC,EAAaC,IAAkB,IAAAvC,WAAS,IAExCwC,EAAcC,IAAmB,IAAAzC,UAA0B,IAE3D0C,EAAqBC,IAA0B,IAAA3C,UAEnD,KACInN,EAAwB+P,IAC7B,IAAA5C,aACK6C,EAAyBC,IAA8B,IAAA9C,UAE3D,KAEI+C,EAAcC,IAAmB,IAAAhD,aACjCiD,EAAaC,IAAkB,IAAAlD,WAAkB,GAGlDmD,EAAoB,IAAMd,GAAsB,GAMhDxI,GAAwB,IAAAuJ,cAC5B,CAACxP,EAAMyP,KAEL,OADAd,GAAe,GACP3O,GACN,IAAK,SACH+O,EAAuBU,GACvB,MACF,IAAK,YACHT,EAA0BS,GAC1B,MACF,IAAK,QACHP,EAA2BO,MAGjC,CACEV,EACAC,EACAE,IAIEQ,GAAU,IAAAF,cACbxD,IACCqC,MAAAA,GAAAA,EAAOsB,SAAS,CACdvR,GAAI,yBACJ2O,QAAS,EAAA6C,aAAA,OACT9D,MAAOrL,EAAE,wBACTuL,YAAAA,MAGJ,CAACqC,EAAO5N,IAGJoP,GAAY,IAAAL,cAAY,KAC5BtB,GAAe,GACfG,MAAAA,GAAAA,EAAOsB,SAAS,CACdvR,GAAI,oBACJ2O,QAAS,EAAA6C,aAAA,QACT9D,MAAOrL,EAAE,uBAEXwN,MACC,CAACI,EAAO5N,EAAGyN,EAAgBD,IAwBxB6B,EAAa,K,MACjB,MAAM,KAAE1S,EAAI,gBAAE0C,GAAoBqO,EAClCY,EAAuB,CAAE3R,KAAMA,EAAM0C,gBAAiBA,IACtDkP,EAA0Bb,MAAAA,OAAa,EAAbA,EAAehP,WACzC+P,EACyC,QAAtC,EAAAf,MAAAA,OAAa,EAAbA,EAAehP,iBAAuB,eAAED,gBAIvC6Q,EAAe,KACnBD,IACA5B,GAAe,GACfqB,KAGIS,GAAyB,IAAAR,cAC7B,CAAChM,EAAQ0F,KACP8F,EAA0BxL,GAC1B8L,EAAepG,KAEjB,CAAC8F,EAA2BM,IAG9B,IAAIpR,IAaJ,IAAAuO,YAAU,KACRqD,KAbkC,iDAClC,IACE5R,SAAiBqF,EACf6K,GACA5K,MAAAA,OAAM,EAANA,EAAQyM,IAAIC,gBAAiB,IAE/Bd,EAAgBlR,IAChB,MAAOiS,GACP5L,QAAQC,IAAI,4BAA6B2L,SAQ1C,IASH,OACE,oCACE,kBAAC,EAAAC,YAAW,CAACrD,QAAS,EAAAsD,oBAAA,OACpB,kBAAC,EAAAxF,KAAI,CAACyF,MAAO,CAAEC,cAAe,SAC5B,kBAAC,EAAAC,SAAQ,CAACC,KAAM,GACd,6BACE,kBAAC,EAAAC,KAAI,CACHC,UAAW/B,EACX1B,SAdS,CACrB0D,EACAC,KAEAhC,EAAgBgC,IAWJC,YAAU,GAEV,kBAAC,EAAAC,IAAG,CACFC,SAAU,EACVlF,MAAO,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,aAEzB0N,EAAcxO,kBAAkBsL,SAAS,aACxCkE,GACAA,EAAazL,OACbyL,EAAazL,MAAMwG,KAAI,CAACgH,EAAcC,IAElC,kBAAC,EAAAJ,IAAG,CACFlL,IAAKqL,EACLF,SAAUG,EAAQ,EAClBrF,MAAO,kBAAC,EAAAmF,aAAY,KAAEC,QAI5B/C,EAAcxO,kBAAkBsL,SAAS,aACzC,oCACE,kBAAC,EAAA8F,IAAG,CACFC,SAAU,EACVlF,MACE,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,yBAGrB,kBAAC,EAAAsQ,IAAG,CACFC,SAAU,EACVlF,MAAO,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,yBAOpC,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GACd,kBAAC,EAAA5F,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,IACI,IAAjB7B,GACC,kBAACzL,EAAiB,MACd,YAAU2L,IACV,kBAAChJ,EAAU,CACTC,SAAUA,EACV5I,cAAe2R,EACf9I,cAAesJ,EACfrJ,sBAAuBA,KAK9BkI,EAAcxO,kBAAkBsL,SAAS,cACxCkE,MAAAA,OAAY,EAAZA,EAAcxL,eACZ,kBAACR,EAAiB,KAChB,oCACE,kBAAC,EAAA+C,MAAK,CACJC,aAAa,KACb/D,KAAM,EAAAgE,WAAA,OACNpE,UAAW,yBAEVmN,MAAAA,OAAY,EAAZA,EAAczL,MAAOkL,EAA0B,IAElD,kBAAC,aAAc,CAACwC,SAAUC,EAAA,GACxB,kBAACC,EAA2B,CAC1B3N,aACEwL,MAAAA,OAAY,EAAZA,EAAcxL,aAEhB4N,WAAYxL,EACZ5I,cAAe8B,EACf+Q,uBAAwBA,EACxB7Q,UAAWiP,EACX8C,KAAMtC,QAMhBT,EAAcxO,kBAAkBsL,SAAS,aACxB,IAAjB2D,GACE,kBAACzL,EAAiB,KAChB,kBAACwI,EAAiB,CAChB5F,SAAUA,EACVkC,OAC8C,QAA3C,EAAAmG,SAA2C,eAAEnG,OAEhD9K,cAAe8B,EACf+G,cAAesJ,EACfrJ,sBAAuBA,MAI7BkI,EAAcxO,kBAAkBsL,SAAS,aACxB,IAAjB2D,GACE,kBAACzL,EAAiB,KAChB,kBAAC8I,EAAgB,CACflG,SAAUA,EACVkC,OAC8C,QAA3C,EAAAmG,SAA2C,eAAEnG,OAEhD9K,cAAe8R,EACfjJ,cAAesJ,EACfrJ,sBAAuBA,MAKjC,kBAAC,EAAAuK,SAAQ,CAACC,KAAM,EAAGzO,UAAU,eACzB+D,GACA,kBAAC,EAAAyL,OAAM,CAACzE,QAAQ,UAAUnG,QA1OnB,KACrBsH,GAAgBnI,KA0OCtF,EAAE,yBAQhBsF,GACC,kBAAC,EAAAqK,YAAW,CACVpO,UAAU,6DACVyP,cAAY,EACZ1E,QAAQ,SAER,kBAAC,EAAAyE,OAAM,CACLzE,QAAQ,UACR/K,UAAU,wBACV4E,QA7MkB,KZ8cC,GAC7B/J,YAAAA,EACAC,sBAAAA,EACA4U,gBAAAA,EACAC,YAAAA,EACAC,YAAAA,MAEA,MAAMpU,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,MAAO,CAAC+S,EAAWH,KACjB,MACM3R,EADc,gBACOA,SA2B3B,OA1BAP,EACGqU,eACCF,EAAW,+BAELC,GAAe,CAAExU,KAAMwU,KACtB,YAAUF,IAAoB,CACjCvS,UAAW,OAAF,UACJuS,KAIT,CACElT,YAAaT,EAAOU,MACpBqT,QAAS,CACP,eAAgB,kCAIrB9S,MAAK,KACJ6Q,OAED5P,OAAOC,IACD,aAAeA,IAClBwP,EAAQxP,EAAMhC,SAASS,KAAKyB,WAG3B,KACLrC,EAAOsC,OAAO,sCYxfhB0R,CAAgB,OAAD,QACblV,YAAa6F,EACb5F,sBAAuBA,EACvB4U,gBAAiB,OAAF,UACVnE,EAAe,OAAD,wBAETtO,aAAkC+S,IAClCvM,EAAYxG,GACXA,GAAkC,CACvCC,cAAe+P,IAEjBd,EAAchP,YAGlBwS,YAAaxD,EAAc/P,IACvB0Q,EAAoB1R,OAAS+Q,EAAc/Q,MAAQ,CACrDwU,YAAa9C,EAAoB1R,OAhBrC2U,CAkBGlC,EAAWH,IA2LNuC,YAAa5C,GAEZ5O,EAAE,SAEL,kBAAC,EAAA+Q,OAAM,CACLzE,QAAQ,YACRnG,QAAS8H,EAtQM,IAAMD,GAAsB,GAsQDsB,GAEzCtP,EAAE,YAKT,kBAAC,EAAAyR,MAAK,CACJpG,MAAOrL,EAAE,eACTsM,QAAS,QACTb,OAAQsC,EACR2D,QAAS5C,EACT6C,QAAS,CACP,kBAAC,EAAAZ,OAAM,CAAC3L,IAAI,UAAUkH,QAAQ,UAAUnG,QAASmJ,GAC9CtP,EAAE,UAEL,kBAAC,EAAA+Q,OAAM,CAAC3L,IAAI,SAASkH,QAAQ,OAAOnG,QAAS2I,GAC1C9O,EAAE,aAINA,EAAE,sEAML6Q,EAUD,EACH3N,aAAAA,EACAxE,UAAAA,EACAhC,cAAAA,EACA6S,uBAAAA,EACAuB,WAAAA,EACAL,KAAAA,MAEA,IAAItF,EAaJ,OAXIzO,aAAyB6U,IAC3BpG,EAAoB,IAAIoG,IAAI7U,IAE5ByO,EAAoBxC,KAAKC,MAAMD,KAAKE,UAAUnM,IAC9CwM,OAAOM,KAAK2B,GAA6B1B,KAAKrE,IACxC,YAAW+F,EAA6C/F,MACzD+F,EAA6C/F,GAAO,QAMzD,kBAAClC,EAAY,CACX0O,WAAYnB,EAAO,EACnB/R,UAAWA,EACXmT,YAAaf,EACbpU,cACEyO,aAA6BoG,IACzBpG,EACA,IAAIoG,IAAIrI,OAAOC,QAAQgC,IAE7B3E,SAAU+I,KC1ZVuC,EAAe,CAACzG,EAAelL,IACnC,oCACGA,GACC,oCACE,kBAAC,EAAA4R,aAAY,CAACnL,UAAW,EAAAoL,qBAAA,IAA0B3G,GACnD,kBAAC,EAAA0G,aAAY,CAACnL,UAAW,EAAAoL,qBAAA,IAA0B7R,KAM9C8R,EAAsC,EAAGvE,cAAAA,M,UACpD,OACE,kBAAC,EAAAiC,YAAW,CAACrD,QAAS,EAAAsD,oBAAA,OACpB,kBAAC,EAAAsC,YAAW,KACV,kBAAC,EAAAC,SAAQ,CAACvL,UAAW,EAAAwL,iBAAA,IAClBN,EAAa,eAAgBpE,MAAAA,OAAa,EAAbA,EAAe/P,IAC5CmU,EAAa,iBAAkBpE,MAAAA,OAAa,EAAbA,EAAexO,mBAC9C4S,EAAa,iBAAsC,QAApB,EAAApE,MAAAA,OAAa,EAAbA,EAAenR,aAAK,eAAEoB,IACrDmU,EAAa,mBAAwC,QAApB,EAAApE,MAAAA,OAAa,EAAbA,EAAenR,aAAK,eAAE4C,KACvD2S,EACC,uBACkC,QAAlC,EAAApE,MAAAA,OAAa,EAAbA,EAAe5O,2BAAmB,eAAEC,YAErC+S,EAAa,QAASpE,MAAAA,OAAa,EAAbA,EAAe2E,OACrCP,EAAa,eAAgBpE,MAAAA,OAAa,EAAbA,EAAe4E,YAC5CR,EAAa,eAAgBpE,MAAAA,OAAa,EAAbA,EAAe6E,iBCZjDC,EAAUC,GACPA,EAAKjI,SAAS,KACjBiI,EAAKC,OAAO,EAAGD,EAAKE,QAAQ,KAAO,GACnCF,EAAKC,OAAO,GAOLE,EAAsD,EACjEpF,OAAAA,MAEA,IAAI,GAAE7P,IAAO,IAAAkV,cACT,KAAEJ,IAAS,IAAAK,eACf,MAAMC,GAAU,IAAAC,cAEVpF,GAAQ,IAAAC,aACR,EAAE7N,IAAM,IAAAC,mBAER,sBAAE5D,EAAqB,SAAE4F,GAAaG,KAErC+L,EAAcC,IAAmB,IAAAzC,UACtC6G,EAAOC,KAEFnN,EAAU2N,IAAe,IAAAtH,aAEzB+B,EAAewF,IAAoB,IAAAvH,aACnCgC,EAAsBwF,IAC3B,IAAAxH,YAEIyH,GAAmB,IAAArE,cAAa7Q,IACpCgV,EAAiBhV,KAChB,IAEGmV,GAAuB,IAAAtE,cAAa7Q,IACxCiV,EAAwBjV,KACvB,IAEGuP,GAAiB,IAAAsB,cACpBuE,IACCL,EAAYK,KAEd,CAACL,IAGGhE,GAAU,IAAAF,cACbxD,IACCqC,MAAAA,GAAAA,EAAOsB,SAAS,CACdvR,GAAI,yBACJ2O,QAAS,EAAA6C,aAAA,OACT9D,MAAOrL,EAAE,wBACTuL,YAAAA,MAGJ,CAACqC,EAAO5N,KAGV,IAAAgM,YAAU,KACJyG,EAAKjI,SAAS3I,EAAuB5E,gBACvCgW,GAAY,KAGb,KAEH,IAAAjH,YAAU,Kd4FgB,GAC1B5P,YAAAA,EACAC,sBAAAA,EACA6U,YAAAA,MAEA,MAAMnU,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,MAAO,CAAC+S,EAAWH,KACjB,MACM3R,EADc,gBACOA,SAa3B,OAZAP,EACGwW,aAAarC,EAAc,CAC1BnT,YAAaT,EAAOU,QAErBO,MAAMd,IACL2R,EAAU3R,EAASS,SAEpBsB,OAAOC,IACD,aAAeA,IAClBwP,EAAQxP,EAAMhC,SAASS,KAAKyB,WAG3B,KACLrC,EAAOsC,OAAO,sCctHhB2T,CAAa,CACXnX,YAAa6F,EACb5F,sBAAuBA,EACvB6U,YAAavT,GAHf4V,CAIGH,EAAkBnE,KAEpB,CAACtR,KAEJ,IAAAqO,YAAU,KACRoC,EAAgBoE,EAAOC,MACtB,CAACA,KAEJ,IAAAzG,YAAU,MACJ0B,MAAAA,OAAa,EAAbA,EAAexO,oBd8Ge,GACpC9C,YAAAA,EACAC,sBAAAA,EACAmX,gBAAAA,MAEA,MAAMzW,EAAgB,IAAI,EAAA0W,kBACxB,IAAI,EAAAxW,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,OAAQgB,IACN,MACMC,EADc,gBACOA,SAa3B,OAZAP,EACG2W,qBAAqBF,EAAiB,CACrCzV,YAAaT,EAAOU,QAErBO,MAAMd,IACLJ,EAASI,EAASS,SAEnBsB,OAAOC,IACD,aAAeA,IAClBqE,QAAQC,IAAI,SAAUtE,EAAMhC,SAASS,KAAKyB,WAGzC,KACLrC,EAAOsC,OAAO,sCcxId+T,CAAuB,CACrBvX,YAAa6F,EACb5F,sBAAuBA,EACvBmX,gBAAiB9F,MAAAA,OAAa,EAAbA,EAAexO,mBAHlCyU,CAIGN,KAGJ,CAAC3F,IAWJ,OACE,qCACIA,GAAiB,kBAACkD,EAAA,EAAO,MAC1BlD,GACC,oCACE,kBAACkG,GAAsB,CAAClG,cAAeA,IACvC,kBAAC,EAAAiC,YAAW,CACVkE,QAAS,CAAE1S,QAAS,aACpB0O,MAAO,CAAEiE,OAAQ,GACjBxH,QAAS,EAAAsD,oBAAA,OAET,kBAAC,EAAAK,KAAI,CACHC,UAAW/B,EACX1B,SArBW,CACrB0D,EACAC,KAEAhC,EAAgBgC,GAChB2C,EAAQ5F,KAAK,IAAIiD,MAiBP7O,UAAU,yBAEV,kBAAC,EAAA+O,IAAG,CACFC,SAAU1O,EAAuBkS,SACjC1I,MAAO,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,cAExB,kBAACiS,EAAY,CAACvE,cAAeA,KAE/B,kBAAC,EAAA4C,IAAG,CACFC,SAAU1O,EAAuB5E,cACjCoO,MAAO,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,mBAEvB2N,EACC,kBAACJ,EAAiB,CAChBC,OAAQA,EACRlI,SAAUA,IAAY,EACtBmI,eAAgBA,EAChBC,cAAeA,EACfC,qBAAsBA,IAGxB,kBAACiD,EAAA,EAAO,YAebgD,GAA0D,EACrElG,cAAAA,M,MAEA,MAAM,EAAE1N,IAAM,IAAAC,kBACR+T,GAAW,IAAAC,eAmCjB,OACE,kBAAC,EAAAtE,YAAW,CAACrD,QAAS,QAAS4H,iBAAe,GAC5C,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CAACC,GAAIL,MAAAA,OAAQ,EAARA,EAAUM,eAC3BtU,EAAE,eAEL,kBAAC,EAAAoU,eAAc,CAACG,UAAQ,GAAE7G,MAAAA,OAAa,EAAbA,EAAe/Q,OAE3C,kBAAC,EAAA6X,MAAK,CAACjT,UAAW,yBAChB,kBAAC,EAAAkT,UAAS,KACR,kBAAC,EAAAD,MAAK,KACJ,kBAAC,EAAA/O,MAAK,CAACC,aAAa,KAAKnE,UAAW,cACjCmM,MAAAA,OAAa,EAAbA,EAAe/Q,MAElB,kBAACkD,EAAe,CACdlD,KAAM+Q,MAAAA,OAAa,EAAbA,EAAe/Q,KACrBmD,OAA6B,QAArB,EAAA4N,MAAAA,OAAa,EAAbA,EAAe5N,cAAM,eAAE4U,UAIrC,kBAAC,EAAAD,UAAS,SCpMLE,GAA2D,EACtEzS,SAAAA,EACAxD,UAAAA,EACAgT,QAAAA,M,MAEA,OACE,kBAAC,EAAAkD,OAAM,CAACC,gBAA0B9L,IAAdrK,GAClB,kBAAC,EAAAoW,cAAa,CACZC,aACErW,EACE,kBAACsW,GAA2B,CAC1BrY,KAAM+B,EAAU/B,KAChBgB,GAAIe,EAAUf,GACdsX,gBAAiBvW,EAAUnC,MAAO4C,IAClC+V,QAASxW,EAAUnC,MAAMoB,GACzB0U,MAAO3T,EAAU2T,MACjB7V,QAASkC,EAAUI,oBAAoBC,WACvCoW,UAAW,IAAItX,KAAKa,EAAU4T,YAC9B8C,WAAY,IAAIvX,KAAKa,EAAU6T,aAC/BzS,OAAwB,QAAhB,EAAApB,EAAUoB,cAAM,eAAE4U,MAC1BhD,QAASA,SAET3I,GAGL7G,KAmBI8S,GACX,EACErY,KAAAA,EACAgB,GAAAA,EACAsX,gBAAAA,EACAC,QAAAA,EACA7C,MAAAA,EACA7V,QAAAA,EACA2Y,UAAAA,EACAC,WAAAA,EACAtV,OAAAA,EACA4R,QAAAA,MAEA,MAAM,EAAE1R,IAAM,IAAAC,mBACPkO,EAAcC,IAAmB,IAAAzC,UAA0B,GAM5DmG,EAAe,CAACzG,EAAelL,IACnC,oCACGA,GACC,oCACE,kBAAC,EAAA4R,aAAY,CAACnL,UAAW,EAAAoL,qBAAA,IACtB3G,GAEH,kBAAC,EAAA0G,aAAY,CAACnL,UAAW,EAAAoL,qBAAA,IACtB7R,KAOX,OACE,kBAAC,EAAAkV,mBAAkB,CAACC,OAAQ,CAAEnU,QAAS,aACrC,kBAAC,EAAAoU,WAAU,KACT,kBAAC,EAAArD,YAAW,KACV,kBAAC,EAAAvL,KAAI,CACHC,UAAW,EAAAC,aAAA,MACXtF,UAAU,iCAA+B,kBAK3C,kBAAC,EAAAP,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAwE,MAAK,CACJC,aAAc,KACd/D,KAAM,EAAAgE,WAAA,GACNpE,UAAU,kCAET5E,IAGL,kBAAC,EAAAsE,SAAQ,CAACC,OAAQ,CAAEC,QAAS,aAC3B,kBAACtB,EAAe,CAAClD,KAAMA,EAAMmD,OAAQA,OAI3C,kBAAC,EAAA0V,cAAa,KACZ,kBAAC,EAAAC,kBAAiB,CAACtP,QAASuL,MAGhC,kBAAC,EAAAgE,gBAAe,KACd,kBAAC,EAAAzF,KAAI,CAACC,UAAW/B,EAAc1B,SAlDb,CAAC3B,EAAeyF,KACtCnC,EAAgBmC,KAkDV,kBAAC,EAAAD,IAAG,CACFC,SAAU,EACVlF,MAAO,kBAAC,EAAAmF,aAAY,KAAExQ,EAAE,aAExB,yBAAKuB,UAAU,iCACb,kBAAC,EAAA2Q,YAAW,KACV,kBAAC,EAAAC,SAAQ,CAACvL,UAAW,EAAAwL,iBAAA,IAClBN,EAAa,YAAanV,GAC1BmV,EAAa,eAAgBnU,GAC7BmU,EAAa,mBAAoBmD,GACjCnD,EAAa,iBAAkBoD,GAC/BpD,EAAa,uBAAwBtV,GACrCsV,EAAa,QAASO,GACtBP,EACC,eACA,0BACEzG,MAAOrL,EAAE,WAAY,CAAE2V,KAAMR,IAC7BS,SAAUT,EAAUU,eAEnB7V,EAAE,kBAAmB,CAAE2V,KAAMR,MAGjCrD,EACC,eACA,0BACEzG,MAAOrL,EAAE,WAAY,CAAE2V,KAAMP,IAC7BQ,SAAUR,EAAWS,eAEpB7V,EAAE,kBAAmB,CAAE2V,KAAMP,c,4BCpK/C,MAAMU,GAAqC,EAAG5T,SAAAA,MACnD,MAAM,IAAQ,IAAAjC,kBACd,OACE,kBAAC,GAAA8V,gBAAe,cACH,iBACXxU,WAAW,KAAAyU,KAAI,iCAEf,kBAAC,GAAAC,MAAK,KACJ,kBAAC,GAAAC,GAAE,KACD,kBAAC,GAAAC,GAAE,KAAEnW,EAAE,SACP,kBAAC,GAAAmW,GAAE,KAAEnW,EAAE,cAEP,kBAAC,GAAAmW,GAAE,KAAEnW,EAAE,aAGX,kBAAC,GAAAoW,MAAK,KAAElU,KAqBDmU,GAAiE,EAC5EnF,YAAAA,EACAvU,KAAAA,EACA4C,KAAAA,EACAO,OAAAA,EACAwW,WAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,WAAAA,EACApK,SAAAA,MAEA,MAAM,EAAEzM,IAAM,IAAAC,kBAER0R,EAAoB,CACxB,CACEtG,MAAO,QACPlF,QAASuQ,EACTlF,YAAa+E,GAEf,CACElL,MAAO,OACPlF,QAASwQ,EACTnF,YAAagF,GAEf,CACEnL,MAAO,SACPlF,QAASyQ,EACTpF,YAAaiF,GAEf,CACEpL,MAAO,OACPlF,QAAS,IAAM0Q,EAAW,iBAC1BrF,YAAY,GAEd,CACEsF,aAAa,GAEf,CACEzL,MAAO,UACPlF,QAASsG,IAIb,OACE,kBAAC,GAAAyJ,GAAE,CACD/P,QAAU4Q,I,MAEwC,YAAX,QAAjC,EAACA,EAAMC,cAA0B,eAAEzX,OACrCkN,KAGJlL,WAAW,KAAAyU,KACT,uBACA,kBACAM,GAAc,kBAGhB,kBAAC,GAAAW,GAAE,CAACC,UAAWlX,EAAE,SACf,kBAAC,EAAA2G,KAAI,CACHC,UAAW,EAAAC,aAAA,EACXsQ,eAAa,EACbhR,QAAS,IAAM0Q,EAAW,aAEzBla,IAGL,kBAAC,GAAAsa,GAAE,CAACC,UAAWlX,EAAE,SAAUT,GAE3B,kBAAC,GAAA0X,GAAE,CAACC,UAAWlX,EAAE,WACf,kBAACH,EAAe,CAAClD,KAAMA,EAAMmD,OAAQA,KAEvC,kBAAC,GAAAmX,GAAE,CACDtF,QAAS,CAAEyF,MAAOzF,GAAS,cACd,eAAeT,QCxHvBmG,GAAiD,EAC5DC,UAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,UAAAA,GAAY,EACZjR,SAAAA,KAiBE,kBAAC,aAAY,CACX8Q,UAAWA,EACXC,KAAMA,EACNC,QAASA,EACTE,eAnB0B,CAC5B,CACErM,MAAO,IACPlL,MAAO,GAET,CACEkL,MAAO,IACPlL,MAAO,GAET,CACEkL,MAAO,KACPlL,MAAO,KASPwX,UAAW,CAAC7M,EAAGyM,IAAS/Q,EAAS+Q,EAAMC,GACvCI,gBAAiB,CAAC9M,EAAG0M,IAAYhR,EAAS+Q,EAAMC,GAChDlL,QAASmL,EAAY,MAAQ,SAC7BA,UAAWA,I,0BCtCV,MAAMI,GAAc,CACzBC,EACAC,EAAe,OAEf,GAAIC,MAAMD,GACR,MAAM,IAAIE,UAAU,gDAGtB,GAA4B,mBAAjBH,EACT,MAAM,IAAIG,UAAU,qCAItB,OAAO,IAAAlJ,aAAY,KAAS+I,EAAcC,GAAe,CACvDD,EACAC,KCISG,GAA+D,EAC1EZ,UAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAhR,SAAAA,MAEA,MAAM,EAAExG,IAAM,IAAAC,kBACRkY,GAAiB,IAAAC,QAAgC,MACjDC,EAAoBR,GAAYrR,EAAU,KAoC1C8R,EACJ,oCACE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAjS,UAAS,CACR5J,KAAK,OACLgB,GAAG,OACH4B,KAAK,SAAQ,aACF,2BACXiH,SAAWrG,GACTkY,EAAkB,CAChB1W,KAAM6V,EACND,KAAM,EACN5a,KAAMwD,IAGVsY,IAAKN,IAEP,kBAAC,EAAApH,OAAM,CACLzE,QAAS,UAAS,aACP,kCAEX,kBAAC,EAAAoM,WAAU,UA0BfC,EACJ,oCACE,kBAAC,EAAAC,mBAAkB,CAACC,WAAY,kBAAC,EAAAC,WAAU,MAAKC,WAAW,MACxDT,GAEH,kBAAC,EAAAU,aAAY,CAAC1M,QAAQ,qBACpB,kBAAC,EAAAiM,YAAW,KACV,kBAAC,EAAAU,QAAO,CACN1X,UAAU,2BACV8S,GAAI,qBAEHrU,EAAE,8BAIT,kBAAC,EAAAuY,YAAW,CAACjM,QAAQ,aAAa4M,UAAW,CAAE/X,QAAS,eACtD,kBAACkW,GAAU,CACTC,UAAWA,EACXC,KAAMA,EACNC,QAASA,EACThR,SAAUA,EACViR,WAAW,MAMnB,OACE,kBAAC,EAAA0B,QAAO,CACNxb,GAAG,sBACHyb,gCAAgC,KAChC7X,UAAW,aAEX,kBAAC,EAAA8X,eAAc,KAAEV,KC7HVW,GACX,EAAGC,cAAAA,EAAeC,SAAAA,EAAUC,UAAAA,EAAWC,WAAAA,MACrC,MAAM,EAAE1Z,IAAM,IAAAC,mBACP0Z,EAAWC,IAAgB,IAAAjO,UAAS,IACrC8K,EAAYkD,IAAcJ,EAYhC,OACE,kBAAC,EAAA9H,MAAK,CACJnF,QAAS,EAAAuN,aAAA,MACTxO,MAAOrL,EAAE,oBACT8Z,iBAAiB,UACjBrO,OAAQiO,EACRhI,QAAS8H,EACT7H,QAAS,CACP,kBAAC,EAAAZ,OAAM,CACL3L,IAAI,UACJkH,QAAQ,SACRkF,YAAaiF,EACbtQ,QAjBgB,KACtByT,EAAa,IACbH,MAiBOzZ,EAAE,WAEL,kBAAC,EAAA+Q,OAAM,CAAC3L,IAAI,SAASkH,QAAQ,OAAOnG,QA1BnB,KACrByT,EAAa,IACbJ,MAyBOxZ,EAAE,aAIP,kBAAC,EAAA+Z,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,MAAK,K,aACM,gCAAS,CAAEV,cAAAA,I,sBAGzB,kBAAC,EAAAS,UAAS,KACR,kBAAC,EAAAC,MAAK,K,QACC,gCAAS,CAAEV,cAAAA,I,8BAGpB,kBAAC,EAAAS,UAAS,KACR,kBAAC,EAAAzT,UAAS,CACRpG,MAAOwZ,EACPpa,KAAK,OACLiH,SAAUoT,EAAY,aACX,mBC9DZM,GAA4C,KACvD,MAAM,EAAEla,IAAM,IAAAC,kBACd,OACE,kBAAC,EAAAka,WAAU,CAAC7N,QAAS,EAAA8N,kBAAA,MACnB,kBAAC,EAAAC,eAAc,CAACC,KAAM,EAAA9Y,wBACtB,kBAAC,EAAAiE,MAAK,CAACC,aAAc,KAAM/D,KAAM,EAAAgE,WAAA,IAC9B3F,EAAE,yBAEL,kBAAC,EAAAua,eAAc,KACZva,EAAE,oE,gBCDJ,MAAMwa,GACX,EAAGC,OAAAA,EAAQC,SAAAA,MACT,MAAM,EAAE1a,IAAM,IAAAC,kBACd,OACE,kBAAC,EAAAka,WAAU,CACT7N,QAAS,EAAA8N,kBAAA,GACT7Y,WAAW,KAAAyU,KAAI,kCAEf,kBAAC,EAAAqE,eAAc,CAACC,KAAM,QACtB,kBAAC,EAAA7U,MAAK,CAACC,aAAc,KAAM/D,KAAM,EAAAgE,WAAA,QAC9B3F,EAAE,kCAEL,kBAAC,EAAAua,eAAc,KACb,kBAAC,EAAAN,MAAK,K,uCACiC,IACrC,kBAAC,EAAAlJ,OAAM,CACLzE,QAAS,EAAAqO,cAAA,KACTC,SAAO,EACPC,UAAQ,EACR1U,QAASsU,GAAM,wBAMrB,kBAAC,EAAA1J,OAAM,CAACzE,QAAS,UAAWnG,QAASuU,GAClC1a,EAAE,uBC5BA8a,GAAiE,EAC5EC,QAAAA,MAEA,MAAM,IAAQ,IAAA9a,kBACd,OACE,kBAAC,EAAAka,WAAU,CACT7N,QAAS,EAAA8N,kBAAA,MACT7Y,WAAW,KAAAyU,KAAI,kCAEf,kBAAC,EAAAqE,eAAc,CAACC,KAAM,EAAA5B,aACtB,kBAAC,EAAAjT,MAAK,CAACC,aAAc,KAAM/D,KAAM,EAAAgE,WAAA,IAC9B3F,EAAE,qBAEL,kBAAC,EAAAua,eAAc,KACb,kBAAC,EAAAN,MAAK,K,wCACkC,IACtC,kBAAC,EAAAlJ,OAAM,CACLzE,QAAS,EAAAqO,cAAA,KACTC,SAAO,EACPC,UAAQ,EACR1U,QAAS4U,GAER/a,EAAE,sBACK,I,+DC1BpB,MAAM2H,IAAQ,KAAAqT,aACZ,CACE5e,YAAa,IAAMmB,QAAQC,QAAQ,IACnCnB,sBAAuB,GACvBqC,UAAW,IAEb,CACEuc,OAAQ,CACN,kBAAmB,KAAM,IACzB,iBAAkB,KAAM,IACxB,mBAAoB,KAAM,IAC1B,mBAAoB,KAAM,IAC1B,0BAA4BC,GAAsCA,EAClE,wBAA0BA,GAA+BA,GAE3DvJ,QAAS,CACPwJ,cAAe,KAAM,IACrBC,YAAa,KAAM,IACnBC,aAAc,EAAG3c,UAAAA,MAA0C,CACzDA,UAAAA,OAMF4c,GAAc3T,GAAMmC,QACxB,CAACyR,EAAUxE,KAAU,CACnBrY,UAAWqY,EAAMrY,aAEnB,2BAGW8c,GAAmB7T,GAAM8T,cACpC,CACE9d,GAAI,YACJ+d,QAAS,SACTrZ,QAASsF,GAAMgU,eACfC,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,QAAS+E,KAAM,WACzB,CAAE/E,OAAQ,UAAW+E,KAAM,aAC3B,CAAE/E,OAAQ,UAAW+E,KAAM,eAG/BC,MAAO,CACLC,GAAI,CACF,iBAAkB,oBAClB,mBAAoB,sBAGxBC,QAAS,CACPD,GAAI,CACF,kBAAmB,oBACnB,mBAAoB,sBAGxBE,QAAS,GAETC,kBAAmB,CACjBC,OAAQ,CACN1e,GAAI,sBACJ8G,IAAMpC,GxBzBc,GAC5BjG,YAAAA,EACAC,sBAAAA,EACAqC,UAAAA,MAEA,MAAM3B,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,OAAQgB,IACN,MACMC,EADc,gBACOA,SA4B3B,OA3BAP,EACGqU,eACC1S,EAAUf,GACV,CACEqB,cAAe,EAAAC,sBAAA,OAEjB,CACElB,YAAaT,EAAOU,MACpBqT,QAAS,CACP,eAAgB,kCAIrB9S,MAAMd,IACLJ,EAAS,CACPkC,KAAM,0BACNb,UAAWjB,EAASS,UAGvBsB,OAAOC,IACD,aAAeA,IAClBpC,EAAS,CACPkC,KAAM,wBACNE,MAAOA,EAAMhC,SAASS,KAAKyB,YAI5B,KACLrC,EAAOsC,OAAO,sCwBhBR0c,CAAe,CACblgB,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BqC,UAAW2D,EAAQ3D,aAGzBud,GAAI,CACF,0BAA2B,CACzBjF,OAAQ,SACRrF,QAAS,CAAC2J,GAAa,kBAEzB,wBAAyB,CACvBtE,OAAQ,SACRrF,QAAS,iBAIf4K,kBAAmB,CACjBF,OAAQ,CACN1e,GAAI,sBACJ8G,IAAMpC,GxBCa,GAC3BjG,YAAAA,EACAC,sBAAAA,EACAqC,UAAAA,MAEA,MAAM3B,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,OAAQgB,IACN,MACMC,EADc,gBACOA,SA4B3B,OA3BAP,EACGqU,eACC1S,EAAUf,GACV,CACEqB,cAAe,EAAAC,sBAAA,SAEjB,CACElB,YAAaT,EAAOU,MACpBqT,QAAS,CACP,eAAgB,kCAIrB9S,MAAMd,IACLJ,EAAS,CACPkC,KAAM,0BACNb,UAAWjB,EAASS,UAGvBsB,OAAOC,IACD,aAAeA,IAClBpC,EAAS,CACPkC,KAAM,wBACNE,MAAOA,EAAMhC,SAASS,KAAKyB,YAI5B,KACLrC,EAAOsC,OAAO,sCwB1CR4c,CAAc,CACZpgB,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BqC,UAAW2D,EAAQ3D,aAGzBud,GAAI,CACF,0BAA2B,CACzBjF,OAAQ,SACRrF,QAAS,CAAC,cAAe,kBAE3B,wBAAyB,CACvBqF,OAAQ,SACRrF,QAAS,iBAIf8K,kBAAmB,CACjBJ,OAAQ,CACN1e,GAAI,sBACJ8G,IAAMpC,GxB2Be,GAC7BjG,YAAAA,EACAC,sBAAAA,EACAqC,UAAAA,MAEA,MAAM3B,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,OAAQgB,IACN,MACMC,EADc,gBACOA,SAuB3B,OAtBAP,EACG2f,gBAAgBhe,EAAUf,GAAK,CAC9BI,YAAaT,EAAOU,QAErBO,MAAK,KACJlB,EAAS,CACPkC,KAAM,0BACNb,UAAW,OAAF,wBACJA,GAAS,CACZoB,OAAQ,WACRd,cAAe,iBAIpBQ,OAAOC,IACD,aAAeA,IAClBpC,EAAS,CACPkC,KAAM,wBACNE,MAAOA,EAAMhC,SAASS,KAAKyB,YAI5B,KACLrC,EAAOsC,OAAO,sCwB/DR8c,CAAgB,CACdtgB,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BqC,UAAW2D,EAAQ3D,aAGzBud,GAAI,CACF,0BAA2B,CACzBjF,OAAQ,UACRrF,QAAS,CAAC,cAAe,kBAE3B,wBAAyB,CACvBqF,OAAQ,SACRrF,QAAS,kBAKjBsK,GAAI,CACF,mBAAoB,CAClBtK,QAAS,kBAIf,CACEgL,OAAQ,CACNC,QAAUva,GAAgD,UAApCA,EAAQ3D,UAAUM,cACxC6d,UAAYxa,GAAgD,YAApCA,EAAQ3D,UAAUM,cAC1C8d,UAAYza,GAAgD,YAApCA,EAAQ3D,UAAUM,eAE5C2S,QAAS,CACPwJ,eAAe,KAAA4B,YAAW,iBAC1B3B,aAAa,KAAA2B,YAAW,iBACxB1B,cAAc,KAAA0B,aAAW,EAAGre,UAAAA,MAAgB,CAC1Ca,KAAM,kBACNb,UAAAA,S,gBClGD,SAASse,GACdC,EACAC,EACAC,GAKA,MAAMxV,GAAQ,KAAAqT,aACZ,CACEoC,QAAS,CACP7F,KAAM,EACN5V,KAAM,IAERlE,cAAUsL,EACVsU,gBAAgBF,MAAAA,OAAO,EAAPA,EAASE,kBAAkB,EAC3CC,oBAAqBH,MAAAA,OAAO,EAAPA,EAASG,oBAC9BJ,gBAAAA,GAEF,CACEjC,OAAQ,OAAF,UAnCL,CACL,cAAe,KAAM,IACrB,eAAgB,KAAM,IACtB,eAAgB,KAAM,IACtB,YAAcC,GAA4CA,EAC1D,kBAAoBA,GAA6CA,EACjE,eAAiBA,GAA8BA,EAG/C,YAAa,KAAM,IACnB,cAAgBA,GAA4CA,EAC5D,cAAgBA,GAA0CA,EAC1D,YAAcA,GAA+BA,IA0BzCvJ,QAAS,CACP4L,YAAa,KAAM,IACnBC,cAAe,KAAM,IACrBrC,cAAe,KAAM,IACrBC,YAAa,KAAM,IACnBqC,6BAA8B,KAAM,OAKpCC,EAAc/V,EAAMmC,QAAO,CAACzH,EAAS4B,K,QACzC,OAAIA,EAAEsT,OAASlV,EAAQ+a,QAAQ7F,KAAa,IACxClV,EAAQib,qBACVjb,EAAQib,oBAAoC,QAAhB,EAAAjb,EAAQ5E,gBAAQ,eAAE2Z,OAEzC,CACL3Z,SAAU,CACR2Z,MAAc,QAAP,EAAAnT,EAAEmT,aAAK,eAAE3N,KAAKkU,GAAMtb,EAAQ6a,gBAAgBS,KACnDC,MAAO3Z,EAAE2Z,MACTne,WAAOsJ,OAGV,mBAEG8U,EAAQlW,EAAMmC,QAAQzH,IACtBA,EAAQyb,OAASzb,EAAQyb,MAAMC,MACjC1b,EAAQyb,MAAMC,OAIhB,MAAO,CAAED,OADK,KAAAE,OAAMC,EAAQ5b,QAGxB6b,EAAWvW,EAAMmC,QAAO,CAACzH,EAAS4B,K,QACtC,OAAIA,EAAEsT,OAASlV,EAAQ+a,QAAQ7F,KAAa,GACrC,CACL9Z,SAAU,CACR2Z,OAAuB,QAAhB,EAAA/U,EAAQ5E,gBAAQ,eAAE2Z,QAAS,GAClCwG,OAAuB,QAAhB,EAAAvb,EAAQ5E,gBAAQ,eAAEmgB,QAAS,EAClCne,MAAOwE,EAAExE,UAGZ,gBACG0e,EAAexW,EAAMmC,QAAQzH,IAC1B,CACL+a,QAAS,OAAF,wBACF/a,EAAQ+a,SAAO,CAClB7F,KAAMlV,EAAQ+a,QAAQ7F,KAAO,OAGhC,gBACG6G,EAAezW,EAAMmC,QAAQzH,IAC1B,CACL+a,QAAS,OAAF,wBAAO/a,EAAQ+a,SAAO,CAAE7F,KAAMlV,EAAQ+a,QAAQ7F,KAAO,OAE7D,gBACG8G,EAAQ1W,EAAMmC,QAAO,CAACzH,EAAS0U,KACnC,MAAM,KAAEQ,EAAI,KAAE5V,EAAI,MAAE0c,GAAUtH,EAC9B,MAAO,CACLqG,QAAS,CACP7F,KAAMA,GAAQlV,EAAQ+a,QAAQ7F,KAC9B5V,KAAMA,GAAQU,EAAQ+a,QAAQzb,KAC9B0c,MAAAA,MAGH,aAEGJ,EACH5b,GACAhF,GACQ4f,EACL5a,EAAQ+a,SACPlC,GACC7d,EAASsK,EAAMsT,OAAO,mBAAmBC,MAC1CA,GACC7d,EAASsK,EAAMsT,OAAO,gBAAgBC,MAI9C,OAAOvT,EAAM8T,cACX,CACE9d,GAAI,sBACJ0E,QAASsF,EAAMgU,eACfpc,KAAM,WACNqc,OAAQ,CACN0C,IAAK,CACH5C,QAAS,OACTE,OAAQ,CACN2C,KAAM,CACJC,MAAO7W,EAAMgK,QAAQ4L,cACrBtB,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,KAIfI,QAAS,CACP3C,OAAQ,CACN,CAAE9E,OAAQ,aAAc+E,KAAM,gBAC9B,CAAE/E,OAAQ,eAAgB+E,KAAM,oBAChC,CAAE/E,OAAQ,QAAS+E,KAAM,eACzB,CAAE/E,OAAQ,aAGd0H,WAAY,CACVC,KAAM,aACN1C,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,eAAgB,CACdrH,OAAQ,UACRrF,QAASyM,EACTrC,KAAM,kBAER,cAAe,CACb/E,OAAQ,aAId4H,aAAc,CACZD,KAAM,eACN1C,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,eAAgB,CACdrH,OAAQ,UACRrF,QAASwM,EACTpC,KAAM,iBAER,eAAgB,CACd/E,OAAQ,UACRrF,QAASyM,EACTrC,KAAM,kBAER,cAAe,CACb/E,OAAQ,aAId6H,MAAO,CACLF,KAAM,QACN1C,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,cAAe,CACbrH,OAAQ,aAId8H,QAAS,CACPH,KAAM,UACN1C,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,eAAgB,CACdrH,OAAQ,UACRrF,QAASwM,EACTpC,KAAM,iBAER,eAAgB,CACd/E,OAAQ,UACRrF,QAASyM,EACTrC,KAAM,kBAER,cAAe,CACb/E,OAAQ,aAIdvX,MAAO,CACLkf,KAAM,QACN1C,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,cAAe,CACbrH,OAAQ,WAEV,eAAgB,CACdA,OAAQ,UACRrF,QAASyM,EACTrC,KAAM,oBAIZgD,QAAS,CACPJ,KAAM,CAAC,WACPH,MAAO,CAAC7W,EAAMgK,QAAQ6L,gBAAiBK,GACvC5B,GAAI,CACF,YAAa,CACXjF,OAAQ,UACRrF,QAAS0M,GAEX,kBAAmB,CACjBrH,OAAQ,UACRrF,QAAS,CAAC+L,EAAa/V,EAAMgK,QAAQwJ,kBAEvC,eAAgB,CACdnE,OAAQ,QACRrF,QAAS,CAACuM,EAAUvW,EAAMgK,QAAQyJ,mBAK1Ca,GAAI,CACF,IAAK,CACHtK,QAAS,kCAIfqN,QAAS,CACPR,MAAOX,EACP5B,GAAI,CACF,kBAAmB,CACjBtK,QAAS+L,IAGbuB,MAAO,CACLC,SAAU,CACRnD,KAAM,mBACN/E,OAAQ,eAMlB,CACEmI,OAAQ,CACND,SAAU,KAEZvN,QAAS,CACP4L,aAAa,KAAAR,YAAW,CACtBxd,KAAM,cAER4b,eAAe,KAAA4B,aAAY1a,GAAa,OAAD,QACrC9C,KAAM,eACH8C,EAAQ5E,YAEb2d,aAAa,KAAA2B,aAAY1a,I,MAAY,OACnC9C,KAAM,YACNE,MAAuB,QAAhB,EAAA4C,EAAQ5E,gBAAQ,eAAEgC,UAE3B+d,eAAe,KAAAT,aAAY1a,GAAa,OAAD,QACrC9C,KAAM,eACH8C,EAAQ+a,WAEbK,8BAA8B,KAAA2B,OAAK,CAAC7D,EAAUxE,KACW,IAAnD7N,OAAOM,KAAK7B,EAAMsT,QAAQzQ,SAASuM,EAAMxX,OACpC,KAAAwd,aAAW,CAACxB,EAAUpL,EAAQkP,IAC5BA,EAAKlP,OAAOjS,OAGhB,MAGXye,OAAQ,CACN2C,eAAiBjd,QACM0G,IAArB1G,EAAQ5E,UAA0B4E,EAAQ+a,QAAQ7F,KAAO,EAC3DgI,cAAgBld,QACO0G,IAArB1G,EAAQ5E,UACR4E,EAAQ+a,QAAQzb,KAAO,GACvBU,EAAQ+a,QAAQ7F,KACdiI,KAAKC,KAAKpd,EAAQ5E,SAASmgB,MAAQvb,EAAQ+a,QAAQzb,MACvD+d,YAAcrd,IAAW,MAAC,OAA4B,KAAZ,QAAhB,EAAAA,EAAQ5E,gBAAQ,eAAEmgB,QAC5C+B,iBAAmBtd,I,MACjB,YAA0B0G,IAA1B1G,EAAQ+a,QAAQiB,YACKtV,IAArB1G,EAAQ5E,WACQ,QAAhB,EAAA4E,EAAQ5E,gBAAQ,eAAEmgB,OAAQ,GAC5BgC,aAAevd,I,MACb,YAA0B0G,IAA1B1G,EAAQ+a,QAAQiB,YACKtV,IAArB1G,EAAQ5E,UACoB,KAAZ,QAAhB,EAAA4E,EAAQ5E,gBAAQ,eAAEmgB,QACpBiC,iBAAmBxd,GAAYA,EAAQgb,kBAqCxC,MAAMyC,GACXhC,IAEO,KAAAiC,aACLjC,GACA,IAAA/O,cAEI2F,IAEO,CACL0I,QAAS1I,EAAMrS,QAAQ+a,QACvB3f,SAAUiX,EAAMrS,QAAQ5E,SACxBshB,QAASrK,EAAMsL,OAAO,WACtBtB,WAAYhK,EAAMsL,OAAO,cACzBpB,aAAclK,EAAMsL,OAAO,gBAC3BC,UAAWvL,EAAMsL,OAAO,SACxBlB,QAASpK,EAAMsL,OAAO,WACtBvgB,MAAOiV,EAAMsL,OAAO,SACpBE,kBAAyCnX,IAA3B2L,EAAMrS,QAAQ5E,YAGhC,CAACqgB,KC5YD,IAAQ,KAAA9C,aACZ,CACE5e,YAAa,IAAMmB,QAAQC,QAAQ,IACnCnB,sBAAuB,GACvB8jB,uBAAmBpX,GAErB,CACEkS,OAAQ,OAAF,wBDYH,CACL,cAAe,KAAM,IACrB,eAAgB,KAAM,IACtB,eAAgB,KAAM,IACtB,YAAcC,GAA4CA,EAC1D,kBAAoBA,GAA6CA,EACjE,eAAiBA,GAA8BA,EAG/C,YAAa,KAAM,IACnB,cAAgBA,GAA4CA,EAC5D,cAAgBA,GAA0CA,EAC1D,YAAcA,GAA+BA,ICnBtC,CACHkF,gBAAkBlF,GAAsCA,EACxDmF,kBAAmB,KAAM,MAE3B1O,QAAS,CACPyJ,YAAa,KAAM,OAKnBkF,GAAuB,GAAMxW,QACjC,CAACyR,EAAUxE,KAAU,CACnBoJ,kBAAmBpJ,EAAMrY,aAE3B,mBAEI6hB,GAAyB,GAAMzW,QAClCyR,IAAa,CACZ4E,uBAAmBpX,KAErB,qBAGWyX,GAAwB,GAAM/E,cACzC,CACE9d,GAAI,aACJ+d,QAAS,OACTrZ,QAAS,GAAMsZ,eACfC,OAAQ,CACN6E,KAAM,CACJlhB,KAAM,WACNqc,OAAQ,CACN0C,IAAK,CACH5C,QAAS,OACTW,OAAQ,CACN1e,GAAIiE,EACJ6C,IAAMpC,GACJ2a,G1BoLe,GAC7B5gB,YAAAA,EACAC,sBAAAA,MAEA,MAAMU,EAAgB,IAAI,EAAAC,cACxB,IAAI,EAAAC,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,MAAO,CAAC+gB,EAAShO,EAAWH,KAC1B,MACM3R,EADc,gBACOA,UACrB,KAAEia,EAAI,KAAE5V,GAA0Byb,EAmBxC,OAjBArgB,EACG2jB,eAAe,GAAGnJ,IAAQ,GAAG5V,IAAQ,CACpC5D,YAAaT,EAAOU,QAErBO,MAAMd,IACL2R,EAAU,CACRgI,MAAO3Z,EAASS,KAAKkZ,OAAS,GAC9BwG,MAAOngB,EAASS,KAAK0f,MACrBrG,KAAM9Z,EAASS,KAAKqZ,KACpB5V,KAAMlE,EAASS,KAAKyD,UAGvBnC,OAAOC,IACD,aAAeA,IAClBwP,EAAQ,CAAExP,MAAOA,EAAMC,QAAS6X,KAAM6F,EAAQ7F,UAG7C,KACLja,EAAOsC,OAAO,sC0BhNF+gB,CAAgBte,IACf3D,IAEC,KAAAsf,OFiFgB,CAAC3b,GACnCmZ,GAAiBoF,YAAYve,GEjFTwe,CAAqB,CACnBzkB,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BqC,UAAAA,IAEF,aAAaA,EAAUf,OAE3B,CACE0f,gBAAgB,EAChBC,oBAAsBpf,IAChBA,GACFA,EAAKiH,SAAS2b,IACRA,GAAKA,EAAE/C,MACT+C,EAAE/C,cAQlBnC,OAAQ,CACN2C,KAAM,CACJtC,GAAI,CACF,YAAa,UAGjBD,MAAO,CACLwC,OAAO,KAAAuC,MAAK,YAAa,CAAE1M,GAAIzS,MAGnCqa,GAAI,CACF,cAAe,CACbtK,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,YAAa,CACX+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,YAAa,CACX+P,QAAS,eAEXyO,gBAAiB,CACfzO,QAAS2O,IAEXD,kBAAmB,CACjB1O,QAAS4O,MAIfS,QAAS,OAKjB,CACErP,QAAS,CACPyJ,YAAa,CAAC/Y,EAAS0U,KACrBjT,QAAQC,IAAI1B,EAAS0U,GACF,cAAfA,EAAMxX,MAAwB8C,EAAQ4M,SACxC5M,EAAQ4M,QAAQ8H,EAAMtX,WC5H1BwhB,IACJ,IAAAlf,eAAqD,MAO1Cmf,GACX,EAAGhf,SAAAA,EAAU9F,YAAAA,EAAaC,sBAAAA,EAAuB4S,QAAAA,MAC/C,MAAMgO,GAAU,KAAAkE,cAAaX,GAAuB,CAClDne,QAAS,CAAEjG,YAAAA,EAAaC,sBAAAA,EAAuB4S,QAAAA,GAC/CmS,UAAU,IAEZ,OACE,kBAACH,GAAsB9e,SAAQ,CAAChC,MAAO8c,GACpC/a,IAKImf,GACX,KACE,MAAMpE,GAAU,IAAA3a,YAAW2e,IAC3B,IAAKhE,EACH,MAAM,IAAI1a,MACR,wFAGJ,OAAO0a,GAyBEqE,GAAuB,KAClC,MAAMrE,EAAUoE,KAEVE,EAAUzB,GACd7C,EAAQvI,MAAMxS,SAA6B,eAMvC,kBAAEie,IAAsB,KAAAJ,aAC5B9C,GACA,IAAAlO,cACG2F,IAAgC,CAC/ByL,kBAAmBzL,EAAMrS,QAAQ8d,qBAEnC,CAAClD,KAICoD,GAAoB,IAAAtR,cAAY,KACpCkO,EAAQ8D,KAAK,CAAExhB,KAAM,wBACpB,CAAC0d,IAEEoB,GAAQ,IAAAtP,cACXyS,IACCvE,EAAQ8D,KAAK,OAAD,QAAGxhB,KAAM,aAAgBiiB,MAEvC,CAACvE,IAGH,OAAO,OAAP,wBACKsE,GAAO,CACVpB,kBAAAA,EACAE,kBAAAA,EACAhC,MAAAA,KC7ESoD,GACX,EAAGC,kBAAAA,EAAmBC,kBAAAA,MACpB,MAAM,EAAE3hB,IAAM,IAAAC,kBACR2N,GAAQ,IAAAC,aACR,sBAAExR,EAAqB,SAAE4F,GAAaG,IACtC6M,GAAU,IAAAF,cACbxD,IACCqC,MAAAA,GAAAA,EAAOsB,SAAS,CACdvR,GAAI,yBACJ2O,QAAS,EAAA6C,aAAA,OACT9D,MAAOrL,EAAE,+BACTuL,YAAAA,MAGJ,CAACqC,EAAO5N,IAGV,OACE,kBAACkhB,GAAsB,CACrB9kB,YAAa6F,EACb5F,sBAAuBA,EACvB4S,QAASA,GAET,kBAAC2S,GAAc,CACbF,kBAAmBA,EACnBC,kBAAmBA,MAWhBC,GAAyD,EACpEF,kBAAAA,EACAC,kBAAAA,KDlBsC,MACtC,MAAM1E,EAAUoE,KAChB,OAAO,KAAAtB,aACL9C,GACA,IAAAlO,cACG2F,GACQA,EAAMmN,QAAQ,CAAEpB,KAAM,CAAEnC,IAAK,YAEtC,CAACrB,MCYW6E,GAEd,kBAACC,GAAkB,CACjBL,kBAAmBA,EACnBC,kBAAmBA,IAGrB,kBAAC/Q,EAAA,EAAO,MASCmR,GAAiE,EAC5EL,kBAAAA,EACAC,kBAAAA,MAEA,MAAM,QACJ5C,EAAO,MACPtf,EAAK,UACLwgB,EAAS,WACTvB,EAAU,aACVwB,EAAY,QACZ9C,EAAO,SACP3f,EAAQ,kBACR0iB,EAAiB,kBACjBE,EAAiB,MACjBhC,GACEiD,KAEJ,QAAQ,GACN,KAAKpB,EACH,OAAO,kBAACtP,EAAA,EAAO,MACjB,KAAK8N,EACH,OACE,kBAAC5D,GAAwB,CACvBC,QAAS,IAAMsD,EAAM,CAAE9G,KAAM,EAAG5V,KAAM,OAG5C,KAAKod,EACH,OACE,oCACE,kBAAC,EAAApP,YAAW,CAACrD,QAAS,SACpB,kBAAC0V,GAAmB,OAEtB,kBAAC,EAAArS,YAAW,CAACkE,QAAS,CAAE1S,QAAS,aAAe8gB,UAAQ,GACtD,kBAAC,EAAAC,KAAI,KACH,kBAAChK,GAAiB,CAChBZ,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS0c,EAAM,CAAE9G,KAAAA,EAAM5V,KAAAA,MAE1C,kBAACiP,EAAA,EAAO,SAKlB,KAAKqP,EACH,OACE,kBAACzF,GAAwB,CACvBE,SAAUgH,EACVjH,OAAQ,WACN,MAAM,IAAIlY,MAAM,gCAIxB,KAAK9C,EACH,OAAO,kBAACya,GAAsB,MAChC,QACE,OACE,kBAACvF,GAAe,CACdjW,UAAWyhB,EACXzO,QAAS2O,GAET,kBAAC,EAAA1Q,YAAW,CAACrD,QAAS,SACpB,kBAAC0V,GAAmB,OAEtB,kBAAC,EAAArS,YAAW,CAACkE,QAAS,CAAE1S,QAAS,aAAe8gB,UAAQ,GACtD,kBAACE,GAAc,CAACR,kBAAmBA,QAOzCK,GAAyC,KAC7C,MAAM,EAAEhiB,IAAM,IAAAC,kBACd,OACE,kBAAC,EAAAiS,YAAW,KACV,kBAAC,EAAAzM,MAAK,CAACC,aAAa,MAAM1F,EAAE,iBAQrBmiB,GAA0D,EACrER,kBAAAA,M,MAEA,MAAM,QAAEvE,EAAO,SAAE3f,EAAQ,kBAAE0iB,EAAiB,MAAE9B,GAC5CiD,KACF,OACE,kBAAC,EAAAY,KAAI,CAAC3gB,UAAW,cACf,kBAAC2W,GAAiB,CAChBZ,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS0c,EAAM,CAAE9G,KAAAA,EAAM5V,KAAAA,MAE1C,yBAAKJ,UAAW,aACd,kBAACuU,GAAe,KACE,QAAf,EAAArY,MAAAA,OAAQ,EAARA,EAAU2Z,aAAK,eAAE3N,KAAKgP,GACrB,kBAAC2J,GAAY,CACXC,aAAc5J,EACdrT,IAAKqT,EAAI9a,GACTwiB,kBAAmBA,EACnBwB,kBAAmBA,QAK3B,kBAACtK,GAAU,CACTC,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS0c,EAAM,CAAE9G,KAAAA,EAAM5V,KAAAA,IACxC8V,WAAW,MAWb2K,GAAqD,EACzDC,aAAAA,EACAlC,kBAAAA,EACAwB,kBAAAA,M,MAEA,MAAM,UACJjjB,EAAS,SACT6X,EAAQ,QACRC,EAAO,UACPC,EAAS,QACTC,EAAO,OACPC,EAAM,SACNC,EAAQ,SACRnK,GJrDwB,CAC1BgM,IAEA,MAAM,UAAE/Z,EAAS,SAAE6X,EAAQ,QAAEC,EAAO,UAAEC,IAAc,KAAAsJ,aAClDtH,GACA,IAAA1J,cACG2F,IAA4B,CAC3BhW,UAAWgW,EAAMrS,QAAQ3D,UACzB6X,UAEE,IADAiF,GAAiB8G,WAAW5N,EAAO,mBAAmB6N,QAExD/L,SACmE,IAAjEgF,GAAiB8G,WAAW5N,EAAO,kBAAkB6N,QACvD9L,WAEE,IADA+E,GAAiB8G,WAAW5N,EAAO,oBAAoB6N,WAG3D,CAAC9J,KAgBL,MAAO,CACL/Z,UAAAA,EACA6X,SAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,SAlBc,IAAA3H,cACd,IAAM0J,EAAIsI,KAAK,CAAExhB,KAAM,qBACvB,CAACkZ,IAiBD9B,QAfa,IAAA5H,cAAY,IAAM0J,EAAIsI,KAAK,CAAExhB,KAAM,oBAAqB,CAACkZ,IAgBtE7B,UAfe,IAAA7H,cACf,IAAM0J,EAAIsI,KAAK,CAAExhB,KAAM,sBACvB,CAACkZ,IAcDhM,UAZe,IAAAsC,cACf,IAAM0J,EAAIsI,KAAK,CAAExhB,KAAM,sBACvB,CAACkZ,MIuBC+J,CAAaH,IAEVI,EAA4BC,IACjC,IAAA/W,WAAS,GAeX,OACE,oCACE,kBAAC2N,GAAqB,CACpBC,cAAe7a,EAAU/B,KACzB+c,WAAY+I,EACZjJ,SAd0B,KAC9BkJ,GAA8B,IAc1BjJ,UAXoB,KACxBiJ,GAA8B,GAC9B9L,OAWE,kBAACP,GAAkB,CACjBnF,YAAaxS,EAAUf,GACvBhB,KAAM+B,EAAU/B,KAChB4C,KAAMb,EAAUQ,kBAChByjB,SAAU,gBACV7iB,OAAwB,QAAhB,EAAApB,EAAUoB,cAAM,eAAE4U,MAC1B4B,YAAY6J,MAAAA,OAAiB,EAAjBA,EAAmBxiB,MAAOe,EAAUf,GAChD4Y,SAAUA,EACVC,QAASA,EACTC,UAAWA,EACXC,QAASA,EACTC,OAAQA,EACRlK,SAAUA,EACVoK,WAlCiB+L,IACrBjB,EAAkBjjB,EAAUf,GAAKilB,IAkC7BhM,SAAU,IAAM8L,GAA8B,O,gBC5P/C,SAASG,GAAkB5f,GAChC,MAAM6f,EAA+B,GACrC,IAAK,MAAMrS,KAAQxN,EACjB,GAAIwN,EAAKxN,MACP,IAAK,MAAM8f,KAAatS,EAAKxN,MAC3B6f,EAAe3V,KAAK4V,QAGtBD,EAAe3V,KAAKsD,GAGxB,OAAOqS,EAmGF,MAAME,WAA2B,EAAAC,UA2BtCC,YAAY1B,GACVxW,MAAMwW,GAWA,KAAA2B,gBAAmBpM,IACrBA,EAAMqM,UAAY,EAAAC,UAAA,aAChBC,KAAK5O,MAAM6O,UACbD,KAAKE,SAAS,CAAED,WAAYD,KAAK5O,MAAM6O,YAC9BD,KAAK9B,MAAM/V,QAAU6X,KAAK9B,MAAM9P,SACzC4R,KAAK9B,MAAM9P,YAiDT,KAAAmR,kBAAoB,KAC1B,MAAM,MAAE5f,GAAUqgB,KAAK9B,MACvB,OAAOqB,GAAkB5f,IAGnB,KAAAwgB,uBAAyB,CAC/BX,EACAY,KAEA,IAAK,IAAI/F,EAAI,EAAGA,EAAImF,EAAejb,OAAQ8V,IACzC,GAAImF,EAAenF,GAAGhhB,OAAS+mB,EAC7B,OAAO/F,EAAI,EAIf,OAAO,GAGD,KAAAgG,UAAa1gB,IAEnB,IAAK,IAAI0a,EAAI,EAAGA,EAAI1a,EAAM4E,OAAQ8V,IAAK,CACrC,GAAI1a,EAAM0a,GAAG1a,MACX,IAAK,IAAI2gB,EAAI,EAAGA,EAAI3gB,EAAM0a,GAAG1a,MAAO4E,OAAQ+b,IAC1C3gB,EAAM0a,GAAG1a,MAAO2gB,GAAK1a,OAAOY,OAC1B,CAAE+Z,WAAW,GACb5gB,EAAM0a,GAAG1a,MAAO2gB,IAItB3gB,EAAM0a,GAAKzU,OAAOY,OAAO,CAAE+Z,WAAW,GAAQ5gB,EAAM0a,IAEtD,OAAO1a,GAGT,KAAA6gB,WAAcC,GACY,mBAAbA,EACFA,IAEFA,GAAYxf,SAASyf,KAtG5B,MAAMC,EAAQjB,GAAmBkB,YACjCZ,KAAKa,QAAU3C,EAAM2C,SAAW,mBAAmBF,IACnDX,KAAKc,cACH5C,EAAM4C,eAAiB,yBAAyBH,IAElDX,KAAK5O,MAAQ,CACX6O,WAAW,GAmGfc,oBACE,MAAMrN,EAA6B,oBAAbzS,SAA2BA,SAASyf,KAAO,KAC7DhN,GACFA,EAAOsN,iBAAiB,UAAWhB,KAAKH,iBAAiB,GAI7DoB,uBACE,MAAMvN,EAA8B,oBAAbzS,UAA4BA,SAASyf,MAAS,KACjEhN,GACFA,EAAOwN,oBAAoB,UAAWlB,KAAKH,iBAAiB,GAIhEsB,SACE,MAAM,EAmCFnB,KAAK9B,OAnCH,MAEJkD,EAAK,OAELC,EAAM,MACNtZ,EAAK,YACLE,EAAW,QACXmG,EAAO,OACPlE,EAAM,OACNoX,EAAM,OACNC,EAAM,WACNC,EAAU,SACVC,EAAQ,aACRC,EAAY,eACZC,EAAc,UACd1jB,EAAS,MACT0B,EAAK,YACLiiB,EAAW,eACXC,EAAiB,OAAM,eACvBC,EAAiB,OAAM,iBACvBC,EAAmB,SAAQ,UAC3BC,EAAS,qBACTC,EAAuB,QAAO,aAC9BC,EAAY,kBACZC,EAAiB,cACjBC,EAAa,mBACbC,EAAkB,iBAClBC,EAAgB,OAChBC,EAAM,SACN9B,EAAQ,OACRtY,EAAM,QACN0Y,EAAO,cACPC,GAAa,EACV0B,GAAI,cAjCH,mZAoCAhD,EAAiBQ,KAAKT,oBACtBkD,EACJjD,EAAejb,OAASqd,EAAcpC,EAAejb,OAASqd,EAC1DtT,EAAakR,EAAeiD,EAAe,GAC3CC,EAA8B1C,KAAKK,UAAU1gB,GAC7CgjB,EAAYrU,IAAekR,EAAe,GAC1Cra,GACJmJ,QAAwC7I,IAA1B6I,EAAWsU,YACrBtU,EAAWsU,WA4FX7jB,EAAU,CACd2iB,aAAAA,EACAC,eAAAA,EACAJ,OAAAA,EACAD,OAAAA,EACAlT,QAAAA,EACAE,WAAAA,GAGIuU,EAAY,OAAH,wBACTxB,EAAS,CAAEA,OAAAA,GAAW,IACtBD,EAAQ,CAAEA,MAAAA,GAAU,IAGpB0B,EACJ,kBAAC,EAAAC,sBAAqB,CAAClmB,MAAOkC,GAC5B,yCACMyjB,EAAI,CACRvkB,WAAW,KAAAyU,KACT,YACApE,GAAcA,EAAW0U,gBAAkB,gBAC3C/kB,GAEFsO,MAAO3G,OAAOM,KAAK2c,GAAWte,OAASse,OAAYpd,IAElDsC,GACC,kBAAC,EAAAkb,aAAY,CACXpC,QAASb,KAAKa,QACdC,cAAed,KAAKc,cACpB1S,QAASA,EACTrG,MAAOA,EACPE,YAAaA,EACbga,qBAAsBA,EACtBD,UAAWA,IAGf,kBAAC,EAAAkB,aAAY,CACXd,cAAeA,EACfe,cAAqB1d,IAAX0C,EACVka,oBACGta,GAASsa,KACTA,GAAsBrC,KAAKa,SAE9BZ,UAAWD,KAAK5O,MAAM6O,UACtBmD,YAAcnD,GAAcD,KAAKE,SAAS,CAAED,UAAAA,IAC5CoD,IAvIKC,IACX,MAAMC,EAAe,CACnBpb,OAAQmb,EACR,aAAcpB,EACd,mBACGna,GAASoa,KAAuBA,GAAqBnC,KAAKa,UAE/D,OACE,kBAAC,EAAA2C,UAAS,iBAAKD,GACZb,EAAcvc,KAAI,CAACgH,EAAMC,KACxB,GAAID,EAAK6V,eAEP,OAAO,KAET,IAAIS,EACAC,EACJ,GAAIvW,EAAKxN,MAAO,CACd,IAAIgkB,GAAiB,EACjBC,GAAkB,EACtB,IAAK,MAAMC,KAAW1W,EAAKxN,MACrB2O,EAAWjV,OAASwqB,EAAQxqB,OAE9BsqB,GAAiB,GAEfE,EAAQtD,YACVqD,GAAkB,GAOtB,OAJAF,EAAc1D,KAAKG,uBACjBX,EACArS,EAAKxN,MAAM,GAAGtG,MAGd,kBAAC,EAAAyqB,cAAa,CACZhiB,IAAKsL,EACL2W,QAAS5W,EAAK9T,KACd2qB,UAAWL,EACXzV,YAAa0V,EACbzW,KAAMuW,EACNO,eAAgBxC,GAEhB,kBAAC,EAAA+B,UAAS,iBAAKD,EAAY,CAAEW,YAAU,IACpC/W,EAAKxN,MAAMwG,KACV,CAACsZ,EAAuB0E,IAClB1E,EAAUuD,eAEL,MAETU,EAAc1D,KAAKG,uBACjBX,EACAC,EAAUpmB,MAEZoqB,EAAUhE,EAAUc,UAElB,kBAAC,EAAAuD,cAAa,CACZhiB,IAAK,SAASqiB,IACdJ,QAAStE,EAAUpmB,KACnB2qB,UAAW1V,EAAWjV,OAASomB,EAAUpmB,KACzC6U,YAAauV,EACbtW,KAAMuW,EACNO,eAAgBxC,SAchC,OALAiC,EAAc1D,KAAKG,uBACjBX,EACArS,EAAK9T,MAEPoqB,EAAUtW,EAAKoT,UAEb,kBAAC,EAAAuD,cAAa,iBACR3W,EAAKiX,iBAAgB,CACzBtiB,IAAKsL,EACL2W,QAAS5W,EAAK9T,KACd2qB,UAAW1V,EAAWjV,OAAS8T,EAAK9T,KACpC6U,YAAauV,EACbtW,KAAMuW,EACNO,eAAgBxC,UAsDpB9hB,MAAOA,EACP2O,WAAYA,EACZgU,iBAAkBA,GAEjBC,GACC,4BAAQtkB,WAAW,KAAAyU,KAAI,oBACrB,kBAAC,EAAAjF,OAAM,CACLzE,QAAS,EAAAqO,cAAA,QACTpb,KAAK,SACL4G,QAAS0e,EACTrT,YAAa/I,GAEXmJ,GAAcA,EAAWuT,gBAAmBA,IAE9CvT,EAAW+V,gBACX,kBAAC,EAAA5W,OAAM,CACLzE,QAAS,EAAAqO,cAAA,UACTxU,QAASye,EACTrjB,WAAW,KAAAyU,KAAIiQ,GAAa,kBAE3Bb,IAGHxT,EAAWgW,kBACX,yBAAKrmB,UAAW,yBACd,kBAAC,EAAAwP,OAAM,CAACzE,QAAS,EAAAqO,cAAA,KAAoBxU,QAASuL,GAC3C2T,QAsBnB,YAAetc,IAAX0C,EAEA,kBAAC,EAAAgG,MAAK,CACJiT,MAAiB,OAAVA,EAAiBA,OAAQ3b,EAChC0C,OAAQA,EACRa,QAAS,EAAAuN,aAAA,MAAkB,kBACVyJ,KAAKa,QAAO,mBACXb,KAAKc,cACvByD,WAAW,EACXC,kBAAgB,GAEf1B,GAIAA,GAzYF,GAAA2B,YAAc,SACN,GAAA7D,UAAY,EACpB,GAAA8D,aAA0C,CAC/C3c,WAAOtC,EACPwC,YAAa,GACbhK,UAAW,GACX4jB,eAAgB,OAChBC,eAAgB,OAChBC,iBAAkB,SAClBC,WAAW,EACXC,qBAAsB,QACtBC,kBAAczc,EACd0c,uBAAmB1c,EACnB2c,mBAAe3c,EACf4c,wBAAoB5c,EACpB6c,kBAAkB,EAClBd,gBAAY/b,EACZ2b,WAAO3b,EACP4b,YAAQ5b,EACR8c,YAAQ9c,EACRgb,cAAUhb,EACV0C,YAAQ1C,GC7IZ,MAAM,IAAQ,KAAAiS,aACZ,CACEre,KAAM,IAER,CACEse,OAAQ,CACNgN,QAAU/M,GAA8BA,EACxCgN,kBAAoBhN,GAEdA,EACNiN,QAAS,KAAM,OAIfF,GAAU,GAAMne,OACpB,CACEnN,KAAM,CAACmO,EAAGiM,IAAUA,EAAMpa,MAE5B,WAEIurB,GAAoB,GAAMpe,QAC9B,CAACgB,EAAGiM,KAAU,CACZna,mBAAoBma,EAAMqR,kBAE5B,qBAGWC,GAAe,GAAM5M,cAChC,CACE9d,GAAI,iBACJ+d,QAAS,SACTE,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,QAAS+E,KAAM,qBACzB,CAAE/E,OAAQ,YAGdsR,OAAQ,CACN9J,OAAO,KAAAzB,YAAW,aAClBd,GAAI,CACFgM,QAAS,CACPjR,OAAQ,SACRrF,QAASsW,IAEXC,kBAAmB,CACjBlR,OAAQ,SACRrF,QAASuW,MAIfK,MAAO,CACL5qB,GAAI,QACJ6gB,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACFgM,QAAS,CACPjR,OAAQ,SACRrF,QAASsW,IAEXC,kBAAmB,CACjBlR,OAAQ,SACRrF,QAASuW,IAEXC,QAAS,CACPnR,OAAQ,QACR+E,KAAM,uBAIZyM,KAAM,CACJ7qB,GAAI,OACJ4B,KAAM,QACNrB,KAAM,CACJvB,KAAO0F,GAAqBA,EAAQ1F,KACpCC,mBAAqByF,GAAqBA,EAAQzF,uBAK1D,CACE+f,OAAQ,CACN8L,kBAAoBpmB,QACa0G,IAA/B1G,EAAQzF,wBACamM,IAAjB1G,EAAQ1F,MAAsB0F,EAAQ1F,KAAKkL,OAAS,OACnCkB,IAAjB1G,EAAQ1F,MACR0F,EAAQ1F,KAAKkL,OAAS,GACtBxF,EAAQzF,mBAAmBqB,SAAS4J,OAAS,GAC7CxF,EAAQzF,mBAAmBwB,aAAayJ,OAAS,KC3EvD,IAAQ,KAAAmT,aACZ,CACE5e,YAAa,IAAMmB,QAAQC,QAAQ,IACnCnB,sBAAuB,GACvBqsB,cAAU3f,EACV4f,qBAAiB5f,EACjBtJ,WAAOsJ,GAET,CACEkS,OAAQ,OAAF,QACJ2N,cAAgB1N,GAA0C,OAAD,UACpDA,GAEL2N,gBAAiB,KAAM,IACvBV,QAAS,KAAM,KNOd,CACL,cAAe,KAAM,IACrB,eAAgB,KAAM,IACtB,eAAgB,KAAM,IACtB,YAAcjN,GAA4CA,EAC1D,kBAAoBA,GAA6CA,EACjE,eAAiBA,GAA8BA,EAG/C,YAAa,KAAM,IACnB,cAAgBA,GAA4CA,EAC5D,cAAgBA,GAA0CA,EAC1D,YAAcA,GAA+BA,MMbzCuD,GAAU,GAAM3U,QAAO,CAACyR,EAAUxE,KACtC,MAAM,KAAExX,GAAsBwX,EAC9B,MAAO,CACLtZ,UAFuB,YAAKsZ,EAAxB,aAIL,eACG6R,GAAgB,GAAM9e,OAC1B,CACE6e,gBAAiB,CAACtmB,EAAS0U,K,QACzB,OAA8B,QAAvB,EAAgB,QAAhB,EAAA1U,EAAQ5E,gBAAQ,eAAE2Z,aAAK,eAAEvW,MAC7B8c,GAAMA,EAAEhgB,KAAOoZ,EAAM4R,oBAI5B,iBAEI,GAAQ,GAAM7e,OAClB,CACE6e,qBAAiB5f,GAEnB,mBAGW+f,GAAkB,GAAMrN,cACnC,CACE9d,GAAI,WACJ+d,QAAS,OACTrZ,QAAS,GAAMsZ,eACfC,OAAQ,CACN6E,KAAM,CACJlhB,KAAM,WACNqc,OAAQ,CACN0C,IAAK,CACH5C,QAAS,OACTW,OAAQ,CACN1e,GAAIiE,EACJ6C,IAAMpC,GACJ2a,G/BoNa,GAC3B5gB,YAAAA,EACAC,sBAAAA,MAEA,MAAMU,EAAgB,IAAI,EAAAgsB,qBACxB,IAAI,EAAA9rB,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,MAAO,CAAC+gB,EAAShO,EAAWH,KAC1B,MACM3R,EADc,gBACOA,UACrB,KAAEia,EAAI,KAAE5V,GAASyb,EAkBvB,OAjBArgB,EACGisB,sBAAsB,GAAGzR,IAAQ,GAAG5V,IAAQ,CAC3C5D,YAAaT,EAAOU,QAErBO,MAAMd,IACL2R,EAAU,CACRgI,MAAO3Z,EAASS,KAAKkZ,OAAS,GAC9BwG,MAAOngB,EAASS,KAAK0f,MACrBrG,KAAM9Z,EAASS,KAAKqZ,KACpB5V,KAAMlE,EAASS,KAAKyD,UAGvBnC,OAAOC,IACD,aAAeA,IAClBwP,EAAQ,CAAExP,MAAOA,EAAMC,QAAS6X,KAAM6F,EAAQ7F,UAG7C,KACLja,EAAOsC,OAAO,sC+BnPFqpB,CAAc5mB,IACbsb,GAAMA,KAGb/B,OAAQ,CACN2C,KAAM,CACJC,OAAO,KAAAuC,MAAK,YAAa,CAAE1M,GAAIzS,IAC/Bqa,GAAI,CACF,YAAa,UAGjBD,MAAO,IAETC,GAAI,CACF,cAAe,CACbtK,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,YAAa,CACX+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,cAAe,CAAE+P,QAAS8M,MAG9B/R,UAAW,CACT/O,GAAI,YACJ+d,QAAS,SACTE,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,YAAa+E,KAAM,qBAC7B,CAAE/E,OAAQ,QAAS+E,KAAM,qBAG7BmN,UAAW,CACT1K,OAAO,KAAAzB,YAAW,aAClBd,GAAI,CACF2M,cAAe,CACb5R,OAAQ,QACRrF,QAASiX,MAIfL,MAAO,CACL/J,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACF2M,cAAe,CACb5R,OAAQ,SACRrF,QAASiX,GACT7M,KAAM,CAACjR,EAAGiM,SAAoChO,IAA1BgO,EAAM4R,iBAE5BE,gBAAiB,CACf7R,OAAQ,SACRrF,QAAS,IAEXwW,QAAS,CACPnR,OAAQ,QACR+E,KAAM,yBAQpByM,KAAM,CACJ7qB,GAAI,OACJ4B,KAAM,QACNrB,KAAM,CACJyqB,gBAAkBtmB,GAAqBA,EAAQsmB,oBAKvD,CACEhM,OAAQ,CACNwM,gBAAkB9mB,QAAwC0G,IAA5B1G,EAAQsmB,gBACtCS,kBAAoB/mB,QAAwC0G,IAA5B1G,EAAQsmB,mBCrJxC,IAAQ,KAAA3N,aACZ,CACEtc,UAAW,CACTf,GAAI,YACJhB,KAAM,YACN0sB,QAAS,MACT7hB,OAAQ,IAEVvE,MAAO,GACP2O,WAAY,EACZ0X,mBAAmB,EACnB5sB,mBAAeqM,GAEjB,CACEkS,OAAQ,CACNuD,MAAO,KAAM,IACb+K,OAAQ,EACN7sB,cAAAA,EACA+L,QAAAA,MAII,CAAG/L,cAAAA,EAAe+L,QAAAA,IACxB+gB,KAAM,KAAM,IACZC,KAAM,KAAM,IACZC,SAAU,KAAM,KAElB/X,QAAS,CACPgY,YAAa,KAAM,OAKnBC,GAAW,GAAM9f,QACpBzH,IAAY,CACXuP,WAAY4N,KAAKqK,IAAIxnB,EAAQuP,WAAa,EAAGvP,EAAQY,MAAM4E,OAAS,GACpEyhB,mBAAmB,KAErB,QAEIQ,GAAW,GAAMhgB,QACpBzH,IAAY,CACXuP,WAAY4N,KAAKuK,IAAI1nB,EAAQuP,WAAa,EAAG,GAC7C0X,mBAAmB,KAErB,QAEIC,GAAS,GAAMzf,QACnB,CAACgB,EAAGiM,KAAU,CACZra,cAAeqa,EAAMra,cACrB4sB,kBAAmBvS,EAAMtO,WAE3B,UAGWuhB,GAAsB,GAAMvO,cACvC,CACE9d,GAAI,eACJ+d,QAAS,cACTrZ,QAAS,CACP3D,UAAW,CACTf,GAAI,YACJhB,KAAM,YACN0sB,QAAS,MACT7hB,OAAQ,IAEVvE,MAAO,CAAC,MAAO,MAAO,SACtB2O,WAAY,EACZ0X,mBAAmB,EACnB5sB,mBAAeqM,GAEjB6S,OAAQ,CACNqO,YAAa,CACXzL,OAAO,KAAAzB,YAAW,aAClBjB,OAAQ,CAAC,CAAE9E,OAAQ,QAAS+E,KAAM,qBAEpCwM,MAAO,CACL5qB,GAAI,QACJ+d,QAAS,gBACT8C,OAAO,KAAAzB,YAAW,WAClBnB,OAAQ,CACNsO,cAAe,CACbpO,OAAQ,CACN,CAAE9E,OAAQ,kBAAmB+E,KAAM,cACnC,CAAE/E,OAAQ,wBAGdmT,YAAa,CACXlO,GAAI,CACFuN,KAAM,CACJxS,OAAQ,4BACRrF,QAAS,CAACiY,GAAU,kBAI1BQ,SAAU,CACRnO,GAAI,CACFuN,KAAM,+BAKda,WAAY,CACV9qB,KAAM,QACNrB,KAAM,EAAGxB,cAAAA,MAAoB,CAAGA,cAAAA,MAGpCuf,GAAI,CACFsN,OAAQ,CACNvS,OAAQ,cACRrF,QAAS4X,IAEXE,KAAM,CACJzS,OAAQ,cACRrF,QAAS,CAACmY,GAAU,kBAI1B,CACEnY,QAAS,CACPgY,aAAa,KAAA5M,aAAY1a,IAAY,CACnC9C,KAAM,cACNkR,KAAMpO,EAAQuP,gBAGlB+K,OAAQ,CACN2N,WAAajoB,GAAYA,EAAQuP,aAAevP,EAAQY,MAAM4E,OAAS,EACvE0iB,gBAAkBloB,GAAYA,EAAQinB,qBC5GtCkB,GAAkC,CACtCnoB,SAAS,KAAAooB,iBAGLC,IAAiC,KAAA1P,aAAY,CACjDtc,UAAW,CAAEf,GAAI,YAAahB,KAAM,YAAa0sB,QAAS,OAC1DnmB,kBAAc6F,EACd9F,WAAO8F,EACPtJ,WAAOsJ,IAGI4hB,GACXD,GAA+BjP,cAAc,CAC3CjU,OAAQgjB,GACR7sB,GAAI,eACJ+d,QAAS,UACTrZ,QAASqoB,GAA+B/O,eACxCC,OAAQ,CACNmD,QAAS,CACP1C,OAAQ,CACN1e,GAAI,oBACJ8G,IAAK,oBACLmmB,OAAQ,CACN5T,OAAQ,UACRrF,SAAS,KAAA7H,SAAO,CAACyR,EAAUxE,IAAUA,EAAM7Y,QAE7C+Q,QAAS,CACP+H,OAAQ,UACRrF,SAAS,KAAA7H,QAAO,CACdrK,MAAO,CAAC8b,EAAUxE,IAAUA,EAAM7Y,UAK1C2sB,QAAS,CACPrM,OAAO,KAAAsM,WAAUzoB,IAAY,CAAG3C,QAAS2C,EAAQ5C,WAEnDgf,QAAS,CACPlf,KAAM,QACNrB,KAAM,EAAGgF,aAAAA,EAAcD,MAAAA,MAAqB,CAC1CC,aAAcA,EACdD,MAAOA,QChDX,IAAQ,KAAA+X,aACZ,CACE5e,YAAa,IAAMmB,QAAQC,QAAQ,IACnCnB,sBAAuB,GACvBoB,cAAUsL,EACVoX,uBAAmBpX,EACnBtJ,WAAOsJ,GAET,CACEkS,OAAQ,OAAF,QACJmF,gBAAkBlF,GAA4C,OAAD,UACxDA,GAELmF,kBAAmB,KAAM,IACzB8H,QAAS,KAAM,KTId,CACL,cAAe,KAAM,IACrB,eAAgB,KAAM,IACtB,eAAgB,KAAM,IACtB,YAAcjN,GAA4CA,EAC1D,kBAAoBA,GAA6CA,EACjE,eAAiBA,GAA8BA,EAG/C,YAAa,KAAM,IACnB,cAAgBA,GAA4CA,EAC5D,cAAgBA,GAA0CA,EAC1D,YAAcA,GAA+BA,MSNzC,GAAU,GAAMpR,QAAO,CAACyR,EAAUxE,KACtC,MAAM,KAAExX,GAAsBwX,EAC9B,MAAO,CACLtZ,UAFuB,YAAKsZ,EAAxB,aAIL,eACGqJ,GAAkB,GAAMtW,OAC5B,CACEqW,kBAAmB,CAAC9d,EAAS0U,K,QAC3B,OAA8B,QAAvB,EAAgB,QAAhB,EAAA1U,EAAQ5E,gBAAQ,eAAE2Z,aAAK,eAAEvW,MAC7B8c,GAAOA,EAAsBhgB,KAAOoZ,EAAMoJ,sBAIjD,mBAEI,GAAQ,GAAMrW,OAClB,CACEqW,uBAAmBpX,GAErB,qBAGWgiB,GAAwB,GAAMtP,cACzC,CACEpZ,QAAS,GAAMsZ,eACfhe,GAAI,aACJ+d,QAAS,OACTE,OAAQ,CACN6E,KAAM,CACJlhB,KAAM,WACNqc,OAAQ,CACN0C,IAAK,CACH5C,QAAS,OACTW,OAAQ,CACN1e,GAAIiE,EACJ6C,IAAMpC,GACJ2a,GlCuPmB,GACjC5gB,YAAAA,EACAC,sBAAAA,MAEA,MAAMU,EAAgB,IAAI,EAAA0W,kBACxB,IAAI,EAAAxW,cAAc,CAChBb,YAAAA,EACAc,SAAUb,KAGd,MAAO,CAAC+gB,EAAShO,EAAWH,KAC1B,MACM3R,EADc,gBACOA,UACrB,KAAEia,EAAI,KAAE5V,EAAI,MAAE0c,GAAUjB,GACxB,KAAEzgB,EAAI,WAAEquB,EAAa,IAAO3M,GAAS,GAuC3C,OAtCAthB,EACGkuB,kBAAkB,IAAK,YAAQliB,OAAWA,EAAW,CACpDhL,YAAaT,EAAOU,QAErBO,MAAMd,IACL,MAAMytB,EAASvuB,EAAOA,EAAK0E,mBAAgB0H,EACrCoiB,EAAW1tB,EAASS,KAAKkZ,OAAS,GACxC,IAAIgU,EAAgBF,EAChBC,MAAAA,OAAQ,EAARA,EAAU/f,QAAQigB,IAAK,MACrB,OAA8B,QAA9B,EAACA,EAAyB1uB,YAAI,eAAE0E,cAAcmJ,SAAS0gB,MAEzDC,EACJC,EACEJ,EAAWnjB,OAAS,EAChBujB,MAAAA,OAAa,EAAbA,EAAehgB,QACZigB,I,MACC,QACkC,QAAhC,EAACA,EAAyBC,cAAM,eAAElgB,QAAQmgB,GACxCP,EAAWxgB,SAAS+gB,OACjB,IACL1jB,OAAS,KAEfujB,EACN,MAAMxN,EAAQwN,EAAcvjB,OACtB2jB,GAAUjU,EAAO,GAAK5V,EACtByV,EAAQgU,EAAcjhB,MAAMqhB,EAAQA,EAAS7pB,GACnDyN,EAAU,CACRgI,MAAAA,EACAwG,MAAAA,EACArG,KAAAA,EACA5V,KAAAA,OAGHnC,OAAOC,IACD,aAAeA,IAClBwP,EAAQ,CAAExP,MAAOA,EAAMC,QAAS6X,KAAM6F,EAAQ7F,UAG7C,KACLja,EAAOsC,OAAO,sCkCzSF6rB,CAAoBppB,IAAWsb,GAAMA,KAE3C/B,OAAQ,CACN2C,KAAM,CACJC,OAAO,KAAAuC,MACL,CACExhB,KAAM,YACN8e,MAAO,CAAE2M,WAAY,CAAC,OAAQ,YAEhC,CAAE3W,GAAIzS,IAERqa,GAAI,CACF,YAAa,UAGjBD,MAAO,IAETC,GAAI,CACF,cAAe,CACbtK,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,YAAa,CACX+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,cAAe,CAAE+P,QAAS,MAG9BjF,UAAW,CACT/O,GAAI,YACJ+d,QAAS,SACTE,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,YAAa+E,KAAM,uBAC7B,CAAE/E,OAAQ,QAAS+E,KAAM,uBAG7BmN,UAAW,CACT1K,OAAO,KAAAzB,YAAW,aAClBd,GAAI,CACFmE,gBAAiB,CACfpJ,OAAQ,QACRrF,QAASyO,GACTrE,KAAM,CAACjR,EAAGiM,SAAsChO,IAA5BgO,EAAMoJ,qBAIhCoI,MAAO,CACL/J,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACFmE,gBAAiB,CACfpJ,OAAQ,SACRrF,QAASyO,IAEXC,kBAAmB,CACjBrJ,OAAQ,SACRrF,QAAS,IAEXwW,QAAS,CACPnR,OAAQ,QACR+E,KAAM,2BAQpByM,KAAM,CACJ7qB,GAAI,OACJ4B,KAAM,QACNrB,KAAM,CACJiiB,kBAAoB9d,GAAqBA,EAAQ8d,sBAKzD,CACExD,OAAQ,CACN+O,kBAAoBrpB,QAA0C0G,IAA9B1G,EAAQ8d,kBACxCwL,oBAAsBtpB,QAA0C0G,IAA9B1G,EAAQ8d,qBCrK1C,IAAQ,KAAAnF,aACZ,CACEle,MAAO,GACPD,iBAAkB,IAEpB,CACEoe,OAAQ,CACNrP,SAAWsP,GAA+BA,EAC1CpP,gBAAkBoP,GAA+CA,EACjEiN,QAAS,KAAM,OAKfvc,GAAW,GAAM9B,OACrB,CACEhN,MAAO,CAACgO,EAAGiM,IAAUA,EAAMja,OAE7B,YAGIgP,GAAkB,GAAMhC,QAC5B,CAACgB,EAAGiM,KAAU,CACZla,iBAAkBka,EAAMlL,gBAE1B,mBAGW+f,GAAuB,GAAMnQ,cACxC,CACE9d,GAAI,wBACJ+d,QAAS,SACTE,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,QAAS+E,KAAM,4BACzB,CAAE/E,OAAQ,YAGdsR,OAAQ,CACN9J,OAAO,KAAAzB,YAAW,aAClBd,GAAI,CACFrQ,SAAU,CACRoL,OAAQ,SACRrF,QAAS/F,IAEXE,gBAAiB,CACfkL,OAAQ,SACRrF,QAAS7F,MAIfyc,MAAO,CACL5qB,GAAI,QACJ6gB,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACFrQ,SAAU,CACRoL,OAAQ,SACRrF,QAAS/F,IAEXE,gBAAiB,CACfkL,OAAQ,SACRrF,QAAS7F,IAEXqc,QAAS,CACPnR,OAAQ,QACR+E,KAAM,8BAIZyM,KAAM,CACJ7qB,GAAI,OACJ4B,KAAM,QACNrB,KAAM,CACJpB,MAAQuF,GAAqBA,EAAQvF,MACrCD,iBAAmBwF,GAAqBA,EAAQxF,qBAKxD,CACE8f,OAAQ,CACNkP,yBAA2BxpB,QACI0G,IAA7B1G,EAAQxF,kBACqB,sBAA7BwF,EAAQxF,sBACckM,IAAlB1G,EAAQvF,OAAuBuF,EAAQvF,MAAM+K,OAAS,OACnCkB,IAAlB1G,EAAQvF,OAAuBuF,EAAQvF,MAAM+K,OAAS,QAC1BkB,IAA7B1G,EAAQxF,oBC3Ed,IAAQ,KAAAme,aACZ,CACE5e,YAAa,IAAMmB,QAAQC,QAAQ,IACnCsuB,wBAAyB,GACzBC,eAAWhjB,EACXijB,sBAAkBjjB,EAClBtJ,WAAOsJ,GAET,CACEkS,OAAQ,OAAF,QACJgR,eAAiB/Q,GAA2C,OAAD,UACtDA,GAELgR,iBAAkB,KAAM,IACxB/D,QAAS,KAAM,KXMd,CACL,cAAe,KAAM,IACrB,eAAgB,KAAM,IACtB,eAAgB,KAAM,IACtB,YAAcjN,GAA4CA,EAC1D,kBAAoBA,GAA6CA,EACjE,eAAiBA,GAA8BA,EAG/C,YAAa,KAAM,IACnB,cAAgBA,GAA4CA,EAC5D,cAAgBA,GAA0CA,EAC1D,YAAcA,GAA+BA,MWRzC,GAAU,GAAMpR,QAAO,CAACyR,EAAUxE,KACtC,MAAM,KAAExX,GAAsBwX,EAC9B,MAAO,CACLtZ,UAFuB,YAAKsZ,EAAxB,aAIL,eACGkV,GAAiB,GAAMniB,OAC3B,CACEkiB,iBAAkB,CAAC3pB,EAAS0U,K,QAC1B,OAA8B,QAAvB,EAAgB,QAAhB,EAAA1U,EAAQ5E,gBAAQ,eAAE2Z,aAAK,eAAEvW,MAC7B8c,GAAMA,EAAEhgB,KAAOoZ,EAAMiV,qBAI5B,kBAEI,GAAQ,GAAMliB,OAClB,CACEkiB,sBAAkBjjB,GAEpB,oBAGWojB,GAAgB,GAAM1Q,cACjC,CACE9d,GAAI,SACJ+d,QAAS,OACTrZ,QAAS,GAAMsZ,eACfC,OAAQ,CACN6E,KAAM,CACJlhB,KAAM,WACNqc,OAAQ,CACN0C,IAAK,CACH5C,QAAS,OACTW,OAAQ,CACN1e,GAAIiE,EACJ6C,IAAMpC,GACJ2a,GpCiUmB,GACjC5gB,YAAAA,EACA0vB,wBAAAA,MAEA,MAAM/uB,EAAgB,IAAI,EAAAqvB,WACxB,IAAI,EAAAnvB,cAAc,CAChBb,YAAAA,EACAc,SAAU4uB,KAGd,MAAO,CAAC1O,EAAShO,EAAWH,KAC1B,MACM3R,EADc,gBACOA,UACrB,KAAEia,EAAI,KAAE5V,EAAI,MAAE0c,GAAUjB,GACxB,KAAEzgB,EAAI,SAAE0vB,EAAQ,MAAEha,EAAK,eAAEia,EAAc,QAAEC,GAAYlO,GAAS,GAiB9DmO,EAAS,CAfb7vB,GAAQA,EAAKkL,OAAS,EAAI,cAAclL,SAASoM,EAEjDsJ,GAASA,EAAMxK,OAAS,EAAI,eAAewK,SAAUtJ,EAErDsjB,GAAYA,EAASxkB,OAAS,EAC1BwkB,EAAS5iB,KAAK3I,GAAM,YAAYA,MAAK2rB,KAAK,aAC1C1jB,EAEJujB,GAAkBA,EAAezkB,OAAS,EACtCykB,EAAe7iB,KAAK3I,GAAM,oBAAoBA,MAAK2rB,KAAK,aACxD1jB,EAEJwjB,GAAWA,EAAQ1kB,OAAS,EACxB0kB,EAAQ9iB,KAAK3I,GAAM,YAAYA,MAAK2rB,KAAK,aACzC1jB,GAQHqC,OAAOshB,SACPjjB,KAAK3I,GAAM,IAAIA,OACf2rB,KAAK,SAwBR,OAvBA1vB,EACG4vB,UACC,GAAGpV,IACH,GAAG5V,SACHoH,EACAyjB,EACA,CACEzuB,YAAaT,EAAOU,QAGvBO,MAAMd,IACL2R,EAAU,CACRgI,MAAO3Z,EAASS,KAAKkZ,OAAS,GAC9BwG,MAAOngB,EAASS,KAAK0f,MACrBrG,KAAM9Z,EAASS,KAAKqZ,KACpB5V,KAAMlE,EAASS,KAAKyD,UAGvBnC,OAAOC,IACD,aAAeA,IAClBwP,EAAQ,CAAExP,MAAOA,EAAMC,QAAS6X,KAAM6F,EAAQ7F,UAG7C,KACLja,EAAOsC,OAAO,sCoC9XFgtB,CAAoBvqB,IAAWsb,GAAMA,KAE3C/B,OAAQ,CACN2C,KAAM,CACJC,OAAO,KAAAuC,MAAK,YAAa,CAAE1M,GAAIzS,IAC/Bqa,GAAI,CACF,YAAa,UAGjBD,MAAO,IAETC,GAAI,CACF,cAAe,CACbtK,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,eAAgB,CACd+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,YAAa,CACX+P,SAAS,KAAAoP,OAAK,CAACjW,EAAG7G,IAAMA,GAAG,CAAEoQ,GAAIzS,KAEnC,cAAe,CAAE+P,QAAS,MAG9BjF,UAAW,CACT/O,GAAI,YACJ+d,QAAS,SACTE,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN,CAAE9E,OAAQ,YAAa+E,KAAM,sBAC7B,CAAE/E,OAAQ,QAAS+E,KAAM,sBAG7BmN,UAAW,CACT1K,OAAO,KAAAzB,YAAW,aAClBd,GAAI,CACFgQ,eAAgB,CACdjV,OAAQ,QACRrF,QAASsa,MAIf1D,MAAO,CACL/J,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACFgQ,eAAgB,CACdjV,OAAQ,SACRrF,QAASsa,GACTlQ,KAAM,CAACjR,EAAGiM,SAAqChO,IAA3BgO,EAAMiV,kBAE5BE,iBAAkB,CAChBlV,OAAQ,SACRrF,QAAS,IAEXwW,QAAS,CACPnR,OAAQ,QACR+E,KAAM,0BAQpByM,KAAM,CACJ7qB,GAAI,OACJ4B,KAAM,QACNrB,KAAM,CACJ8tB,iBAAmB3pB,GAAqBA,EAAQ2pB,qBAKxD,CACErP,OAAQ,CACNkQ,iBAAmBxqB,QAAyC0G,IAA7B1G,EAAQ2pB,iBACvCc,mBAAqBzqB,QAAyC0G,IAA7B1G,EAAQ2pB,oBCrIzC,IAAQ,KAAAhR,aACZ,CACE+R,0BAAsBhkB,EACtBikB,aAAc,GACdrwB,KAAM,IAER,CACEse,OAAQ,CACNgS,KAAM,KAAM,IACZxO,QAAS,KAAM,IACfoM,QAAU3P,GAAiCA,KAK3C7L,GAAa,GAAMvF,QAAQzH,IAAY,CAC3C9F,MAAO8F,EAAQ9F,MACfC,QAAS6F,EAAQ7F,QACjBC,cAAe4F,EAAQ5F,cAEvBE,KAAM0F,EAAQ1F,KACdC,mBAAoByF,EAAQzF,mBAE5BE,MAAOuF,EAAQvF,MACfD,iBAAkBwF,EAAQxF,iBAE1BmwB,aAAcE,GAAmB7qB,EAAQ0qB,0BAGrCI,GAAiB,GAAMrjB,QAC3B,CAACgB,EAAGiM,KAAU,CACZqW,YAAarW,EAAMrX,WAErB,WAGW2tB,GAAgB,GAAM5R,cACjC,CACE9d,GAAI,SACJ+d,QAAS,SACTrZ,QAAS,GAAMsZ,eACf6C,MAAOnP,GACPuM,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CAAC,CAAE9E,OAAQ,QAAS+E,KAAM,qBAGpCwM,MAAO,CACL5qB,GAAI,QACJ6gB,OAAO,KAAAzB,YAAW,WAClBd,GAAI,CACFgR,KAAM,WAGVK,OAAQ,CACNjR,OAAQ,CACN5X,IAAMpC,GACJlG,EAAc,CACZC,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BC,2BAA4B+F,EAAQ/F,2BACpCC,MAAO8F,EAAQ9F,MACfC,QAAS6F,EAAQ7F,QACjBC,cAAe4F,EAAQ5F,cACvBC,cAAeiM,KAAKC,MAAMvG,EAAQ2qB,cAClCrwB,KAAM0F,EAAQ1F,KACdC,mBAAoByF,EAAQzF,mBAC5BE,MAAOuF,EAAQvF,MACfD,iBAAkBwF,EAAQxF,oBAGhCof,GAAI,CACFwC,QAAS,QACToM,QAAS,CACP7T,OAAQ,QACRrF,QAASwb,KAGbxO,KAAM,CAAC,WAET4O,MAAO,CACLhuB,KAAM,WAIZ,CACEod,OAAQ,CACN6Q,gBAAkBnrB,QAAqC0G,IAAzB1G,EAAQ2qB,gBAK5C,SAASE,GAAmBhvB,GAC1B,MAAMuvB,EAAUvvB,aAAgBqT,IAAMvM,EAAY9G,GAAQA,EAC1D,IACE,OAAOyK,KAAKE,UAAU4kB,EAAS,KAAM,GACrC,MAAOxpB,GACP,MAAO,IC3FX,MAAM,IAAQ,KAAA+W,aAAY,GAAe,CACvCC,OAAQ,CACNxS,QAAS,KAAM,IACfilB,UAAW,KAAM,IACjBjE,KAAM,KAAM,IACZD,KAAM,KAAM,IACZG,YAAa,EAAGlZ,KAAAA,MAA6B,CAAGA,KAAAA,IAChDkd,kBAAmB,KAAM,IACzBC,oBAAqB,KAAM,IAC3BC,sBAAuB,KAAM,IAC7BC,yBAA0B,EAAG3G,QAAAA,MAAoC,CAC/DA,QAAAA,IAEF4G,yBAA0B,KAAM,IAChCC,yBAA0B,KAAM,IAChCC,0BAA2B,KAAM,KAEnCtc,QAAS,CACPuc,WAAY,KAAM,OAITC,GAAwB,GAAM1S,cACzC,CACE9d,GAAI,iBACJ+d,QAAS,kBACTrZ,QAAS,GAAMsZ,eACfC,OAAQ,CACNwE,gBAAiB,CACf1E,QAAS,YACTW,OAAQ,CACN1e,GAAI,qBACJ8G,IAAKsmB,GACL7sB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/B8jB,kBAAmB9d,EAAQ8d,oBAE7ByK,OAAQ,CACN5T,OAAQ,cACRrF,SAAS,KAAA7H,SAAO,CAACyR,EAAUxE,KAAU,CACnCoJ,kBAAmBpJ,EAAM7Y,KAAKiiB,kBAC9B3hB,wBAAwB,EACxB4vB,wBAAyB,EACzBC,sBAAsB,EACtBC,oBAAoB,OAGxBrf,QAAS,UAEX2M,OAAQ,CACNnc,MAAO,GACPypB,UAAW,CACTjN,GAAI,CACFxT,QAAS,UAGb8f,MAAO,CACLtM,GAAI,CACFyR,UAAW,YACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,UAAW,CAAE1M,GAAI,4BAMzCka,YAAa,CACX7S,QAAS,YACTW,OAAQ,CACN1e,GAAI,yBACJ8G,IAAK0nB,GACLjuB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/B2vB,iBAAkB3pB,EAAQmsB,sBAC1BpR,QAAS,CACP7F,KAAM,EACN5V,KAAM,MAGVipB,OAAQ,CACN5T,OAAQ,gBACRrF,SAAS,KAAA7H,QAAO,CACd0kB,sBAAuB,CAAC1jB,EAAGiM,IAAUA,EAAM7Y,KAAK8tB,oBAGpD/c,QAAS,UAEX2M,OAAQ,CACNnc,MAAO,GACPypB,UAAW,CACTjN,GAAI,CACFxT,QAAS,UAGb8f,MAAO,CACLtM,GAAI,CACFyR,UAAW,YACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,UAAW,CAAE1M,GAAI,+BAKvC4H,GAAI,CACFwN,KAAM,oBAGVb,cAAe,CACblN,QAAS,YACTW,OAAQ,CACN1e,GAAI,mBACJ8G,IAAKqkB,GACL5qB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BssB,gBAAiBtmB,EAAQsmB,kBAE3BiC,OAAQ,CACN5T,OAAQ,qBACRrF,SAAS,KAAA7H,QAAO,CACd6e,gBAAiB,CAAC7d,EAAGiM,IAAUA,EAAM7Y,KAAKyqB,mBAG9C1Z,QAAS,UAEX2M,OAAQ,CACNnc,MAAO,GACPypB,UAAW,CACTjN,GAAI,CACFxT,QAAS,UAGb8f,MAAO,CACLtM,GAAI,CACFyR,UAAW,YACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,UAAW,CAAE1M,GAAI,yBAKvC4H,GAAI,CACFwN,KAAM,gBAGVgF,mBAAoB,CAClB/S,QAAS,mBACTE,OAAQ,CACN8S,iBAAkB,CAChBrS,OAAQ,CACN1e,GAAI,qBACJ8G,IAAK,gCACLvG,KAAOmE,IAAY,CACjB3D,UAAW2D,EAAQ8d,oBAErByK,OAAQ,CACN5T,OAAQ,YACRrF,SAAS,KAAA7H,SAAO,CAACyR,EAAUxE,KAAU,CACnC7T,aAAc6T,EAAM7Y,KAAKgF,aACzBorB,mBAAoBvX,EAAM7Y,KAAK+E,WAGnCgM,QAAS,CACP0C,QAAS,CAAC4J,EAAUxE,IAAUjT,QAAQrE,MAAMsX,EAAM7Y,KAAKwB,YAI7DivB,UAAW,CACThxB,GAAI,YACJ+d,QAAS,cACTW,OAAQ,CACN1e,GAAI,kBACJ8G,IAAKulB,GACL9rB,KAAOmE,IAAY,CACjB3D,UAAW2D,EAAQ8d,kBACnBzjB,cAAe2F,EAAQ7D,uBACvByE,MAAOZ,EAAQisB,oBAAsB,CAAC,eACtC1c,WAAYvP,EAAQ+rB,yBAA2B,EAC/C9E,mBAAsD,IAAnCjnB,EAAQ7D,yBAE7BosB,OAAQ,CACN,CACE5T,OAAQ,sCACRrF,SAAS,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CAC5BvY,uBAAwBuY,EAAM7Y,KAAKxB,gBAAiB,MAEtDqf,KAAO1Z,KACDA,EAAQisB,oBAOhB,CACEtX,OAAQ,qCACRrF,SAAS,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CAC5BvY,uBAAwBuY,EAAM7Y,KAAKxB,gBAAiB,QAI1DuS,QAAS,CACP0C,QAAS,CAAC4J,EAAUxE,IAAUjT,QAAQrE,MAAMsX,EAAM7Y,KAAKwB,WAG3Dkc,OAAQ,CACNgT,YAAa,CACX3S,GAAI,CACFyR,UAAW,UACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,OAAQ,CAAE1M,GAAI,uBAIlCwa,QAAS,CACP5S,GAAI,CACFxT,QAAS,iBAIfwT,GAAI,CACFwN,KAAM,CACJ,CACE9X,SAAS,KAAAoP,MAAK,OAAQ,CAAE1M,GAAI,oBAC5B0H,KAAM,oBAER,CAAE/E,OAAQ,uCAEZ2S,YAAa,CACXhY,SAAS,KAAA7H,QAAO,CACdskB,wBAAyB,CAACtjB,EAAGiM,IAAUA,EAAMtG,YAOzDqe,mBAAoB,CAClBnxB,GAAI,iBACJ+d,QAAS,cACTW,OAAQ,CACN1e,GAAI,WACJ8G,IAAK4jB,GACLnqB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BC,2BAA4B+F,EAAQ/F,2BACpCC,MAAO8F,EAAQmsB,sBACfhyB,QAAS6F,EAAQsmB,gBACjBlsB,cAAe4F,EAAQ8d,kBACvB4M,qBAAsB1qB,EAAQ7D,uBAC9B7B,KAAM0F,EAAQ1F,KACdC,mBAAoByF,EAAQzF,mBAC5BE,MAAOuF,EAAQvF,MACfD,iBAAkBwF,EAAQxF,mBAE5B+tB,OAAQ,CACN5T,OAAQ,qBACRrF,QAAS,EACP,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CACnBpa,KAAMoa,EAAM7Y,KAAKvB,KACjBC,mBAAoBma,EAAM7Y,KAAKtB,yBAIrCqS,QAAS,CACP0C,QAAS,CAAC4J,EAAUxE,IAAUjT,QAAQrE,MAAMsX,EAAM7Y,KAAKwB,WAG3Dkc,OAAQ,CACNgT,YAAa,CACX3S,GAAI,CACFyR,UAAW,UACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,UAAW,CAAE1M,GAAI,gBAIrCwa,QAAS,CACP5S,GAAI,CACFxT,QAAS,iBAIfwT,GAAI,CACFwN,KAAM,kBAGVsF,mBAAoB,CAClBpxB,GAAI,wBACJ+d,QAAS,cACTW,OAAQ,CACN1e,GAAI,WACJ8G,IAAKmnB,GACL1tB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BC,2BAA4B+F,EAAQ/F,2BACpCC,MAAO8F,EAAQmsB,sBACfhyB,QAAS6F,EAAQsmB,gBACjBjqB,UAAW2D,EAAQ8d,kBACnB4M,qBAAsB1qB,EAAQ7D,uBAC9B1B,MAAOuF,EAAQvF,MACfD,iBAAkBwF,EAAQxF,mBAE5B+tB,OAAQ,CACN5T,OAAQ,sBACRrF,QAAS,EACP,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CACnBja,MAAOia,EAAM7Y,KAAKpB,MAClBD,iBAAkBka,EAAM7Y,KAAKrB,uBAInCoS,QAAS,CACP0C,QAAS,CAAC4J,EAAUxE,IAAUjT,QAAQrE,MAAMsX,EAAM7Y,KAAKwB,WAG3Dkc,OAAQ,CACNgT,YAAa,CACX3S,GAAI,CACFyR,UAAW,UACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,UAAW,CAAE1M,GAAI,gBAIrCwa,QAAS,CACP5S,GAAI,CACFxT,QAAS,iBAIfwT,GAAI,CACFwN,KAAM,uBAGVuF,oBAAqB,CACnBrxB,GAAI,SACJ+d,QAAS,YACTW,OAAQ,CACN1e,GAAI,YACJ8G,IAAK4oB,GACLnvB,KAAOmE,IAAY,CACjBjG,YAAaiG,EAAQjG,YACrBC,sBAAuBgG,EAAQhG,sBAC/BC,2BAA4B+F,EAAQ/F,2BACpCC,MAAO8F,EAAQmsB,sBACfhyB,QAAS6F,EAAQsmB,gBACjBlsB,cAAe4F,EAAQ8d,kBACvB4M,qBAAsB1qB,EAAQ7D,uBAC9B7B,KAAM0F,EAAQ1F,KACdC,mBAAoByF,EAAQzF,mBAC5BE,MAAOuF,EAAQvF,MACfD,iBAAkBwF,EAAQxF,mBAE5B+tB,OAAQ,CACN5T,OAAQ,wBACRrF,QAAS,EACP,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CACnBvY,uBAAwBuY,EAAM7Y,SAEhC,eAGJ+Q,QAAS,CACP0C,QAAS,CAAC4J,EAAUxE,IAAUjT,QAAQrE,MAAMsX,EAAM7Y,KAAKwB,WAG3Dkc,OAAQ,CACNqT,UAAW,CACThT,GAAI,CACFxT,QAAS,UAGb8f,MAAO,CACLtM,GAAI,CACFyR,UAAW,YACXlE,KAAM,CACJ7X,SAAS,KAAAoP,MAAK,OAAQ,CAAE1M,GAAI,kBAMpC4H,GAAI,CACFwN,KAAM,CACJ,CACEzS,OAAQ,qCACR+E,KAAO1Z,KACDA,EAAQisB,oBAOhB,CAAEtX,OAAQ,yCAIhBuW,MAAO,CACL5vB,GAAI,QACJ4B,KAAM,UAGV0c,GAAI,CACF4R,sBAAuB,CACrB7W,OAAQ,mBAEV2W,kBAAmB,CACjB3W,OAAQ,cACR+E,KAAM,uBAER6R,oBAAqB,CACnB5W,OAAQ,gBACR+E,KAAM,2BAERgS,yBAA0B,CACxB/W,OAAQ,qBACR+E,KAAM,qBAER+R,yBAA0B,CACxB9W,OAAQ,qBACR+E,KAAM,oBACNpK,SAAS,KAAA7H,SAAO,CAACgB,EAAGiM,KAAU,CAC5BqX,wBAAyBrX,EAAMoQ,SAAW,OAG9C6G,yBAA0B,CACxBhX,OAAQ,qBACR+E,KAAM,yBAERkS,0BAA2B,CACzBjX,OAAQ,sBACR+E,KAAM,2BAIZ,CACEY,OAAQ,CACNuS,wBAA0B7sB,QACU0G,IAAlC1G,EAAQmsB,sBACVW,kBAAoB9sB,QAAwC0G,IAA5B1G,EAAQsmB,gBACxCyG,oBAAqB,CAAC/sB,EAAS0U,KAC7B,MAAMoQ,EAAWpQ,EAA+BoQ,QAChD,OAAIA,OAE8Bpe,IAA9B1G,EAAQ8d,yBAC4BpX,IAAnC1G,EAAQ7D,wBACP2oB,GAAW9kB,EAAQ+rB,8BAGYrlB,IAA9B1G,EAAQ8d,mBAEjBkP,sBAAwBhtB,GACjBA,EAAQisB,wBAOyBvlB,IAAnC1G,EAAQ7D,yBAC4B,IAAnC6D,EAAQ7D,wBACT6D,EAAQ+rB,0BACP/rB,EAAQisB,mBAAmBzmB,OAAS,IACH,IAAjCxF,EAAQgsB,0BAT2BtlB,IAAnC1G,EAAQ7D,yBAC2B,IAAnC6D,EAAQ7D,uBAWdiqB,kBAAoBpmB,I,QAClB,YAA+B0G,IAA/B1G,EAAQzF,wBACamM,IAAjB1G,EAAQ1F,MAAsB0F,EAAQ1F,KAAKkL,OAAS,OACnCkB,IAAjB1G,EAAQ1F,MACR0F,EAAQ1F,KAAKkL,OAAS,IACa,QAAnC,EAAAxF,EAAQzF,mBAAmBqB,gBAAQ,eAAE4J,QAAS,IACP,QAAvC,EAAAxF,EAAQzF,mBAAmBwB,oBAAY,eAAEyJ,QAAS,GAExDgkB,yBAA2BxpB,QACI0G,IAA7B1G,EAAQxF,kBACqB,sBAA7BwF,EAAQxF,sBACckM,IAAlB1G,EAAQvF,OAAuBuF,EAAQvF,MAAM+K,OAAS,OACnCkB,IAAlB1G,EAAQvF,OAAuBuF,EAAQvF,MAAM+K,OAAS,QAC1BkB,IAA7B1G,EAAQxF,iBAEdyyB,iBAAmBjtB,GAAYA,EAAQ+rB,wBAA2B,GAEpEzc,QAAS,CACPuc,WAAa7rB,IACPA,EAAQmL,QACVnL,EAAQmL,WAId+hB,SAAU,CACRC,8BAA+B,IAAM7E,MC5erC8E,IACJ,IAAA1tB,eAA+D,MAWpD2tB,GACX,EACExtB,SAAAA,EACA9F,YAAAA,EACAC,sBAAAA,EACAyG,kBAAAA,EACA0K,OAAAA,MAEA,MAAMgiB,GAAgC,IAAAzgB,cACpC,IACE4b,GAA0BgF,WAAW,CACnCJ,SAAU,CACRzsB,kBAAoBT,GAClBS,EAAkBT,EAAQ3D,eAGlC,CAACoE,IAEGma,GAAU,KAAAkE,cAAagN,GAAuB,CAClD/M,UAAU,EACV/e,QAAS,CACPjG,YAAAA,EACAC,sBAAAA,EACAmR,OAAAA,GAEF+hB,SAAU,CACRC,8BAAAA,KAGJ,OACE,kBAACC,GAAoCttB,SAAQ,CAAChC,MAAO8c,GAClD/a,IAKI0tB,GAAkC,KAC7C,MAAM3S,GAAU,IAAA3a,YAAWmtB,IAC3B,IAAKxS,EACH,MAAM,IAAI1a,MACR,gGAGJ,OAAO0a,GAGI4S,GAA2B,KAQtC,MAAM5S,EAAU2S,KAChB,OAAO,KAAA7P,aACL9C,GACA,IAAAlO,cACG2F,IAAuC,CACtCob,iBAAkBpb,EAAMxS,SACrB6tB,mBACHC,SAAUtb,EAAMxS,SAAS+tB,uBACzBC,WAAYxb,EAAMxS,SAASiuB,iBAC3BC,SAAU1b,EAAMxS,SAASkuB,SACzBC,SAAU3b,EAAMxS,SAASmuB,SACzBC,UAAW5b,EAAMxS,SAASouB,aAE5B,MAmBOC,GAAqB,K,MAChC,MAAM,WAAEL,GAAeL,KACjBvR,EAAMwB,GACc,QAAxB,EAAAoQ,EAAWM,qBAAa,eAAEtuB,SACJ,eAGlB,WAAEuuB,IAAe,KAAA1Q,aACrBmQ,GACA,IAAAnhB,cACG2F,I,MAA0C,OACzC+b,WAAyC,QAA7B,EAAA/b,EAAMrS,QAAQsmB,uBAAe,eAAEhrB,MAE7C,KAGE8O,GAAW,IAAAsC,cACd4Z,IACCuH,EAAWnP,KAAK,CAAExhB,KAAM,gBAAiBopB,gBAAAA,MAE3C,CAACuH,IAEGQ,GAAU,IAAA3hB,cACbqO,IACC8S,EAAWnP,KAAK,OAAD,QAAGxhB,KAAM,aAAgB6d,MAE1C,CAAC8S,IAEH,OAAO,OAAP,wBACK5R,GAAG,CACNmS,WAAAA,EACAhkB,SAAAA,EACAikB,QAAAA,KAkBSC,GAA2B,K,MACtC,MAAM,iBAAEb,GAAqBD,KACvBvR,EAAMwB,GACoB,QAA9B,EAAAgQ,EAAiBU,qBAAa,eAAEtuB,SACV,eAOlB,WAAEuuB,IAAe,KAAA1Q,aACrB+P,GACA,IAAA/gB,cACG2F,I,MAAgD,OAC/C+b,WAAgE,QAAnD,EAAA/b,EAAMrS,QAAQ8d,yBAAqC,eAAExiB,MAEpE,KAGE8O,GAAW,IAAAsC,cACdoR,IACC2P,EAAiB/O,KAAK,CAAExhB,KAAM,kBAAmB4gB,kBAAAA,MAEnD,CAAC2P,IAEGY,GAAU,IAAA3hB,cACbqO,IACC0S,EAAiB/O,KAAK,OAAD,QAAGxhB,KAAM,aAAgB6d,MAEhD,CAAC0S,IAEH,OAAO,OAAP,wBACKxR,GAAG,CACNmS,WAAAA,EACAhkB,SAAAA,EACAikB,QAAAA,KAkBSE,GAAmB,K,MAC9B,MAAM,SAAEZ,GAAaH,KACfvR,EAAMwB,GACY,QAAtB,EAAAkQ,EAASQ,qBAAa,eAAEtuB,SACF,eAGlB,WAAEuuB,IAAe,KAAA1Q,aACrBiQ,GACA,IAAAjhB,cACG2F,I,MAAwC,OACvC+b,WAA0C,QAA9B,EAAA/b,EAAMrS,QAAQ2pB,wBAAgB,eAAEruB,MAE9C,KAGE8O,GAAW,IAAAsC,cACdid,IACCgE,EAASjP,KAAK,CAAExhB,KAAM,iBAAkBysB,iBAAAA,MAE1C,CAACgE,IAEGU,GAAU,IAAA3hB,cACbqO,IACC4S,EAASjP,KAAK,OAAD,QAAGxhB,KAAM,aAAgB6d,MAExC,CAAC4S,IAEH,OAAO,OAAP,wBACK1R,GAAG,CACNmS,WAAAA,EACAhkB,SAAAA,EACAikB,QAAAA,KAqCSG,GAAmB,KAC9B,MAAM,UAAEP,GAAcT,MAChB,MACJtzB,EAAK,QACLC,EAAO,cACPC,EAAa,MACbK,EAAK,iBACLD,EAAgB,KAChBF,EAAI,mBACJC,EAAkB,aAClBowB,EAAY,SACZ8D,EAAQ,YACR1D,IACE,KAAArN,aACFuQ,GACA,IAAAvhB,cACG2F,IAAyC,CACxCnY,MAAOmY,EAAMrS,QAAQ9F,MACrBC,QAASkY,EAAMrS,QAAQ7F,QACvBC,cAAeiY,EAAMrS,QAAQ5F,cAC7BE,KAAM+X,EAAMrS,QAAQ1F,KACpBC,mBAAoB8X,EAAMrS,QAAQzF,mBAClCE,MAAO4X,EAAMrS,QAAQvF,MACrBD,iBAAkB6X,EAAMrS,QAAQxF,iBAChCmwB,aAActY,EAAMrS,QAAQ2qB,aAC5B8D,SAAUpc,EAAMsL,OAAO,UACvBoN,YAAa1Y,EAAMrS,QAAQ+qB,eAE7B,KAIJ,MAAO,CACL7wB,MAAAA,EACAC,QAAAA,EACAC,cAAAA,EACAK,MAAAA,EACAD,iBAAAA,EACAF,KAAAA,EACAC,mBAAAA,EACAowB,aAAAA,EACA8D,SAAAA,EACA1D,YAAAA,IC5VS2D,GACX,EAAG1lB,MAAAA,EAAOE,YAAAA,EAAa3E,UAAAA,EAAW1E,SAAAA,KAChC,yBAAKX,UAAW,cACd,yBAAKA,UAAW,8BACd,kBAAC,EAAAiT,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAhP,MAAK,CAACC,aAAa,MAAM2F,IAE5B,kBAAC,EAAAoJ,UAAS,KAAE7N,IAIL,iBADQ2E,EAEJ,uBAAGhK,UAAU,4BAA4BgK,GAEzCA,GAIf,yBAAKhK,UAAU,2EACZW,IClBF,SAAS8uB,KACd,MAAM,EAAEhxB,IAAM,IAAAC,mBACR,KAAEtD,EAAI,eAAEyrB,EAAc,UAAE6I,EAAS,oBAAEC,GF6QZ,MAC7B,MAAM,SAAEd,GAAaP,MACf,KAAElzB,EAAI,eAAEyrB,IAAmB,KAAArI,aAC/BqQ,GACA,IAAArhB,cACG2F,IAAwC,CACvC/X,KAAM+X,EAAMrS,QAAQ1F,KACpByrB,eAAgB1T,EAAMrS,QAAQzF,sBAEhC,KAGEq0B,GAAY,IAAAliB,cACfpS,IACCyzB,EAASrP,KAAK,CAAExhB,KAAM,UAAW5C,KAAAA,MAEnC,CAACyzB,IAGGc,GAAsB,IAAAniB,cACzBqZ,IACCgI,EAASrP,KAAK,CAAExhB,KAAM,oBAAqB6oB,eAAAA,MAE7C,CAACgI,IAEH,MAAO,CACLhI,eAAAA,EACAzrB,KAAAA,EACAs0B,UAAAA,EACAC,oBAAAA,IEzSAC,GAEF,OACE,kBAACJ,GAAc,CAAC1lB,MAAOrL,EAAE,UAAWuL,YAAavL,EAAE,yBACjD,kBAAC,EAAAoK,KAAI,CAACC,WAAS,GACb,kBAAC,EAAAzE,KAAI,CAACrE,UAAU,oBACd,kBAAC,EAAAsE,UAAS,CACR9F,MAAM,OACN+F,YAAU,EACVC,QAAQ,OACRqrB,WAAW,iDACX7vB,UAAU,aAEV,kBAAC,EAAAgF,UAAS,CAACpG,MAAOxD,EAAM6J,SAAUyqB,EAAWtzB,GAAG,UAElD,kBAAC,EAAAkI,UAAS,CACR9F,MAAM,kBACN+F,YAAU,EACVC,QAAQ,kBACRxE,UAAU,aAEV,kBAAC,EAAA8vB,MAAK,CACJC,eAA8BvoB,IAAnBqf,EACXzrB,KAAK,kBACL6J,SAAU,IAAM0qB,OAAoBnoB,GACpChJ,MAAM,6DACNpC,GAAG,4BACHwC,MAAM,cAER,kBAAC,EAAAkxB,MAAK,CACJC,eAA8BvoB,IAAnBqf,EACXzrB,KAAK,kBACL6J,SAAU,IACR0qB,EAAoB,CAAEjzB,SAAU,GAAIG,aAAc,KAEpD2B,MAAM,oCACNpC,GAAG,uBACHwC,MAAM,cAEY4I,IAAnBqf,GACC,oCACE,kBAAC,EAAAviB,UAAS,CACR9F,MAAM,YACN+F,YAAU,EACVC,QAAQ,WACRxE,UAAU,aAEV,kBAAC,EAAAgF,UAAS,CACRpG,MAAOioB,EAAenqB,SACtBuI,SAAWvI,GACTizB,EAAoB,OAAD,wBAAM9I,GAAc,CAAEnqB,SAAAA,KAE3CN,GAAG,cAGP,kBAAC,EAAAkI,UAAS,CACR9F,MAAM,gBACN+F,YAAU,EACVC,QAAQ,eACRxE,UAAU,aAEV,kBAAC,EAAAgF,UAAS,CACRpG,MAAOioB,EAAehqB,aACtBoI,SAAWpI,GACT8yB,EAAoB,OAAD,wBAAM9I,GAAc,CAAEhqB,aAAAA,KAE3CT,GAAG,uBC9DhB,MAAM4zB,GACX,EAAG9W,OAAAA,MACD,MAAM,IAAQ,IAAAxa,kBACd,OACE,kBAAC,EAAAka,WAAU,CACT7N,QAAS,EAAA8N,kBAAA,GACT7Y,WAAW,KAAAyU,KAAI,kCAEf,kBAAC,EAAAqE,eAAc,CAACC,KAAM,EAAAkX,cACtB,kBAAC,EAAA/rB,MAAK,CAACC,aAAc,KAAM/D,KAAM,EAAAgE,WAAA,QAC9B3F,EAAE,6BAEL,kBAAC,EAAAua,eAAc,KACb,kBAAC,EAAAN,MAAK,K,iGAEwB,IAC5B,kBAAC,EAAAlJ,OAAM,CACLzE,QAAS,EAAAqO,cAAA,KACTC,SAAO,EACPC,UAAQ,EACR1U,QAASsU,GAAM,0BCPtB,SAASgX,KAGd,MJ8FuC,MACvC,MAAM,WAAEvB,GAAeL,KACvB,OAAO,KAAA9P,aACLmQ,GACA,IAAAnhB,cACG2F,GACQA,EAAMmN,QAAQ,CAAEpB,KAAM,CAAEnC,IAAK,YAGtC,CAAC4R,MIzGWwB,GAEC,kBAACC,GAAe,MAAM,KAGzC,MAAMA,GAAqC,KACzC,MAAM,EAAE3xB,IAAM,IAAAC,mBAER,SACJxC,EAAQ,WACRgzB,EAAU,QACV1R,EAAO,MACPtf,EAAK,UACLwgB,EAAS,WAETvB,EAAU,aAEVwB,EAAY,SACZzT,EAAQ,QACRikB,GACEH,KAEJ,OACE,kBAACQ,GAAc,CACb1lB,MAAOrL,EAAE,eACTuL,YAAavL,EAAE,2BAEd,M,MACC,QAAQ,GACN,KAAKkgB,EACH,OAAO,kBAACtP,EAAA,EAAO,MACjB,KAAK8N,EACH,OACE,oCACE,kBAACkT,GAAe,MAChB,kBAAC9W,GAAwB,CACvBC,QAAS,IAAM2V,EAAQ,CAAEnZ,KAAM,EAAG5V,KAAM,QAIhD,KAAKse,GAAaxgB,EAChB,OACE,kBAAC8xB,GAAsB,CACrB9W,OAAQ,WACN,MAAM,IAAIlY,MAAM,gCAIxB,KAAKwc,EACH,OACE,oCACE,kBAAC6S,GAAe,MAChB,kBAAChhB,EAAA,EAAO,OAGd,QACE,OACE,oCACE,kBAACghB,GAAe,MAChB,yBAAKrwB,UAAW,8BACd,kBAAC,EAAAswB,QAAO,CAACxnB,WAAS,GACA,QAAf,EAAA5M,MAAAA,OAAQ,EAARA,EAAU2Z,aAAK,eAAE3N,KAAKkU,GACrB,kBAAC,EAAAuE,KAAI,CACH4P,aAAW,EACX1sB,IAAKuY,EAAEhgB,GACPo0B,cAAY,EACZzb,WAAYma,IAAe9S,EAAEhgB,GAC7BwI,QAAS,IAAMsG,EAASkR,EAAEhgB,KAE1B,kBAAC,EAAAq0B,WAAU,KACT,kBAAC,EAAAC,UAAS,KAAEtU,EAAEhhB,OAEhB,kBAAC,EAAAu1B,SAAQ,KACP,kBAAC,EAAAC,gBAAe,KACd,kBAAC,EAAAC,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,cACpB,kBAAC,EAAAC,2BAA0B,KACxB3U,EAAEtL,QAGP,kBAAC,EAAA+f,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,gBACpB,kBAAC,EAAAC,2BAA0B,KACxB3U,EAAErL,uBAxD5B,KAyEDsf,GAAqC,KAEzC,MAAM,QAAExU,EAAO,QAAEsT,GAAYH,KAEvBpY,GAAiB,IAAAC,QAAgC,MACjDma,EAAmB1a,GAAY6Y,EAAS,KAuCxCpY,EACJ,oCACE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAjS,UAAS,CACR5J,KAAK,aACLgB,GAAG,aACH4B,KAAK,SAAQ,aACF,uBACXiH,SAAWrG,GACToyB,EAAiB,CACf5wB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN5a,KAAMwD,IAGVsY,IAAKN,IAEP,kBAAC,EAAApH,OAAM,CACLzE,QAAS,UAAS,aACP,kCAEX,kBAAC,EAAAoM,WAAU,UA0BfC,EACJ,oCACE,kBAAC,EAAAC,mBAAkB,CAACC,WAAY,kBAAC,EAAAC,WAAU,MAAKC,WAAW,MACxDT,GAOH,kBAAC,EAAAC,YAAW,CAACjM,QAAQ,aAAa4M,UAAW,CAAE/X,QAAS,eACtD,kBAACqxB,GAAkB,CAAC/a,WAAS,MAKnC,OACE,kBAAC,EAAA0B,QAAO,CACNxb,GAAG,sBACHyb,gCAAgC,MAGhC,kBAAC,EAAAC,eAAc,KAAEV,KAQjB6Z,GAAiE,EACrE/a,UAAAA,GAAY,MAEZ,MAAM,QAAE2F,EAAO,SAAE3f,EAAQ,QAAEizB,GAAYH,KACvC,OACE,kBAAClZ,GAAU,CACTC,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS+uB,EAAQ,CAAEnZ,KAAAA,EAAM5V,KAAAA,IAC1C8V,UAAWA,KCnPX,GAGD,EAAGqG,MAAAA,EAAO5a,aAAAA,MACb,MAAM,WAAE0O,EAAU,cAAElV,EAAa,UAAEgC,IAAc,KAAAqhB,aAC/CjC,GACA,IAAA/O,cACG2F,IAA8B,CAC7BhW,UAAWgW,EAAMrS,QAAQ3D,UACzBkT,WAAY8C,EAAMrS,QAAQuP,WAC1BlV,cAAegY,EAAMrS,QAAQ3F,iBAE/B,CAACohB,KAIL,OACE,kBAAC5a,EAAY,CACX0O,WAAYA,EACZlV,cAAeA,EACfgC,UAAWA,EACX8H,SAAU,CAAC9J,EAAe+L,IACxBqV,EAAMiD,KAAK,CAAExhB,KAAM,SAAU7C,cAAAA,EAAe+L,QAAAA,OAM9CgqB,GAED,EAAG3U,MAAAA,MACN,MAAM,cAAEphB,EAAa,UAAEgC,IAAc,KAAAqhB,aACnCjC,GACA,IAAA/O,cACG2F,IAA8B,CAC7BhW,UAAWgW,EAAMrS,QAAQ3D,UACzBhC,cAAegY,EAAMrS,QAAQ3F,iBAE/B,CAACohB,KAIL,OACE,kBAAC7V,EAAsB,CACrBT,OAAS9I,EAAiC8I,OAC1C9K,cAAeA,GAAiB,GAChC8J,SAAU,CAAC9J,EAAe+L,IACxBqV,EAAMiD,KAAK,CAAExhB,KAAM,SAAU7C,cAAAA,EAAe+L,QAAAA,OAUvCiqB,GAAsC,KACjD,MAAM,EAAE1yB,IAAM,IAAAC,kBACRgd,EAAU2S,MACV,UACJ+C,EAAS,UACTC,EAAS,aACT1vB,EAAY,gBACZ2vB,EAAe,sBACfC,IACE,KAAA/S,aACF9C,GACA,IAAAlO,cACG2F,IAQQ,CACLie,UARgBje,EAAMmN,QAAQ,CAC9B4M,mBAAoB,qBAQpBmE,UANgBle,EAAMmN,QAAQ,WAO9BiR,uBAL+B,IAA/Bpe,EAAMrS,QAAQa,mBACiB6F,IAA/B2L,EAAMrS,QAAQa,aAKdxG,cAAegY,EAAMrS,QAAQ7D,uBAC7B0E,aAAcwR,EAAMrS,QAAQa,aAC5B2vB,gBAAiBne,EAAMxS,SACpB2wB,mBAGP,CAAC5V,KAIL,OACE,kBAAC8T,GAAc,CACb1lB,MAAOrL,EAAE,kBACTuL,YAAavL,EAAE,iCAEd,MACC,QAAQ,GACN,KAAK2yB,EACH,OACE,kBAAC,EAAAxY,WAAU,KACT,kBAAC,EAAAE,eAAc,CAAC/N,QAAQ,YAAY1F,UAAW,EAAAlF,UAC/C,kBAAC,EAAA+D,MAAK,CAAC9D,KAAK,KAAK+D,aAAa,MAC3B1F,EAAE,aAIX,KAAK4yB,EACH,OACE,kBAAC,EAAAzY,WAAU,KACT,kBAAC,EAAAE,eAAc,CAACC,KAAM,EAAA9Y,wBACtB,kBAAC,EAAAiE,MAAK,CAAC9D,KAAK,KAAK+D,aAAa,MAAI,kBAKxC,KAAKotB,EACH,OACE,kBAAC,aAAc,CAACniB,SAAU,MACxB,kBAAC,GAA2B,CAC1BmN,MAAO+U,EACP3vB,aAAcA,KAItB,QACE,OAAO,kBAACuvB,GAA+B,CAAC3U,MAAO+U,MA9BpD,KCrHME,GAAe,CAC1B5yB,EACAH,KACgB,CAAGoF,IAAKjF,EAAO6yB,KAAMhzB,EAAEG,KC8ClC,SAAS8yB,KAGd,MP8H6C,MAC7C,MAAM,iBAAEnD,GAAqBD,KAC7B,OAAO,KAAA9P,aACL+P,GACA,IAAA/gB,cACG2F,GACQA,EAAMmN,QAAQ,CAAEpB,KAAM,CAAEnC,IAAK,YAGtC,CAACwR,MOzIWoD,GAEC,kBAACC,GAAqB,MAAM,KAGxC,SAASA,KACd,MAAM,EAAEnzB,IAAM,IAAAC,mBACR,SACJxC,EAAQ,QACRshB,EAAO,MACPtf,EAAK,UACLwgB,EAAS,WAETvB,EAAU,aAEVwB,EAAY,WACZuQ,EAAU,SACVhkB,EAAQ,QACRikB,GACEC,KAEJ,OACE,kBAACI,GAAc,CACb1lB,MAAOrL,EAAE,aACTuL,YAAavL,EAAE,iCAEd,M,MACC,QAAQ,GACN,KAAKkgB,EACH,OAAO,kBAACtP,EAAA,EAAO,MACjB,KAAK8N,EACH,OACE,oCACE,kBAAC0U,GAAqB,MACtB,kBAACtY,GAAwB,CACvBC,QAAS,IAAM2V,EAAQ,CAAEnZ,KAAM,EAAG5V,KAAM,QAIhD,KAAKse,GAAaxgB,EAChB,OAAO,kBAACya,GAAsB,MAChC,KAAK6E,EACH,OACE,oCACE,kBAACqU,GAAqB,MACtB,kBAACxiB,EAAA,EAAO,OAGd,QACE,OACE,oCACE,kBAACwiB,GAAqB,MACtB,yBAAK7xB,UAAW,8BACd,kBAAC,EAAAswB,QAAO,CAACxnB,WAAS,GACA,QAAf,EAAA5M,MAAAA,OAAQ,EAARA,EAAU2Z,aAAK,eAAE3N,KAAK4hB,GACrB,kBAAC,EAAAnJ,KAAI,CACH4P,aAAW,EACX1sB,IAAMimB,EAAsB1tB,GAC5Bo0B,cAAY,EACZzb,WAAYma,IAAgBpF,EAAsB1tB,GAClDwI,QAAS,IAAMsG,EAAU4e,EAAsB1tB,KAE/C,kBAAC,EAAAq0B,WAAU,KACT,kBAAC,EAAAC,UAAS,KACN5G,EAAyB1uB,OAG/B,kBAAC,EAAAu1B,SAAQ,KACP,kBAAC,EAAAC,gBAAe,KACd,kBAAC,EAAAC,qBAAoB,KACnB,kBAAC,EAAAE,2BAA0B,KACvBjH,EAAyB9f,cAG/B,kBAAC,EAAA6mB,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,gBACpB,kBAAC,EAAAC,2BAA0B,KACvBjH,EAAyBhC,UAG/B,kBAAC,EAAA+I,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,WACpB,kBAAC,EAAAC,2BAA0B,KACvBjH,EAAsB1tB,eAzDjD,IA0EP,MAAMy1B,GAA2C,KAC/C,MAAM,EAAEpzB,IAAM,IAAAC,mBACR,QAAEmd,EAAO,QAAEsT,GAAYC,MACtB0C,EAAmBC,IAAwB,IAAA3nB,WAAS,GACrD4nB,GAAe,IAAAnb,QAAgC,MAC/Cma,EAAmB1a,GAAY6Y,EAAS,MAExC,KAAE/zB,EAAI,WAAEquB,EAAa,IAAO5N,EAAQiB,OAAS,GAE7CmV,GAAkB,IAAAzkB,cACtB,IAAM2hB,EAAQ,CAAEnZ,KAAM,EAAG5V,KAAMyb,EAAQzb,QACvC,CAAC+uB,EAAStT,EAAQzb,OAGd8xB,GAAmB,IAAA1kB,cACvB,IAAMukB,GAAsB7J,IAAUA,KACtC,IAcIiK,EAAmB,CACvBC,EACAxzB,KAbqB,EAACwiB,EAAkBiR,EAAkBzzB,KAC1DuwB,EAAQ,OAAD,wBACFtT,GAAO,CACViB,MAAO,OAAF,wBACCjB,EAAQiB,OAAS,IAAG,CACxB,CAACsE,GAAWiR,EAAOppB,SAASrK,GACxByzB,EAAOxoB,QAAQtK,GAAMA,IAAMX,IAC3B,IAAKyzB,GAAU,GAAKzzB,SAQ5B0zB,CAAe,aAAc7I,EAAa7qB,EAAsBiF,OAalE,IAAA4G,YAAU,KACJunB,EAAaO,UACfP,EAAaO,QAAQ3zB,MAAQxD,GAAQ,MAEtC,CAAC42B,EAAc52B,IAElB,MAAMo3B,EAAgB,CACpB,kBAAC,EAAA3nB,aAAY,CAAChH,IAAI,OAAOjF,MAAM,QAC5BH,EAAE,SAEL,kBAAC,EAAAoM,aAAY,CAAChH,IAAI,SAASjF,MAAM,UAC9BH,EAAE,YAGDsY,EACJ,oCACE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAjS,UAAS,CACR5J,KAAK,OACLgB,GAAG,OACH4B,KAAK,SAAQ,aACF,2BACXiH,SAAW7J,GACT41B,EAAiB,CACf5wB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN8G,MAAO,OAAF,wBACAjB,EAAQiB,OAAK,CAChB1hB,KAAAA,MAIN8b,IAAK8a,IAEP,kBAAC,EAAAxiB,OAAM,CACLzE,QAAS,UAAS,aACP,kCAEX,kBAAC,EAAAoM,WAAU,SAIjB,kBAAC,EAAAM,aAAY,CAAC1M,QAAQ,gBACpB,kBAAC,EAAA0nB,cAAa,CACZC,MAAOjJ,EAAWvhB,KAAKyqB,GAAMnB,GAAamB,EAAGl0B,KAC7Cm0B,WAAYT,EACZU,gBAAiB,KAAMC,OAzDH1R,EAyDsB,aAxDhD+N,EAAQ,OAAD,wBACFtT,GAAO,CACViB,MAAO,OAAF,wBACCjB,EAAQiB,OAAS,IAAG,CACxB,CAACsE,QAAW5Z,OALS,IAAC4Z,GA0DpB2R,aAAa,kBAEb,kBAAC,EAAAjoB,OAAM,CACLC,QAAS,WAAU,aACR,iBACXE,SAAUinB,EACVhnB,SAAU,CAAC3B,EAAGopB,IACZR,EAAiB,EAAIX,GAAamB,EAAal0B,IAEjD4M,WAAYoe,EACZvf,OAAQ4nB,EACRxmB,gBAAgB,kBAEfknB,MAMLpb,EACJ,oCACE,kBAAC,EAAAC,mBAAkB,CAACC,WAAY,kBAAC,EAAAC,WAAU,MAAKC,WAAW,MACxDT,GAEH,kBAAC,EAAAC,YAAW,CAACjM,QAAQ,aAAa4M,UAAW,CAAE/X,QAAS,eACtD,kBAACozB,GAAwB,CAAC9c,WAAS,MAIzC,OACE,kBAAC,EAAA0B,QAAO,CACNxb,GAAG,sBACHyb,gCAAgC,KAChCoa,gBAAiBA,GAEjB,kBAAC,EAAAna,eAAc,CAAC9X,UAAW,mBACxBoX,KASH4b,GACJ,EAAG9c,UAAAA,GAAY,MACb,MAAM,QAAE2F,EAAO,SAAE3f,EAAQ,QAAEizB,GAAYC,KACvC,OACE,kBAACtZ,GAAU,CACTC,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS+uB,EAAQ,CAAEnZ,KAAAA,EAAM5V,KAAAA,IAC1C8V,UAAWA,KC1RN+c,GAAuC,K,MAClD,MAAO/oB,EAAQC,GAAW,cAAwB,IAC5C,EAAE1L,IAAM,IAAAC,mBAER,UAAEvB,EAAS,MAAE5B,EAAK,aAAE+O,EAAY,WAAE4oB,EAAU,kBAAEC,GRoVf,MACrC,MAAM,SAAErE,GAAaR,MAEf,UAAEnxB,EAAS,MAAE5B,EAAK,aAAE+O,IAAiB,KAAAkU,aACzCsQ,GACA,IAAAthB,cACG2F,IAAwC,CACvC5X,MAAO4X,EAAMrS,QAAQvF,MACrB+O,aAAc6I,EAAMrS,QAAQxF,iBAC5B6B,UAAWgW,EAAMrS,QAAQ3D,aAE3B,KAIE+1B,GAAa,IAAA1lB,cAChBjS,IACCuzB,EAAStP,KAAK,CAAExhB,KAAM,WAAYzC,MAAAA,MAEpC,CAACuzB,IAGGqE,GAAoB,IAAA3lB,cACvBlD,IACCwkB,EAAStP,KAAK,CAAExhB,KAAM,kBAAmBsM,aAAAA,MAE3C,CAACwkB,IAGH,MAAO,CACLxkB,aAAAA,EACA/O,MAAAA,EACA43B,kBAAAA,EACAD,WAAAA,EACA/1B,UAAAA,IQrXAi2B,GAEInoB,GAAW,IAAAuC,cAAY,IAAMrD,GAASD,IAAYA,KAAS,IAC3DgB,GAAW,IAAAsC,cAAY,CAACjE,EAAQ4B,EAAgBC,KAChDA,EACFZ,KAEAL,GAAQ,GACR+oB,EAAW,IACXC,EAAkBhoB,MAEnB,IAEGX,GAAiB,IAAAgD,cAAY,KACjCrD,GAAQ,KACP,IAEGtD,EAAkBb,EACrB7I,EAAiC8I,QAE9Ba,EAAS,IAAI,EAAAC,iBAChB5J,EAAiC8I,OAClCY,IAEI,cAAE3J,GAA+B,QAAb,EAAA4J,EAAOb,cAAM,eAAEW,WAGnC+D,EAFQzN,EAAqB,MAEPgL,KAAK0C,IAC/B,MAAM3C,EAAON,OAAOM,KAAK2C,EAAKhE,YAC9B,OAAO,kBAAC,EAAAiE,aAAY,CAAChH,IAAKoE,EAAK,GAAIrJ,MAAOqJ,EAAK,QAGjD,OACE,kBAACunB,GAAc,CACb1lB,MAAOrL,EAAE,iBACTuL,YAAavL,EACX,8DAGF,kBAAC,EAAAoK,KAAI,CAACC,WAAS,GACb,kBAAC,EAAAzE,KAAI,CAACrE,UAAU,oBACd,kBAAC,EAAAsE,UAAS,CACR9F,MAAOC,EAAE,iBACT+F,QAAQ,yBACRxE,UAAU,oCAEV,kBAAC,EAAA8K,OAAM,CACLC,QAAS,EAAAC,cAAA,OAAoB,aAClB,uBACXC,SAAUA,EACVC,SAAUA,EACVG,WAAYf,EACZJ,OAAQA,EACRoB,gBAAgB,eAEfX,IAGa,sBAAjBL,GACC,kBAAC,EAAAhG,UAAS,CACR9F,MAAM,yBACN+F,YAAU,EACVC,QAAQ,QACRqrB,WAAW,yDAEX,kBAAC,EAAA7qB,UAAS,CAACpG,MAAOrD,EAAO0J,SAAUiuB,EAAY92B,GAAG,eCrEnDi3B,GACX,EAAGna,OAAAA,MACD,MAAM,IAAQ,IAAAxa,kBACd,OACE,kBAAC,EAAAka,WAAU,CACT7N,QAAS,EAAA8N,kBAAA,GACT7Y,WAAW,KAAAyU,KAAI,kCAEf,kBAAC,EAAAqE,eAAc,CAACC,KAAM,EAAAua,mBACtB,kBAAC,EAAApvB,MAAK,CAACC,aAAc,KAAM/D,KAAM,EAAAgE,WAAA,QAC9B3F,EAAE,gCAEL,kBAAC,EAAAua,eAAc,KACb,kBAAC,EAAAN,MAAK,K,iGAEwB,IAC5B,kBAAC,EAAAlJ,OAAM,CACLzE,QAAS,EAAAqO,cAAA,KACTC,SAAO,EACPC,UAAQ,EACR1U,QAASsU,GAAM,0BCYhBqa,GAAyC,IVsLf,MACrC,MAAM,SAAE9E,GAAaH,KACrB,OAAO,KAAA9P,aACLiQ,GACA,IAAAjhB,cACG2F,GACQA,EAAMmN,QAAQ,CAAEpB,KAAM,CAAEnC,IAAK,YAGtC,CAAC0R,MU9LW+E,GACC,kBAACC,GAAa,MAAM,KAEjCA,GAAmC,KACvC,MAAM,EAAEh1B,IAAM,IAAAC,mBAER,SACJxC,EAAQ,QACRshB,EAAO,MACPtf,EAAK,WACLgxB,EAAU,UACVxQ,EAAS,WAETvB,EAAU,aAEVwB,EAAY,SACZzT,EAAQ,QACRikB,GACEE,KAEJ,OACE,kBAACG,GAAc,CACb1lB,MAAOrL,EAAE,kBACTuL,YAAavL,EAAE,yBAEd,M,MACC,QAAQ,GACN,KAAKkgB,EACH,OAAO,kBAACtP,EAAA,EAAO,MACjB,KAAK8N,EACH,OACE,oCACE,kBAACuW,GAAY,MACb,kBAACna,GAAwB,CACvBC,QAAS,IAAM2V,EAAQ,CAAEnZ,KAAM,EAAG5V,KAAM,QAIhD,KAAKse,GAAaxgB,EAChB,OACE,kBAACm1B,GAA0B,CACzBna,OAAQ,WACN,MAAM,IAAIlY,MAAM,gCAIxB,KAAKwc,EACH,OACE,oCACE,kBAACkW,GAAY,MACb,kBAACrkB,EAAA,EAAO,OAGd,QACE,OACE,oCACE,kBAACqkB,GAAY,MACb,yBAAK1zB,UAAW,8BACd,kBAAC,EAAAswB,QAAO,CAACxnB,WAAS,GACA,QAAf,EAAA5M,MAAAA,OAAQ,EAARA,EAAU2Z,aAAK,eAAE3N,KAAKkU,GACrB,kBAAC,EAAAuE,KAAI,CACH4P,aAAW,EACX1sB,IAAKuY,EAAEhgB,GACPo0B,cAAY,EACZzb,WAAYma,IAAe9S,EAAEhgB,GAC7BwI,QAAS,IAAMsG,EAASkR,EAAEhgB,KAE1B,kBAAC,EAAAq0B,WAAU,KACT,kBAAC,EAAAC,UAAS,KAAEtU,EAAEhhB,OAEhB,kBAAC,EAAAu1B,SAAQ,KACP,kBAAC,EAAAC,gBAAe,KACd,kBAAC,EAAAC,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,eACpB,kBAAC,EAAAC,2BAA0B,KACxB3U,EAAEuX,SAGP,kBAAC,EAAA9C,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,cACpB,kBAAC,EAAAC,2BAA0B,KACxB3U,EAAEtL,QAGP,kBAAC,EAAA+f,qBAAoB,KACnB,kBAAC,EAAAC,oBAAmB,gBACpB,kBAAC,EAAAC,2BAA0B,KACxB3U,EAAErL,uBA9D5B,KA+ED2iB,GAAkC,KACtC,MAAM,EAAEj1B,IAAM,IAAAC,mBAER,QAAEmd,EAAO,QAAEsT,GAAYE,MAEtBuE,EAAiBC,IAAsB,IAAAzpB,WAAS,IAChD0pB,EAAuBC,IAA4B,IAAA3pB,WAAS,IAC5D4pB,EAAgBC,IAAqB,IAAA7pB,WAAS,IAC9C8pB,EAAiBC,IAAsB,IAAA/pB,WAAS,IAChDgqB,EAAkBC,IAAuB,IAAAjqB,UAAS,QACnDkqB,GAAmB,IAAA9mB,cACvB,IAAMqmB,GAAoB3L,IAAUA,KACpC,IAEIqM,GAAyB,IAAA/mB,cAC7B,IAAMumB,GAA0B7L,IAAUA,KAC1C,IAEIsM,GAAkB,IAAAhnB,cACtB,IAAMymB,GAAmB/L,IAAUA,KACnC,IAEIuM,GAAyB,IAAAjnB,cAC7B,IAAM2mB,GAAoBjM,IAAUA,KACpC,IAGI8I,EAAmB1a,GAAY6Y,EAAS,MAExC,KACJ/zB,EAAI,MACJ0V,EAAK,eACLia,EAAiB,GAAE,QACnBC,EAAU,GAAE,SACZF,EAAW,IACTjP,EAAQiB,OAAS,GAEfmV,GAAkB,IAAAzkB,cACtB,IAAM2hB,EAAQ,CAAEnZ,KAAM,EAAG5V,KAAMyb,EAAQzb,QACvC,CAAC+uB,EAAStT,EAAQzb,OAGd4xB,GAAe,IAAAnb,QAAgC,MAC/C6d,GAAgB,IAAA7d,QAAgC,MAEhDyb,EAAiB,CAAClR,EAAkBiR,EAAkBzzB,IAC1DuwB,EAAQ,OAAD,wBACFtT,GAAO,CACViB,MAAO,OAAF,wBACCjB,EAAQiB,OAAS,IAAG,CACxB,CAACsE,GAAWiR,EAAOppB,SAASrK,GACxByzB,EAAOxoB,QAAQtK,GAAMA,IAAMX,IAC3B,IAAKyzB,GAAU,GAAKzzB,QAIxB+1B,EAAiB,CACrBvC,EACAxzB,KAEA0zB,EAAe,WAAYxH,EAAWlsB,EAAsBiF,MAGxD+wB,EAAwB,CAC5BxC,EACAxzB,KAEA0zB,EACE,iBACAvH,EACCnsB,EAAsBiF,MAIrBgxB,EAAiB,CACrBzC,EACAxzB,KAEA0zB,EAAe,UAAWtH,EAAUpsB,EAAsBiF,MAGtDivB,EAAsB1R,GAC1B+N,EAAQ,OAAD,wBACFtT,GAAO,CACViB,MAAO,OAAF,wBACCjB,EAAQiB,OAAS,IAAG,CACxB,CAACsE,QAAW5Z,OAIZstB,GAAiB,IAAAtnB,cACpBgI,IACC,MACM4e,GADc5e,MAAAA,OAAK,EAALA,EAAOC,QACUsf,UACrCV,EAAoBD,GACpBD,GAAoBjM,IAAUA,MAEhC,KAIF,IAAAzd,YAAU,KACJunB,EAAaO,UACfP,EAAaO,QAAQ3zB,MAAQxD,GAAQ,IAEnCs5B,EAAcnC,UAChBmC,EAAcnC,QAAQ3zB,MAAQkS,GAAS,MAExC,CAACkhB,EAAc52B,EAAM0V,IAExB,MAAMkkB,EAA0BC,GAAsB/sB,KACpD,EAAGtJ,MAAAA,EAAOJ,MAAAA,KAAY,kBAAC,EAAA02B,aAAY,CAACrxB,IAAKjF,GAAQJ,KAE7C22B,EAAkBx2B,GACrBkL,QAAQurB,GAA4B,cAAjBA,EAAOx2B,QAC1BsJ,KAAI,EAAGtJ,MAAAA,EAAOJ,MAAAA,KACb,kBAAC,EAAAqM,aAAY,CAAChH,IAAKjF,EAAOA,MAAOA,GAC9BJ,KAGD62B,EAAyBC,GAAqBptB,KAClD,EAAGtJ,MAAAA,EAAOJ,MAAAA,KACR,kBAAC,EAAAqM,aAAY,CAAChH,IAAKjF,EAAOA,MAAOA,GAC9BJ,KAID+2B,EAAkBC,GAActtB,KAAI,EAAGtJ,MAAAA,EAAOJ,MAAAA,KAClD,kBAAC,EAAAqM,aAAY,CAAChH,IAAKjF,EAAOA,MAAOA,GAC9BJ,KAICi3B,EACJ,kBAAC,EAAAze,YAAW,KACV,kBAAC,EAAA0e,SAAQ,CACPxqB,SAAWsK,GAAUsf,EAAetf,GACpCmgB,SAAU,EAAAC,iBAAA,KACVC,OACE,kBAAC,EAAAC,eAAc,CACb7qB,SAAUwpB,EACVnmB,MAAO,CAAE6U,MAAO,SAEhB,kBAAC,EAAA5L,WAAU,CAACnX,KAAK,O,IAASg0B,GAG9BlqB,OAAQgqB,EACRvpB,cAAeqqB,EACf1mB,MAAO,CAAE6U,MAAO,WAKhBpM,EACJ,oCACE,kBAAC,EAAAU,aAAY,CAAC1M,QAAQ,gBACnB0qB,EAED,kBAAC,EAAAhD,cAAa,CACZC,MAAO5H,EAAS5iB,KAAKyqB,GAAMnB,GAAamB,EAAGl0B,KAC3Cm0B,WAAY+B,EACZ9B,gBAAiB,IAAMC,EAAmB,YAC1CC,aAAct0B,EAAE,UAChBs3B,gBAAiB3B,IAAqB31B,EAAE,WAExC,kBAAC,EAAAqM,OAAM,CACLC,QAAS,WAAU,aACPtM,EAAE,UACdwM,SAAUqpB,EACVppB,SAAU,CAAC3B,EAAGopB,IACZgC,EAAe,EAAInD,GAAamB,EAAal0B,IAE/C4M,WAAYyf,EACZ5gB,OAAQ0pB,EACRtoB,gBAAiB7M,EAAE,qBAElB02B,IAIL,kBAAC,EAAA1C,cAAa,CACZC,MAAO3H,EAAe7iB,KAAKyqB,GAAMnB,GAAamB,EAAGl0B,KACjDm0B,WAAYgC,EACZ/B,gBAAiB,IAAMC,EAAmB,kBAC1CC,aAAct0B,EAAE,iBAChBs3B,gBAAiB3B,IAAqB31B,EAAE,kBAExC,kBAAC,EAAAqM,OAAM,CACLC,QAAS,WAAU,aACPtM,EAAE,iBACdwM,SAAUspB,EACVrpB,SAAU,CAAC3B,EAAGopB,IACZiC,EAAsB,EAAIpD,GAAamB,EAAal0B,IAEtD4M,WAAY0f,EACZ7gB,OAAQ4pB,EACRxoB,gBAAiB7M,EAAE,6BAElB42B,IAIL,kBAAC,EAAA5C,cAAa,CACZC,MAAO1H,EAAQ9iB,KAAKyqB,GAAMnB,GAAamB,EAAGl0B,KAC1Cm0B,WAAYiC,EACZhC,gBAAiB,IAAMC,EAAmB,WAC1CC,aAAct0B,EAAE,UAChBs3B,gBAAiB3B,IAAqB31B,EAAE,WAExC,kBAAC,EAAAqM,OAAM,CACLC,QAAS,WAAU,aACPtM,EAAE,UACdwM,SAAUupB,EACVtpB,SAAU,CAAC3B,EAAGopB,IACZkC,EAAe,EAAIrD,GAAamB,EAAal0B,IAE/C4M,WAAY2f,EACZ9gB,OAAQ8pB,EACR1oB,gBAAiB7M,EAAE,qBAElB82B,IAIL,kBAAC,EAAA9C,cAAa,CACZC,MAAOt3B,EAAO,CAACA,GAAQ,GACvBw3B,WAAY,IAAME,EAAmB,QACrCC,aAAct0B,EAAE,SAEf21B,IAAqB31B,EAAE,SACtB,kBAAC,EAAAuY,YAAW,KACV,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAjS,UAAS,CACR5J,KAAMqD,EAAE,QACRrC,GAAIqC,EAAE,QACNT,KAAK,SACLg4B,YAAav3B,EAAE,yBAAwB,aAC3BA,EAAE,yBACdwG,SAAW7J,GACT41B,EAAiB,CACf5wB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN8G,MAAO,OAAF,wBACAjB,EAAQiB,OAAK,CAChB1hB,KAAAA,MAIN8b,IAAK8a,IAEP,kBAAC,EAAAxiB,OAAM,CACLzE,QAAS,UAAS,aACP,+BACXnG,QAAS,K,MACP,OAAAuqB,EAAQ,CACN/uB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN8G,MAAO,OAAF,wBACAjB,EAAQiB,OAAK,CAChB1hB,MAA0B,QAApB,EAAA42B,EAAaO,eAAO,eAAE3zB,QAAS,SAK3C,kBAAC,EAAAuY,WAAU,UAOrB,kBAAC,EAAAsb,cAAa,CACZC,MAAO5hB,EAAQ,CAACA,GAAS,GACzB8hB,WAAY,IAAME,EAAmB,SACrCC,aAAct0B,EAAE,UAEf21B,IAAqB31B,EAAE,UACtB,kBAAC,EAAAuY,YAAW,KACV,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAjS,UAAS,CACR5J,KAAMqD,EAAE,SACRrC,GAAIqC,EAAE,SACNT,KAAK,SACLg4B,YAAav3B,EAAE,0BAAyB,aAC5BA,EAAE,0BACdwG,SAAW6L,GACTkgB,EAAiB,CACf5wB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN8G,MAAO,OAAF,wBACAjB,EAAQiB,OAAK,CAChBhM,MAAAA,MAINoG,IAAKwd,IAEP,kBAAC,EAAAllB,OAAM,CACLzE,QAAS,UAAS,aACP,gCACXnG,QAAS,K,MACP,OAAAuqB,EAAQ,CACN/uB,KAAMyb,EAAQzb,KACd4V,KAAM,EACN8G,MAAO,OAAF,wBACAjB,EAAQiB,OAAK,CAChBhM,OAA4B,QAArB,EAAA4jB,EAAcnC,eAAO,eAAE3zB,QAAS,SAK7C,kBAAC,EAAAuY,WAAU,YASrBC,EACJ,oCACE,kBAAC,EAAAC,mBAAkB,CAACC,WAAY,kBAAC,EAAAC,WAAU,MAAKC,WAAW,MACxDT,GAEH,kBAAC,EAAAU,aAAY,CAAC1M,QAAQ,qBACpB,kBAAC,EAAAiM,YAAW,KACV,kBAAC,EAAAxH,OAAM,CAACzE,QAAQ,WAAWtM,EAAE,4BAGjC,kBAAC,EAAAuY,YAAW,CAACjM,QAAQ,aAAa4M,UAAW,CAAE/X,QAAS,eACtD,kBAACq2B,GAAgB,CAAC/f,WAAS,MAIjC,OACE,kBAAC,EAAA0B,QAAO,CACNxb,GAAG,sBACHyb,gCAAgC,KAChCoa,gBAAiBA,GAEjB,kBAAC,EAAAna,eAAc,KAAEV,KAoBjB6d,GAA2C,CAC/C,CAAEr2B,MAAO,OAAQJ,MAAO,QACxB,CAAEI,MAAO,SAAUJ,MAAO,UAC1B,CAAEI,MAAO,gBAAiBJ,MAAO,kBACjC,CAAEI,MAAO,SAAUJ,MAAO,UAC1B,CAAEI,MAAO,QAASJ,MAAO,UAGrB82B,GAA0C,CAC9C,CAAE12B,MAAO,MAAOJ,MAAO,wBAGnBG,GAAmC,CACvC,CAAEC,MAAO,QAASJ,MAAO,SACzB,CAAEI,MAAO,SAAUJ,MAAO,UAC1B,CAAEI,MAAO,WAAYJ,MAAO,oBAC5B,CAAEI,MAAO,eAAgBJ,MAAO,wBAChC,CAAEI,MAAO,YAAaJ,MAAO,wBAC7B,CAAEI,MAAO,cAAeJ,MAAO,yBAE3Bg3B,GAAmC,CACvC,CAAE52B,MAAO,YAAaJ,MAAO,yBAMzBy3B,GAA6D,EACjE/f,UAAAA,GAAY,MAEZ,MAAM,QAAE2F,EAAO,SAAE3f,EAAQ,QAAEizB,GAAYE,KAEvC,OACE,kBAACvZ,GAAU,CACTC,WAAW7Z,MAAAA,OAAQ,EAARA,EAAUmgB,QAAS,EAC9BrG,KAAM6F,EAAQ7F,KACdC,QAAS4F,EAAQzb,KACjB6E,SAAU,CAAC+Q,EAAM5V,IAAS+uB,EAAQ,CAAEnZ,KAAAA,EAAM5V,KAAAA,IAC1C8V,UAAWA,KC3hBJggB,GAAoC,KAC/C,MAAOC,EAAQC,GAAa,cAAwB,IAC7CC,EAAoBC,GACzB,cAAwB,GAEpBC,EAAqB,aACrBC,EAAiB,aAGvB,MAAM,aAAE/K,GAAiB6D,KAgBzB,MAAMmH,EAAU,CAAC7vB,EAAiB8vB,IACzBA,EACH9vB,EAhBN,SAA4B+vB,GAC1B,MAAMC,EAAa,CAAC,YAAa,aAUjC,OATaxvB,KAAKE,UAChBqvB,GACA,CAAC9yB,EAAKjF,KACgC,IAA7Bg4B,EAAWxlB,QAAQvN,GACtBjF,EACA,IAAIi4B,OAAOj4B,EAAM0H,SAEvB,GAQEwwB,CAAmB1vB,KAAKC,MAAMT,IAa9BhC,EAAU,CAAC4Q,EAAYuhB,KAVH,EAACvhB,EAAYuhB,KACrC,MAAMC,EAAYxhB,EAAMyhB,cAAcC,cAChCC,EAAKn0B,SAASC,cAAc,YAClCk0B,EAAGv4B,MAAQm4B,EAAKK,WAChBJ,EAAUxzB,YAAY2zB,GACtBA,EAAGE,SACHr0B,SAASs0B,YAAY,QACrBN,EAAU1zB,YAAY6zB,IAQtBI,CAAkB/hB,EAAOuhB,GACzBX,GAAU,IAiBNhmB,EACJ,kBAAC,aAAc,KACb,kBAAC,EAAAonB,gBAAe,KACd,kBAAC,EAAAhoB,OAAM,CACLzE,QAAQ,QACRmM,IAAKsf,EAAc,aACR,0BACX5xB,QAAS,IAAM0xB,GAAuBD,IAErCA,EAAqB,kBAAC,EAAAoB,aAAY,MAAM,kBAAC,EAAAC,QAAO,OAEnD,kBAAC,EAAAC,QAAO,CACN7R,QACE,6BACGuQ,EACG,uBACA,wBAGRuB,UAAWpB,KAGf,kBAAC,EAAAgB,gBAAe,KACd,kBAAC,EAAAK,oBAAmB,CAClBz7B,GAAG,cACH07B,OAAO,eAAc,aACV,oBACXlzB,QAAUlC,GAAMkC,EAAQlC,EAAG+zB,EAAQhL,EAAc4K,IACjD0B,UAAW,IACXC,SAAS,QACTjtB,QAAQ,SAEPorB,EAAS,oCAAsC,sBAGpD,kBAAC,EAAAqB,gBAAe,KACd,kBAAC,EAAAhoB,OAAM,CACLzE,QAAQ,QACRmM,IAAKqf,EAAkB,aACZ,gBACX3xB,QAAUlC,IACRu1B,OAvDkBziB,EAuDL9S,EAvDiB/F,EAuDd85B,EAAQhL,EAAc4K,IAvDM,iDACpD,MAAM6B,EAAe1iB,EAAMyhB,cAAcC,cAGnCiB,EAAO,IAAIC,KAAK,CADTz7B,GACiB,CAAEqB,KAAM,qBAChCq6B,QAAaC,IAAIC,gBAAgBJ,GACjCK,EAAOx1B,SAASC,cAAc,KACpCu1B,EAAKH,KAAOA,EACZG,EAAKC,SANQ,uBAObP,EAAa10B,YAAYg1B,GACzBA,EAAKE,QACLR,EAAa50B,YAAYk1B,MAXN,IAAOhjB,EAAY7Y,IA0DhC,kBAAC,EAAAg8B,iBAAgB,OAEnB,kBAAC,EAAAhB,QAAO,CACN7R,QAAS,8CACT8R,UAAWrB,MAKnB,OACE,kBAAC,EAAAqC,UAAS,CAACxoB,QAASA,GAClB,kBAAC,EAAAyoB,cAAa,CAACz8B,GAAG,gBACfq6B,EAAQhL,EAAc4K,MClHxB,SAASyC,K,MACd,MAAM,IAAQ,IAAAp6B,mBACPq6B,EAAYC,IAAiB,IAAA5uB,WAAS,IACtC6uB,EAAgBC,IAAqB,IAAA9uB,UAEzC,CACD1N,UAAU,EACVG,cAAc,EACds8B,WAAW,EACXC,WAAW,IAGPC,EAAkBC,IACtB,IAAIC,EAAe,OAAH,UAAQN,GACxB,OAAQK,EAAIrC,cAAc76B,IACxB,IAAK,WACHm9B,EAAa78B,UAAYu8B,EAAev8B,SACxCw8B,EAAkBK,GAClB,MACF,IAAK,eACHA,EAAa18B,cAAgBo8B,EAAep8B,aAC5Cq8B,EAAkBK,GAClB,MACF,IAAK,YACHA,EAAaJ,WAAaF,EAAeE,UACzCD,EAAkBK,GAClB,MACF,IAAK,YACHA,EAAaH,WAAaH,EAAeG,UACzCF,EAAkBK,MAIlB,MACJv+B,EAAK,QACLC,EAAO,cACPC,EAAa,KACbE,EAAI,MACJG,EAAK,iBACLD,EAAgB,mBAChBD,EAAkB,aAClBowB,EAAY,YACZI,GACEyD,KAEEkK,GAAmB,IAAAhsB,cACvB,IAAMwrB,GAAe9Q,IAAUA,KAC/B,IAGI1mB,EAAS4F,KAAKC,MAAMokB,GACpBtuB,EAAYiK,KAAKC,MAAMokB,GAActuB,UACrCs8B,EAAaryB,KAAKC,MAAMokB,GAAczwB,MAEtC0+B,EAAiB,YAAUl4B,GAAQ,CAAC+H,EAAG1F,IAC7BA,EAAIkG,QAAQ,MAAO,OAG7B4vB,EAAa/6B,GACV,IAAIi4B,OAAOj4B,EAAM0H,QAG1B,OACE,kBAACkpB,GAAc,CACb1lB,MAAOrL,EAAE,UACTuL,YAGMvL,EAFHs6B,EAEK,4BADA,yBAGR1zB,UACE,kBAAC,EAAAu0B,OAAM,CACLx9B,GAAG,mBACHoC,MAAOC,EAAE,kBACTo7B,SAAUp7B,EAAE,kBACZsxB,UAAWgJ,EACX9zB,SAAUu0B,KAId,kBAAC,EAAAn1B,KAAI,KACFwnB,GACC,kBAAC,EAAAiO,UAAS,KACR,kBAAC,EAAAC,MAAK,CACJhvB,QAAQ,SACRjB,MAAO+hB,EAAW,YACR,SACVvS,UAAQ,KAIbyf,EACC,kBAAC7C,GAAc,MAEf,oCACE,kBAAC,EAAArtB,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,wBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GACZvT,EAAqC8O,cAG3C,kBAAC,EAAAnB,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,oBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GAAIzT,EAAMI,OAE5B,kBAAC,EAAAyN,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,iBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GAAIxT,EAAQG,OAG9B,kBAAC,EAAA8I,MAAK,CAACC,aAAa,KAAK/D,KAAM,EAAAgE,WAAA,QAC5B3F,EAAE,UAEL,kBAAC,EAAAoK,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,oBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GAAIrT,IAEtB,kBAAC,EAAAyN,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,UAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GAC+B,QAA3C,EAAAvT,EAAqC6uB,cAAM,eAAE7hB,KAC5ClK,GAASA,OAIf3C,MAAAA,OAAkB,EAAlBA,EAAoBqB,WACnB,kBAAC,EAAAmM,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,eAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GACd,kBAAC,EAAAhP,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACNu5B,EAAev8B,SACZi9B,EAAUt+B,MAAAA,OAAkB,EAAlBA,EAAoBqB,UAC9BrB,MAAAA,OAAkB,EAAlBA,EAAoBqB,UAG1B,kBAAC,EAAAgD,SAAQ,CAACkF,QAASy0B,EAAgBj9B,GAAG,YACnC68B,EAAev8B,SAAW,kBAAC,EAAAg7B,QAAO,MAAM,kBAAC,EAAAD,aAAY,WAM/Dp8B,MAAAA,OAAkB,EAAlBA,EAAoBwB,eACnB,kBAAC,EAAAgM,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,mBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GACd,kBAAC,EAAAhP,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACNu5B,EAAep8B,aACZ88B,EAAUt+B,MAAAA,OAAkB,EAAlBA,EAAoBwB,cAC9BxB,MAAAA,OAAkB,EAAlBA,EAAoBwB,cAG1B,kBAAC,EAAA6C,SAAQ,CAACkF,QAASy0B,EAAgBj9B,GAAG,gBACnC68B,EAAep8B,aACd,kBAAC,EAAA66B,QAAO,MAER,kBAAC,EAAAD,aAAY,UAOzB,kBAAC,EAAAvzB,MAAK,CAACC,aAAa,KAAK/D,KAAM,EAAAgE,WAAA,QAC5B3F,EAAE,uBAEJtB,GACCwK,OAAOM,KAAK9K,GAAW+K,KAAKivB,GAExB,kBAAC,EAAAtuB,KAAI,CAAChF,IAAKszB,GACT,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GACd,gCAAS,cAAY0oB,KAEvB,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GACb,cAAY0oB,KAAQ14B,EAAE,eACvB,cAAY04B,KAAQ14B,EAAE,cACpB,kBAAC,EAAAgB,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACNu5B,EAAe9B,GACZwC,EAAUx8B,EAAUg6B,IACpBh6B,EAAUg6B,IAGhB,kBAAC,EAAAz3B,SAAQ,CAACkF,QAASy0B,EAAgBj9B,GAAI+6B,GACpC8B,EAAe9B,GACd,kBAAC,EAAAO,QAAO,MAER,kBAAC,EAAAD,aAAY,QAKnBt6B,EAAUg6B,OAMrBsC,GACC9xB,OAAOM,KAAKwxB,GAAYvxB,KAAKivB,GAEzB,kBAAC,EAAAtuB,KAAI,CAAChF,IAAKszB,GACT,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GACd,gCAAS,cAAY0oB,KAEvB,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GAAIgrB,EAAWtC,YAIxB3vB,IAAdrK,GACCwK,OAAOM,KAAKyxB,GAAgBxxB,KAAKivB,GAE7B,kBAAC,EAAAtuB,KAAI,CAAChF,IAAKszB,GACT,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GACd,gCAAS,cAAY0oB,KAEvB,kBAAC,EAAA3oB,SAAQ,CAACC,KAAM,GACb,cAAY0oB,KAAQ14B,EAAE,sBACvB,cAAY04B,KAAQ14B,EAAE,YAClBk7B,EAAUD,EAAevC,IACK,iBAAvBuC,EAAevC,GACtB/vB,KAAKE,UAAUoyB,EAAevC,IAC9BuC,EAAevC,OAK5B77B,GACC,oCACE,kBAAC,EAAA4I,MAAK,CAACC,aAAa,KAAK/D,KAAM,EAAAgE,WAAA,QAC5B3F,EAAE,mBAEL,kBAAC,EAAAoK,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAShQ,EAAE,oBAEb,kBAAC,EAAA+P,SAAQ,CAACC,KAAM,GAAInT,IAErBC,GACC,kBAAC,EAAAsN,KAAI,KACH,kBAAC,EAAA2F,SAAQ,CAACC,KAAM,GACd,gCAAS,cAAYlT,KAEvB,kBAAC,EAAAiT,SAAQ,CAACC,KAAM,GAAIlT,QCzIjC,MAAMy+B,GACX,EAAG7pB,QAAAA,MACD,MAAM,IAAQ,IAAAzR,kBAERgd,EAAU2S,MACTlb,EAAOqM,IAAQ,KAAAya,UAASve,GAE/B,IAAI,sBAAE6V,EAAqB,WAAElhB,EAAU,eAAE6pB,IAAmB,KAAA1b,aAC1D9C,GACA,IAAAlO,cACG2F,IASQ,CACLie,UATgBje,EAAMmN,QAAQ,CAC9B4M,mBAAoB,qBASpBmE,UAPgBle,EAAMmN,QAAQ,WAQ9BiR,uBAN+B,IAA/Bpe,EAAMrS,QAAQa,mBACiB6F,IAA/B2L,EAAMrS,QAAQa,aAMd0O,WAAY8C,EAAMrS,QAAQ+rB,wBAC1B1xB,cAAegY,EAAMrS,QAAQ7D,uBAC7Bi9B,eAAgB/mB,EAAMrS,QAAQisB,mBAC9BprB,aAAcwR,EAAMrS,QAAQa,aAC5B2vB,gBAAiBne,EAAMxS,SACpB2wB,mBAGP,CAAC5V,KAGL,MAAMye,EA5JV,WACE,MAAM,EAAE17B,IAAM,IAAAC,kBACRgd,EAAU2S,MACV,SAAErb,EAAQ,UAAEsP,EAAS,WAAEqC,IAAe,KAAAnG,aAC1C9C,GACA,IAAAlO,cACG2F,IAAgC,CAC/BH,SAAUG,EAAMmN,QAAQ,eACxBgC,UACEsK,GAAsB7L,WAAW5N,EAAO,qBACrC6N,SAAW7N,EAAMmN,QAAQ,eAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,WAE9D,CAACtF,KAGL,MAAO,CACLtgB,KAAMqD,EAAE,kBACRuU,SAAAA,EACA3N,UACE,kBAAClE,EAAiB,KAChB,kBAACoyB,GAAmB,OAGxBjR,UAAAA,EACAqC,WAAAA,GAmI0ByV,GACpBC,EAhIV,WACE,MAAM,EAAE57B,IAAM,IAAAC,kBACRgd,EAAU2S,MACV,SAAErb,EAAQ,UAAEsP,EAAS,WAAEqC,IAAe,KAAAnG,aAC1C9C,GACA,IAAAlO,cACG2F,IAAgC,CAC/BH,SAAUG,EAAMmN,QAAQ,sBACxBgC,UACEsK,GAAsB7L,WAAW5N,EAAO,4BACrC6N,SAAW7N,EAAMmN,QAAQ,sBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,QAC5D3Q,WAAY8C,EAAMrS,QAAQ+rB,2BAE5B,CAACnR,KAGL,MAAO,CACLtgB,KAAMqD,EAAE,UACRuU,SAAAA,EACA3N,UACE,kBAAClE,EAAiB,KAChB,kBAACsuB,GAAK,OAGVnN,UAAAA,EACAqC,WAAAA,GAsGkB2V,GACZC,EAnGV,WACE,MAAM,EAAE97B,IAAM,IAAAC,kBACRgd,EAAU2S,MACV,SAAErb,EAAQ,UAAEsP,EAAS,WAAEqC,IAAe,KAAAnG,aAC1C9C,GACA,IAAAlO,cACG2F,IAAgC,CAC/BH,SAAUG,EAAMmN,QAAQ,sBACxBgC,UACEsK,GAAsB7L,WAAW5N,EAAO,4BACrC6N,SAAW7N,EAAMmN,QAAQ,sBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,WAE9D,CAACtF,KAGL,MAAO,CACLtgB,KAAMqD,EAAE,sBACRuU,SAAAA,EACA3N,UACE,kBAAClE,EAAiB,KAChB,kBAACgwB,GAAgB,OAGrB7O,UAAAA,EACAqC,WAAAA,GA0E8B6V,GACxBC,EAvEV,WACE,MAAM,EAAEh8B,IAAM,IAAAC,kBACRgd,EAAU2S,MACV,SAAErb,EAAQ,UAAEsP,EAAS,WAAEqC,IAAe,KAAAnG,aAC1C9C,GACA,IAAAlO,cACG2F,IAAgC,CAC/BH,SAAUG,EAAMmN,QAAQ,sBACxBgC,UACEsK,GAAsB7L,WAAW5N,EAAO,4BACrC6N,SAAW7N,EAAMmN,QAAQ,sBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,QAC5D3Q,WAAY8C,EAAMrS,QAAQ+rB,2BAE5B,CAACnR,KAGL,MAAO,CACLtgB,KAAMqD,EAAE,kBACRuU,SAAAA,EACA3N,UACE,kBAAClE,EAAiB,KAChB,kBAAC8xB,GAAiB,OAGtB3Q,UAAAA,EACAqC,WAAAA,GA6C0B+V,GAE1B,GAAoB,UAAhBvnB,EAAMvU,MAAmB,OAAO,KACpC,MAAM+7B,EAAiBC,GACdhO,GAAsB7L,WAAW5N,EAAO,CAC7CnV,KAAM,2BACN4nB,QAASgV,IACR5Z,QAkCCtf,EAAQ,CACZ,CACEtG,KAAMqD,EAAE,aACRuU,SAAUG,EAAMmN,QAAQ,mBACxBjb,UACE,kBAAClE,EAAiB,KAChB,kBAACuwB,GAAmB,OAGxBpP,UACEsK,GAAsB7L,WAAW5N,EAAO,yBACrC6N,SAAW7N,EAAMmN,QAAQ,mBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,SAE9DmZ,EACA,CACE/+B,KAAMqD,EAAE,eACRuU,SAAUG,EAAMmN,QAAQ,iBACxBjb,UACE,kBAAClE,EAAiB,KAChB,kBAAC+uB,GAAa,OAGlB5N,UACEsK,GAAsB7L,WAAW5N,EAAO,uBACrC6N,SAAW7N,EAAMmN,QAAQ,iBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,SAE9D,CACE5lB,KAAMqD,EAAE,kBACRuU,SAAUG,EAAMmN,QAAQ,sBACxBgC,UACEsK,GAAsB7L,WAAW5N,EAAO,4BACrC6N,SAAW7N,EAAMmN,QAAQ,sBAE9B5e,MAlEiB,MACnB,IAAIm5B,EAAkB,CAACR,GA2BvB,OA1BI9I,QAA4C/pB,IAAnB0yB,GAC3BA,GACIA,EAAehyB,KAAI,CAACgH,EAAM0rB,KACxBC,EAAWjvB,KAAK,CACdxQ,KAAM8T,EACN8D,SACEG,EAAMmN,QAAQ,uBAAyBjQ,IAAeuqB,EACxDv1B,UACE,kBAAClE,EAAiB,KAChB,kBAACgwB,GAAgB,OAGrB7O,UAAWqY,EAAcC,EAAM,GAC/BjW,WAAYiI,GAAsB7L,WAAW5N,EAAO,QACjD6N,eAMTuQ,QAA4C/pB,IAAnB0yB,IACR,IAAnBA,KAEAW,EAAWjvB,KAAK2uB,GAChBM,EAAWjvB,KAAK6uB,IAEXI,GAsCEC,IAET,CACE1/B,KAAMqD,EAAE,UACRuU,SAAUG,EAAMmN,QAAQ,uBACxBjb,UACE,kBAAClE,EAAiB,KAChB,kBAAC23B,GAAM,OAGXxW,UACEsK,GAAsB7L,WAAW5N,EAAO,6BACrC6N,SAAW7N,EAAMmN,QAAQ,uBAC9BqE,WAAYiI,GAAsB7L,WAAW5N,EAAO,QAAQ6N,QAC5D4C,eAAgB,qBAIdrC,EAAiBD,GAAkB5f,GAGnCiiB,EACJpC,EAAewZ,aACb,CAACH,EAAKr7B,EAAGy7B,IACPz7B,EAAEyT,UAAYgoB,EAAaJ,EAAMI,EAAaJ,IAC/C,GACC,EAqCN,OACE,kBAACnZ,GAAkB,CACjBzhB,UAAU,MACV0B,MAAOA,EACPiiB,YAAaA,EACbL,OAxCW,IAAM9D,EAAK,QAyCtB6D,OAxCW,IAAM7D,EAAK,QAyCtBrP,QAASA,EACTlE,OAAQ,KAAM,EACduX,SA1CcyX,IAChB,OAAQA,GACN,KAAK,EACHzb,EAAK,yBACL,MACF,KAAK,EACHA,EAAK,qBACL,MACF,KAAK,EACHA,EAAK,uBACL,MACF,KAAK,EACHA,EAAK,4BACL,MACF,KAAK,EACHA,EAAK,4BACL,MACF,KAAK,EACHA,EAAK,4BACL,MACF,KAAK+B,EAAejb,OAClBkZ,EAAK,6BACL,MACF,QACMyb,EAAY1Z,EAAejb,QAC7BkZ,EAAK,CAAExhB,KAAM,2BAA4B4nB,QAASqV,EAAY,MAkBlExX,aAdiB,IAAIyX,IAAgB34B,QAAQC,IAAI,eAAgB04B,GAejExX,eAdmB,IAAIwX,IACzB34B,QAAQC,IAAI,iBAAkB04B,GAc5B7W,kBAAkB,KCtTb8W,GACX,EAAGlvB,OAAAA,EAAQkE,QAAAA,MACT,MAAM,EAAE1R,IAAM,IAAAC,kBACR8C,GAAS,IAAA+K,aACTkG,GAAW,IAAAC,gBACX,sBAAE5X,EAAqB,SAAE4F,GAAaG,KACrC2L,EAAoBC,IAAyB,IAAArC,WAAS,GAEvDmD,EAAoB,IAAMd,GAAsB,GACtD,OACE,oCACE,kBAAC,EAAA2B,YAAW,CAACrD,QAAS,QAAS4H,iBAAe,GAC5C,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CAACC,GAAIL,MAAAA,OAAQ,EAARA,EAAUM,eAC3BtU,EAAE,eAEL,kBAAC,EAAAoU,eAAc,CAACG,UAAQ,GAAEvU,EAAE,sBAE9B,kBAAC,EAAAwU,MAAK,CAACjT,UAAW,yBAChB,kBAAC,EAAAkE,MAAK,CAACC,aAAa,MAAM1F,EAAE,uBAGhC,kBAAC,EAAA2P,YAAW,CACVkE,QAAS,CAAE1S,QAAS,aACpB0O,MAAO,CAAEiE,OAAQ,GACjBvU,KAAM,UAEN,kBAACmwB,GAA6B,CAC5BtzB,YAAa6F,EACb5F,sBAAuBA,EACvByG,kBAAoBpE,GAClBoE,EAAkBpE,GAAWqE,MAAAA,OAAM,EAANA,EAAQyM,IAAIC,gBAAiB,IAE5DjC,OAAQA,GAER,kBAAC+tB,GAAqB,CAAC7pB,QA5BN,IAAM1D,GAAsB,KA6B7C,kBAAC,EAAAyD,MAAK,CACJpG,MAAOrL,EAAE,eACTsM,QAAS,QACTb,OAAQsC,EACR2D,QAAS5C,EACT6C,QAAS,CACP,kBAAC,EAAAZ,OAAM,CAAC3L,IAAI,UAAUkH,QAAQ,UAAUnG,QAASuL,GAAO,WAGxD,kBAAC,EAAAX,OAAM,CAAC3L,IAAI,SAASkH,QAAQ,OAAOnG,QAAS2I,GAAiB,YAK/D9O,EACC,6ECzDH28B,GAA+C,EAC1D16B,SAAAA,EACA5F,sBAAAA,EACAC,2BAAAA,MAEA,MAAM,EAAE0D,IAAM,IAAAC,kBACR2N,GAAQ,IAAAC,YACRkF,GAAU,IAAAC,cACV4pB,GAAqB,IAAA7tB,cAAY,IAAMgE,EAAQ5F,KAAK,MAAM,CAAC4F,IAC3D8pB,GAAsB,IAAA9tB,cAC1B,IAAMgE,EAAQ5F,KAAK,sBACnB,CAAC4F,IAGG+pB,GAAuB,IAAA/tB,cAC3B,CAACpR,EAAYilB,IACX7P,EAAQ5F,KAAK,CACX4vB,SAAU,IAAIp/B,IACd8U,KAAM,IAAImQ,OAEd,CAAC7P,IAGGiqB,GAAkB,IAAAjuB,cAAY,KAClCnB,MAAAA,GAAAA,EAAOsB,SAAS,CACdvR,GAAI,oBACJ2O,QAAS,EAAA6C,aAAA,QACT9D,MAAOrL,EAAE,6BAEX48B,MACC,CAAChvB,EAAOgvB,EAAoB58B,IAC/B,OACE,kBAACgC,EAAkB,CACjBC,SAAUA,EACV5F,sBAAuBA,EACvBC,2BAA4BA,GAE5B,kBAAC,EAAA6+B,OAAM,KACL,kBAAC,EAAA8B,MAAK,CAACC,KAAM,IAAKC,OAAK,GACrB,kBAAC1b,GAAuB,CACtBC,kBAAmBmb,EACnBlb,kBAAmBmb,KAGvB,kBAAC,EAAAG,MAAK,CAACC,KAAM,qBACX,kBAACR,GAAmB,CAClBlvB,OAAQwvB,EACRtrB,QAASkrB,KAGb,kBAAC,EAAAK,MAAK,CAACC,KAAM,SACX,kBAACtqB,EAAoB,CAACpF,OAAQovB,S,oEC3DjC,MAAMhsB,EAA6B,IACxC,kBAAC,EAAAuJ,WAAU,KACT,kBAAC,EAAAE,eAAc,CAAC/N,QAAQ,YAAY1F,UAAW,EAAAlF,UAC/C,kBAAC,EAAA+D,MAAK,CAAC9D,KAAK,KAAK+D,aAAa,MAAI,a,gICEtC,MAAM03B,EAAkC,CACtCC,GAAI,KAON,QAGO,KAGJC,IAAI,KAEJA,IAAI,EAAAC,kBAGJ55B,KAAK,CAGJ65B,QAAS,CACPC,SAAU,GAAG,kCAEfC,YAAa,KACbC,KAAM,MACNC,OAAO,EAEPC,GAAI,CAAC,UACLC,UAAW,SACXC,YAAa,IACbC,aAAc,IAEdC,cAAe,CACbC,sBAAkBn1B,EAClBo1B,aAAa,EACbx0B,OAAQ,CAACxJ,EAAOwJ,EAAQy0B,KACtB,IAAI,IAAAC,QAAOl+B,IAAUwJ,EAAQ,CAC3B,MAAM20B,EAASF,EAAMhB,EAAQgB,GAAO,IACpC,MAAe,UAAXz0B,GAA2B,IAAAA,QAAWxJ,EAAO,IAAK,CAAEm+B,OAAAA,IACzC,SAAX30B,GAA0B,IAAAA,QAAWxJ,EAAO,OAAQ,CAAEm+B,OAAAA,IAC3C,aAAX30B,GACK,IAAA40B,gBAAep+B,EAAO,IAAItC,KAAQ,CAAEygC,OAAAA,IAC9B,QAAX30B,GACK,IAAA60B,gBAAer+B,EAAO,IAAItC,KAAQ,CACvCygC,OAAAA,EACAG,WAAW,KAGR,IAAA90B,QAAWxJ,EAAOwJ,EAAQ,CAAE20B,OAAAA,IAErC,OAAOn+B,MAKf,QAAe","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepBasic.machine.ts","webpack://cos-ui/./src/app/machines/StepClusters.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepBasic.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepClusters.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios, { CancelTokenSource } from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorCluster,\n  ConnectorClustersApi,\n  ConnectorDesiredState,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchClusters = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorCluster, {}> => {\n  const connectorsAPI = new ConnectorClustersApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    connectorsAPI\n      .listConnectorClusters(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n\n  kafkaManagementApiBasePath: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  kafka,\n  cluster,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n\n  const getOrCreateServiceAccount = async (source: CancelTokenSource) => {\n    if (userServiceAccount) return Promise.resolve(userServiceAccount);\n\n    // the passed service account info is undefined, we have to create a new SA\n    // automatically on behalf of the user\n    const response = await securityAPI.createServiceAccount(\n      {\n        name: `connector-${(connectorType as ObjectReference).id?.replaceAll(\n          /[_\\.]/g,\n          '-'\n        )}-${Date.now()}`,\n      },\n      {\n        cancelToken: source.token,\n      }\n    );\n    return {\n      clientId: response.data.client_id!,\n      clientSecret: response.data.client_secret!,\n    };\n  };\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n    getOrCreateServiceAccount(source)\n      .then(({ clientId, clientSecret }) => {\n        let connectorConfiguration = {};\n        if (userErrorHandler) {\n          connectorConfiguration = {\n            ...configuration,\n            ...{\n              error_handler: {\n                [userErrorHandler]: topic ? { topic: topic } : {},\n              },\n            },\n          };\n        } else {\n          connectorConfiguration = configuration;\n        }\n        const connector: Connector = {\n          kind: 'Connector',\n          name: name,\n          channel: Channel.Stable,\n          deployment_location: {\n            kind: 'addon',\n            cluster_id: cluster.id,\n          },\n          desired_state: ConnectorDesiredState.Ready,\n          connector_type_id: (connectorType as ObjectReference).id!,\n          kafka: {\n            id: kafka.id!,\n            url: kafka.bootstrap_server_host || 'demo',\n          },\n          service_account: {\n            client_id: clientId,\n            client_secret: clientSecret,\n          },\n          connector: connectorConfiguration,\n        };\n        connectorsAPI\n          .createConnector(async, connector, {\n            cancelToken: source.token,\n          })\n          .then(() => {\n            callback({ type: 'success' });\n          })\n          .catch((error) => {\n            if (!axios.isCancel(error)) {\n              callback({\n                type: 'failure',\n                message: error.response.data.reason,\n              });\n            }\n          });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({ type: 'failure', message: error.response.data.reason });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return (\n        <CheckCircleIcon className=\"cos--connectors__table--icon--completed\" />\n      );\n    case 'failed':\n      return (\n        <ExclamationCircleIcon className=\"cos--connectors__table--icon--failed\" />\n      );\n    case 'accepted':\n      return <PendingIcon />;\n    case 'provisioning':\n    case 'preparing':\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Creation in progress\"\n        />\n      );\n    case 'deprovision':\n    case 'deleted':\n      return null;\n  }\n  return <PendingIcon />;\n};\n\nexport enum ConnectorStatuses {\n  Ready = 'ready',\n  Failed = 'failed',\n  Assigning = 'assigning',\n  Assigned = 'assigned',\n  Updating = 'updating',\n  Provisioning = 'provisioning',\n  Deleting = 'deleting',\n  Deleted = 'deleted',\n}\n\nexport function useConnectorStatusLabel(status: string) {\n  const { t } = useTranslation();\n\n  const statusOptions = [\n    { value: ConnectorStatuses.Ready, label: t('Running') },\n    { value: ConnectorStatuses.Failed, label: t('Failed') },\n    { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n    { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n    { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n  ];\n\n  return statusOptions.find((s) => s.value === status)?.label || status;\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","export const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n","import React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        {t('Common')}\n      </Title>\n      <Form>\n        <FormGroup\n          label={t('Connector name')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('Unique name for the connector.')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('Service account')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('Client ID')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"Copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import { Resolver } from '@stoplight/json-ref-resolver';\nimport { createValidator } from '@utils/createValidator';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n  editCase?: boolean;\n};\nconst resolver = new Resolver();\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange, editCase }) => {\n    schema.type = schema.type || 'object';\n    // Suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new JSONSchemaBridge(schema, schemaValidator);\n    const { required } = bridge.schema;\n\n    async function getDataShape(): Promise<any> {\n      const copiedBridge = JSON.parse(JSON.stringify(bridge));\n      let obj: any = [];\n      for (const [key] of Object.entries(\n        copiedBridge.schema.properties.data_shape?.properties\n      )) {\n        const dataShapeReolved = await resolver.resolve(copiedBridge.schema, {\n          jsonPointer: `#/$defs/data_shape/${key}`,\n        });\n        const result = await dataShapeReolved.result;\n        obj = { ...obj, [key]: result };\n      }\n      return obj;\n    }\n\n    const onChangeWizard = async (model: any, isValid: boolean) => {\n      const copiedModel = JSON.parse(JSON.stringify(model));\n      let dataShapePointer: any = [];\n      if (copiedModel.data_shape !== undefined) {\n        dataShapePointer = await getDataShape();\n        const { data_shape } = copiedModel;\n        Object.keys(data_shape).map((key) => {\n          const defaultValue =\n            dataShapePointer[key].properties?.format?.default;\n          if (_.isEmpty(data_shape[key])) {\n            copiedModel.data_shape[key] = { format: defaultValue };\n          }\n        });\n      }\n\n      const requiredEntries = {};\n      for (const [key, value] of Object.entries(copiedModel)) {\n        for (const r in required) {\n          if (key === required[r] && value !== undefined) {\n            const obj = { [key]: value };\n            Object.assign(requiredEntries, obj);\n          }\n        }\n      }\n      const compareRequiredEntriesKeys = (\n        requiredEntries: any,\n        required: any\n      ) => {\n        const aKeys = Object.keys(requiredEntries).sort();\n        const bKeys = required.slice().sort();\n        return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n      };\n      isValid =\n        copiedModel.data_shape === undefined\n          ? compareRequiredEntriesKeys(requiredEntries, required)\n          : compareRequiredEntriesKeys(requiredEntries, required);\n\n      if (isValid) {\n        onChange(copiedModel, isValid);\n      } else {\n        onChange(copiedModel, false);\n      }\n    };\n\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={configuration}\n          onChangeModel={(model: any) => onChangeWizard(model, false)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(bridge.schema.properties).map((key) => {\n            if (!['processors', 'error_handler'].includes(key)) {\n              return (\n                <AutoField\n                  key={key}\n                  name={key}\n                  disabled={\n                    editCase &&\n                    _.find(bridge.schema.properties[key].oneOf, {\n                      format: 'password',\n                    })\n                  }\n                />\n              );\n            }\n            return false;\n          })}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ConfigurationType = {\n  [key: string]: any;\n};\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = JSON.parse(JSON.stringify(configuration));\n  Object.keys(formConfiguration as object).map((key) => {\n    if (_.isEmpty((formConfiguration as { [key: string]: any })[key])) {\n      (formConfiguration as { [key: string]: any })[key] = '';\n    }\n  });\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        {t('Connector specific')}\n      </Title>\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration || {}}\n          onChange={onChange}\n          editCase={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape') {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                <Text component={TextVariants.p}>\n                  {_.isObject((formConfiguration as ConfigurationType)[key])\n                    ? JSON.stringify(\n                        (formConfiguration as ConfigurationType)[key]\n                      )\n                    : (formConfiguration as ConfigurationType)[key]}\n                </Text>\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </>\n  );\n};\n","import { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(Object.keys(configuration)[0]);\n    if (\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        Error handling\n      </Title>\n      <Form>\n        <FormGroup\n          label={t('Error handler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport { ConnectorConfiguratorComponent } from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('something_went_wrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('edit.edit-success'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('Common')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('Connector specific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('Error handling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('Edit Properties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('Cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('Leave page?')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('Leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        {t('Changes you made to the connector properties will not be saved.')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = JSON.parse(JSON.stringify(configuration));\n    Object.keys(formConfiguration as object).map((key) => {\n      if (_.isEmpty((formConfiguration as { [key: string]: any })[key])) {\n        (formConfiguration as { [key: string]: any })[key] = '';\n      }\n    });\n  }\n\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      isViewMode={!isEditMode}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nconst textListItem = (title: string, value?: ReactNode) => (\n  <>\n    {value && (\n      <>\n        <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      </>\n    )}\n  </>\n);\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem('Connector id', connectorData?.id!)}\n          {textListItem('Connector type', connectorData?.connector_type_id)}\n          {textListItem('Kafka_instance', connectorData?.kafka?.id)}\n          {textListItem('Bootstrap server', connectorData?.kafka?.url)}\n          {textListItem(\n            'Targeted OSD Cluster',\n            connectorData?.deployment_location?.cluster_id\n          )}\n          {textListItem('Owner', connectorData?.owner)}\n          {textListItem('Time created', connectorData?.created_at)}\n          {textListItem('Time updated', connectorData?.modified_at)}\n        </TextList>\n      </TextContent>\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('something_went_wrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('Overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('Configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n  const basename = useBasename();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'} hasShadowBottom>\n      <Breadcrumb>\n        <BreadcrumbItem to={basename?.getBasename()}>\n          {t('Connectors')}\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              name={connectorData?.name!}\n              status={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              cluster={connector.deployment_location.cluster_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  cluster: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    cluster,\n    createdAt,\n    modifiedAt,\n    status,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              Connector name\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('Details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <TextContent>\n                  <TextList component={TextListVariants.dl}>\n                    {textListItem('Connector', name)}\n                    {textListItem('Connector Id', id)}\n                    {textListItem('Bootstrap server', bootstrapServer)}\n                    {textListItem('Kafka_instance', kafkaId)}\n                    {textListItem('Targeted OSD Cluster', cluster)}\n                    {textListItem('Owner', owner)}\n                    {textListItem(\n                      'Time created',\n                      <time\n                        title={t('{{date}}', { date: createdAt })}\n                        dateTime={createdAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: createdAt })}\n                      </time>\n                    )}\n                    {textListItem(\n                      'Time updated',\n                      <time\n                        title={t('{{date}}', { date: modifiedAt })}\n                        dateTime={modifiedAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: modifiedAt })}\n                      </time>\n                    )}\n                  </TextList>\n                </TextContent>\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('Name')}</Th>\n          <Th>{t('Connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('Status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: 'Start',\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: 'Stop',\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: 'Delete',\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      title: 'Edit',\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: 'Details',\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('Name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('Type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('Status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnChange = useDebounce(onChange, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(value) =>\n              debouncedOnChange({\n                size: perPage,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n              <ToolbarFilter\n                chips={statuses}\n                deleteChip={onSelectStatus}\n                deleteChipGroup={() => setStatuses([])}\n                categoryName=\"Status\"\n              >\n                <Select\n                  variant={'checkbox'}\n                  aria-label=\"Status\"\n                  onToggle={toggleStatuses}\n                  onSelect={onSelectStatus}\n                  selections={statuses}\n                  isOpen={statusesToggled}\n                  placeholderText=\"Status\"\n                >\n                  {statusMenuItems}\n                </Select>\n              </ToolbarFilter>\n            </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('Delete connector')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('Delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('Something went wrong')}\n      </Title>\n      <EmptyStateBody>\n        {t('There was a problem processing the request. Please try again.')}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport SpaceShuttleIcon from '@patternfly/react-icons/dist/js/icons/space-shuttle-icon';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('Welcome to Managed Connectors')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('Create Connector')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('No results found')}\n      </Title>\n      <EmptyStateBody>\n        <Trans>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('Clear all filters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable onConnectorDetail={onConnectorDetail} />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('Connectors')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n};\n\nconst model = createModel(\n  {\n    name: '',\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount | undefined;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId.length > 0 &&\n            context.userServiceAccount.clientSecret.length > 0,\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { fetchClusters } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorCluster } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorCluster>;\n  selectedCluster?: ConnectorCluster;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectCluster: (payload: { selectedCluster: string }) => ({\n        ...payload,\n      }),\n      deselectCluster: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<ConnectorCluster, {}, ConnectorCluster>(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectCluster = model.assign(\n  {\n    selectedCluster: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedCluster\n      );\n    },\n  },\n  'selectCluster'\n);\nconst reset = model.assign(\n  {\n    selectedCluster: undefined,\n  },\n  'deselectCluster'\n);\n\nexport const clustersMachine = model.createMachine(\n  {\n    id: 'clusters',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<ConnectorCluster, {}, ConnectorCluster>(\n                  fetchClusters(context),\n                  (i) => i\n                ),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noClusterSelected' },\n                  { target: 'valid', cond: 'clusterSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectCluster: {\n                    target: 'valid',\n                    actions: selectCluster,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectCluster: {\n                    target: 'verify',\n                    actions: selectCluster,\n                    cond: (_, event) => event.selectedCluster !== undefined,\n                  },\n                  deselectCluster: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'clusterSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedCluster: (context: Context) => context.selectedCluster,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      clusterSelected: (context) => context.selectedCluster !== undefined,\n      noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n  }\n);\n\nexport type ClustersMachineActorRef = ActorRefFrom<typeof clustersMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  isViewMode?: boolean;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst reset = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  cluster: context.cluster,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.kafka,\n              cluster: context.cluster,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepBasic.machine';\nimport { clustersMachine } from '@app/machines/StepClusters.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedCluster?: ConnectorCluster;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: () => void;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectCluster: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedConnector: context.selectedConnector,\n          }),\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((_context, event) => ({\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10,\n            },\n          }),\n          onDone: {\n            target: 'selectCluster',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectCluster: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectClusterRef',\n          src: clustersMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedCluster: context.selectedCluster,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedCluster: (_, event) => event.data.selectedCluster,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectClusterRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => ({\n                connector: context.selectedConnector,\n              }),\n              onDone: {\n                target: 'configure',\n                actions: assign((_context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => ({\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false,\n              }),\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((_, event) => ({\n                name: event.data.name,\n                userServiceAccount: event.data.userServiceAccount,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectCluster',\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connector: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((_, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((_, event) => ({\n                connectorConfiguration: event.data,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectCluster: {\n        target: 'selectCluster',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isClusterSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isClusterSelected: (context) => context.selectedCluster !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId?.length > 0 &&\n            context.userServiceAccount.clientSecret?.length > 0,\n\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave();\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepBasic.machine';\nimport { ClustersMachineActorRef } from '@app/machines/StepClusters.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  onSave: () => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  clusterRef: ClustersMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        clusterRef: state.children.selectClusterRef as ClustersMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useClustersMachineIsReady = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  return useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [clusterRef]\n    )\n  );\n};\n\nexport const useClustersMachine = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorCluster, {}, ConnectorCluster>(\n    clusterRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorCluster, {}, ConnectorCluster>\n  );\n  const { selectedId } = useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => ({\n        selectedId: state.context.selectedCluster?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedCluster: string) => {\n      clusterRef.send({ type: 'selectCluster', selectedCluster });\n    },\n    [clusterRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      clusterRef.send({ type: 'api.query', ...request });\n    },\n    [clusterRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, serviceAccount } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount | undefined) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    onSetName,\n    onSetServiceAccount,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        cluster: state.context.cluster,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n  };\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  Radio,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport function Basic() {\n  const { t } = useTranslation();\n  const { name, serviceAccount, onSetName, onSetServiceAccount } =\n    useBasicMachine();\n\n  return (\n    <StepBodyLayout title={t('Common')} description={t('basicStepDescription')}>\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label=\"Name\"\n            isRequired\n            fieldId=\"name\"\n            helperText=\"Please provide a unique name for the connector\"\n            className=\"pf-u-mb-0\"\n          >\n            <TextInput value={name} onChange={onSetName} id=\"name\" />\n          </FormGroup>\n          <FormGroup\n            label=\"Service account\"\n            isRequired\n            fieldId=\"service-account\"\n            className=\"pf-u-mb-0\"\n          >\n            <Radio\n              isChecked={serviceAccount === undefined}\n              name=\"service-account\"\n              onChange={() => onSetServiceAccount(undefined)}\n              label=\"Automatically create a service account for this connector.\"\n              id=\"service-account-automatic\"\n              value=\"automatic\"\n            />\n            <Radio\n              isChecked={serviceAccount !== undefined}\n              name=\"service-account\"\n              onChange={() =>\n                onSetServiceAccount({ clientId: '', clientSecret: '' })\n              }\n              label=\"Provide the credentials manually.\"\n              id=\"service-account-user\"\n              value=\"user\"\n            />\n            {serviceAccount !== undefined && (\n              <>\n                <FormGroup\n                  label=\"Client ID\"\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label=\"Client Secret\"\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </FormGroup>\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClusterIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoOSDClusterProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoOSDCluster: FunctionComponent<EmptyStateNoOSDClusterProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={ClusterIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No OSD Cluster available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useClustersMachineIsReady,\n  useClustersMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoOSDCluster } from '@app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { useDebounce } from '@utils/useDebounce';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent, // ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport function SelectCluster() {\n  const isReady = useClustersMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const history = useHistory();\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useClustersMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('OSD cluster')}\n      description={t('clusterStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoOSDCluster\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst ClustersToolbar: FunctionComponent = () => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useClustersMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {/* <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('createClustersInstance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup> */}\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useClustersMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n}> = ({ actor, Configurator }) => {\n  const { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n}> = ({ actor }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <JsonSchemaConfigurator\n      schema={(connector as ConnectorTypeAllOf).schema!}\n      configuration={configuration || {}}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n\n  return (\n    <StepBodyLayout\n      title={t('Configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                />\n              </React.Suspense>\n            );\n          default:\n            return <ConnectedJsonSchemaConfigurator actor={configuratorRef} />;\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((c) => (\n                      <Card\n                        isHoverable\n                        key={(c as ObjectReference).id}\n                        isSelectable\n                        isSelected={selectedId === (c as ObjectReference).id}\n                        onClick={() => onSelect((c as ObjectReference).id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>\n                            {(c as ConnectorTypeAllOf).name}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).description}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Version</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).version}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>ID</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ObjectReference).id}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\n\nconst ConnectorTypesToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ConnectorTypesPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => onQuery({ page, size })}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const { connector, topic, errorHandler, onSetTopic, onSetErrorHandler } =\n    useErrorHandlingMachine();\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  return (\n    <StepBodyLayout\n      title={t('Error handler')}\n      description={t(\n        'Configure error handling stop, log and dead letter queues'\n      )}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('Error handler')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label=\"Dead Letter Topic Name\"\n              isRequired\n              fieldId=\"topic\"\n              helperText=\"The name of the Kafka topic used as dead letter queue\"\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { SpaceShuttleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No Kafka instance available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\n// import { useBasename } from '@rhoas/app-services-ui-shared';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const basename = useBasename();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Kafka instance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('Filter by status')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('CloudProvider')}\n          showToolbarItem={selectedCategory === t('CloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('CloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('Filter by cloud provider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('Filter by region')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('Create Kafka instance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('Review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('ViewJSONFormat')}\n          labelOff={t('ViewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Connector category')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Kafka instance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('OSD Cluster')}</strong>\n              </GridItem>\n              <GridItem span={8}>{cluster.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('Basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Connector name')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('Client ID')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('Client Secret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('Connector specific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('Access Key') ||\n                      _.startCase(el) === t('Secret Key') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('Database Password') ||\n                      _.startCase(el) === t('Password')\n                        ? maskValue(modifiedObject[el])\n                        : typeof modifiedObject[el] === 'object'\n                        ? JSON.stringify(modifiedObject[el])\n                        : modifiedObject[el]}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Error handling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Error handling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(topic)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { Basic } from '@app/pages/CreateConnectorPage/StepBasic';\nimport { SelectCluster } from '@app/pages/CreateConnectorPage/StepClusters';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Kafka instance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Common'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <Basic />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Connector Specific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Error handling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('Connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('OSD cluster'),\n        isActive: state.matches('selectCluster'),\n        component: (\n          <StepErrorBoundary>\n            <SelectCluster />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('selectCluster'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('Configurations'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('Review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: 'Create connector',\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectCluster');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: () => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('Connectors')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('Create connector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('Create connector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t(\n                'Changes you have made will be lost and no connector will be created.'\n              )}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(() => {\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('wizard.creation-success'),\n    });\n    goToConnectorsList();\n  }, [alert, goToConnectorsList, t]);\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["saveConnector","accessToken","connectorsApiBasePath","kafkaManagementApiBasePath","kafka","cluster","connectorType","configuration","name","userServiceAccount","userErrorHandler","topic","connectorsAPI","ConnectorsApi","Configuration","basePath","securityAPI","SecurityApi","callback","source","Promise","resolve","response","createServiceAccount","id","replaceAll","Date","now","cancelToken","token","clientId","data","client_id","clientSecret","client_secret","getOrCreateServiceAccount","then","connectorConfiguration","error_handler","connector","kind","channel","Channel","deployment_location","cluster_id","desired_state","ConnectorDesiredState","connector_type_id","url","bootstrap_server_host","service_account","createConnector","type","catch","error","message","reason","cancel","ConnectorStatus","status","label","t","useTranslation","statusOptions","value","ConnectorStatuses","Ready","Failed","Assigning","Assigned","Updating","Provisioning","Deleting","Deleted","find","s","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","size","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","children","Provider","useCos","context","useContext","Error","ErrorFallback","role","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","fetchConfigurator","config","defaultConfig","steps","Configurator","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","console","log","loadFederatedConfigurator","e","maybeConfiguration","split","maybeConf","reject","element","document","createElement","src","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","CommonStep","editMode","changeIsValid","onUpdateConfiguration","Title","headingLevel","TitleSizes","Form","FormGroup","isRequired","fieldId","labelIcon","Popover","bodyContent","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","component","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","schema","validator","compile","model","errors","length","details","resolver","Resolver","JsonSchemaConfigurator","editCase","properties","schemaValidator","bridge","JSONSchemaBridge","required","onChangeWizard","isValid","copiedModel","JSON","parse","stringify","dataShapePointer","undefined","data_shape","copiedBridge","Object","entries","dataShapeReolved","jsonPointer","result","getDataShape","keys","map","defaultValue","format","requiredEntries","r","assign","compareRequiredEntriesKeys","aKeys","sort","bKeys","slice","Grid","hasGutter","KameletForm","onChangeModel","includes","AutoField","disabled","oneOf","Auto","parent","_","AutoForm","super","ValidatedQuickForm","ConfigurationStep","formConfiguration","filter","title","replace","description","ErrorHandlerStep","isOpen","setOpen","useState","setTopic","errorHandler","setErrorHandler","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","variant","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","push","diff","reduce","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","onError","addAlert","AlertVariant","onSuccess","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","step","index","fallback","Loading","ConnectedCustomConfigurator","isEditMode","Button","hasShadowTop","connectorUpdate","connectorId","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","actions","activeStep","isViewMode","textListItem","TextListItem","TextListItemVariants","OverviewPage","TextContent","TextList","TextListVariants","owner","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","getConnector","connectorTypeId","ConnectorTypesApi","getConnectorTypeByID","getConnectorTypeDetail","ConnectorDetailsHeader","padding","zIndex","Overview","basename","useBasename","hasShadowBottom","Breadcrumb","BreadcrumbItem","to","getBasename","isActive","Level","LevelItem","state","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","bootstrapServer","kafkaId","createdAt","modifiedAt","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","date","dateTime","toISOString","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","openDetail","isSeparator","event","target","Td","dataLabel","isVisitedLink","items","Pagination","itemCount","page","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","ConnectorsToolbar","searchInputRef","useRef","debouncedOnChange","toggleGroupItems","ToolbarItem","InputGroup","ref","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","Stack","StackItem","Trans","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","_context","connectorMachine","createMachine","initial","initialContext","states","verify","always","cond","ready","on","stopped","deleted","startingConnector","invoke","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","makePaginatedApiMachine","service","dataTransformer","options","request","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","send","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","props","ConnectedConnectorsPage","onCreateConnector","onConnectorDetail","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","ConnectorsPageTitle","isFilled","Card","ConnectedTable","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","UncontrolledWizard","Component","constructor","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","content","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","setName","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","clusters","selectedCluster","selectCluster","deselectCluster","clustersMachine","ConnectorClustersApi","listConnectorClusters","fetchClusters","selecting","clusterSelected","noClusterSelected","version","isActiveStepValid","change","next","prev","complete","changedStep","nextStep","min","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","configuratorLoaderMachine","onDone","failure","escalate","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","fetchConnectorTypes","connectorSelected","noConnectorSelected","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","initialConfiguration","configString","save","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectCluster","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","configureConnector","loadConfigurator","configure","submittable","invalid","basicConfiguration","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isClusterSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","clusterRef","selectClusterRef","basicRef","errorRef","reviewRef","useClustersMachine","getSnapshot","selectedId","onQuery","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","StepBodyLayout","Basic","onSetName","onSetServiceAccount","useBasicMachine","helperText","Radio","isChecked","EmptyStateNoOSDCluster","ClusterIcon","SelectCluster","useClustersMachineIsReady","ClustersGallery","ClustersToolbar","Gallery","isHoverable","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","debouncedOnQuery","ClustersPagination","ConnectedJsonSchemaConfigurator","ConfiguratorStep","isLoading","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","categoriesToggled","setCategoriesToggled","nameInputRef","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","EmptyStateNoKafkaInstances","SpaceShuttleIcon","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","showToolbarItem","placeholder","KafkasPagination","ViewJSONFormat","copied","setCopied","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","Tooltip","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","href","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","Alert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}