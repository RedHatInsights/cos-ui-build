{"version":3,"file":"55.9e12844e.js","mappings":"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","sources":["webpack://cos-ui/./src/api.ts","webpack://cos-ui/./src/Connector.machine.ts","webpack://cos-ui/./src/ConnectorStatus.tsx","webpack://cos-ui/./src/ConnectorDrawer.tsx","webpack://cos-ui/./src/PaginatedResponse.machine.ts","webpack://cos-ui/./src/constants.tsx","webpack://cos-ui/./src/ConnectorsPage.machine.ts","webpack://cos-ui/./src/ConnectorsPageContext.tsx","webpack://cos-ui/./src/ConnectorsTable.tsx","webpack://cos-ui/./src/Pagination.tsx","webpack://cos-ui/./src/useDebounce.ts","webpack://cos-ui/./src/ConnectorsToolbar.tsx","webpack://cos-ui/./src/CosContext.tsx","webpack://cos-ui/./src/DialogDeleteConnector.tsx","webpack://cos-ui/./src/EmptyStateGenericError.tsx","webpack://cos-ui/./src/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/ConnectorsPage.tsx","webpack://cos-ui/./src/StepBasic.machine.ts","webpack://cos-ui/./src/StepClusters.machine.ts","webpack://cos-ui/./src/StepConfigurator.machine.ts","webpack://cos-ui/./src/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/StepKafkas.machine.ts","webpack://cos-ui/./src/StepReview.machine.ts","webpack://cos-ui/./src/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/StepBodyLayout.tsx","webpack://cos-ui/./src/StepBasic.tsx","webpack://cos-ui/./src/EmptyStateNoOSDCluster.tsx","webpack://cos-ui/./src/StepClusters.tsx","webpack://cos-ui/./src/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/StepConfigurator.tsx","webpack://cos-ui/./src/stringToChip.tsx","webpack://cos-ui/./src/StepConnectorTypes.tsx","webpack://cos-ui/./src/StepErrorBoundary.tsx","webpack://cos-ui/./src/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/StepKafkas.tsx","webpack://cos-ui/./src/ViewJSONFormat.tsx","webpack://cos-ui/./src/StepReview.tsx","webpack://cos-ui/./src/UncontrolledWizard.tsx","webpack://cos-ui/./src/CreateConnectorWizard.tsx","webpack://cos-ui/./src/loadFederatedConfigurator.ts","webpack://cos-ui/./src/CreateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/Loading.tsx","webpack://cos-ui/./src/i18n.ts"],"sourcesContent":["import axios, { CancelTokenSource } from 'axios';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Configuration,\n  Connector,\n  ConnectorCluster,\n  ConnectorClustersApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypesApi,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\nimport { ApiCallback } from './PaginatedResponse.machine';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: 'ready',\n        },\n        undefined,\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: 'stopped',\n        },\n        undefined,\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, undefined, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchClusters = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorCluster, {}> => {\n  const connectorsAPI = new ConnectorClustersApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    connectorsAPI\n      .listConnectorClusters(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .listConnectorTypes('1', '1000', {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) => c.name?.toLowerCase().includes(lcName))\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (c.labels?.filter((l) => categories.includes(l)) || [])\n                    .length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n  kafkaManagementApiBasePath: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  kafka,\n  cluster,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n\n  const getOrCreateServiceAccount = async (source: CancelTokenSource) => {\n    if (userServiceAccount) return Promise.resolve(userServiceAccount);\n\n    // the passed service account info is undefined, we have to create a new SA\n    // automatically on behalf of the user\n    const response = await securityAPI.createServiceAccount(\n      {\n        name: `connector-${connectorType.id?.replaceAll(\n          /[_\\.]/g,\n          '-'\n        )}-${Date.now()}`,\n      },\n      {\n        cancelToken: source.token,\n      }\n    );\n    return {\n      clientId: response.data.client_id!,\n      clientSecret: response.data.client_secret!,\n    };\n  };\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n    getOrCreateServiceAccount(source).then(({ clientId, clientSecret }) => {\n      const connector: Connector = {\n        kind: 'Connector',\n        metadata: {\n          name,\n          kafka_id: kafka.id,\n        },\n        deployment_location: {\n          kind: 'addon',\n          cluster_id: cluster.id,\n        },\n        connector_type_id: connectorType.id,\n        kafka: {\n          bootstrap_server: kafka.bootstrap_server_host || 'demo',\n          client_id: clientId,\n          client_secret: clientSecret,\n        },\n        connector_spec: configuration,\n      };\n      connectorsAPI\n        .createConnector(async, connector, {\n          cancelToken: source.token,\n        })\n        .then(() => {\n          callback({ type: 'success' });\n        })\n        .catch((error) => {\n          if (!axios.isCancel(error)) {\n            callback({ type: 'failure', message: error.response.data.reason });\n          }\n        });\n    });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { deleteConnector, startConnector, stopConnector } from './api';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return (\n        <CheckCircleIcon className=\"cos--connectors__table--icon--completed\" />\n      );\n    case 'failed':\n      return (\n        <ExclamationCircleIcon className=\"cos--connectors__table--icon--failed\" />\n      );\n    case 'accepted':\n      return <PendingIcon />;\n    case 'provisioning':\n    case 'preparing':\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Creation in progress\"\n        />\n      );\n    case 'deprovision':\n    case 'deleted':\n      return null;\n  }\n  return <PendingIcon />;\n};\n\nexport enum ConnectorStatuses {\n  Ready = 'ready',\n  Failed = 'failed',\n  Assigning = 'assigning',\n  Assigned = 'assigned',\n  Updating = 'updating',\n  Provisioning = 'provisioning',\n  Deleting = 'deleting',\n  Deleted = 'deleted',\n}\n\nexport function useConnectorStatusLabel(status: string) {\n  const { t } = useTranslation();\n\n  const statusOptions = [\n    { value: ConnectorStatuses.Ready, label: t('Running') },\n    { value: ConnectorStatuses.Failed, label: t('Failed') },\n    { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n    { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n    { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n  ];\n\n  return statusOptions.find((s) => s.value === status)?.label || status;\n}\n","import React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { AddonClusterTarget, Connector } from '@rhoas/connector-management-sdk';\n\nimport './ConnectorDrawer.css';\nimport { ConnectorStatus } from './ConnectorStatus';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.metadata!.name!}\n              bootstrapServer={connector.kafka!.bootstrap_server!}\n              kafkaId={connector.metadata!.kafka_id!}\n              owner={connector.metadata!.owner!}\n              cluster={\n                (connector.deployment_location as AddonClusterTarget)\n                  .cluster_id!\n              }\n              createdAt={new Date(connector.metadata!.created_at!)}\n              updatedAt={new Date(connector.metadata!.updated_at!)}\n              status={connector.status!}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  cluster: string;\n  createdAt: Date;\n  updatedAt: Date;\n  status: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    cluster,\n    createdAt,\n    updatedAt,\n    status,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              Connector name\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('Details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <TextContent>\n                  <TextList component={TextListVariants.dl}>\n                    {textListItem('Bootstrap server', bootstrapServer)}\n                    {textListItem('Connector', name)}\n                    {textListItem('Kafka_instance', kafkaId)}\n                    {textListItem('Targeted OSD Cluster', cluster)}\n                    {textListItem('Owner', owner)}\n                    {textListItem(\n                      'Time created',\n                      <time\n                        title={t('{{date}}', { date: createdAt })}\n                        dateTime={createdAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: createdAt })}\n                      </time>\n                    )}\n                    {textListItem(\n                      'Time updated',\n                      <time\n                        title={t('{{date}}', { date: updatedAt })}\n                        dateTime={updatedAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: updatedAt })}\n                      </time>\n                    )}\n                  </TextList>\n                </TextContent>\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { fetchConnectors } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorMachineActorRef } from './Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from './ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from './PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport { ConnectorStatus } from './ConnectorStatus';\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('Name')}</Th>\n          <Th>{t('Connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('Status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  onSelect,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: 'Start',\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: 'Stop',\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: 'Delete',\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: 'Details',\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('Name')}>{name}</Td>\n      <Td dataLabel={t('Type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('Status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { Pagination, PaginationProps } from './Pagination';\nimport { useDebounce } from './useDebounce';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnChange = useDebounce(onChange, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(value) =>\n              debouncedOnChange({\n                size: perPage,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n              <ToolbarFilter\n                chips={statuses}\n                deleteChip={onSelectStatus}\n                deleteChipGroup={() => setStatuses([])}\n                categoryName=\"Status\"\n              >\n                <Select\n                  variant={'checkbox'}\n                  aria-label=\"Status\"\n                  onToggle={toggleStatuses}\n                  onSelect={onSelectStatus}\n                  selections={statuses}\n                  isOpen={statusesToggled}\n                  placeholderText=\"Status\"\n                >\n                  {statusMenuItems}\n                </Select>\n              </ToolbarFilter>\n            </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"toolbar-group-types\" collapseListedFiltersBreakpoint=\"xl\">\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('Delete connector')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('Delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('Something went wrong')}\n      </Title>\n      <EmptyStateBody>\n        {t('There was a problem processing the request. Please try again.')}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport SpaceShuttleIcon from '@patternfly/react-icons/dist/js/icons/space-shuttle-icon';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('Welcome to Managed Connectors')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('Create Connector')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('No results found')}\n      </Title>\n      <EmptyStateBody>\n        <Trans>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('Clear all filters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorMachineActorRef, useConnector } from './Connector.machine';\nimport { ConnectorDrawer } from './ConnectorDrawer';\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\nimport { ConnectorsTable, ConnectorsTableRow } from './ConnectorsTable';\nimport { ConnectorsToolbar } from './ConnectorsToolbar';\nimport { useCos } from './CosContext';\nimport { DialogDeleteConnector } from './DialogDeleteConnector';\nimport { EmptyStateGenericError } from './EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from './EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage onCreateConnector={onCreateConnector} />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody onCreateConnector={onCreateConnector} />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('Connectors')}</Title>\n    </TextContent>\n  );\n};\n\nexport const ConnectedTable: FunctionComponent = () => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.metadata?.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.metadata!.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { UserProvidedServiceAccount } from './api';\n\ntype Context = {\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n};\n\nconst model = createModel(\n  {\n    name: '',\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount | undefined;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId.length > 0 &&\n            context.userServiceAccount.clientSecret.length > 0,\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorCluster } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { fetchClusters } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorCluster>;\n  selectedCluster?: ConnectorCluster;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectCluster: (payload: { selectedCluster: string }) => ({\n        ...payload,\n      }),\n      deselectCluster: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<KafkaRequest, {}, KafkaRequest>(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectCluster = model.assign(\n  {\n    selectedCluster: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedCluster\n      );\n    },\n  },\n  'selectCluster'\n);\nconst reset = model.assign(\n  {\n    selectedCluster: undefined,\n  },\n  'deselectCluster'\n);\n\nexport const clustersMachine = model.createMachine(\n  {\n    id: 'clusters',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<KafkaRequest, {}, KafkaRequest>(\n                  fetchClusters(context),\n                  (i) => i\n                ),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noClusterSelected' },\n                  { target: 'valid', cond: 'clusterSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectCluster: {\n                    target: 'valid',\n                    actions: selectCluster,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectCluster: {\n                    target: 'verify',\n                    actions: selectCluster,\n                    cond: (_, event) => event.selectedCluster !== undefined,\n                  },\n                  deselectCluster: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'clusterSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedCluster: (context: Context) => context.selectedCluster,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      clusterSelected: (context) => context.selectedCluster !== undefined,\n      noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n  }\n);\n\nexport type ClustersMachineActorRef = ActorRefFrom<typeof clustersMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype ConnectorTypePatched = Omit<ConnectorType, 'json_schema'> & {\n  schema: ConnectorType['json_schema'];\n};\ntype Context = {\n  connector: ConnectorTypePatched;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { ConnectorTypesQuery, fetchConnectorTypes } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\nimport { KafkasQuery, fetchKafkaInstances } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst reset = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport { saveConnector, UserProvidedServiceAccount } from './api';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  cluster: context.cluster,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.kafka,\n              cluster: context.cluster,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction mapToObject(inputMap: Map<string, unknown>) {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport { basicMachine } from './StepBasic.machine';\nimport { clustersMachine } from './StepClusters.machine';\nimport { configuratorMachine } from './StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from './StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from './StepConnectorTypes.machine';\nimport { kafkasMachine } from './StepKafkas.machine';\nimport { reviewMachine } from './StepReview.machine';\nimport { UserProvidedServiceAccount } from './api';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedCluster?: ConnectorCluster;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  onSave?: () => void;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectCluster: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedConnector: context.selectedConnector,\n          }),\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((_context, event) => ({\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10,\n            },\n          }),\n          onDone: {\n            target: 'selectCluster',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectCluster: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectClusterRef',\n          src: clustersMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedCluster: context.selectedCluster,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedCluster: (_, event) => event.data.selectedCluster,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectClusterRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => ({\n                connector: context.selectedConnector,\n              }),\n              onDone: {\n                target: 'configure',\n                actions: assign((_context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => ({\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false,\n              }),\n              onDone: {\n                target: '#creationWizard.reviewConfiguration', // incase of Basic\n                actions: assign((_, event) => ({\n                  connectorConfiguration: event.data.configuration || true,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n          }),\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((_, event) => ({\n                name: event.data.name,\n                userServiceAccount: event.data.userServiceAccount,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectCluster',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n          }),\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((_, event) => ({\n                connectorConfiguration: event.data,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectCluster: {\n        target: 'selectCluster',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isClusterSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isClusterSelected: (context) => context.selectedCluster !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId?.length > 0 &&\n            context.userServiceAccount.clientSecret?.length > 0,\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave();\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from './CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from './PaginatedResponse.machine';\nimport { BasicMachineActorRef } from './StepBasic.machine';\nimport { ClustersMachineActorRef } from './StepClusters.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from './StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from './StepConnectorTypes.machine';\nimport { KafkaMachineActorRef } from './StepKafkas.machine';\nimport { ReviewMachineActorRef } from './StepReview.machine';\nimport {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  onSave: () => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  clusterRef: ClustersMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        clusterRef: state.children.selectClusterRef as ClustersMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useClustersMachineIsReady = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  return useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [clusterRef]\n    )\n  );\n};\n\nexport const useClustersMachine = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorCluster, {}, ConnectorCluster>(\n    clusterRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorCluster, {}, ConnectorCluster>\n  );\n  const { selectedId } = useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => ({\n        selectedId: state.context.selectedCluster?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedCluster: string) => {\n      clusterRef.send({ type: 'selectCluster', selectedCluster });\n    },\n    [clusterRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      clusterRef.send({ type: 'api.query', ...request });\n    },\n    [clusterRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: state.context.selectedConnector?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, serviceAccount } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount | undefined) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    onSetName,\n    onSetServiceAccount,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        cluster: state.context.cluster,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  };\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-u-p-md pf-l-stack__item'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n\n      <div className={'pf-l-stack__item pf-l-stack pf-m-fill'}>{children}</div>\n    </div>\n  );\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  Radio,\n  TextInput,\n} from '@patternfly/react-core';\n\nimport { useBasicMachine } from './CreateConnectorWizardContext';\nimport { StepBodyLayout } from './StepBodyLayout';\n\nexport function Basic() {\n  const { t } = useTranslation();\n\n  const { name, serviceAccount, onSetName, onSetServiceAccount } =\n    useBasicMachine();\n\n  return (\n    <StepBodyLayout title={t('Common')} description={t('basicStepDescription')}>\n      <Card>\n        <CardBody>\n          <Form>\n            <FormGroup\n              label=\"Name\"\n              isRequired\n              fieldId=\"name\"\n              helperText=\"Please provide a unique name for the connector\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label=\"Service account\"\n              isRequired\n              fieldId=\"service-account\"\n            >\n              <Radio\n                isChecked={serviceAccount === undefined}\n                name=\"service-account\"\n                onChange={() => onSetServiceAccount(undefined)}\n                label=\"Automatically create a service account for this connector.\"\n                id=\"service-account-automatic\"\n                value=\"automatic\"\n              />\n              <Radio\n                isChecked={serviceAccount !== undefined}\n                name=\"service-account\"\n                onChange={() =>\n                  onSetServiceAccount({ clientId: '', clientSecret: '' })\n                }\n                label=\"Provide the credentials manually.\"\n                id=\"service-account-user\"\n                value=\"user\"\n              />\n              {serviceAccount !== undefined && (\n                <>\n                  <FormGroup label=\"Client ID\" isRequired fieldId=\"clientId\">\n                    <TextInput\n                      value={serviceAccount.clientId}\n                      onChange={(clientId) =>\n                        onSetServiceAccount({ ...serviceAccount, clientId })\n                      }\n                      id=\"clientId\"\n                    />\n                  </FormGroup>\n                  <FormGroup\n                    label=\"Client Secret\"\n                    isRequired\n                    fieldId=\"clientSecret\"\n                  >\n                    <TextInput\n                      value={serviceAccount.clientSecret}\n                      onChange={(clientSecret) =>\n                        onSetServiceAccount({ ...serviceAccount, clientSecret })\n                      }\n                      id=\"clientSecret\"\n                    />\n                  </FormGroup>\n                </>\n              )}\n            </FormGroup>\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClusterIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoOSDClusterProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoOSDCluster: FunctionComponent<EmptyStateNoOSDClusterProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={ClusterIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No OSD Cluster available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent, // ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useClustersMachineIsReady,\n  useClustersMachine,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { EmptyStateNoOSDCluster } from './EmptyStateNoOSDCluster';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { useDebounce } from './useDebounce';\n\nexport function SelectCluster() {\n  const isReady = useClustersMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const history = useHistory();\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useClustersMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Select an OSD cluster')}\n      description={t('clusterStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoOSDCluster\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.metadata?.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.metadata?.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.metadata?.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst ClustersToolbar: FunctionComponent = () => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useClustersMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {/* <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('createClustersInstance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup> */}\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useClustersMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import Ajv, { ValidateFunction } from 'ajv';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\nimport { AutoFields, SubmitField } from 'uniforms-patternfly';\n\nimport { Card, CardBody } from '@patternfly/react-core';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\n\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange }) => {\n    schema.type = schema.type || 'object';\n    // suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n    const schemaValidator = createValidator(schema);\n    const bridge = new JSONSchemaBridge(schema, schemaValidator);\n    return (\n      <KameletForm\n        schema={bridge}\n        model={configuration}\n        onChangeModel={(model: any) => onChange(model, false)}\n        onSubmit={(model: any) => onChange(model, true)}\n        // autosave\n        // autosaveDelay={0}\n      >\n        <AutoFields />\n\n        <Card isPlain>\n          <CardBody>\n            {/*\n            // @ts-expect-error */}\n            <SubmitField value={'Verify configuration'} />\n          </CardBody>\n        </Card>\n        {/* <WizardNext onChange={onChange} /> */}\n      </KameletForm>\n    );\n  };\n\n// const WizardNext: FunctionComponent<{\n//   onChange: (data: unknown, isValid: boolean) => void;\n// }> = ({ onChange }) => {\n//   const { changed, submitted, error, model } = useForm();\n//   const isValid = !error;\n//   const prevChangeModel = useRef<DeepPartial<unknown>>();\n//   useEffect(() => {\n//     if (prevChangeModel.current !== model && changed && submitted) {\n//       prevChangeModel.current = model;\n//       onChange(, isValid);\n//     }\n//   }, [prevChangeModel, changed, submitted, isValid, model, onChange]);\n//   return null;\n// };\n\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n\n      super.onChange(key, value);\n    }\n  }\n\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from './JsonSchemaConfigurator';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { ConfiguratorActorRef } from './StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from './StepConfiguratorLoader.machine';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n}> = ({ actor, Configurator }) => {\n  const { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n}> = ({ actor }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <JsonSchemaConfigurator\n      schema={connector.schema!}\n      configuration={configuration || {}}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n\n  return (\n    <StepBodyLayout\n      title={t('Configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                />\n              </React.Suspense>\n            );\n          default:\n            return <ConnectedJsonSchemaConfigurator actor={configuratorRef} />;\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from './EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { stringToChip } from './stringToChip';\nimport { useDebounce } from './useDebounce';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((c) => (\n                      <Card\n                        isHoverable\n                        key={c.id}\n                        isSelectable\n                        isSelected={selectedId === c.id}\n                        onClick={() => onSelect(c.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{c.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListDescription>\n                                {c.description}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Version</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {c.version}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>ID</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {c.id}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\n\nconst ConnectorTypesToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ConnectorTypesPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => onQuery({ page, size })}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { SpaceShuttleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No Kafka instance available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from './EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\n// import { useBasename } from '@rhoas/app-services-ui-shared';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { stringToChip } from './stringToChip';\nimport { useDebounce } from './useDebounce';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const basename = useBasename();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Select a Kafka instance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('Filter by status')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('CloudProvider')}\n          showToolbarItem={selectedCategory === t('CloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('CloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('Filter by cloud provider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('Filter by region')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('Create Kafka instance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nimport { useReviewMachine } from './CreateConnectorWizardContext';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import _ from 'lodash';\nimport React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { useReviewMachine } from './CreateConnectorWizardContext';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { ViewJSONFormat } from './ViewJSONFormat';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('Review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('ViewJSONFormat')}\n          labelOff={t('ViewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Card>\n        <CardBody>\n          <Form>\n            {savingError && (\n              <FormAlert>\n                <Alert\n                  variant=\"danger\"\n                  title={savingError}\n                  aria-live=\"polite\"\n                  isInline\n                />\n              </FormAlert>\n            )}\n            {toggleView ? (\n              <ViewJSONFormat />\n            ) : (\n              <>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Connector category')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{connectorType.description}</GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Kafka instance')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{kafka.name}</GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('OSD Cluster')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{cluster.metadata?.name}</GridItem>\n                </Grid>\n\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Basic')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Connector name')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{name}</GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Type')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>\n                    {connectorType.labels?.map((type) => type)}\n                  </GridItem>\n                </Grid>\n                {userServiceAccount?.clientId && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('Client ID')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      <Flex>\n                        <FlexItem>\n                          {toggleMaskView.clientId\n                            ? maskValue(userServiceAccount?.clientId)\n                            : userServiceAccount?.clientId}\n                          {}\n                        </FlexItem>\n                        <FlexItem onClick={updateMaskView} id=\"clientId\">\n                          {toggleMaskView.clientId ? (\n                            <EyeIcon />\n                          ) : (\n                            <EyeSlashIcon />\n                          )}\n                        </FlexItem>\n                      </Flex>\n                    </GridItem>\n                  </Grid>\n                )}\n                {userServiceAccount?.clientSecret && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('Client Secret')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      <Flex>\n                        <FlexItem>\n                          {toggleMaskView.clientSecret\n                            ? maskValue(userServiceAccount?.clientSecret)\n                            : userServiceAccount?.clientSecret}\n                          {}\n                        </FlexItem>\n                        <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                          {toggleMaskView.clientSecret ? (\n                            <EyeIcon />\n                          ) : (\n                            <EyeSlashIcon />\n                          )}\n                        </FlexItem>\n                      </Flex>\n                    </GridItem>\n                  </Grid>\n                )}\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Connector specific')}\n                </Title>\n                {connector &&\n                  Object.keys(connector).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>\n                          {_.startCase(el) === t('Access Key') ||\n                          _.startCase(el) === t('Secret Key') ? (\n                            <Flex>\n                              <FlexItem>\n                                {toggleMaskView[el]\n                                  ? maskValue(connector[el])\n                                  : connector[el]}\n                                {}\n                              </FlexItem>\n                              <FlexItem onClick={updateMaskView} id={el}>\n                                {toggleMaskView[el] ? (\n                                  <EyeIcon />\n                                ) : (\n                                  <EyeSlashIcon />\n                                )}\n                              </FlexItem>\n                            </Flex>\n                          ) : (\n                            connector[el]\n                          )}\n                        </GridItem>\n                      </Grid>\n                    );\n                  })}\n                {kafkaTopic &&\n                  Object.keys(kafkaTopic).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                      </Grid>\n                    );\n                  })}\n                {connector === undefined &&\n                  Object.keys(modifiedObject).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>\n                          {_.startCase(el) === t('Database Password') ||\n                          _.startCase(el) === t('Password')\n                            ? maskValue(modifiedObject[el])\n                            : modifiedObject[el]}\n                        </GridItem>\n                      </Grid>\n                    );\n                  })}\n              </>\n            )}\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n}\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { creationWizardMachine } from './CreateConnectorWizard.machine';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\nimport { Basic } from './StepBasic';\nimport { SelectCluster } from './StepClusters';\nimport { ConfiguratorStep } from './StepConfigurator';\nimport { ConfiguratorActorRef } from './StepConfigurator.machine';\nimport { SelectConnectorType } from './StepConnectorTypes';\nimport { StepErrorBoundary } from './StepErrorBoundary';\nimport { SelectKafkaInstance } from './StepKafkas';\nimport { Review } from './StepReview';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from './UncontrolledWizard';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Select a Kafka instance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Common'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <Basic />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Connector Specific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('Connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('Select an OSD cluster'),\n        isActive: state.matches('selectCluster'),\n        component: (\n          <StepErrorBoundary>\n            <SelectCluster />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('selectCluster'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('Configurations'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('Review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: 'Create connector',\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectCluster');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 5 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorConfiguratorResponse } from './StepConfiguratorLoader.machine';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration = config[connector.id!];\n  console.log(\n    `Candidate configuration for \"${connector.id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\nimport { useCos } from './CosContext';\nimport { CreateConnectorWizard } from './CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from './CreateConnectorWizardContext';\nimport { fetchConfigurator } from './loadFederatedConfigurator';\n\ntype CreateConnectorPageProps = {\n  onSave: () => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('Connectors')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('Create connector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('Create connector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t(\n                'Changes you have made will be lost and no connector will be created.'\n              )}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ConnectedConnectorsPage } from './ConnectorsPage';\nimport { CosContextProvider } from './CosContext';\nimport { CreateConnectorPage } from './CreateConnectorPage';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const onConnectorSave = useCallback(() => {\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('wizard.creation-success'),\n    });\n    goToConnectorsList();\n  }, [alert, goToConnectorsList, t]);\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage onCreateConnector={goToCreateConnector} />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["saveConnector","accessToken","connectorsApiBasePath","kafkaManagementApiBasePath","kafka","cluster","connectorType","configuration","name","userServiceAccount","connectorsAPI","ConnectorsApi","Configuration","basePath","securityAPI","SecurityApi","callback","source","Promise","resolve","response","createServiceAccount","id","replaceAll","Date","now","cancelToken","token","clientId","data","client_id","clientSecret","client_secret","getOrCreateServiceAccount","then","connector","kind","metadata","kafka_id","deployment_location","cluster_id","connector_type_id","bootstrap_server","bootstrap_server_host","connector_spec","createConnector","type","catch","error","message","reason","cancel","model","createModel","events","payload","actions","notifySuccess","notifyError","notifySelect","updateState","assign","_context","event","connectorMachine","createMachine","initial","context","initialContext","states","verify","always","target","cond","ready","on","stopped","deleted","startingConnector","invoke","src","patchConnector","desired_state","undefined","headers","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","status","guards","isReady","isStopped","isDeleted","sendParent","ConnectorStatus","label","t","useTranslation","statusOptions","value","ConnectorStatuses","Ready","Failed","Assigning","Assigned","Updating","Provisioning","Deleting","Deleted","find","s","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","size","ConnectorDrawer","children","onClose","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","bootstrapServer","kafkaId","owner","createdAt","created_at","updatedAt","updated_at","activeTabKey","setActiveTabKey","useState","textListItem","title","TextListItem","component","TextListItemVariants","DrawerPanelContent","widths","DrawerHead","TextContent","Text","TextVariants","Title","headingLevel","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Tabs","activeKey","onSelect","_","eventKey","Tab","TabTitleText","TextList","TextListVariants","date","dateTime","toISOString","makePaginatedApiMachine","service","dataTransformer","options","request","page","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","e","items","map","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","Object","keys","includes","_event","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","useCallback","state","hasTag","noResults","firstRequest","PAGINATED_MACHINE_ID","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","onSuccess","onError","listConnectors","fetchConnectors","withContext","makeConnectorMachine","forEach","d","send","to","listing","console","log","ConnectorsPageContext","createContext","ConnectorsPageProvider","useInterpret","devTools","Provider","useConnectorsPageMachineService","useContext","Error","useConnectorsMachine","apiData","props","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","connectorId","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","isDisabled","isSeparator","Td","dataLabel","Pagination","itemCount","perPage","isCompact","onChange","perPageOptions","onSetPage","onPerPageSelect","variant","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","ConnectorsToolbar","searchInputRef","useRef","debouncedOnChange","toggleGroupItems","ToolbarItem","InputGroup","TextInput","ref","Button","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","CosContext","CosContextProvider","getToken","useCos","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","Modal","ModalVariant","titleIconVariant","isOpen","key","Stack","StackItem","Trans","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","ConnectedConnectorsPage","onCreateConnector","alert","useAlert","description","addAlert","AlertVariant","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","Loading","PageSection","ConnectorsPageTitle","padding","isFilled","Card","ConnectedTable","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","category","setName","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","length","clusters","selectedCluster","selectCluster","deselectCluster","clustersMachine","ConnectorClustersApi","listConnectorClusters","fetchClusters","selection","selecting","clusterSelected","noClusterSelected","version","schema","steps","activeStep","isActiveStepValid","change","isValid","next","prev","complete","changedStep","nextStep","min","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","step","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","Configurator","configuratorLoaderMachine","onDone","failure","escalate","connectorTypesMachine","ConnectorTypesApi","categories","listConnectorTypes","lcName","rawItems","filteredItems","filter","c","labels","l","offset","slice","fetchConnectorTypes","connectorSelected","noConnectorSelected","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","initialConfiguration","configString","save","initialize","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","JSON","parse","saved","isAllConfigured","dataVal","Map","inputMap","obj","mapToObject","stringify","isInvalid","jumpToSelectKafka","jumpToSelectCluster","jumpToSelectConnector","jumpToConfigureConnector","subStep","jumpToBasicConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","connectorConfiguration","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","configureConnector","loadConfigurator","configure","submittable","invalid","basicConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isClusterSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","onSave","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","fetchConfigurator","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","clusterRef","selectClusterRef","basicRef","reviewRef","useClustersMachine","getSnapshot","selectedId","onQuery","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","StepBodyLayout","Level","LevelItem","Basic","onSetName","onSetServiceAccount","useBasicMachine","CardBody","Form","FormGroup","isRequired","fieldId","helperText","Radio","isChecked","EmptyStateNoOSDCluster","ClusterIcon","SelectCluster","useClustersMachineIsReady","ClustersGallery","ClustersToolbar","Gallery","hasGutter","isHoverable","isSelectable","CardHeader","CardTitle","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","debouncedOnQuery","ClustersPagination","ajv","allErrors","useDefaults","strict","strictSchema","JsonSchemaConfigurator","properties","schemaValidator","validator","compile","errors","details","createValidator","bridge","JSONSchemaBridge","KameletForm","onChangeModel","onSubmit","AutoFields","isPlain","SubmitField","Auto","parent","AutoForm","super","ValidatedQuickForm","ConnectedCustomConfigurator","ConnectedJsonSchemaConfigurator","ConfiguratorStep","isLoading","hasErrors","configuratorRef","hasCustomConfigurator","fallback","stringToChip","node","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","categoriesToggled","setCategoriesToggled","nameInputRef","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","useEffect","current","typeMenuItems","SelectOption","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","Select","onToggle","selections","placeholderText","ConnectorTypesPagination","ErrorFallback","role","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","EmptyStateNoKafkaInstances","SpaceShuttleIcon","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","style","width","dropdownItems","showToolbarItem","placeholder","KafkasPagination","ViewJSONFormat","copied","setCopied","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","indexOf","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","document","createElement","toString","appendChild","select","execCommand","removeChild","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","Tooltip","content","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","href","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","config","kafkaTopic","modifiedObject","replace","maskValue","Switch","labelOff","FormAlert","Alert","Grid","GridItem","span","getFlattenedSteps","flattenedSteps","childStep","push","UncontrolledWizard","Component","constructor","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","index","enabled","navItemStep","hasActiveChild","canJumpToParent","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","isActive","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","defaultConfig","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","loadFederatedConfigurator","maybeConfiguration","maybeConf","reject","url","element","async","onload","head","onerror","CreateConnectorPage","useConfig","basename","useBasename","askForLeaveConfirm","setAskForLeaveConfirm","closeLeaveConfirm","hasShadowBottom","Breadcrumb","BreadcrumbItem","getBasename","zIndex","cos","configurators","CosRoutes","history","useHistory","goToConnectorsList","goToCreateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","format","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}