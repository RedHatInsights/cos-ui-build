"use strict";(self.webpackChunk_cos_ui_apps_cos_ui=self.webpackChunk_cos_ui_apps_cos_ui||[]).push([[487],{11615:(module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1627469878827\n      var cssReload = __webpack_require__(42779)(module.id, {"locals":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2MTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7b0JBQ1U7QUFDVixPQUFPLElBQVU7QUFDakI7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyxLQUE4SCxjQUFjLGVBQWU7QUFDekwsTUFBTSxVQUFVO0FBQ2hCLE1BQU0saUJBQWlCO0FBQ3ZCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29zLXVpLWFwcHMvY29zLXVpLy4uLy4uL3BhY2thZ2VzL2FwcC9kaXN0L2Nvcy11aS1hcHAuY3NzPzIzNWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTYyNzQ2OTg3ODgyN1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvcmljY2FyZG9mb3JpbmEvQ29kZS9iZjJmYzZjYzcxMWFlZTFhMGMyYS9jb3MtdWkvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11615\n')},64751:(module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1627469878832\n      var cssReload = __webpack_require__(42779)(module.id, {"locals":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ3NTEuanMiLCJtYXBwaW5ncyI6IkFBQUE7b0JBQ1U7QUFDVixPQUFPLElBQVU7QUFDakI7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyxLQUE4SCxjQUFjLGVBQWU7QUFDekwsTUFBTSxVQUFVO0FBQ2hCLE1BQU0saUJBQWlCO0FBQ3ZCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29zLXVpLWFwcHMvY29zLXVpLy4uLy4uL3BhY2thZ2VzL2NyZWF0aW9uV2l6YXJkL2Rpc3QvY29zLXVpLWNyZWF0aW9uLXdpemFyZC5jc3M/ODU1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjI3NDY5ODc4ODMyXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9Vc2Vycy9yaWNjYXJkb2ZvcmluYS9Db2RlL2JmMmZjNmNjNzExYWVlMWEwYzJhL2Nvcy11aS9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64751\n')},71487:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ federated)\n});\n\n// EXTERNAL MODULE: ../../packages/app/dist/cos-ui-app.css\nvar cos_ui_app = __webpack_require__(11615);\n// EXTERNAL MODULE: ../../packages/creationWizard/dist/cos-ui-creation-wizard.css\nvar cos_ui_creation_wizard = __webpack_require__(64751);\n// EXTERNAL MODULE: consume shared module (default) react@=17.0.1 (singleton) (fallback: ../../node_modules/react/index.js) (eager)\nvar index_js_eager_ = __webpack_require__(10791);\nvar index_js_eager_default = /*#__PURE__*/__webpack_require__.n(index_js_eager_);\n// EXTERNAL MODULE: consume shared module (default) @patternfly/react-core@=4.135.0 (strict) (fallback: ../../node_modules/@patternfly/react-core/dist/esm/index.js)\nvar index_js_ = __webpack_require__(78817);\n// EXTERNAL MODULE: consume shared module (default) @bf2/ui-shared@=0.5.0 (singleton) (fallback: ../../node_modules/@bf2/ui-shared/dist/esm/index.js) (eager)\nvar esm_index_js_eager_ = __webpack_require__(29815);\n// EXTERNAL MODULE: consume shared module (default) react-router-dom@=5.2.0 (singleton) (fallback: ../../node_modules/react-router-dom/esm/react-router-dom.js) (eager)\nvar react_router_dom_js_eager_ = __webpack_require__(36978);\n// EXTERNAL MODULE: consume shared module (default) react-i18next@=11.11.4 (strict) (fallback: ../../node_modules/react-i18next/dist/es/index.js)\nvar es_index_js_ = __webpack_require__(57426);\n// EXTERNAL MODULE: ../../packages/utils/dist/utils.esm.js\nvar utils_esm = __webpack_require__(41361);\n// EXTERNAL MODULE: consume shared module (default) i18next@=20.3.5 (strict) (fallback: ../../node_modules/i18next/dist/esm/i18next.js)\nvar i18next_js_ = __webpack_require__(85556);\nvar i18next_js_default = /*#__PURE__*/__webpack_require__.n(i18next_js_);\n// EXTERNAL MODULE: consume shared module (default) i18next-http-backend@=1.2.8 (strict) (fallback: ../../node_modules/i18next-http-backend/esm/index.js)\nvar esm_index_js_ = __webpack_require__(92546);\nvar esm_index_js_default = /*#__PURE__*/__webpack_require__.n(esm_index_js_);\n// EXTERNAL MODULE: consume shared module (default) i18next-browser-languagedetector@=6.1.2 (strict) (fallback: ../../node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js)\nvar i18nextBrowserLanguageDetector_js_ = __webpack_require__(5628);\nvar i18nextBrowserLanguageDetector_js_default = /*#__PURE__*/__webpack_require__.n(i18nextBrowserLanguageDetector_js_);\n// EXTERNAL MODULE: ../../node_modules/keycloak-js/dist/keycloak.js\nvar keycloak = __webpack_require__(34482);\n// EXTERNAL MODULE: ../../packages/machines/dist/machines.esm.js\nvar machines_esm = __webpack_require__(83255);\n// EXTERNAL MODULE: consume shared module (default) @patternfly/react-styles@=4.11.0 (strict) (fallback: ../../node_modules/@patternfly/react-styles/dist/esm/index.js)\nvar dist_esm_index_js_ = __webpack_require__(79419);\n// EXTERNAL MODULE: consume shared module (default) @patternfly/react-table@=4.29.0 (strict) (fallback: ../../node_modules/@patternfly/react-table/dist/esm/index.js)\nvar react_table_dist_esm_index_js_ = __webpack_require__(53036);\n// EXTERNAL MODULE: consume shared module (default) @patternfly/react-icons@=4.11.0 (strict) (fallback: ../../node_modules/@patternfly/react-icons/dist/esm/index.js)\nvar react_icons_dist_esm_index_js_ = __webpack_require__(99237);\n// EXTERNAL MODULE: ../../packages/creationWizard/dist/index.js\nvar dist = __webpack_require__(70793);\n;// CONCATENATED MODULE: ../../packages/app/dist/app.esm.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === "function" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || "@@iterator";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, "");\n    } catch (err) {\n      define = function define(obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there\'s no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don\'t have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: "normal",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: "throw",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = "suspendedStart";\n    var GenStateSuspendedYield = "suspendedYield";\n    var GenStateExecuting = "executing";\n    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don\'t natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      ["next", "throw", "return"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === "function" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, "GeneratorFunction");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, "__await")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === "throw") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke("next", value, resolve, reject);\n            }, function (err) {\n              invoke("throw", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke("throw", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error("Generator is already running");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === "throw") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === "next") {\n            // Setting context._sent for legacy support of Babel\'s\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === "throw") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === "return") {\n            context.abrupt("return", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === "normal") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === "throw") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = "throw";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === "throw") {\n          // Note: ["return"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator["return"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = "return";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === "throw") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // "return" to "throw", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = "throw";\n          context.arg = new TypeError("The iterator does not provide a \'throw\' method");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === "throw") {\n        context.method = "throw";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = "throw";\n        context.arg = new TypeError("iterator result is not an object");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was "next", forget context.arg since it has been\n        // "consumed" by the delegate iterator. If context.method was\n        // "return", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== "return") {\n          context.method = "next";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers\' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn\'t happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return "[object Generator]";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = "normal";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: "root"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === "function") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel\'s\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = "next";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function stop() {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === "throw") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = "throw";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = "next";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === "root") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle("end");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, "catchLoc");\n            var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error("try statement without catch or finally");\n            }\n          }\n        }\n      },\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = "next";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function complete(record, afterLoc) {\n        if (record.type === "throw") {\n          throw record.arg;\n        }\n\n        if (record.type === "break" || record.type === "continue") {\n          this.next = record.arg;\n        } else if (record.type === "return") {\n          this.rval = this.arg = record.arg;\n          this.method = "return";\n          this.next = "end";\n        } else if (record.type === "normal" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      "catch": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === "throw") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error("illegal catch attempt");\n      },\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === "next") {\n          // Deliberately forget the last sent value so that we don\'t\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   module.exports );\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you\'ve misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you\'re not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function("r", "regeneratorRuntime = r")(runtime);\n  }\n});\n\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18next_js_default().use((esm_index_js_default())) // detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use((i18nextBrowserLanguageDetector_js_default())) // pass the i18n instance to react-i18next.\n.use(es_index_js_.initReactI18next) // init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n  // supportedLngs: [\'en\',\'it\'],\n  backend: {\n    loadPath: __webpack_require__.p + "locales/{{lng}}/{{ns}}.json"\n  },\n  fallbackLng: \'en\',\n  load: \'all\',\n  debug: true,\n  // add any namespaces you\'re using here for loading purposes\n  ns: [\'public\'],\n  defaultNS: \'public\',\n  nsSeparator: \':\',\n  keySeparator: \'.\',\n  react: {\n    useSuspense: true,\n    wait: true\n  },\n  interpolation: {\n    defaultVariables: undefined,\n    escapeValue: false // not needed for react as it escapes by default\n\n  }\n});\n\nvar app_esm_keycloak;\n/**\r\n * Get keycloak instance\r\n *\r\n * @return an initiated keycloak instance or `undefined`\r\n * if keycloak isn\'t configured\r\n *\r\n */\n\nvar getKeycloakInstance = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (app_esm_keycloak) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return init();\n\n          case 3:\n            return _context.abrupt("return", app_esm_keycloak);\n\n          case 4:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getKeycloakInstance() {\n    return _ref.apply(this, arguments);\n  };\n}()));\n/**\r\n * Initiate keycloak instance.\r\n *\r\n * Set keycloak to undefined if\r\n * keycloak isn\'t configured\r\n *\r\n */\n\nvar init = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            app_esm_keycloak = new Keycloak({\n              realm: \'redhat-external\',\n              url: \'https://sso.redhat.com/auth/\',\n              clientId: \'cloud-services\'\n            });\n\n            if (!app_esm_keycloak) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 5;\n            return app_esm_keycloak.init({\n              onLoad: \'login-required\'\n            });\n\n          case 5:\n            _context2.next = 11;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2["catch"](0);\n            app_esm_keycloak = undefined;\n            console.warn(\'Auth: Unable to initialize keycloak. Client side will not be configured to use authentication\', _context2.t0);\n\n          case 11:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n\n  return function init() {\n    return _ref2.apply(this, arguments);\n  };\n}()));\n/**\r\n * Use keycloak update token function to retrieve\r\n * keycloak token\r\n *\r\n * @return keycloak token or empty string if keycloak\r\n * isn\'t configured\r\n *\r\n */\n\nvar getKeyCloakToken = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {\n    var _keycloak, _keycloak2;\n\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return (_keycloak = app_esm_keycloak) == null ? void 0 : _keycloak.updateToken(50);\n\n          case 2:\n            if (!((_keycloak2 = app_esm_keycloak) == null ? void 0 : _keycloak2.token)) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt("return", app_esm_keycloak.token);\n\n          case 4:\n            console.error(\'No keycloak token available\');\n            return _context4.abrupt("return", \'foo\');\n\n          case 6:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getKeyCloakToken() {\n    return _ref4.apply(this, arguments);\n  };\n}()));\n/**\r\n * Use keycloak update token function to retrieve\r\n * keycloak token\r\n *\r\n * @return keycloak token or empty string if keycloak\r\n * isn\'t configured\r\n *\r\n */\n\nvar getParsedKeyCloakToken = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {\n    var _keycloak3, _keycloak4;\n\n    return runtime_1.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return (_keycloak3 = app_esm_keycloak) == null ? void 0 : _keycloak3.updateToken(50);\n\n          case 2:\n            if (!((_keycloak4 = app_esm_keycloak) == null ? void 0 : _keycloak4.tokenParsed)) {\n              _context5.next = 4;\n              break;\n            }\n\n            return _context5.abrupt("return", app_esm_keycloak.tokenParsed);\n\n          case 4:\n            console.error(\'No keycloak token available\');\n            return _context5.abrupt("return", {});\n\n          case 6:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getParsedKeyCloakToken() {\n    return _ref5.apply(this, arguments);\n  };\n}()));\n\nvar KeycloakContext = /*#__PURE__*/index_js_eager_default().createContext({\n  keycloak: undefined\n});\nvar KeycloakAuthProvider = function KeycloakAuthProvider(props) {\n  var getUsername = function getUsername() {\n    return getParsedKeyCloakToken().then(function (token) {\n      return token[\'username\'];\n    });\n  };\n\n  var authTokenContext = {\n    kas: {\n      getToken: getKeyCloakToken\n    },\n    getUsername: getUsername\n  };\n  return React__default.createElement(AuthContext.Provider, {\n    value: authTokenContext\n  }, props.children);\n};\n\nvar logo = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3Csvg%20width%3D%22175px%22%20height%3D%2232px%22%20viewBox%3D%220%200%20175%2032%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%20%20%20%20%20%20%20%20%3Ctitle%3EPatternFly%20Logo%3C%2Ftitle%3E%20%20%20%20%3Cdesc%3ECreated%20with%20Sketch.%3C%2Fdesc%3E%20%20%20%20%3Cdefs%3E%20%20%20%20%20%20%20%20%3ClinearGradient%20x1%3D%2250.0004769%25%22%20y1%3D%223.02475509%25%22%20x2%3D%2250.0004769%25%22%20y2%3D%2295.3620086%25%22%20id%3D%22linearGradient-1%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%3Cstop%20stop-color%3D%22%2360EFFF%22%20offset%3D%220%25%22%3E%3C%2Fstop%3E%20%20%20%20%20%20%20%20%20%20%20%20%3Cstop%20stop-color%3D%22%231F89C7%22%20offset%3D%22100%25%22%3E%3C%2Fstop%3E%20%20%20%20%20%20%20%20%3C%2FlinearGradient%3E%20%20%20%20%3C%2Fdefs%3E%20%20%20%20%3Cg%20id%3D%22Symbols%22%20stroke%3D%22none%22%20stroke-width%3D%221%22%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%20%20%20%20%20%20%20%20%3Cg%20id%3D%22Nav-bar-%28desktop%29%22%20transform%3D%22translate%28-150.000000%2C%20-16.000000%29%22%20fill-rule%3D%22nonzero%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%3Cg%20id%3D%22PatternFly-Logo%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cg%20transform%3D%22translate%28150.000000%2C%2016.000000%29%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cg%20id%3D%22Group%22%20transform%3D%22translate%2844.748858%2C%2011.200000%29%22%20fill%3D%22%23FFFFFF%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%22M0.302054795%2C9.3488%20L0.302054795%2C0.3264%20L4.16883562%2C0.3264%20C4.73858447%2C0.3264%205.21723744%2C0.4096%205.60719178%2C0.5744%20C5.99714612%2C0.7408%206.31358447%2C0.9576%206.55650685%2C1.2296%20C6.79942922%2C1.5008%206.97442922%2C1.8048%207.08150685%2C2.1456%20C7.18778539%2C2.4856%207.24212329%2C2.8288%207.24212329%2C3.1768%20C7.24212329%2C3.3936%207.2173516%2C3.616%207.16541096%2C3.8408%20C7.11506849%2C4.064%207.03835616%2C4.284%206.9336758%2C4.496%20C6.82819635%2C4.708%206.69474886%2C4.9048%206.53093607%2C5.0912%20C6.36712329%2C5.2752%206.17054795%2C5.4384%205.94280822%2C5.5784%20C5.71426941%2C5.7184%205.45376712%2C5.828%205.15810502%2C5.908%20C4.86164384%2C5.988%204.53242009%2C6.0272%204.16803653%2C6.0272%20L2.04246575%2C6.0272%20L2.04246575%2C9.3472%20L0.302054795%2C9.3488%20L0.302054795%2C9.3488%20Z%20M4.24315068%2C4.372%20C4.4652968%2C4.372%204.65308219%2C4.3368%204.8033105%2C4.2664%20C4.95353881%2C4.1936%205.07579909%2C4.1024%205.17089041%2C3.988%20C5.26598174%2C3.8744%205.33310502%2C3.7464%205.37465753%2C3.6048%20C5.41700913%2C3.4616%205.43938356%2C3.32%205.43938356%2C3.176%20C5.43938356%2C3.0464%205.42100457%2C2.9112%205.38424658%2C2.7688%20C5.34908676%2C2.6304%205.2859589%2C2.5024%205.19646119%2C2.3832%20C5.10616438%2C2.2664%204.98230594%2C2.1696%204.82888128%2C2.0952%20C4.67305936%2C2.0192%204.47888128%2C1.9808%204.24394977%2C1.9808%20L2.04406393%2C1.9808%20L2.04406393%2C4.3712%20L4.24315068%2C4.372%20L4.24315068%2C4.372%20Z%22%20id%3D%22Shape%22%3E%3C%2Fpath%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%22M19.2555936%2C9.3488%20L18.5571918%2C7.4816%20L15.0803653%2C7.4816%20L14.3899543%2C9.3488%20L12.5216895%2C9.3488%20L15.9737443%2C0.3264%20L17.6694064%2C0.3264%20L21.1214612%2C9.3488%20L19.2555936%2C9.3488%20Z%20M17.1052511%2C3.548%20C17.0589041%2C3.44%2017.0093607%2C3.3088%2016.956621%2C3.1584%20C16.9062785%2C3.0056%2016.8599315%2C2.8664%2016.8223744%2C2.7352%20C16.7880137%2C2.8672%2016.7440639%2C3.0056%2016.689726%2C3.1584%20C16.6361872%2C3.3088%2016.5858447%2C3.44%2016.5386986%2C3.548%20L15.6461187%2C5.8952%20L17.9922374%2C5.8952%20L17.1052511%2C3.548%20Z%22%20id%3D%22Shape%22%3E%3C%2Fpath%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%2230.9038813%202.0064%2030.9038813%209.3488%2029.169863%209.3488%2029.169863%202.0064%2026.5920091%202.0064%2026.5920091%200.3264%2033.4809361%200.3264%2033.4809361%202.0064%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%2244.3932648%202.0064%2044.3932648%209.3488%2042.6584475%209.3488%2042.6584475%202.0064%2040.0805936%202.0064%2040.0805936%200.3264%2046.9695205%200.3264%2046.9695205%202.0064%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%2254.1509132%209.3488%2054.1509132%200.3264%2060.3022831%200.3264%2060.3022831%201.9816%2055.8905251%201.9816%2055.8905251%203.8752%2058.4859589%203.8752%2058.4859589%205.5232%2055.8905251%205.5232%2055.8905251%207.7016%2060.5715753%207.7016%2060.5715753%209.3512%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%22M67.8848174%2C9.3488%20L67.8848174%2C0.3264%20L72.0704338%2C0.3264%20C72.6401826%2C0.3264%2073.1172374%2C0.4032%2073.5%2C0.5624%20C73.8827626%2C0.7192%2074.1928082%2C0.928%2074.4269406%2C1.188%20C74.6594749%2C1.4488%2074.8296804%2C1.7488%2074.9295662%2C2.088%20C75.0278539%2C2.428%2075.0805936%2C2.7832%2075.0805936%2C3.152%20C75.0805936%2C3.4072%2075.0422374%2C3.6664%2074.9679224%2C3.928%20C74.8928082%2C4.1904%2074.7849315%2C4.4392%2074.6394977%2C4.6744%20C74.4900685%2C4.9096%2074.310274%2C5.1216%2074.0905251%2C5.3128%20C73.8739726%2C5.504%2073.6190639%2C5.6536%2073.3305936%2C5.756%20L75.0789954%2C9.3488%20L73.122032%2C9.3488%20L71.4375571%2C5.984%20L69.6228311%2C5.984%20L69.6228311%2C9.3488%20L67.8848174%2C9.3488%20L67.8848174%2C9.3488%20Z%20M72.0960046%2C4.3344%20C72.3165525%2C4.3344%2072.5067352%2C4.3016%2072.6545662%2C4.236%20C72.8047945%2C4.1704%2072.9278539%2C4.084%2073.0181507%2C3.9752%20C73.1108447%2C3.8656%2073.1787671%2C3.74%2073.2179224%2C3.596%20C73.2586758%2C3.4536%2073.2754566%2C3.3056%2073.2754566%2C3.1504%20C73.2754566%2C3.008%2073.2586758%2C2.8648%2073.2243151%2C2.724%20C73.186758%2C2.5832%2073.1260274%2C2.4584%2073.0413242%2C2.3456%20C72.9542237%2C2.236%2072.8295662%2C2.1464%2072.6793379%2C2.0792%20C72.5291096%2C2.012%2072.3317352%2C1.9792%2072.0968037%2C1.9792%20L69.6260274%2C1.9792%20L69.6260274%2C4.3328%20L72.0968037%2C4.3328%20L72.0968037%2C4.3344%20L72.0960046%2C4.3344%20Z%22%20id%3D%22Shape%22%3E%3C%2Fpath%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%22M88.1552511%2C9.3488%20L84.5793379%2C4.0888%20C84.5202055%2C4.0016%2084.4578767%2C3.892%2084.3875571%2C3.7648%20C84.3172374%2C3.6376%2084.2597032%2C3.5192%2084.2061644%2C3.4104%20C84.2221461%2C3.5056%2084.2277397%2C3.6184%2084.2341324%2C3.7496%20C84.2413242%2C3.8792%2084.2469178%2C3.9936%2084.2469178%2C4.0888%20L84.2469178%2C9.3488%20L82.5176941%2C9.3488%20L82.5176941%2C0.3264%20L84.1502283%2C0.3264%20L87.6390411%2C5.5216%20C87.693379%2C5.6056%2087.7565068%2C5.7136%2087.8252283%2C5.8384%20C87.8979452%2C5.9632%2087.9610731%2C6.0856%2088.0122146%2C6.2024%20C88.0002283%2C6.0824%2087.9938356%2C5.9568%2087.9858447%2C5.8352%20C87.9778539%2C5.7112%2087.9746575%2C5.6056%2087.9746575%2C5.52%20L87.9746575%2C0.3248%20L89.6958904%2C0.3248%20L89.6958904%2C9.3472%20L88.1552511%2C9.3488%20L88.1552511%2C9.3488%20Z%22%20id%3D%22Path%22%3E%3C%2Fpath%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%2297.4590183%209.3488%2097.4590183%200.3264%20103.501712%200.3264%20103.501712%201.9816%2099.2002283%201.9816%2099.2002283%203.8752%20101.926712%203.8752%20101.926712%205.5232%2099.2002283%205.5232%2099.2002283%209.3496%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%22110.555251%209.3488%20110.555251%200.3264%20112.298059%200.3264%20112.298059%207.6752%20116.646689%207.6752%20116.646689%209.3488%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Path%22%20points%3D%22124.973973%209.3488%20124.973973%205.832%20121.634589%200.3264%20123.608333%200.3264%20125.835388%204.0144%20128.058447%200.3264%20130.03379%200.3264%20126.695205%205.832%20126.695205%209.3488%22%3E%3C%2Fpolygon%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fg%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cpath%20d%3D%22M33.5144977%2C16.5608%20L16.7584475%2C0.1536%20L0%2C16.5608%20L6.6803653%2C26.036%20L11.7769406%2C24.864%20L16.790411%2C31.9208%20L21.7942922%2C24.8768%20L26.8341324%2C26.0352%20L33.5144977%2C16.5608%20Z%20M16.0624429%2C3.196%20L13.8921233%2C23.2768%20L9.74805936%2C17.6176%20L16.0624429%2C3.196%20Z%20M9.293379%2C16.9968%20L6.71232877%2C13.472%20L15.5877854%2C2.68%20L9.293379%2C16.9968%20Z%20M13.2041096%2C23.464%20L13.2041096%2C23.464%20L13.4454338%2C23.7968%20L12.0614155%2C24.1144%20L8.86666667%2C19.6184%20L9.43721461%2C18.3208%20L13.2041096%2C23.464%20Z%20M16.7576484%2C2.9296%20L18.9391553%2C24.2184%20L16.7528539%2C27.2176%20L14.5745434%2C24.2184%20L16.7576484%2C2.9296%20Z%20M20.309589%2C23.4648%20L24.1180365%2C18.2648%20L24.7141553%2C19.6184%20L21.5106164%2C24.128%20L20.0714612%2C23.7968%20L20.3119863%2C23.4664%20L20.309589%2C23.4648%20Z%20M19.6223744%2C23.2768%20L17.4800228%2C3.1792%20L23.8079909%2C17.5608%20L19.6223744%2C23.2768%20Z%20M17.9850457%2C2.6768%20L26.8021689%2C13.472%20L24.2626712%2C16.94%20L17.9850457%2C2.6768%20Z%20M6.96643836%2C25.2856%20L0.870205479%2C16.6408%20L12.7989726%2C4.9672%20L5.87089041%2C13.4504%20L8.98413242%2C17.7008%20L8.10593607%2C19.696%20L11.3598174%2C24.2768%20L6.96643836%2C25.2856%20Z%20M16.790411%2C30.7712%20L12.4785388%2C24.7032%20L13.8705479%2C24.3824%20L16.7512557%2C28.3496%20L19.6415525%2C24.3824%20L21.0910959%2C24.7168%20L16.790411%2C30.7712%20Z%20M22.2114155%2C24.2896%20L25.4740868%2C19.696%20L24.5719178%2C17.6448%20L27.6436073%2C13.4504%20L20.7155251%2C4.9672%20L32.6434932%2C16.6408%20L26.5480594%2C25.2864%20L22.2114155%2C24.2896%20Z%22%20id%3D%22Shape%22%20fill%3D%22url%28%23linearGradient-1%29%22%3E%3C%2Fpath%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fg%3E%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fg%3E%20%20%20%20%20%20%20%20%3C%2Fg%3E%20%20%20%20%3C%2Fg%3E%3C%2Fsvg%3E";\n\nvar AppLayout = function AppLayout(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(true),\n      isNavOpen = _useState[0],\n      setIsNavOpen = _useState[1];\n\n  var _useState2 = useState(true),\n      isMobileView = _useState2[0],\n      setIsMobileView = _useState2[1];\n\n  var _useState3 = useState(false),\n      isNavOpenMobile = _useState3[0],\n      setIsNavOpenMobile = _useState3[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var onNavToggleMobile = function onNavToggleMobile() {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n\n  var onNavToggle = function onNavToggle() {\n    setIsNavOpen(!isNavOpen);\n  };\n\n  var onPageResize = function onPageResize(props) {\n    setIsMobileView(props.mobileView);\n  };\n\n  var HeaderTools = React__default.createElement(PageHeaderTools, null, \'email\');\n  var Header = React__default.createElement(PageHeader, {\n    logo: React__default.createElement(LogoImg, null),\n    showNavToggle: true,\n    isNavOpen: isNavOpen,\n    headerTools: HeaderTools,\n    onNavToggle: isMobileView ? onNavToggleMobile : onNavToggle,\n    "aria-label": \'global_navigation\'\n  });\n  var Navigation = React__default.createElement(Nav, {\n    id: "nav-primary-simple",\n    role: "navigation",\n    theme: "dark",\n    "aria-label": \'global\'\n  }, React__default.createElement(NavList, {\n    id: "nav-list-simple"\n  }, React__default.createElement(NavItem, {\n    id: \'connectors\'\n  }, React__default.createElement(NavLink, {\n    to: \'/\',\n    activeClassName: "pf-m-current"\n  }, t(\'managedConnectors\')))));\n  var Sidebar = React__default.createElement(PageSidebar, {\n    theme: "dark",\n    nav: Navigation,\n    isNavOpen: isMobileView ? isNavOpenMobile : isNavOpen\n  });\n  return React__default.createElement(Page, {\n    mainContainerId: "primary-app-container",\n    role: "main",\n    header: Header,\n    sidebar: Sidebar,\n    onPageResize: onPageResize\n  }, children);\n};\n\nfunction LogoImg() {\n  var history = useHistory();\n\n  function handleClick() {\n    history.push(\'/\');\n  }\n\n  return React__default.createElement("img", {\n    src: logo,\n    onClick: handleClick,\n    alt: "PatternFly Logo"\n  });\n}\n\nvar AppContext = /*#__PURE__*/(0,index_js_eager_.createContext)(null);\nvar AppContextProvider = function AppContextProvider(_ref) {\n  var getToken = _ref.getToken,\n      basePath = _ref.basePath,\n      children = _ref.children;\n  return index_js_eager_default().createElement(AppContext.Provider, {\n    value: {\n      getToken: getToken,\n      basePath: basePath\n    }\n  }, children);\n};\nvar useAppContext = function useAppContext() {\n  var context = (0,index_js_eager_.useContext)(AppContext);\n  if (!context) throw new Error(\'useAppContext must be used inside an AppContextProvider\');\n  return _extends({}, context);\n};\n\nvar ConnectorDrawer = function ConnectorDrawer(_ref) {\n  var children = _ref.children;\n\n  var _useTranslation = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation.t;\n\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine = (0,machines_esm.useConnectorsMachine)(service),\n      selectedConnector = _useConnectorsMachine.selectedConnector,\n      deselectConnector = _useConnectorsMachine.deselectConnector;\n\n  var _useState = (0,index_js_eager_.useState)(0),\n      activeTabKey = _useState[0],\n      setActiveTabKey = _useState[1];\n\n  var selectActiveKey = function selectActiveKey(_, eventKey) {\n    setActiveTabKey(eventKey);\n  };\n\n  var textListItem = function textListItem(title, value) {\n    return index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, value && index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(index_js_.TextListItem, {\n      component: index_js_.TextListItemVariants.dt\n    }, title), index_js_eager_default().createElement(index_js_.TextListItem, {\n      component: index_js_.TextListItemVariants.dd\n    }, value)));\n  };\n\n  var panelContent = function panelContent() {\n    var _selectedConnector$me, _selectedConnector$ka, _selectedConnector$me2, _selectedConnector$me3, _selectedConnector$me4;\n\n    return index_js_eager_default().createElement(index_js_.DrawerPanelContent, {\n      widths: {\n        "default": \'width_50\'\n      }\n    }, index_js_eager_default().createElement(index_js_.DrawerHead, null, index_js_eager_default().createElement(index_js_.TextContent, null, index_js_eager_default().createElement(index_js_.Text, {\n      component: index_js_.TextVariants.small,\n      className: "connector-drawer__header-text"\n    }, "Connector name"), index_js_eager_default().createElement(index_js_.Title, {\n      headingLevel: \'h2\',\n      size: index_js_.TitleSizes.xl,\n      className: "connector-drawer__header-title"\n    }, selectedConnector == null ? void 0 : (_selectedConnector$me = selectedConnector.metadata) == null ? void 0 : _selectedConnector$me.name)), index_js_eager_default().createElement(index_js_.DrawerActions, null, index_js_eager_default().createElement(index_js_.DrawerCloseButton, {\n      onClick: deselectConnector\n    }))), index_js_eager_default().createElement(index_js_.DrawerPanelBody, null, index_js_eager_default().createElement(index_js_.Tabs, {\n      activeKey: activeTabKey,\n      onSelect: selectActiveKey\n    }, index_js_eager_default().createElement(index_js_.Tab, {\n      eventKey: 0,\n      title: index_js_eager_default().createElement(index_js_.TabTitleText, null, t(\'overview\'))\n    }, index_js_eager_default().createElement("div", {\n      className: "connector-drawer__tab-content"\n    }, index_js_eager_default().createElement(index_js_.TextContent, null, index_js_eager_default().createElement(index_js_.TextList, {\n      component: index_js_.TextListVariants.dl\n    }, textListItem(\'Bootstrap server\', selectedConnector == null ? void 0 : (_selectedConnector$ka = selectedConnector.kafka) == null ? void 0 : _selectedConnector$ka.bootstrap_server), textListItem(\'Connector\', selectedConnector == null ? void 0 : (_selectedConnector$me2 = selectedConnector.metadata) == null ? void 0 : _selectedConnector$me2.name), textListItem(\'Kafka_instance\', selectedConnector == null ? void 0 : (_selectedConnector$me3 = selectedConnector.metadata) == null ? void 0 : _selectedConnector$me3.kafka_id), textListItem(\'Owner\', selectedConnector == null ? void 0 : (_selectedConnector$me4 = selectedConnector.metadata) == null ? void 0 : _selectedConnector$me4.owner))))))));\n  };\n\n  return index_js_eager_default().createElement(index_js_.Drawer, {\n    isExpanded: selectedConnector !== undefined\n  }, index_js_eager_default().createElement(index_js_.DrawerContent, {\n    panelContent: panelContent()\n  }, children));\n};\n\nvar ConnectorStatusIcon = function ConnectorStatusIcon(_ref) {\n  var id = _ref.id,\n      status = _ref.status;\n\n  switch (status == null ? void 0 : status.toLowerCase()) {\n    case \'ready\':\n      return index_js_eager_default().createElement(react_icons_dist_esm_index_js_.CheckCircleIcon, {\n        className: "cos--connectors__table--icon--completed"\n      });\n\n    case \'failed\':\n      return index_js_eager_default().createElement(react_icons_dist_esm_index_js_.ExclamationCircleIcon, {\n        className: "cos--connectors__table--icon--failed"\n      });\n\n    case \'accepted\':\n      return index_js_eager_default().createElement(react_icons_dist_esm_index_js_.PendingIcon, null);\n\n    case \'provisioning\':\n    case \'preparing\':\n      return index_js_eager_default().createElement(index_js_.Spinner, {\n        size: "md",\n        "aria-label": id,\n        "aria-valuetext": "Creation in progress"\n      });\n\n    case \'deprovision\':\n    case \'deleted\':\n      return null;\n  }\n\n  return index_js_eager_default().createElement(react_icons_dist_esm_index_js_.PendingIcon, null);\n};\n\nvar ConnectorsPagination = function ConnectorsPagination(_ref) {\n  var _ref$isCompact = _ref.isCompact,\n      isCompact = _ref$isCompact === void 0 ? false : _ref$isCompact;\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine = (0,machines_esm.useConnectorsMachine)(service),\n      request = _useConnectorsMachine.request,\n      response = _useConnectorsMachine.response;\n\n  var onChange = function onChange(request) {\n    return service.send(_extends({\n      type: \'api.query\'\n    }, request));\n  };\n\n  var defaultPerPageOptions = [{\n    title: \'1\',\n    value: 1\n  }, {\n    title: \'5\',\n    value: 5\n  }, {\n    title: \'10\',\n    value: 10\n  }];\n  return index_js_eager_default().createElement(index_js_.Pagination, {\n    itemCount: (response == null ? void 0 : response.total) || 0,\n    page: request.page,\n    perPage: request.size,\n    perPageOptions: defaultPerPageOptions,\n    onSetPage: function onSetPage(_, page, size) {\n      return onChange(_extends({}, request, {\n        page: page,\n        size: size || request.size\n      }));\n    },\n    onPerPageSelect: function onPerPageSelect() {\n      return false;\n    },\n    variant: isCompact ? \'top\' : \'bottom\',\n    isCompact: isCompact\n  });\n};\n\nvar ConnectorsToolbar = function ConnectorsToolbar() {\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine = (0,machines_esm.useConnectorsMachine)(service),\n      request = _useConnectorsMachine.request;\n\n  var onChange = function onChange(request) {\n    return service.send(_extends({\n      type: \'api.query\'\n    }, request));\n  };\n\n  var searchInputRef = (0,index_js_eager_.useRef)(null);\n  var debouncedOnChange = (0,utils_esm.useDebounce)(onChange, 1000); // const [statuses, setStatuses] = useState<string[]>([\n  //   \'Pending\',\n  //   \'Created\',\n  //   \'Cancelled\',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue(\'\');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key="statusPending" value="Pending" />,\n  //   <SelectOption key="statusCreated" value="Created" />,\n  //   <SelectOption key="statusCancelled" value="Cancelled" />,\n  // ];\n  // ensure the search input value reflects what\'s specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || \'\';\n  //   }\n  // }, [searchInputRef, request]);\n\n  var toggleGroupItems = index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(index_js_.ToolbarItem, null, index_js_eager_default().createElement(index_js_.InputGroup, null, index_js_eager_default().createElement(index_js_.TextInput, {\n    name: "name",\n    id: "name",\n    type: "search",\n    "aria-label": "filter by connector name",\n    onChange: function onChange(value) {\n      return debouncedOnChange({\n        size: request.size,\n        page: 1,\n        name: value\n      });\n    },\n    ref: searchInputRef\n  }), index_js_eager_default().createElement(index_js_.Button, {\n    variant: \'control\',\n    "aria-label": "search button for search input"\n  }, index_js_eager_default().createElement(react_icons_dist_esm_index_js_.SearchIcon, null)))));\n  var toolbarItems = index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(index_js_.ToolbarToggleGroup, {\n    toggleIcon: index_js_eager_default().createElement(react_icons_dist_esm_index_js_.FilterIcon, null),\n    breakpoint: "xl"\n  }, toggleGroupItems), index_js_eager_default().createElement(index_js_.ToolbarGroup, {\n    variant: "icon-button-group"\n  }, index_js_eager_default().createElement(index_js_.ToolbarItem, null, index_js_eager_default().createElement(react_router_dom_js_eager_.NavLink, {\n    className: "pf-c-button pf-m-primary",\n    to: \'/create-connector\'\n  }, "Create Connector"))), index_js_eager_default().createElement(index_js_.ToolbarItem, {\n    variant: "pagination",\n    alignment: {\n      "default": \'alignRight\'\n    }\n  }, index_js_eager_default().createElement(ConnectorsPagination, {\n    isCompact: true\n  })));\n  return index_js_eager_default().createElement(index_js_.Toolbar, {\n    id: "toolbar-group-types",\n    collapseListedFiltersBreakpoint: "xl"\n  }, index_js_eager_default().createElement(index_js_.ToolbarContent, null, toolbarItems));\n};\n\n/**\r\n * A modal dialog to display confirmation for connector deletion.\r\n */\n\nvar DeleteDialog = function DeleteDialog(_ref) {\n  var connectorName = _ref.connectorName,\n      i18nCancel = _ref.i18nCancel,\n      i18nDelete = _ref.i18nDelete,\n      i18nTitle = _ref.i18nTitle,\n      onCancel = _ref.onCancel,\n      onConfirm = _ref.onConfirm,\n      showDialog = _ref.showDialog;\n\n  var _useState = (0,index_js_eager_.useState)(\'\'),\n      nameValue = _useState[0],\n      setNameValue = _useState[1];\n\n  var canDelete = nameValue === connectorName;\n\n  var onCancelDelete = function onCancelDelete() {\n    setNameValue(\'\');\n    onCancel();\n  };\n\n  var onConfirmDelete = function onConfirmDelete() {\n    setNameValue(\'\');\n    onConfirm();\n  };\n\n  return index_js_eager_default().createElement(index_js_.Modal, {\n    variant: index_js_.ModalVariant.small,\n    title: i18nTitle,\n    titleIconVariant: "warning",\n    isOpen: showDialog,\n    onClose: onCancel,\n    actions: [index_js_eager_default().createElement(index_js_.Button, {\n      key: "confirm",\n      variant: "danger",\n      isDisabled: !canDelete,\n      onClick: onConfirmDelete\n    }, i18nDelete), index_js_eager_default().createElement(index_js_.Button, {\n      key: "cancel",\n      variant: "link",\n      onClick: onCancelDelete\n    }, i18nCancel)]\n  }, index_js_eager_default().createElement(index_js_.Stack, null, index_js_eager_default().createElement(index_js_.StackItem, null, index_js_eager_default().createElement(es_index_js_.Trans, {\n    i18nKey: "deleteConfirmMessage"\n  }, "Connector ", index_js_eager_default().createElement("strong", null, {\n    connectorName: connectorName\n  }), " will be deleted.")), index_js_eager_default().createElement(index_js_.StackItem, null, index_js_eager_default().createElement(es_index_js_.Trans, {\n    i18nKey: "deleteTypeNameMessage"\n  }, "Type ", index_js_eager_default().createElement("strong", null, {\n    connectorName: connectorName\n  }), " to confirm the deletion.")), index_js_eager_default().createElement(index_js_.StackItem, null, index_js_eager_default().createElement(index_js_.TextInput, {\n    value: nameValue,\n    type: "text",\n    onChange: setNameValue,\n    "aria-label": "name input"\n  }))));\n};\n\nvar ConnectorsTable = function ConnectorsTable() {\n  var _response$items;\n\n  var _useTranslation = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation.t;\n\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine = (0,machines_esm.useConnectorsMachine)(service),\n      response = _useConnectorsMachine.response;\n\n  return index_js_eager_default().createElement(index_js_.Card, {\n    className: \'pf-u-pb-xl\'\n  }, index_js_eager_default().createElement(ConnectorsToolbar, null), index_js_eager_default().createElement("div", {\n    className: \'pf-u-p-md\'\n  }, index_js_eager_default().createElement(react_table_dist_esm_index_js_.TableComposable, {\n    "aria-label": "Sortable Table",\n    className: (0,dist_esm_index_js_.css)(\'connectors-table-view__table\')\n  }, index_js_eager_default().createElement(react_table_dist_esm_index_js_.Thead, null, index_js_eager_default().createElement(react_table_dist_esm_index_js_.Tr, null, index_js_eager_default().createElement(react_table_dist_esm_index_js_.Th, null, t(\'name\')), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Th, null, t(\'type\')), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Th, null, t(\'category\')), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Th, null, t(\'status\')))), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Tbody, null, response == null ? void 0 : (_response$items = response.items) == null ? void 0 : _response$items.map(function (ref) {\n    return index_js_eager_default().createElement(ConnectorRow, {\n      connectorRef: ref,\n      key: ref.id\n    });\n  })))), index_js_eager_default().createElement(ConnectorsPagination, {\n    isCompact: false\n  }));\n};\nvar ConnectorRow = function ConnectorRow(_ref) {\n  var _connector$metadata, _connector$metadata2;\n\n  var connectorRef = _ref.connectorRef;\n\n  var _useTranslation2 = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation2.t;\n\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine2 = (0,machines_esm.useConnectorsMachine)(service),\n      selectedConnector = _useConnectorsMachine2.selectedConnector;\n\n  var _useConnector = (0,machines_esm.useConnector)(connectorRef),\n      connector = _useConnector.connector,\n      canStart = _useConnector.canStart,\n      canStop = _useConnector.canStop,\n      canDelete = _useConnector.canDelete,\n      onStart = _useConnector.onStart,\n      onStop = _useConnector.onStop,\n      onDelete = _useConnector.onDelete,\n      onSelect = _useConnector.onSelect;\n\n  var _useState = (0,index_js_eager_.useState)(false),\n      showDeleteConnectorConfirm = _useState[0],\n      setShowDeleteConnectorConfirm = _useState[1];\n\n  var doCancelDeleteConnector = function doCancelDeleteConnector() {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  var doDeleteConnector = function doDeleteConnector() {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  var actions = [{\n    title: \'Start\',\n    onClick: onStart,\n    isDisabled: !canStart\n  }, {\n    title: \'Stop\',\n    onClick: onStop,\n    isDisabled: !canStop\n  }, {\n    title: \'Delete\',\n    onClick: function onClick() {\n      return setShowDeleteConnectorConfirm(true);\n    },\n    isDisabled: !canDelete\n  }, {\n    isSeparator: true\n  }, {\n    title: \'Overview\',\n    onClick: onSelect\n  }];\n  var statusOptions = [{\n    value: \'ready\',\n    label: t(\'Running\')\n  }, {\n    value: \'failed\',\n    label: t(\'Failed\')\n  }, {\n    value: \'assigning\',\n    label: t(\'Creation pending\')\n  }, {\n    value: \'assigned\',\n    label: t(\'Creation in progress\')\n  }, {\n    value: \'updating\',\n    label: t(\'Creation in progress\')\n  }, {\n    value: \'provisioning\',\n    label: t(\'Creation in progress\')\n  }, {\n    value: \'deleting\',\n    label: t(\'Deleting\')\n  }, {\n    value: \'deleted\',\n    label: t(\'Deleting\')\n  }];\n\n  var getStatusLabel = function getStatusLabel(status) {\n    var _statusOptions$find;\n\n    return ((_statusOptions$find = statusOptions.find(function (s) {\n      return s.value === status;\n    })) == null ? void 0 : _statusOptions$find.label) || status;\n  };\n\n  return index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(DeleteDialog, {\n    connectorName: (_connector$metadata = connector.metadata) == null ? void 0 : _connector$metadata.name,\n    i18nCancel: t(\'cancel\'),\n    i18nDelete: t(\'delete\'),\n    i18nTitle: t(\'deleteConnector\'),\n    showDialog: showDeleteConnectorConfirm,\n    onCancel: doCancelDeleteConnector,\n    onConfirm: doDeleteConnector\n  }), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Tr, {\n    onClick: function onClick(event) {\n      var _event$target;\n\n      // send the event only if the click didn\'t happen on the actions button\n      if (((_event$target = event.target) == null ? void 0 : _event$target.type) !== \'button\') {\n        onSelect();\n      }\n    },\n    className: (0,dist_esm_index_js_.css)(\'pf-c-table-row__item\', \'pf-m-selectable\', (selectedConnector == null ? void 0 : selectedConnector.id) === connector.id && \'pf-m-selected\')\n  }, index_js_eager_default().createElement(react_table_dist_esm_index_js_.Td, {\n    dataLabel: t(\'name\')\n  }, (_connector$metadata2 = connector.metadata) == null ? void 0 : _connector$metadata2.name), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Td, {\n    dataLabel: t(\'type\')\n  }, connector.connector_type_id), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Td, {\n    dataLabel: t(\'category\')\n  }, "TODO: MISSING"), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Td, {\n    dataLabel: t(\'status\')\n  }, index_js_eager_default().createElement(index_js_.Flex, null, index_js_eager_default().createElement(index_js_.FlexItem, {\n    spacer: {\n      "default": \'spacerSm\'\n    }\n  }, index_js_eager_default().createElement(ConnectorStatusIcon, {\n    id: connector.id,\n    status: connector.status\n  })), index_js_eager_default().createElement(index_js_.FlexItem, null, getStatusLabel(connector.status)))), index_js_eager_default().createElement(react_table_dist_esm_index_js_.Td, {\n    actions: {\n      items: actions\n    },\n    "data-testid": "actions-for-" + connector.id\n  })));\n};\n\nvar ConnectedConnectorsPage = function ConnectedConnectorsPage(_ref) {\n  var onCreateConnector = _ref.onCreateConnector;\n\n  var _useTranslation = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useAlert = (0,esm_index_js_eager_.useAlert)(),\n      addAlert = _useAlert.addAlert;\n\n  var _useAppContext = useAppContext(),\n      basePath = _useAppContext.basePath,\n      getToken = _useAppContext.getToken;\n\n  var onError = (0,index_js_eager_.useCallback)(function (description) {\n    addAlert({\n      id: \'connectors-table-error\',\n      variant: esm_index_js_eager_.AlertVariant.danger,\n      title: t(\'common.something_went_wrong\'),\n      description: description\n    });\n  }, [addAlert, t]);\n  return index_js_eager_default().createElement(machines_esm.ConnectorsMachineProvider, {\n    accessToken: getToken,\n    basePath: basePath,\n    onError: onError\n  }, index_js_eager_default().createElement(ConnectorsPage, {\n    onCreateConnector: onCreateConnector\n  }));\n};\nvar ConnectorsPage = function ConnectorsPage(_ref2) {\n  var onCreateConnector = _ref2.onCreateConnector;\n  var service = (0,machines_esm.useConnectorsMachineService)();\n  var isReady = (0,machines_esm.useConnectorsMachineIsReady)(service);\n  return isReady ? index_js_eager_default().createElement(ConnectorsPageBody, {\n    onCreateConnector: onCreateConnector\n  }) : index_js_eager_default().createElement(utils_esm.Loading, null);\n};\n\nvar ConnectorsPageBody = function ConnectorsPageBody(_ref3) {\n  var onCreateConnector = _ref3.onCreateConnector;\n  var service = (0,machines_esm.useConnectorsMachineService)();\n\n  var _useConnectorsMachine = (0,machines_esm.useConnectorsMachine)(service),\n      loading = _useConnectorsMachine.loading,\n      error = _useConnectorsMachine.error,\n      noResults = _useConnectorsMachine.noResults,\n      queryEmpty = _useConnectorsMachine.queryEmpty,\n      firstRequest = _useConnectorsMachine.firstRequest;\n\n  switch (true) {\n    case firstRequest:\n      return index_js_eager_default().createElement(utils_esm.Loading, null);\n\n    case queryEmpty:\n      return index_js_eager_default().createElement(utils_esm.NoMatchFound, {\n        onClear: function onClear() {\n          return service.send({\n            type: \'api.query\',\n            page: 1,\n            size: 10\n          });\n        }\n      });\n\n    case loading:\n      return index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(index_js_.PageSection, {\n        variant: \'light\'\n      }, index_js_eager_default().createElement(ConnectorsPageTitle, null)), index_js_eager_default().createElement(index_js_.PageSection, {\n        padding: {\n          "default": \'noPadding\'\n        },\n        isFilled: true\n      }, index_js_eager_default().createElement(index_js_.Card, null, index_js_eager_default().createElement(ConnectorsToolbar, null), index_js_eager_default().createElement(utils_esm.Loading, null))));\n\n    case noResults || error:\n      return index_js_eager_default().createElement(utils_esm.EmptyState, {\n        emptyStateProps: {\n          variant: utils_esm.EmptyStateVariant.GettingStarted\n        },\n        titleProps: {\n          title: \'cos.welcome_to_cos\'\n        },\n        emptyStateBodyProps: {\n          body: \'cos.welcome_empty_state_body\'\n        },\n        buttonProps: {\n          title: \'cos.create_cos\',\n          variant: index_js_.ButtonVariant.primary,\n          onClick: onCreateConnector\n        }\n      });\n\n    default:\n      return index_js_eager_default().createElement(ConnectorDrawer, null, index_js_eager_default().createElement(index_js_.PageSection, {\n        variant: \'light\'\n      }, index_js_eager_default().createElement(ConnectorsPageTitle, null)), index_js_eager_default().createElement(index_js_.PageSection, {\n        padding: {\n          "default": \'noPadding\'\n        },\n        isFilled: true\n      }, index_js_eager_default().createElement(ConnectorsTable, null)));\n  }\n};\n\nvar ConnectorsPageTitle = function ConnectorsPageTitle() {\n  var _useTranslation2 = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation2.t;\n\n  return index_js_eager_default().createElement(index_js_.TextContent, null, index_js_eager_default().createElement(index_js_.Title, {\n    headingLevel: "h1"\n  }, t(\'managedConnectors\')));\n};\n\nvar fetchConfigurator = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(connector, config) {\n    var defaultConfig;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            defaultConfig = Promise.resolve({\n              steps: false,\n              Configurator: false\n            });\n            return _context2.abrupt("return", new Promise( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(resolve) {\n                var federatedConfigurator;\n                return runtime_1.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return maybeGetFederatedConfiguratorForConnector(config, connector);\n\n                      case 3:\n                        federatedConfigurator = _context.sent;\n                        _context.next = 6;\n                        return injectFederatedModuleScript(federatedConfigurator.remoteEntry);\n\n                      case 6:\n                        resolve(loadFederatedConfigurator(federatedConfigurator.scope, federatedConfigurator.module));\n                        _context.next = 12;\n                        break;\n\n                      case 9:\n                        _context.prev = 9;\n                        _context.t0 = _context["catch"](0);\n                        resolve(defaultConfig);\n\n                      case 12:\n                      case "end":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 9]]);\n              }));\n\n              return function (_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 2:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchConfigurator(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar isValidConf = function isValidConf(maybeConf) {\n  return maybeConf && maybeConf.remoteEntry && typeof maybeConf.remoteEntry === \'string\' && maybeConf.scope && typeof maybeConf.scope === \'string\' && maybeConf.module && typeof maybeConf.module === \'string\';\n};\n\nvar maybeGetFederatedConfiguratorForConnector = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(config, connector) {\n    var maybeConfiguration;\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\'Fetched federated configurator remotes configuration\', config);\n            maybeConfiguration = config[connector.id];\n            console.log("Candidate configuration for \\"" + connector.id + "\\"", maybeConfiguration);\n\n            if (maybeConfiguration) {\n              _context3.next = 6;\n              break;\n            }\n\n            console.log("Couldn\'t find any configuration for the requested connector");\n            return _context3.abrupt("return", Promise.reject());\n\n          case 6:\n            if (!isValidConf(maybeConfiguration)) {\n              _context3.next = 9;\n              break;\n            }\n\n            console.log(\'Found a generic configuration for the connector\', maybeConfiguration);\n            return _context3.abrupt("return", maybeConfiguration);\n\n          case 9:\n            console.log("Couldn\'t find a valid configuration for the requested connector");\n            return _context3.abrupt("return", Promise.reject());\n\n          case 11:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function maybeGetFederatedConfiguratorForConnector(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar injectFederatedModuleScript = /*#__PURE__*/function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(url) {\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt("return", new Promise(function (resolve, reject) {\n              var element = document.createElement(\'script\');\n              element.src = url;\n              element.type = \'text/javascript\';\n              element.async = true;\n\n              element.onload = function () {\n                console.log("Dynamic federated module loaded: " + url);\n                document.head.removeChild(element);\n                resolve();\n              };\n\n              element.onerror = function () {\n                console.error("Dynamic federated module Error: " + url);\n                console.log("Dynamic federated module Removed: " + url);\n                document.head.removeChild(element);\n                reject();\n              };\n\n              document.head.appendChild(element);\n            }));\n\n          case 1:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function injectFederatedModuleScript(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nfunction loadFederatedConfigurator(_x7, _x8) {\n  return _loadFederatedConfigurator.apply(this, arguments);\n}\n\nfunction _loadFederatedConfigurator() {\n  _loadFederatedConfigurator = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(scope, module) {\n    var container, factory, federatedConfigurationConfig;\n    return runtime_1.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return __webpack_require__.I(\'default\');\n\n          case 2:\n            container = window[scope]; // or get the container somewhere else\n            // Initialize the container, it may provide shared modules\n\n            _context5.next = 5;\n            return container.init(__webpack_require__.S["default"]);\n\n          case 5:\n            _context5.next = 7;\n            return window[scope].get(module);\n\n          case 7:\n            factory = _context5.sent;\n            federatedConfigurationConfig = factory();\n            console.log("loaded federated configurator configuration from " + scope, federatedConfigurationConfig);\n            return _context5.abrupt("return", federatedConfigurationConfig["default"]);\n\n          case 11:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _loadFederatedConfigurator.apply(this, arguments);\n}\n\nvar CreateConnectorPage = function CreateConnectorPage(_ref) {\n  var onSave = _ref.onSave,\n      onClose = _ref.onClose;\n\n  var _useTranslation = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useConfig = (0,esm_index_js_eager_.useConfig)(),\n      cos = _useConfig.cos;\n\n  var _useBasename = (0,esm_index_js_eager_.useBasename)(),\n      getBasename = _useBasename.getBasename;\n\n  var _useAppContext = useAppContext(),\n      basePath = _useAppContext.basePath,\n      getToken = _useAppContext.getToken;\n\n  var basename = getBasename();\n\n  var _useState = (0,index_js_eager_.useState)(false),\n      askForLeaveConfirm = _useState[0],\n      setAskForLeaveConfirm = _useState[1];\n\n  var openLeaveConfirm = function openLeaveConfirm() {\n    return setAskForLeaveConfirm(true);\n  };\n\n  var closeLeaveConfirm = function closeLeaveConfirm() {\n    return setAskForLeaveConfirm(false);\n  };\n\n  return index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, index_js_eager_default().createElement(index_js_.PageSection, {\n    variant: \'light\',\n    hasShadowBottom: true\n  }, index_js_eager_default().createElement(index_js_.Breadcrumb, null, index_js_eager_default().createElement(index_js_.BreadcrumbItem, {\n    to: basename\n  }, t(\'Connectors\')), index_js_eager_default().createElement(index_js_.BreadcrumbItem, {\n    isActive: true\n  }, t(\'Create connector\'))), index_js_eager_default().createElement(index_js_.Level, {\n    className: \'pf-u-pt-md pf-u-pb-md\'\n  }, index_js_eager_default().createElement(index_js_.Title, {\n    headingLevel: "h1"\n  }, t(\'Create connector\')))), index_js_eager_default().createElement(index_js_.PageSection, {\n    padding: {\n      "default": \'noPadding\'\n    },\n    style: {\n      zIndex: 0\n    },\n    type: \'wizard\'\n  }, index_js_eager_default().createElement(machines_esm.CreationWizardMachineProvider, {\n    accessToken: getToken,\n    basePath: basePath,\n    fetchConfigurator: function fetchConfigurator$1(connector) {\n      return fetchConfigurator(connector, cos.configurators);\n    },\n    onSave: onSave\n  }, index_js_eager_default().createElement(dist.CreationWizard, {\n    onClose: openLeaveConfirm\n  }), index_js_eager_default().createElement(index_js_.Modal, {\n    title: t(\'Leave page?\'),\n    variant: \'small\',\n    isOpen: askForLeaveConfirm,\n    onClose: closeLeaveConfirm,\n    actions: [index_js_eager_default().createElement(index_js_.Button, {\n      key: "confirm",\n      variant: "primary",\n      onClick: onClose\n    }, "Confirm"), index_js_eager_default().createElement(index_js_.Button, {\n      key: "cancel",\n      variant: "link",\n      onClick: closeLeaveConfirm\n    }, "Cancel")]\n  }, t(\'Changes you have made will be lost and no connector will be created.\')))));\n};\n\nvar CosUiRoutes = function CosUiRoutes(_ref) {\n  var getToken = _ref.getToken,\n      apiBasepath = _ref.apiBasepath;\n\n  var _useTranslation = (0,es_index_js_.useTranslation)(),\n      t = _useTranslation.t;\n\n  var _useAlert = (0,esm_index_js_eager_.useAlert)(),\n      addAlert = _useAlert.addAlert;\n\n  var history = (0,react_router_dom_js_eager_.useHistory)();\n  var goToConnectorsList = (0,index_js_eager_.useCallback)(function () {\n    return history.push(\'/\');\n  }, [history]);\n  var goToCreateConnector = (0,index_js_eager_.useCallback)(function () {\n    return history.push(\'/create-connector\');\n  }, [history]);\n  var onConnectorSave = (0,index_js_eager_.useCallback)(function () {\n    addAlert({\n      id: \'connector-created\',\n      variant: esm_index_js_eager_.AlertVariant.success,\n      title: t(\'wizard.creation-success\')\n    });\n    goToConnectorsList();\n  }, [addAlert, goToConnectorsList, t]);\n  return index_js_eager_default().createElement(AppContextProvider, {\n    getToken: getToken,\n    basePath: apiBasepath\n  }, index_js_eager_default().createElement(react_router_dom_js_eager_.Switch, null, index_js_eager_default().createElement(react_router_dom_js_eager_.Route, {\n    path: \'/\',\n    exact: true\n  }, index_js_eager_default().createElement(ConnectedConnectorsPage, {\n    onCreateConnector: goToCreateConnector\n  })), index_js_eager_default().createElement(react_router_dom_js_eager_.Route, {\n    path: \'/create-connector\'\n  }, index_js_eager_default().createElement(CreateConnectorPage, {\n    onSave: onConnectorSave,\n    onClose: goToConnectorsList\n  }))));\n};\n\nvar Alerts = function Alerts(_ref) {\n  var alerts = _ref.alerts,\n      onCloseAlert = _ref.onCloseAlert;\n  return React__default.createElement(AlertGroup, {\n    isToast: true\n  }, alerts.map(function (_ref2) {\n    var id = _ref2.id,\n        variant = _ref2.variant,\n        title = _ref2.title,\n        description = _ref2.description,\n        dataTestId = _ref2.dataTestId,\n        rest = _objectWithoutPropertiesLoose(_ref2, ["id", "variant", "title", "description", "dataTestId"]);\n\n    return React__default.createElement(Alert, _extends({\n      key: id,\n      isLiveRegion: true,\n      variant: AlertVariant$1[variant],\n      variantLabel: "",\n      title: title,\n      actionClose: React__default.createElement(AlertActionCloseButton, {\n        title: title,\n        onClose: function onClose() {\n          return onCloseAlert(id);\n        }\n      }),\n      "data-testid": dataTestId\n    }, rest), description);\n  }));\n};\n\nvar AlertProvider = function AlertProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      alerts = _useState[0],\n      setAlerts = _useState[1];\n\n  var _useState2 = useState([]),\n      timers = _useState2[0],\n      setTimers = _useState2[1];\n\n  useEffect(function () {\n    var timersKeys = timers.map(function (timer) {\n      return timer.key;\n    });\n    var timeOuts = alerts.filter(function (alert) {\n      return !timersKeys.includes(alert == null ? void 0 : alert.id);\n    }).map(function (alert) {\n      var _alert$id = alert.id,\n          id = _alert$id === void 0 ? \'\' : _alert$id;\n      var timeOut = setTimeout(function () {\n        return hideAlert(id);\n      }, 8000);\n      return {\n        key: alert.id,\n        timeOut: timeOut\n      };\n    });\n    setTimers([].concat(timers, timeOuts));\n    return function () {\n      return timers.forEach(function (timer) {\n        return (timer == null ? void 0 : timer.timeOut) && clearTimeout(timer.timeOut);\n      });\n    };\n  }, [alerts]);\n\n  var createId = function createId() {\n    return new Date().getTime();\n  };\n\n  var hideAlert = function hideAlert(key) {\n    setAlerts(function (alerts) {\n      return [].concat(alerts.filter(function (el) {\n        return el.id !== key;\n      }));\n    });\n    setTimers(function (timers) {\n      return [].concat(timers.filter(function (timer) {\n        return timer.key === key;\n      }));\n    });\n  };\n\n  var addAlert = function addAlert(props) {\n    var id = createId().toString();\n    setAlerts([].concat(alerts, [_extends({}, props, {\n      id: id\n    })]));\n  };\n\n  return React__default.createElement(AlertContext.Provider, {\n    value: {\n      addAlert: addAlert\n    }\n  }, React__default.createElement(Alerts, {\n    alerts: alerts,\n    onCloseAlert: hideAlert\n  }), children);\n};\n\nvar keycloak$1;\nvar DemoApp = function DemoApp() {\n  var _keycloak;\n\n  var _useState = useState(false),\n      initialized = _useState[0],\n      setInitialized = _useState[1];\n\n  var getBasename = useCallback(function () {\n    return \'/\';\n  }, []); // Initialize the client\n\n  useEffect(function () {\n    var init = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {\n        return runtime_1.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getKeycloakInstance();\n\n              case 2:\n                keycloak$1 = _context.sent;\n                setInitialized(true);\n\n              case 4:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function init() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    init();\n  }, []);\n  var config = {\n    cos: {\n      apiBasePath: "https://cos-fm.apps.kammellol.rhmw-integrations.net",\n      configurators: {\n        \'debezium-mongodb-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        },\n        \'debezium-mysql-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        },\n        \'debezium-postgres-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        }\n      }\n    }\n  };\n  return React__default.createElement(KeycloakContext.Provider, {\n    value: {\n      keycloak: keycloak$1,\n      profile: (_keycloak = keycloak$1) == null ? void 0 : _keycloak.profile\n    }\n  }, React__default.createElement(KeycloakAuthProvider, null, React__default.createElement(BasenameContext.Provider, {\n    value: {\n      getBasename: getBasename\n    }\n  }, React__default.createElement(ConfigContext.Provider, {\n    value: config\n  }, React__default.createElement(I18nextProvider, {\n    i18n: i18n\n  }, React__default.createElement(AlertProvider, null, React__default.createElement(React__default.Suspense, {\n    fallback: React__default.createElement(Loading, null)\n  }, React__default.createElement(BrowserRouter, null, React__default.createElement(AppLayout, null, initialized ? React__default.createElement(ConnectedRoutes, null) : React__default.createElement(Spinner, null))))))))));\n};\n\nvar ConnectedRoutes = function ConnectedRoutes() {\n  var auth = useAuth();\n\n  var _useConfig = useConfig(),\n      cos = _useConfig.cos;\n\n  return React__default.createElement(CosUiRoutes, {\n    getToken: auth.kas.getToken,\n    apiBasepath: cos.apiBasePath\n  });\n};\n\nvar E2EApp = function E2EApp() {\n  var getBasename = useCallback(function () {\n    return \'/\';\n  }, []);\n  var config = {\n    cos: {\n      apiBasePath: \'localhost\',\n      configurators: {\n        \'debezium-mongodb-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        },\n        \'debezium-mysql-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        },\n        \'debezium-postgres-1.5.0.Final\': {\n          remoteEntry: \'https://dbz-ui.apps.kammellol.rhmw-integrations.net/dbz-connector-configurator.remoteEntry.js\',\n          scope: \'debezium_ui\',\n          module: \'./config\'\n        }\n      }\n    }\n  };\n  var authTokenContext = {\n    kas: {\n      getToken: function getToken() {\n        return Promise.resolve(\'dummy\');\n      }\n    },\n    getUsername: function getUsername() {\n      return Promise.resolve(\'username\');\n    }\n  };\n  return React__default.createElement(AuthContext.Provider, {\n    value: authTokenContext\n  }, React__default.createElement(BasenameContext.Provider, {\n    value: {\n      getBasename: getBasename\n    }\n  }, React__default.createElement(ConfigContext.Provider, {\n    value: config\n  }, React__default.createElement(I18nextProvider, {\n    i18n: i18n\n  }, React__default.createElement(AlertProvider, null, React__default.createElement(React__default.Suspense, {\n    fallback: React__default.createElement(Loading, null)\n  }, React__default.createElement(BrowserRouter, null, React__default.createElement(AppLayout, null, React__default.createElement(ConnectedRoutes$1, null)))))))));\n};\n\nvar ConnectedRoutes$1 = function ConnectedRoutes() {\n  var auth = useAuth();\n\n  var _useConfig = useConfig(),\n      cos = _useConfig.cos;\n\n  return React__default.createElement(CosUiRoutes, {\n    getToken: auth.kas.getToken,\n    apiBasepath: cos.apiBasePath\n  });\n};\n\nvar FederatedApp = function FederatedApp() {\n  var _useConfig = (0,esm_index_js_eager_.useConfig)(),\n      cos = _useConfig.cos;\n\n  var _useAuth = (0,esm_index_js_eager_.useAuth)(),\n      kas = _useAuth.kas;\n\n  var _useBasename = (0,esm_index_js_eager_.useBasename)(),\n      getBasename = _useBasename.getBasename;\n\n  return index_js_eager_default().createElement(es_index_js_.I18nextProvider, {\n    i18n: (i18next_js_default())\n  }, index_js_eager_default().createElement((index_js_eager_default()).Suspense, {\n    fallback: index_js_eager_default().createElement(utils_esm.Loading, null)\n  }, index_js_eager_default().createElement(react_router_dom_js_eager_.BrowserRouter, {\n    basename: getBasename()\n  }, index_js_eager_default().createElement(CosUiRoutes, {\n    getToken: kas.getToken,\n    apiBasepath: cos.apiBasePath\n  }))));\n};\n\n\n//# sourceMappingURL=app.esm.js.map\n\n;// CONCATENATED MODULE: ./src/federated.ts\n\n\n\n/* harmony default export */ const federated = (FederatedApp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71487\n')},31100:function(__unused_webpack_module,exports,__webpack_require__){eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Connector Service Fleet Manager\n * Connector Service Fleet Manager is a Rest API to manage connectors.\n *\n * The version of the OpenAPI document: 0.0.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SecurityApi = exports.SecurityApiFactory = exports.SecurityApiFp = exports.SecurityApiAxiosParamCreator = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.ConnectorsApi = exports.ConnectorsApiFactory = exports.ConnectorsApiFp = exports.ConnectorsApiAxiosParamCreator = exports.ConnectorTypesApi = exports.ConnectorTypesApiFactory = exports.ConnectorTypesApiFp = exports.ConnectorTypesApiAxiosParamCreator = exports.ConnectorClustersApi = exports.ConnectorClustersApiFactory = exports.ConnectorClustersApiFp = exports.ConnectorClustersApiAxiosParamCreator = exports.ConnectorTypeAllOfLabelsEnum = exports.ConnectorTypeLabelsEnum = void 0;\nconst axios_1 = __webpack_require__(49198);\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(98691);\n// @ts-ignore\nconst base_1 = __webpack_require__(50778);\n/**\n    * @export\n    * @enum {string}\n    */\nvar ConnectorTypeLabelsEnum;\n(function (ConnectorTypeLabelsEnum) {\n    ConnectorTypeLabelsEnum[\"Sink\"] = \"sink\";\n    ConnectorTypeLabelsEnum[\"Source\"] = \"source\";\n})(ConnectorTypeLabelsEnum = exports.ConnectorTypeLabelsEnum || (exports.ConnectorTypeLabelsEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ConnectorTypeAllOfLabelsEnum;\n(function (ConnectorTypeAllOfLabelsEnum) {\n    ConnectorTypeAllOfLabelsEnum[\"Sink\"] = \"sink\";\n    ConnectorTypeAllOfLabelsEnum[\"Source\"] = \"source\";\n})(ConnectorTypeAllOfLabelsEnum = exports.ConnectorTypeAllOfLabelsEnum || (exports.ConnectorTypeAllOfLabelsEnum = {}));\n/**\n * ConnectorClustersApi - axios parameter creator\n * @export\n */\nconst ConnectorClustersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a new connector cluster\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {ConnectorCluster} connectorCluster Connector cluster data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnectorCluster: (async, connectorCluster, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'async' is not null or undefined\n            common_1.assertParamExists('createConnectorCluster', 'async', async);\n            // verify required parameter 'connectorCluster' is not null or undefined\n            common_1.assertParamExists('createConnectorCluster', 'connectorCluster', connectorCluster);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_clusters`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(connectorCluster, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnectorCluster: (connectorClusterId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorClusterId' is not null or undefined\n            common_1.assertParamExists('deleteConnectorCluster', 'connectorClusterId', connectorClusterId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}`\n                .replace(`{${\"connector_cluster_id\"}}`, encodeURIComponent(String(connectorClusterId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Get a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorCluster: (connectorClusterId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorClusterId' is not null or undefined\n            common_1.assertParamExists('getConnectorCluster', 'connectorClusterId', connectorClusterId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}`\n                .replace(`{${\"connector_cluster_id\"}}`, encodeURIComponent(String(connectorClusterId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Get a connector cluster\\'s addon parameters\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorClusterAddonParameters: (connectorClusterId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorClusterId' is not null or undefined\n            common_1.assertParamExists('getConnectorClusterAddonParameters', 'connectorClusterId', connectorClusterId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters`\n                .replace(`{${\"connector_cluster_id\"}}`, encodeURIComponent(String(connectorClusterId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of connector clusters\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorClusters: (page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_clusters`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\nexports.ConnectorClustersApiAxiosParamCreator = ConnectorClustersApiAxiosParamCreator;\n/**\n * ConnectorClustersApi - functional programming interface\n * @export\n */\nconst ConnectorClustersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.ConnectorClustersApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Create a new connector cluster\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {ConnectorCluster} connectorCluster Connector cluster data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnectorCluster(async, connectorCluster, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConnectorCluster(async, connectorCluster, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnectorCluster(connectorClusterId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConnectorCluster(connectorClusterId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorCluster(connectorClusterId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConnectorCluster(connectorClusterId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get a connector cluster\\'s addon parameters\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorClusterAddonParameters(connectorClusterId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConnectorClusterAddonParameters(connectorClusterId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of connector clusters\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorClusters(page, size, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConnectorClusters(page, size, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\nexports.ConnectorClustersApiFp = ConnectorClustersApiFp;\n/**\n * ConnectorClustersApi - factory interface\n * @export\n */\nconst ConnectorClustersApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.ConnectorClustersApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Create a new connector cluster\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {ConnectorCluster} connectorCluster Connector cluster data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnectorCluster(async, connectorCluster, options) {\n            return localVarFp.createConnectorCluster(async, connectorCluster, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnectorCluster(connectorClusterId, options) {\n            return localVarFp.deleteConnectorCluster(connectorClusterId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get a connector cluster\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorCluster(connectorClusterId, options) {\n            return localVarFp.getConnectorCluster(connectorClusterId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get a connector cluster\\'s addon parameters\n         * @param {string} connectorClusterId The id of the connector cluster\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorClusterAddonParameters(connectorClusterId, options) {\n            return localVarFp.getConnectorClusterAddonParameters(connectorClusterId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of connector clusters\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorClusters(page, size, options) {\n            return localVarFp.listConnectorClusters(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ConnectorClustersApiFactory = ConnectorClustersApiFactory;\n/**\n * ConnectorClustersApi - object-oriented interface\n * @export\n * @class ConnectorClustersApi\n * @extends {BaseAPI}\n */\nclass ConnectorClustersApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Create a new connector cluster\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {ConnectorCluster} connectorCluster Connector cluster data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorClustersApi\n     */\n    createConnectorCluster(async, connectorCluster, options) {\n        return exports.ConnectorClustersApiFp(this.configuration).createConnectorCluster(async, connectorCluster, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a connector cluster\n     * @param {string} connectorClusterId The id of the connector cluster\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorClustersApi\n     */\n    deleteConnectorCluster(connectorClusterId, options) {\n        return exports.ConnectorClustersApiFp(this.configuration).deleteConnectorCluster(connectorClusterId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get a connector cluster\n     * @param {string} connectorClusterId The id of the connector cluster\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorClustersApi\n     */\n    getConnectorCluster(connectorClusterId, options) {\n        return exports.ConnectorClustersApiFp(this.configuration).getConnectorCluster(connectorClusterId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get a connector cluster\\'s addon parameters\n     * @param {string} connectorClusterId The id of the connector cluster\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorClustersApi\n     */\n    getConnectorClusterAddonParameters(connectorClusterId, options) {\n        return exports.ConnectorClustersApiFp(this.configuration).getConnectorClusterAddonParameters(connectorClusterId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of connector clusters\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorClustersApi\n     */\n    listConnectorClusters(page, size, options) {\n        return exports.ConnectorClustersApiFp(this.configuration).listConnectorClusters(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ConnectorClustersApi = ConnectorClustersApi;\n/**\n * ConnectorTypesApi - axios parameter creator\n * @export\n */\nconst ConnectorTypesApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get a connector type by id\n         * @param {string} connectorTypeId The id of the connector type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorTypeByID: (connectorTypeId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorTypeId' is not null or undefined\n            common_1.assertParamExists('getConnectorTypeByID', 'connectorTypeId', connectorTypeId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_types/{connector_type_id}`\n                .replace(`{${\"connector_type_id\"}}`, encodeURIComponent(String(connectorTypeId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorTypes: (page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connector_types`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\nexports.ConnectorTypesApiAxiosParamCreator = ConnectorTypesApiAxiosParamCreator;\n/**\n * ConnectorTypesApi - functional programming interface\n * @export\n */\nconst ConnectorTypesApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.ConnectorTypesApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Get a connector type by id\n         * @param {string} connectorTypeId The id of the connector type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorTypeByID(connectorTypeId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConnectorTypeByID(connectorTypeId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorTypes(page, size, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConnectorTypes(page, size, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\nexports.ConnectorTypesApiFp = ConnectorTypesApiFp;\n/**\n * ConnectorTypesApi - factory interface\n * @export\n */\nconst ConnectorTypesApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.ConnectorTypesApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Get a connector type by id\n         * @param {string} connectorTypeId The id of the connector type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectorTypeByID(connectorTypeId, options) {\n            return localVarFp.getConnectorTypeByID(connectorTypeId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectorTypes(page, size, options) {\n            return localVarFp.listConnectorTypes(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ConnectorTypesApiFactory = ConnectorTypesApiFactory;\n/**\n * ConnectorTypesApi - object-oriented interface\n * @export\n * @class ConnectorTypesApi\n * @extends {BaseAPI}\n */\nclass ConnectorTypesApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Get a connector type by id\n     * @param {string} connectorTypeId The id of the connector type\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorTypesApi\n     */\n    getConnectorTypeByID(connectorTypeId, options) {\n        return exports.ConnectorTypesApiFp(this.configuration).getConnectorTypeByID(connectorTypeId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of connector types\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorTypesApi\n     */\n    listConnectorTypes(page, size, options) {\n        return exports.ConnectorTypesApiFp(this.configuration).listConnectorTypes(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ConnectorTypesApi = ConnectorTypesApi;\n/**\n * ConnectorsApi - axios parameter creator\n * @export\n */\nconst ConnectorsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a new connector\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {Connector} connector Connector data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnector: (async, connector, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'async' is not null or undefined\n            common_1.assertParamExists('createConnector', 'async', async);\n            // verify required parameter 'connector' is not null or undefined\n            common_1.assertParamExists('createConnector', 'connector', connector);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connectors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(connector, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnector: (connectorId, kafkaId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorId' is not null or undefined\n            common_1.assertParamExists('deleteConnector', 'connectorId', connectorId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connectors/{connector_id}`\n                .replace(`{${\"connector_id\"}}`, encodeURIComponent(String(connectorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (kafkaId !== undefined) {\n                localVarQueryParameter['kafka_id'] = kafkaId;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Get a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnector: (connectorId, kafkaId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorId' is not null or undefined\n            common_1.assertParamExists('getConnector', 'connectorId', connectorId);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connectors/{connector_id}`\n                .replace(`{${\"connector_id\"}}`, encodeURIComponent(String(connectorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (kafkaId !== undefined) {\n                localVarQueryParameter['kafka_id'] = kafkaId;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectors: (page, size, kafkaId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connectors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            if (kafkaId !== undefined) {\n                localVarQueryParameter['kafka_id'] = kafkaId;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary patch a connector\n         * @param {string} connectorId The id of the connector\n         * @param {object} body Data to patch the connector with\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchConnector: (connectorId, body, kafkaId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'connectorId' is not null or undefined\n            common_1.assertParamExists('patchConnector', 'connectorId', connectorId);\n            // verify required parameter 'body' is not null or undefined\n            common_1.assertParamExists('patchConnector', 'body', body);\n            const localVarPath = `/api/connector_mgmt/v1/kafka_connectors/{connector_id}`\n                .replace(`{${\"connector_id\"}}`, encodeURIComponent(String(connectorId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (kafkaId !== undefined) {\n                localVarQueryParameter['kafka_id'] = kafkaId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\nexports.ConnectorsApiAxiosParamCreator = ConnectorsApiAxiosParamCreator;\n/**\n * ConnectorsApi - functional programming interface\n * @export\n */\nconst ConnectorsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.ConnectorsApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Create a new connector\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {Connector} connector Connector data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnector(async, connector, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConnector(async, connector, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnector(connectorId, kafkaId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConnector(connectorId, kafkaId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnector(connectorId, kafkaId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConnector(connectorId, kafkaId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectors(page, size, kafkaId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConnectors(page, size, kafkaId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary patch a connector\n         * @param {string} connectorId The id of the connector\n         * @param {object} body Data to patch the connector with\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchConnector(connectorId, body, kafkaId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchConnector(connectorId, body, kafkaId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\nexports.ConnectorsApiFp = ConnectorsApiFp;\n/**\n * ConnectorsApi - factory interface\n * @export\n */\nconst ConnectorsApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.ConnectorsApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Create a new connector\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {Connector} connector Connector data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConnector(async, connector, options) {\n            return localVarFp.createConnector(async, connector, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConnector(connectorId, kafkaId, options) {\n            return localVarFp.deleteConnector(connectorId, kafkaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get a connector\n         * @param {string} connectorId The id of the connector\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnector(connectorId, kafkaId, options) {\n            return localVarFp.getConnector(connectorId, kafkaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of connector types\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConnectors(page, size, kafkaId, options) {\n            return localVarFp.listConnectors(page, size, kafkaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary patch a connector\n         * @param {string} connectorId The id of the connector\n         * @param {object} body Data to patch the connector with\n         * @param {string} [kafkaId] The kafka cluster id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchConnector(connectorId, body, kafkaId, options) {\n            return localVarFp.patchConnector(connectorId, body, kafkaId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.ConnectorsApiFactory = ConnectorsApiFactory;\n/**\n * ConnectorsApi - object-oriented interface\n * @export\n * @class ConnectorsApi\n * @extends {BaseAPI}\n */\nclass ConnectorsApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Create a new connector\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {Connector} connector Connector data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorsApi\n     */\n    createConnector(async, connector, options) {\n        return exports.ConnectorsApiFp(this.configuration).createConnector(async, connector, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a connector\n     * @param {string} connectorId The id of the connector\n     * @param {string} [kafkaId] The kafka cluster id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorsApi\n     */\n    deleteConnector(connectorId, kafkaId, options) {\n        return exports.ConnectorsApiFp(this.configuration).deleteConnector(connectorId, kafkaId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get a connector\n     * @param {string} connectorId The id of the connector\n     * @param {string} [kafkaId] The kafka cluster id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorsApi\n     */\n    getConnector(connectorId, kafkaId, options) {\n        return exports.ConnectorsApiFp(this.configuration).getConnector(connectorId, kafkaId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of connector types\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [kafkaId] The kafka cluster id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorsApi\n     */\n    listConnectors(page, size, kafkaId, options) {\n        return exports.ConnectorsApiFp(this.configuration).listConnectors(page, size, kafkaId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary patch a connector\n     * @param {string} connectorId The id of the connector\n     * @param {object} body Data to patch the connector with\n     * @param {string} [kafkaId] The kafka cluster id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConnectorsApi\n     */\n    patchConnector(connectorId, body, kafkaId, options) {\n        return exports.ConnectorsApiFp(this.configuration).patchConnector(connectorId, body, kafkaId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.ConnectorsApi = ConnectorsApi;\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nconst DefaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Creates a Kafka request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: (async, kafkaRequestPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'async' is not null or undefined\n            common_1.assertParamExists('createKafka', 'async', async);\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            common_1.assertParamExists('createKafka', 'kafkaRequestPayload', kafkaRequestPayload);\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(kafkaRequestPayload, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Deletes a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: (id, async, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('deleteKafkaById', 'id', id);\n            // verify required parameter 'async' is not null or undefined\n            common_1.assertParamExists('deleteKafkaById', 'async', async);\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the list of supported regions of the supported cloud provider\n         * @param {string} id The ID of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviderRegions: (id, page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('getCloudProviderRegions', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the list of supported cloud providers\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviders: (page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('getKafkaById', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results are ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkas: (page, size, orderBy, search, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns metrics with instant query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: (id, filters, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('getMetricsByInstantQuery', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns metrics with timeseries range query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {number} duration The length of time in minutes for which to return the metrics\n         * @param {number} interval The interval in seconds between data points\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: (id, duration, interval, filters, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('getMetricsByRangeQuery', 'id', id);\n            // verify required parameter 'duration' is not null or undefined\n            common_1.assertParamExists('getMetricsByRangeQuery', 'duration', duration);\n            // verify required parameter 'interval' is not null or undefined\n            common_1.assertParamExists('getMetricsByRangeQuery', 'interval', interval);\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the status of resources, such as whether maximum service capacity has been reached\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceStatus: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/kafkas_mgmt/v1/status`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVersionMetadata: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/kafkas_mgmt/v1`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\nexports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nconst DefaultApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.DefaultApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Creates a Kafka request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async, kafkaRequestPayload, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createKafka(async, kafkaRequestPayload, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Deletes a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id, async, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteKafkaById(id, async, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the list of supported regions of the supported cloud provider\n         * @param {string} id The ID of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviderRegions(id, page, size, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCloudProviderRegions(id, page, size, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the list of supported cloud providers\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviders(page, size, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCloudProviders(page, size, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getKafkaById(id, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results are ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkas(page, size, orderBy, search, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getKafkas(page, size, orderBy, search, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns metrics with instant query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id, filters, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricsByInstantQuery(id, filters, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns metrics with timeseries range query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {number} duration The length of time in minutes for which to return the metrics\n         * @param {number} interval The interval in seconds between data points\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id, duration, interval, filters, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricsByRangeQuery(id, duration, interval, filters, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the status of resources, such as whether maximum service capacity has been reached\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceStatus(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getServiceStatus(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVersionMetadata(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVersionMetadata(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\nexports.DefaultApiFp = DefaultApiFp;\n/**\n * DefaultApi - factory interface\n * @export\n */\nconst DefaultApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.DefaultApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Creates a Kafka request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async, kafkaRequestPayload, options) {\n            return localVarFp.createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Deletes a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id, async, options) {\n            return localVarFp.deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the list of supported regions of the supported cloud provider\n         * @param {string} id The ID of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviderRegions(id, page, size, options) {\n            return localVarFp.getCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the list of supported cloud providers\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCloudProviders(page, size, options) {\n            return localVarFp.getCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a Kafka request by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id, options) {\n            return localVarFp.getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results are ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkas(page, size, orderBy, search, options) {\n            return localVarFp.getKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns metrics with instant query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id, filters, options) {\n            return localVarFp.getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns metrics with timeseries range query by Kafka ID\n         * @param {string} id The ID of record\n         * @param {number} duration The length of time in minutes for which to return the metrics\n         * @param {number} interval The interval in seconds between data points\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id, duration, interval, filters, options) {\n            return localVarFp.getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the status of resources, such as whether maximum service capacity has been reached\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceStatus(options) {\n            return localVarFp.getServiceStatus(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVersionMetadata(options) {\n            return localVarFp.getVersionMetadata(options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.DefaultApiFactory = DefaultApiFactory;\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nclass DefaultApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Creates a Kafka request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    createKafka(async, kafkaRequestPayload, options) {\n        return exports.DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Deletes a Kafka request by ID\n     * @param {string} id The ID of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    deleteKafkaById(id, async, options) {\n        return exports.DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the list of supported regions of the supported cloud provider\n     * @param {string} id The ID of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getCloudProviderRegions(id, page, size, options) {\n        return exports.DefaultApiFp(this.configuration).getCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the list of supported cloud providers\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getCloudProviders(page, size, options) {\n        return exports.DefaultApiFp(this.configuration).getCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a Kafka request by ID\n     * @param {string} id The ID of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getKafkaById(id, options) {\n        return exports.DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results are ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getKafkas(page, size, orderBy, search, options) {\n        return exports.DefaultApiFp(this.configuration).getKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns metrics with instant query by Kafka ID\n     * @param {string} id The ID of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getMetricsByInstantQuery(id, filters, options) {\n        return exports.DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns metrics with timeseries range query by Kafka ID\n     * @param {string} id The ID of record\n     * @param {number} duration The length of time in minutes for which to return the metrics\n     * @param {number} interval The interval in seconds between data points\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getMetricsByRangeQuery(id, duration, interval, filters, options) {\n        return exports.DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the status of resources, such as whether maximum service capacity has been reached\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getServiceStatus(options) {\n        return exports.DefaultApiFp(this.configuration).getServiceStatus(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    getVersionMetadata(options) {\n        return exports.DefaultApiFp(this.configuration).getVersionMetadata(options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.DefaultApi = DefaultApi;\n/**\n * SecurityApi - axios parameter creator\n * @export\n */\nconst SecurityApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Creates a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest Service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: (serviceAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            common_1.assertParamExists('createServiceAccount', 'serviceAccountRequest', serviceAccountRequest);\n            const localVarPath = `/api/kafkas_mgmt/v1/service_accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(serviceAccountRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Deletes a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccountById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('deleteServiceAccountById', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/service_accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returned service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('getServiceAccountById', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/service_accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccounts: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/api/kafkas_mgmt/v1/service_accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Resets the credentials for a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'id' is not null or undefined\n            common_1.assertParamExists('resetServiceAccountCreds', 'id', id);\n            const localVarPath = `/api/kafkas_mgmt/v1/service_accounts/{id}/reset_credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Bearer required\n            // http bearer authentication required\n            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\nexports.SecurityApiAxiosParamCreator = SecurityApiAxiosParamCreator;\n/**\n * SecurityApi - functional programming interface\n * @export\n */\nconst SecurityApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.SecurityApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Creates a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest Service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createServiceAccount(serviceAccountRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Deletes a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccountById(id, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteServiceAccountById(id, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returned service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getServiceAccountById(id, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccounts(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.getServiceAccounts(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Resets the credentials for a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetServiceAccountCreds(id, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\nexports.SecurityApiFp = SecurityApiFp;\n/**\n * SecurityApi - factory interface\n * @export\n */\nconst SecurityApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.SecurityApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Creates a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest Service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest, options) {\n            return localVarFp.createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Deletes a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccountById(id, options) {\n            return localVarFp.deleteServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returned service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id, options) {\n            return localVarFp.getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccounts(options) {\n            return localVarFp.getServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Resets the credentials for a service account by ID\n         * @param {string} id The ID of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id, options) {\n            return localVarFp.resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\nexports.SecurityApiFactory = SecurityApiFactory;\n/**\n * SecurityApi - object-oriented interface\n * @export\n * @class SecurityApi\n * @extends {BaseAPI}\n */\nclass SecurityApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Creates a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest Service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SecurityApi\n     */\n    createServiceAccount(serviceAccountRequest, options) {\n        return exports.SecurityApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Deletes a service account by ID\n     * @param {string} id The ID of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SecurityApi\n     */\n    deleteServiceAccountById(id, options) {\n        return exports.SecurityApiFp(this.configuration).deleteServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returned service account by ID\n     * @param {string} id The ID of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SecurityApi\n     */\n    getServiceAccountById(id, options) {\n        return exports.SecurityApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SecurityApi\n     */\n    getServiceAccounts(options) {\n        return exports.SecurityApiFp(this.configuration).getServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Resets the credentials for a service account by ID\n     * @param {string} id The ID of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SecurityApi\n     */\n    resetServiceAccountCreds(id, options) {\n        return exports.SecurityApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.SecurityApi = SecurityApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31100\n")},50778:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Connector Service Fleet Manager\n * Connector Service Fleet Manager is a Rest API to manage connectors.\n *\n * The version of the OpenAPI document: 0.0.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst axios_1 = __webpack_require__(49198);\nexports.BASE_PATH = "https://api.openshift.com".replace(/\\/+$/, "");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: ",",\n    ssv: " ",\n    tsv: "\\t",\n    pipes: "|",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nclass BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nclass RequiredError extends Error {\n    constructor(field, msg) {\n        super(msg);\n        this.field = field;\n        this.name = "RequiredError";\n    }\n}\nexports.RequiredError = RequiredError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3NzguanMiLCJtYXBwaW5ncyI6IjBCQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsZUFBZSxHQUFHLDBCQUEwQixHQUFHLGlCQUFpQjtBQUN4RjtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsS0FBTztBQUMvQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29zLXVpLWFwcHMvY29zLXVpLy4uLy4uL3BhY2thZ2VzL2FwaS9kaXN0L2Jhc2UuanM/MmIyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyIGlzIGEgUmVzdCBBUEkgdG8gbWFuYWdlIGNvbm5lY3RvcnMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4zXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gZXhwb3J0cy5CYXNlQVBJID0gZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSBleHBvcnRzLkJBU0VfUEFUSCA9IHZvaWQgMDtcbi8vIFNvbWUgaW1wb3J0cyBub3QgdXNlZCBkZXBlbmRpbmcgb24gdGVtcGxhdGUgY29uZGl0aW9uc1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbmV4cG9ydHMuQkFTRV9QQVRIID0gXCJodHRwczovL2FwaS5vcGVuc2hpZnQuY29tXCIucmVwbGFjZSgvXFwvKyQvLCBcIlwiKTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSB7XG4gICAgY3N2OiBcIixcIixcbiAgICBzc3Y6IFwiIFwiLFxuICAgIHRzdjogXCJcXHRcIixcbiAgICBwaXBlczogXCJ8XCIsXG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEJhc2VBUElcbiAqL1xuY2xhc3MgQmFzZUFQSSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiwgYmFzZVBhdGggPSBleHBvcnRzLkJBU0VfUEFUSCwgYXhpb3MgPSBheGlvc18xLmRlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB0aGlzLmF4aW9zID0gYXhpb3M7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGNvbmZpZ3VyYXRpb24uYmFzZVBhdGggfHwgdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUFQSSA9IEJhc2VBUEk7XG47XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUmVxdWlyZWRFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5jbGFzcyBSZXF1aXJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBtc2cpIHtcbiAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBSZXF1aXJlZEVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50778\n')},98691:function(__unused_webpack_module,exports,__webpack_require__){eval('\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Connector Service Fleet Manager\n * Connector Service Fleet Manager is a Rest API to manage connectors.\n *\n * The version of the OpenAPI document: 0.0.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(50778);\n/**\n *\n * @export\n */\nexports.DUMMY_BASE_URL = \'https://example.com\';\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nconst assertParamExists = function (functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\nexports.assertParamExists = assertParamExists;\n/**\n *\n * @export\n */\nconst setApiKeyToObject = function (object, keyParamName, configuration) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (configuration && configuration.apiKey) {\n            const localVarApiKeyValue = typeof configuration.apiKey === \'function\'\n                ? yield configuration.apiKey(keyParamName)\n                : yield configuration.apiKey;\n            object[keyParamName] = localVarApiKeyValue;\n        }\n    });\n};\nexports.setApiKeyToObject = setApiKeyToObject;\n/**\n *\n * @export\n */\nconst setBasicAuthToObject = function (object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object["auth"] = { username: configuration.username, password: configuration.password };\n    }\n};\nexports.setBasicAuthToObject = setBasicAuthToObject;\n/**\n *\n * @export\n */\nconst setBearerAuthToObject = function (object, configuration) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (configuration && configuration.accessToken) {\n            const accessToken = typeof configuration.accessToken === \'function\'\n                ? yield configuration.accessToken()\n                : yield configuration.accessToken;\n            object["Authorization"] = "Bearer " + accessToken;\n        }\n    });\n};\nexports.setBearerAuthToObject = setBearerAuthToObject;\n/**\n *\n * @export\n */\nconst setOAuthToObject = function (object, name, scopes, configuration) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (configuration && configuration.accessToken) {\n            const localVarAccessTokenValue = typeof configuration.accessToken === \'function\'\n                ? yield configuration.accessToken(name, scopes)\n                : yield configuration.accessToken;\n            object["Authorization"] = "Bearer " + localVarAccessTokenValue;\n        }\n    });\n};\nexports.setOAuthToObject = setOAuthToObject;\n/**\n *\n * @export\n */\nconst setSearchParams = function (url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            }\n            else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n};\nexports.setSearchParams = setSearchParams;\n/**\n *\n * @export\n */\nconst serializeDataIfNeeded = function (value, requestOptions, configuration) {\n    const nonString = typeof value !== \'string\';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers[\'Content-Type\'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || "");\n};\nexports.serializeDataIfNeeded = serializeDataIfNeeded;\n/**\n *\n * @export\n */\nconst toPathString = function (url) {\n    return url.pathname + url.search + url.hash;\n};\nexports.toPathString = toPathString;\n/**\n *\n * @export\n */\nconst createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });\n        return axios.request(axiosRequestArgs);\n    };\n};\nexports.createRequestFunction = createRequestFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98691\n')},8722:(__unused_webpack_module,exports)=>{eval("\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Connector Service Fleet Manager\n * Connector Service Fleet Manager is a Rest API to manage connectors.\n *\n * The version of the OpenAPI document: 0.0.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(param = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcyMi5qcyIsIm1hcHBpbmdzIjoiMEJBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxXQUFXLHNCQUFzQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29zLXVpLWFwcHMvY29zLXVpLy4uLy4uL3BhY2thZ2VzL2FwaS9kaXN0L2NvbmZpZ3VyYXRpb24uanM/OWQ5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyIGlzIGEgUmVzdCBBUEkgdG8gbWFuYWdlIGNvbm5lY3RvcnMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4zXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gdm9pZCAwO1xuY2xhc3MgQ29uZmlndXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyYW0gPSB7fSkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IHBhcmFtLmFwaUtleTtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHBhcmFtLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcGFyYW0ucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBwYXJhbS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHBhcmFtLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLmJhc2VPcHRpb25zID0gcGFyYW0uYmFzZU9wdGlvbnM7XG4gICAgICAgIHRoaXMuZm9ybURhdGFDdG9yID0gcGFyYW0uZm9ybURhdGFDdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBhIEpTT04gTUlNRS5cbiAgICAgKiBKU09OIE1JTUUgZXhhbXBsZXM6XG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uXG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURjhcbiAgICAgKiAgIEFQUExJQ0FUSU9OL0pTT05cbiAgICAgKiAgIGFwcGxpY2F0aW9uL3ZuZC5jb21wYW55K2pzb25cbiAgICAgKiBAcGFyYW0gbWltZSAtIE1JTUUgKE11bHRpcHVycG9zZSBJbnRlcm5ldCBNYWlsIEV4dGVuc2lvbnMpXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiBNSU1FIGlzIEpTT04sIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0pzb25NaW1lKG1pbWUpIHtcbiAgICAgICAgY29uc3QganNvbk1pbWUgPSBuZXcgUmVnRXhwKCdeKGFwcGxpY2F0aW9uXFwvanNvbnxbXjsvIFxcdF0rXFwvW147LyBcXHRdK1srXWpzb24pWyBcXHRdKig7LiopPyQnLCAnaScpO1xuICAgICAgICByZXR1cm4gbWltZSAhPT0gbnVsbCAmJiAoanNvbk1pbWUudGVzdChtaW1lKSB8fCBtaW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb24nKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSBDb25maWd1cmF0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8722\n")},22750:function(__unused_webpack_module,exports,__webpack_require__){eval('\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Connector Service Fleet Manager\n * Connector Service Fleet Manager is a Rest API to manage connectors.\n *\n * The version of the OpenAPI document: 0.0.3\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n__exportStar(__webpack_require__(31100), exports);\n__exportStar(__webpack_require__(8722), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI3NTAuanMiLCJtYXBwaW5ncyI6IjBCQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxLQUFPO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyxJQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb3MtdWktYXBwcy9jb3MtdWkvLi4vLi4vcGFja2FnZXMvYXBpL2Rpc3QvaW5kZXguanM/NWVkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyXG4gKiBDb25uZWN0b3IgU2VydmljZSBGbGVldCBNYW5hZ2VyIGlzIGEgUmVzdCBBUEkgdG8gbWFuYWdlIGNvbm5lY3RvcnMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMC4zXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25maWd1cmF0aW9uXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22750\n')},81778:(__unused_webpack_module,exports,__webpack_require__)=>{eval('function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports, "__esModule", ({value:!0}));var t=__webpack_require__(10791),n=e(t),r=__webpack_require__(30086),a=__webpack_require__(83255),i=__webpack_require__(79419),o=e(__webpack_require__(53778)),l=__webpack_require__(78817),c=__webpack_require__(57426),u=__webpack_require__(29815),s=__webpack_require__(41361),m=__webpack_require__(99237),d=__webpack_require__(14170),p=__webpack_require__(25102),f=__webpack_require__(50897),v=__webpack_require__(17449);function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return E(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}function b(e){for(var t,n=[],r=h(e);!(t=r()).done;){var a=t.value;if(a.steps)for(var i,o=h(a.steps);!(i=o()).done;)n.push(i.value);else n.push(a)}return n}var y=function(e){var t,r;function a(t){var n;(n=e.call(this,t)||this).titleId=void 0,n.descriptionId=void 0,n.handleKeyClicks=function(e){e.keyCode===l.KEY_CODES.ESCAPE_KEY&&(n.state.isNavOpen?n.setState({isNavOpen:!n.state.isNavOpen}):n.props.isOpen&&n.props.onClose&&n.props.onClose())},n.getFlattenedSteps=function(){return b(n.props.steps)},n.getFlattenedStepsIndex=function(e,t){for(var n=0;n<e.length;n++)if(e[n].name===t)return n+1;return 0},n.initSteps=function(e){for(var t=0;t<e.length;t++){if(e[t].steps)for(var n=0;n<e[t].steps.length;n++)e[t].steps[n]=Object.assign({canJumpTo:!0},e[t].steps[n]);e[t]=Object.assign({canJumpTo:!0},e[t])}return e},n.getElement=function(e){return"function"==typeof e?e():e||document.body};var r=a.currentId++;return n.titleId=t.titleId||"pf-wizard-title-"+r,n.descriptionId=t.descriptionId||"pf-wizard-description-"+r,n.state={isNavOpen:!1},n}r=e,(t=a).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var c=a.prototype;return c.componentDidMount=function(){var e="undefined"!=typeof document?document.body:null;e&&e.addEventListener("keydown",this.handleKeyClicks,!1)},c.componentWillUnmount=function(){var e="undefined"!=typeof document&&document.body||null;e&&e.removeEventListener("keydown",this.handleKeyClicks,!1)},c.render=function(){var e=this,t=this.props,r=t.width,a=t.height,c=t.title,u=t.description,s=t.onClose,m=t.onBack,d=t.onNext,p=t.goToStep,f=t.goToStepById,v=t.goToStepByName,E=t.className,b=t.steps,y=t.currentStep,C=t.nextButtonText,S=void 0===C?"Next":C,T=t.backButtonText,k=void 0===T?"Back":T,I=t.cancelButtonText,x=void 0===I?"Cancel":I,z=t.hideClose,N=t.closeButtonAriaLabel,B=void 0===N?"Close":N,q=t.navAriaLabel,L=t.navAriaLabelledBy,w=t.mainAriaLabel,A=t.mainAriaLabelledBy,D=t.hasNoBodyPadding,F=t.footer,P=t.isOpen,M=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t.indexOf(n=i[r])>=0||(a[n]=e[n]);return a}(t,["width","height","title","description","onClose","onSave","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","className","steps","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","appendTo","isOpen","titleId","descriptionId"]),O=this.getFlattenedSteps(),W=O[(O.length<y?O.length:y)-1],_=this.initSteps(b),G=W===O[0],R=!W||void 0===W.enableNext||W.enableNext,j={goToStepById:f,goToStepByName:v,onNext:d,onBack:m,onClose:s,activeStep:W},K=g({},a?{height:a}:{},r?{width:r}:{}),J=n.createElement(l.WizardContextProvider,{value:j},n.createElement("div",g({},M,{className:i.css(o.wizard,W&&W.isFinishedStep&&"pf-m-finished",E),style:Object.keys(K).length?K:void 0}),c&&n.createElement(l.WizardHeader,{titleId:this.titleId,descriptionId:this.descriptionId,onClose:s,title:c,description:u,closeButtonAriaLabel:B,hideClose:z}),n.createElement(l.WizardToggle,{mainAriaLabel:w,isInPage:void 0===P,mainAriaLabelledBy:(c||A)&&(A||this.titleId),isNavOpen:this.state.isNavOpen,onNavToggle:function(t){return e.setState({isNavOpen:t})},nav:function(t){var r={isOpen:t,"aria-label":q,"aria-labelledby":(c||L)&&(L||e.titleId)};return n.createElement(l.WizardNav,g({},r),_.map((function(t,a){if(t.isFinishedStep)return null;var i;if(t.steps){for(var o,c=!1,u=!1,s=h(t.steps);!(o=s()).done;){var m=o.value;W.name===m.name&&(c=!0),m.canJumpTo&&(u=!0)}return i=e.getFlattenedStepsIndex(O,t.steps[0].name),n.createElement(l.WizardNavItem,{key:a,content:t.name,isCurrent:c,isDisabled:!u,step:i,onNavItemClick:p},n.createElement(l.WizardNav,g({},r,{returnList:!0}),t.steps.map((function(t,r){return t.isFinishedStep?null:(i=e.getFlattenedStepsIndex(O,t.name),n.createElement(l.WizardNavItem,{key:"child_"+r,content:t.name,isCurrent:W.name===t.name,isDisabled:!t.canJumpTo,step:i,onNavItemClick:p}))}))))}return i=e.getFlattenedStepsIndex(O,t.name),n.createElement(l.WizardNavItem,g({},t.stepNavItemProps,{key:a,content:t.name,isCurrent:W.name===t.name,isDisabled:!t.canJumpTo,step:i,onNavItemClick:p}))})))},steps:b,activeStep:W,hasNoBodyPadding:D},F||n.createElement("footer",{className:i.css(o.wizardFooter)},n.createElement(l.Button,{variant:l.ButtonVariant.primary,type:"submit",onClick:d,isDisabled:!R},W&&W.nextButtonText||S),!W.hideBackButton&&n.createElement(l.Button,{variant:l.ButtonVariant.secondary,onClick:m,className:i.css(G&&"pf-m-disabled")},k),!W.hideCancelButton&&n.createElement("div",{className:o.wizardFooterCancel},n.createElement(l.Button,{variant:l.ButtonVariant.link,onClick:s},x))))));return void 0!==P?n.createElement(l.Modal,{width:null!==r?r:void 0,isOpen:P,variant:l.ModalVariant.large,"aria-labelledby":this.titleId,"aria-describedby":this.descriptionId,showClose:!1,hasNoBodyWrapper:!0},J):J},a}(t.Component);y.displayName="Wizard",y.currentId=0,y.defaultProps={title:void 0,description:"",className:"",nextButtonText:"Next",backButtonText:"Back",cancelButtonText:"Cancel",hideClose:!1,closeButtonAriaLabel:"Close",navAriaLabel:void 0,navAriaLabelledBy:void 0,mainAriaLabel:void 0,mainAriaLabelledBy:void 0,hasNoBodyPadding:!1,onGoToStep:void 0,width:void 0,height:void 0,footer:void 0,appendTo:void 0,isOpen:void 0};var C=function(e){var t=e.description,r=e.children;return n.createElement("div",{className:"pf-l-stack"},n.createElement(l.Level,{className:"pf-u-p-md pf-l-stack__item"},n.createElement(l.Title,{headingLevel:"h2"},e.title),function(){switch(typeof t){case"string":return n.createElement("p",null,t);default:return t}}()),n.createElement("div",{className:"pf-l-stack__item pf-l-stack pf-m-fill"},r))},S=function(e,t){return{key:e,node:t(e)}},T=[{title:"1",value:1},{title:"5",value:5},{title:"10",value:10}],k=function(){var e=a.useCreationWizardMachineKafkasActor();return a.useKafkasMachineIsReady(e)?n.createElement(I,null):null},I=function(){var e=c.useTranslation().t,t=u.useBasename().getBasename,r=a.useCreationWizardMachineKafkasActor(),i=a.useKafkasMachine(r),o=i.response,m=i.loading,d=i.error,p=i.selectedId,f=i.noResults,v=i.queryEmpty,g=i.firstRequest,E=i.onSelect,h=i.onQuery;return n.createElement(C,{title:e("Kafka instance"),description:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos"},function(){var e;switch(!0){case g:return n.createElement(s.Loading,null);case v:return n.createElement(n.Fragment,null,n.createElement(x,null),n.createElement(s.NoMatchFound,{onClear:function(){return h({page:1,size:10})}}));case f||d:return n.createElement(s.EmptyState,{emptyStateProps:{variant:s.EmptyStateVariant.GettingStarted},titleProps:{title:"cos.no_kafka_instance"},emptyStateBodyProps:{body:"cos.no_kafka_instance_body"},buttonProps:{title:"cos.create_kafka_instance",variant:l.ButtonVariant.primary,onClick:function(){return window.history.pushState(null,"Create Kafka instance",t()+"/../streams/kafkas?create=true")}}});case m:return n.createElement(n.Fragment,null,n.createElement(x,null),n.createElement(s.Loading,null));default:return n.createElement(n.Fragment,null,n.createElement(x,null),n.createElement("div",{className:"pf-l-stack__item pf-m-fill pf-u-p-md"},n.createElement(l.Gallery,{hasGutter:!0},null==o||null==(e=o.items)?void 0:e.map((function(e){return n.createElement(l.Card,{isHoverable:!0,key:e.id,isSelectable:!0,isSelected:p===e.id,onClick:function(){return E(e.id)}},n.createElement(l.CardHeader,null,n.createElement(l.CardTitle,null,e.name)),n.createElement(l.CardBody,null,n.createElement(l.DescriptionList,null,n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Region"),n.createElement(l.DescriptionListDescription,null,e.region)),n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Owner"),n.createElement(l.DescriptionListDescription,null,e.owner)),n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Created"),n.createElement(l.DescriptionListDescription,null,e.created_at)))))})))),n.createElement(L,null))}}())},x=function(){var e=c.useTranslation().t,r=a.useCreationWizardMachineKafkasActor(),i=a.useKafkasMachine(r),o=i.request,u=i.onQuery,d=t.useState(!1),p=d[0],f=d[1],v=t.useState(!1),E=v[0],h=v[1],b=t.useState(!1),y=b[0],C=b[1],T=t.useState(!1),k=T[0],I=T[1],x=t.useState("Name"),w=x[0],A=x[1],D=t.useCallback((function(){return f((function(e){return!e}))}),[]),F=t.useCallback((function(){return h((function(e){return!e}))}),[]),P=t.useCallback((function(){return C((function(e){return!e}))}),[]),M=t.useCallback((function(){return I((function(e){return!e}))}),[]),O=s.useDebounce(u,1e3),W=o.query||{},_=W.name,G=W.owner,R=W.cloudProviders,j=void 0===R?[]:R,K=W.regions,J=void 0===K?[]:K,V=W.statuses,Q=void 0===V?[]:V,H=t.useCallback((function(){return u({page:1,size:o.size})}),[u,o.size]),U=t.useRef(null),Y=t.useRef(null),$=function(e,t,n){var r;return u(g({},o,{query:g({},o.query||{},(r={},r[e]=t.includes(n)?t.filter((function(e){return e!==n})):[].concat(t||[],[n]),r))}))},X=function(e,t){$("statuses",Q,t.key)},Z=function(e,t){$("cloudProviders",j,t.key)},ee=function(e,t){$("regions",J,t.key)},te=function(e){var t;return u(g({},o,{query:g({},o.query||{},(t={},t[e]=void 0,t))}))},ne=t.useCallback((function(e){A((null==e?void 0:e.target).innerText),I((function(e){return!e}))}),[]);t.useEffect((function(){U.current&&(U.current.value=_||""),Y.current&&(Y.current.value=G||"")}),[U,_,G]);var re=z.map((function(e){return n.createElement(l.DropdownItem,{key:e.value},e.label)})),ae=B.filter((function(e){return"preparing"!==e.value})).map((function(e){var t=e.value;return n.createElement(l.SelectOption,{key:t,value:t},e.label)})),ie=N.map((function(e){var t=e.value;return n.createElement(l.SelectOption,{key:t,value:t},e.label)})),oe=q.map((function(e){var t=e.value;return n.createElement(l.SelectOption,{key:t,value:t},e.label)})),le=n.createElement(l.ToolbarItem,null,n.createElement(l.Dropdown,{onSelect:function(e){return ne(e)},position:l.DropdownPosition.left,toggle:n.createElement(l.DropdownToggle,{onToggle:M,style:{width:"100%"}},n.createElement(m.FilterIcon,{size:"sm"})," ",w),isOpen:k,dropdownItems:re,style:{width:"100%"}})),ce=n.createElement(n.Fragment,null,n.createElement(l.ToolbarGroup,{variant:"filter-group"},le,n.createElement(l.ToolbarFilter,{chips:Q.map((function(t){return S(t,e)})),deleteChip:X,deleteChipGroup:function(){return te("statuses")},categoryName:e("status"),showToolbarItem:w===e("status")},n.createElement(l.Select,{variant:"checkbox","aria-label":e("status"),onToggle:D,onSelect:function(t,n){return X(0,S(n,e))},selections:Q,isOpen:p,placeholderText:e("Filter by status")},ae)),n.createElement(l.ToolbarFilter,{chips:j.map((function(t){return S(t,e)})),deleteChip:Z,deleteChipGroup:function(){return te("cloudProviders")},categoryName:e("CloudProvider"),showToolbarItem:w===e("CloudProvider")},n.createElement(l.Select,{variant:"checkbox","aria-label":e("CloudProvider"),onToggle:F,onSelect:function(t,n){return Z(0,S(n,e))},selections:j,isOpen:E,placeholderText:e("Filter by cloud provider")},ie)),n.createElement(l.ToolbarFilter,{chips:J.map((function(t){return S(t,e)})),deleteChip:ee,deleteChipGroup:function(){return te("regions")},categoryName:e("region"),showToolbarItem:w===e("region")},n.createElement(l.Select,{variant:"checkbox","aria-label":e("region"),onToggle:P,onSelect:function(t,n){return ee(0,S(n,e))},selections:J,isOpen:y,placeholderText:e("Filter by region")},oe)),n.createElement(l.ToolbarFilter,{chips:_?[_]:[],deleteChip:function(){return te("name")},categoryName:e("name")},w===e("name")&&n.createElement(l.ToolbarItem,null,n.createElement(l.InputGroup,null,n.createElement(l.TextInput,{name:e("name"),id:e("name"),type:"search",placeholder:e("nameSearchPlaceholder"),"aria-label":e("nameSearchPlaceholder"),onChange:function(e){return O({size:o.size,page:1,query:g({},o.query,{name:e})})},ref:U}),n.createElement(l.Button,{variant:"control","aria-label":"search button for name input",onClick:function(){var e;return u({size:o.size,page:1,query:g({},o.query,{name:(null==(e=U.current)?void 0:e.value)||""})})}},n.createElement(m.SearchIcon,null))))),n.createElement(l.ToolbarFilter,{chips:G?[G]:[],deleteChip:function(){return te("owner")},categoryName:e("owner")},w===e("owner")&&n.createElement(l.ToolbarItem,null,n.createElement(l.InputGroup,null,n.createElement(l.TextInput,{name:e("owner"),id:e("owner"),type:"search",placeholder:e("ownerSearchPlaceholder"),"aria-label":e("ownerSearchPlaceholder"),onChange:function(e){return O({size:o.size,page:1,query:g({},o.query,{owner:e})})},ref:Y}),n.createElement(l.Button,{variant:"control","aria-label":"search button for owner input",onClick:function(){var e;return u({size:o.size,page:1,query:g({},o.query,{owner:(null==(e=Y.current)?void 0:e.value)||""})})}},n.createElement(m.SearchIcon,null))))))),ue=n.createElement(n.Fragment,null,n.createElement(l.ToolbarToggleGroup,{toggleIcon:n.createElement(m.FilterIcon,null),breakpoint:"xl"},ce),n.createElement(l.ToolbarGroup,{variant:"icon-button-group"},n.createElement(l.ToolbarItem,null,n.createElement(l.Button,{variant:"primary"},"Create Kafka Instance"))),n.createElement(l.ToolbarItem,{variant:"pagination",alignment:{default:"alignRight"}},n.createElement(L,{isCompact:!0})));return n.createElement(l.Toolbar,{id:"toolbar-group-types",collapseListedFiltersBreakpoint:"xl",clearAllFilters:H},n.createElement(l.ToolbarContent,null,ue))},z=[{value:"name",label:"Name"},{value:"status",label:"Status"},{value:"cloudprovider",label:"Cloud Provider"},{value:"region",label:"Region"},{value:"owner",label:"Owner"}],N=[{value:"aws",label:"Amazon Web Services"}],B=[{value:"ready",label:"Ready"},{value:"failed",label:"Failed"},{value:"accepted",label:"Creation pending"},{value:"provisioning",label:"Creation in progress"},{value:"preparing",label:"Creation in progress"},{value:"deprovision",label:"Deletion in progress"}],q=[{value:"us-east-1",label:"US East, N. Virginia"}],L=function(e){var t=e.isCompact,r=void 0!==t&&t,i=a.useCreationWizardMachineKafkasActor(),o=a.useKafkasMachine(i),c=o.request,u=o.response,s=o.onQuery;return n.createElement(l.Pagination,{itemCount:(null==u?void 0:u.total)||0,page:c.page,perPage:c.size,perPageOptions:T,onSetPage:function(e,t,n){return s(g({},c,{page:t,size:n||c.size}))},onPerPageSelect:function(){return!1},variant:r?"top":"bottom",isCompact:r})};function w(){var e=a.useCreationWizardMachineClustersActor();return a.useClustersMachineIsReady(e)?n.createElement(A,null):null}var A=function(){var e=c.useTranslation().t,t=d.useHistory(),r=a.useCreationWizardMachineClustersActor(),i=a.useClustersMachine(r),o=i.response,u=i.selectedId,m=i.loading,p=i.error,f=i.noResults,v=i.queryEmpty,g=i.firstRequest,E=i.onSelect,h=i.onQuery;return n.createElement(C,{title:e("OSD cluster"),description:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos"},function(){var e;switch(!0){case g:return n.createElement(s.Loading,null);case v:return n.createElement(n.Fragment,null,n.createElement(D,null),n.createElement(s.NoMatchFound,{onClear:function(){return h({page:1,size:10})}}));case f||p:return n.createElement(s.EmptyState,{emptyStateProps:{variant:s.EmptyStateVariant.GettingStarted},titleProps:{title:"cos.no_clusters_instance"},emptyStateBodyProps:{body:"cos.no_clusters_instance_body"},buttonProps:{title:"cos.create_clusters_instance",variant:l.ButtonVariant.primary,onClick:function(){return t.push("/create-connector")}}});case m:return n.createElement(n.Fragment,null,n.createElement(D,null),n.createElement(s.Loading,null));default:return n.createElement(n.Fragment,null,n.createElement(D,null),n.createElement("div",{className:"pf-l-stack__item pf-m-fill pf-u-p-md"},n.createElement(l.Gallery,{hasGutter:!0},null==o||null==(e=o.items)?void 0:e.map((function(e){var t,r,a;return n.createElement(l.Card,{isHoverable:!0,key:e.id,isSelectable:!0,isSelected:u===e.id,onClick:function(){return E(e.id)}},n.createElement(l.CardHeader,null,n.createElement(l.CardTitle,null,null==(t=e.metadata)?void 0:t.name)),n.createElement(l.CardBody,null,n.createElement(l.DescriptionList,null,n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Owner"),n.createElement(l.DescriptionListDescription,null,null==(r=e.metadata)?void 0:r.owner)),n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Created"),n.createElement(l.DescriptionListDescription,null,null==(a=e.metadata)?void 0:a.created_at)))))})))),n.createElement(F,null))}}())},D=function(){var e=a.useCreationWizardMachineClustersActor(),r=a.useClustersMachine(e),i=r.request,o=r.onQuery,c=t.useRef(null),u=s.useDebounce(o,1e3),d=n.createElement(n.Fragment,null,n.createElement(l.ToolbarItem,null,n.createElement(l.InputGroup,null,n.createElement(l.TextInput,{name:"textInput2",id:"textInput2",type:"search","aria-label":"search input example",onChange:function(e){return u({size:i.size,page:1,name:e})},ref:c}),n.createElement(l.Button,{variant:"control","aria-label":"search button for search input"},n.createElement(m.SearchIcon,null))))),p=n.createElement(n.Fragment,null,n.createElement(l.ToolbarToggleGroup,{toggleIcon:n.createElement(m.FilterIcon,null),breakpoint:"xl"},d),n.createElement(l.ToolbarGroup,{variant:"icon-button-group"},n.createElement(l.ToolbarItem,null,n.createElement(l.Button,{variant:"primary"},"Create Clusters Instance"))),n.createElement(l.ToolbarItem,{variant:"pagination",alignment:{default:"alignRight"}},n.createElement(F,{isCompact:!0})));return n.createElement(l.Toolbar,{id:"toolbar-group-types",collapseListedFiltersBreakpoint:"xl"},n.createElement(l.ToolbarContent,null,p))},F=function(e){var t=e.isCompact,r=void 0!==t&&t,i=a.useCreationWizardMachineClustersActor(),o=a.useClustersMachine(i),c=o.request,u=o.response,s=o.onQuery;return n.createElement(l.Pagination,{itemCount:(null==u?void 0:u.total)||0,page:c.page,perPage:c.size,perPageOptions:T,onSetPage:function(e,t,n){return s(g({},c,{page:t,size:n||c.size}))},onPerPageSelect:function(){return!1},variant:r?"top":"bottom",isCompact:r})};function P(){var e=a.useCreationWizardMachineConnectorTypesActor();return a.useConnectorTypesMachineIsReady(e)?n.createElement(M,null):null}function M(){var e=c.useTranslation().t,t=a.useCreationWizardMachineConnectorTypesActor(),r=a.useConnectorTypesMachine(t),i=r.response,o=r.loading,u=r.error,m=r.noResults,d=r.queryEmpty,p=r.firstRequest,f=r.selectedId,v=r.onSelect,g=r.onQuery;return n.createElement(C,{title:e("Connector category"),description:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos"},function(){var e;switch(!0){case p:return n.createElement(s.Loading,null);case d:return n.createElement(n.Fragment,null,n.createElement(O,null),n.createElement(s.NoMatchFound,{onClear:function(){return g({page:1,size:10})}}));case m||u:return n.createElement(s.EmptyState,{emptyStateProps:{variant:s.EmptyStateVariant.GettingStarted},titleProps:{title:"cos.no_connector_types"},emptyStateBodyProps:{body:"cos.no_connector_types_body"}});case o:return n.createElement(n.Fragment,null,n.createElement(O,null),n.createElement(s.Loading,null));default:return n.createElement(n.Fragment,null,n.createElement(O,null),n.createElement("div",{className:"pf-l-stack__item pf-m-fill pf-u-p-md"},n.createElement(l.Gallery,{hasGutter:!0},null==i||null==(e=i.items)?void 0:e.map((function(e){return n.createElement(l.Card,{isHoverable:!0,key:e.id,isSelectable:!0,isSelected:f===e.id,onClick:function(){return v(e.id)}},n.createElement(l.CardHeader,null,n.createElement(l.CardTitle,null,e.name)),n.createElement(l.CardBody,null,n.createElement(l.DescriptionList,null,n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListDescription,null,e.description)),n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"Version"),n.createElement(l.DescriptionListDescription,null,e.version)),n.createElement(l.DescriptionListGroup,null,n.createElement(l.DescriptionListTerm,null,"ID"),n.createElement(l.DescriptionListDescription,null,e.id)))))})))),n.createElement(W,null))}}())}var O=function(){var e=c.useTranslation().t,r=a.useCreationWizardMachineConnectorTypesActor(),i=a.useConnectorTypesMachine(r),o=i.request,u=i.onQuery,d=t.useState(!1),p=d[0],f=d[1],v=t.useRef(null),E=s.useDebounce(u,1e3),h=o.query||{},b=h.name,y=h.categories,C=void 0===y?[]:y,T=t.useCallback((function(){return u({page:1,size:o.size})}),[u,o.size]),k=t.useCallback((function(){return f((function(e){return!e}))}),[]),I=function(e,t){!function(e,t,n){var r;u(g({},o,{query:g({},o.query||{},(r={},r.categories=t.includes(n)?t.filter((function(e){return e!==n})):[].concat(t||[],[n]),r))}))}(0,C,t.key)};t.useEffect((function(){v.current&&(v.current.value=b||"")}),[v,b]);var x=[n.createElement(l.SelectOption,{key:"sink",value:"sink"},e("sink")),n.createElement(l.SelectOption,{key:"source",value:"source"},e("source"))],z=n.createElement(n.Fragment,null,n.createElement(l.ToolbarItem,null,n.createElement(l.InputGroup,null,n.createElement(l.TextInput,{name:"name",id:"name",type:"search","aria-label":"filter by connector name",onChange:function(e){return E({size:o.size,page:1,query:g({},o.query,{name:e})})},ref:v}),n.createElement(l.Button,{variant:"control","aria-label":"search button for search input"},n.createElement(m.SearchIcon,null)))),n.createElement(l.ToolbarGroup,{variant:"filter-group"},n.createElement(l.ToolbarFilter,{chips:C.map((function(t){return S(t,e)})),deleteChip:I,deleteChipGroup:function(){return u(g({},o,{query:g({},o.query||{},(e={},e.categories=void 0,e))}));var e},categoryName:"Connector type"},n.createElement(l.Select,{variant:"checkbox","aria-label":"Connector type",onToggle:k,onSelect:function(t,n){return I(0,S(n,e))},selections:C,isOpen:p,placeholderText:"Connector type"},x)))),N=n.createElement(n.Fragment,null,n.createElement(l.ToolbarToggleGroup,{toggleIcon:n.createElement(m.FilterIcon,null),breakpoint:"xl"},z),n.createElement(l.ToolbarItem,{variant:"pagination",alignment:{default:"alignRight"}},n.createElement(W,{isCompact:!0})));return n.createElement(l.Toolbar,{id:"toolbar-group-types",collapseListedFiltersBreakpoint:"xl",clearAllFilters:T},n.createElement(l.ToolbarContent,null,N))},W=function(e){var t=e.isCompact,r=void 0!==t&&t,i=a.useCreationWizardMachineConnectorTypesActor(),o=a.useConnectorTypesMachine(i),c=o.request,u=o.response,s=o.onQuery;return n.createElement(l.Pagination,{itemCount:(null==u?void 0:u.total)||0,page:c.page,perPage:c.size,perPageOptions:T,onSetPage:function(e,t,n){return s(g({},c,{page:t,size:n||c.size}))},onPerPageSelect:function(){return!1},variant:r?"top":"bottom",isCompact:r})},_=function(e){var a=e.actor,i=e.Configurator,o=r.useSelector(a,t.useCallback((function(e){return{connector:e.context.connector,activeStep:e.context.activeStep,configuration:e.context.configuration}}),[a]));return n.createElement(i,{activeStep:o.activeStep,configuration:o.configuration,connector:o.connector,onChange:function(e,t){return a.send({type:"change",configuration:e,isValid:t})}})},G=function(e){var a=e.actor,i=r.useSelector(a,t.useCallback((function(e){return{connector:e.context.connector,configuration:e.context.configuration}}),[a]));return n.createElement(p.JsonSchemaConfigurator,{schema:i.connector.json_schema,configuration:i.configuration||{},onChange:function(e,t){return a.send({type:"change",configuration:e,isValid:t})}})},R=function(){var e=c.useTranslation().t,i=a.useCreationWizardMachineService(),o=r.useSelector(i,t.useCallback((function(e){return{isLoading:e.matches({configureConnector:"loadConfigurator"}),hasErrors:e.matches("failure"),hasCustomConfigurator:!1!==e.context.Configurator&&void 0!==e.context.Configurator,configuration:e.context.connectorConfiguration,Configurator:e.context.Configurator,configuratorRef:e.children.configuratorRef}}),[i])),u=o.isLoading,s=o.hasErrors,d=o.Configurator,p=o.configuratorRef,f=o.hasCustomConfigurator;return n.createElement(C,{title:e("Configurations"),description:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos"},function(){switch(!0){case u:return n.createElement(l.EmptyState,null,n.createElement(l.EmptyStateIcon,{variant:"container",component:l.Spinner}),n.createElement(l.Title,{size:"lg",headingLevel:"h4"},e("loading")));case s:return n.createElement(l.EmptyState,null,n.createElement(l.EmptyStateIcon,{icon:m.ExclamationCircleIcon}),n.createElement(l.Title,{size:"lg",headingLevel:"h4"},"Error message"));case f:return n.createElement(n.Suspense,{fallback:null},n.createElement(_,{actor:p,Configurator:d}));default:return n.createElement(G,{actor:p})}}())};function j(){var e=c.useTranslation().t,r=a.useCreationWizardMachineReviewActor(),i=a.useReviewMachine(r),o=i.name,u=i.serviceAccount,s=i.configString,m=i.configStringError,d=i.configStringWarnings,p=i.isSaving,v=i.savingError,E=i.onSetName,h=i.onSetServiceAccount,b=i.onUpdateConfiguration,y=t.useCallback((function(e,t){e.layout(),e.focus()}),[]);return n.createElement(C,{title:e("Review"),description:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos"},n.createElement(l.Card,null,n.createElement(l.CardBody,null,n.createElement(l.Form,null,v&&n.createElement(l.FormAlert,null,n.createElement(l.Alert,{variant:"danger",title:v,"aria-live":"polite",isInline:!0})),n.createElement(l.FormGroup,{label:"Name",isRequired:!0,fieldId:"name",helperText:"Please provide a unique name for the connector"},n.createElement(l.TextInput,{isDisabled:p,value:o,onChange:E,id:"name"})),n.createElement(l.FormGroup,{label:"Service Account",isRequired:!0,fieldId:"service-account"},n.createElement(l.Radio,{isDisabled:p,isChecked:void 0===u,name:"service-account",onChange:function(){return h(void 0)},label:"Automatically create a Service Account for this connector",id:"service-account-automatic",value:"automatic"}),n.createElement(l.Radio,{isDisabled:p,isChecked:void 0!==u,name:"service-account",onChange:function(){return h({clientId:"",clientSecret:""})},label:"Provide the credentials manually",id:"service-account-user",value:"user"}),void 0!==u&&n.createElement(n.Fragment,null,n.createElement(l.FormGroup,{label:"Client ID",isRequired:!0,fieldId:"clientId"},n.createElement(l.TextInput,{isDisabled:p,value:u.clientId,onChange:function(e){return h(g({},u,{clientId:e}))},id:"clientId"})),n.createElement(l.FormGroup,{label:"Client Secret",isRequired:!0,fieldId:"clientSecret"},n.createElement(l.TextInput,{isDisabled:p,value:u.clientSecret,onChange:function(e){return h(g({},u,{clientSecret:e}))},id:"clientSecret"})))),n.createElement(l.FormGroup,{label:"Configuration",isRequired:!0,fieldId:"configuration",helperText:"Please review the configuration data.",helperTextInvalid:m,validated:void 0!==m?"error":void 0!==d?"warning":"default"},n.createElement(f.CodeEditor,{id:"configuration",isDarkTheme:!1,isLineNumbersVisible:!0,isReadOnly:p,isMinimapVisible:!1,isLanguageLabelVisible:!0,code:s,onChange:b,language:f.Language.json,onEditorDidMount:y,height:"400px"}),n.createElement(l.AlertGroup,null,null==d?void 0:d.map((function(e,t){return n.createElement(l.Alert,{key:t,title:e,variant:"warning",isInline:!0})}))))))))}var K=function(e){var t=e.error;return n.createElement("div",{role:"alert"},n.createElement("p",null,"Something went wrong:"),n.createElement("pre",null,t.message))},J=function(e){var t=e.children;return n.createElement(v.ErrorBoundary,{FallbackComponent:K,resetKeys:[Date.now()]},t)};Object.keys(a).forEach((function(e){"default"!==e&&Object.defineProperty(exports,e,{enumerable:!0,get:function(){return a[e]}})})),exports.CreationWizard=function(e){var i=e.onClose,o=c.useTranslation().t,l=a.useCreationWizardMachineService(),u=r.useService(l),s=u[0],m=u[1],d=function(){var e=c.useTranslation().t,i=a.useCreationWizardMachineService(),o=r.useSelector(i,t.useCallback((function(e){return{isActive:e.matches("selectKafka"),canJumpTo:a.creationWizardMachine.transition(e,"jumpToSelectKafka").changed||e.matches("selectKafka"),enableNext:a.creationWizardMachine.transition(e,"next").changed}}),[i])),l=o.isActive,u=o.canJumpTo,s=o.enableNext;return{name:e("Kafka instance"),isActive:l,component:n.createElement(J,null,n.createElement(k,null)),canJumpTo:u,enableNext:s}}(),p=function(){var e=c.useTranslation().t,i=a.useCreationWizardMachineService(),o=r.useSelector(i,t.useCallback((function(e){return{isActive:e.matches("configureConnector"),canJumpTo:a.creationWizardMachine.transition(e,"jumpToConfigureConnector").changed||e.matches("configureConnector"),enableNext:a.creationWizardMachine.transition(e,"next").changed,steps:e.context.configurationSteps,activeStep:e.context.activeConfigurationStep,canJumpToStep:function(t){return a.creationWizardMachine.transition(e,{type:"jumpToConfigureConnector",subStep:t}).changed}}}),[i])),l=o.isActive,u=o.activeStep,s=o.canJumpTo,m=o.canJumpToStep,d=o.enableNext,p=o.steps;return{name:e("Configurations"),isActive:l,canJumpTo:s,steps:p?p.map((function(e,t){return{name:e,isActive:l&&u===t,canJumpTo:m(t),enableNext:d,component:n.createElement(J,null,n.createElement(R,null))}})):void 0,enableNext:d,component:n.createElement(J,null,n.createElement(R,null))}}();if("saved"===s.value)return null;var f=[{name:o("Connector category"),isActive:s.matches("selectConnector"),component:n.createElement(J,null,n.createElement(P,null)),canJumpTo:a.creationWizardMachine.transition(s,"jumpToSelectConnector").changed||s.matches("selectConnector"),enableNext:a.creationWizardMachine.transition(s,"next").changed},d,{name:o("OSD cluster"),isActive:s.matches("selectCluster"),component:n.createElement(J,null,n.createElement(w,null)),canJumpTo:a.creationWizardMachine.transition(s,"jumpToSelectCluster").changed||s.matches("selectCluster"),enableNext:a.creationWizardMachine.transition(s,"next").changed},p,{name:o("Review"),isActive:s.matches("reviewConfiguration"),component:n.createElement(J,null,n.createElement(j,null)),canJumpTo:a.creationWizardMachine.transition(s,"jumpToReviewConfiguration").changed||s.matches("reviewConfiguration"),enableNext:a.creationWizardMachine.transition(s,"next").changed,nextButtonText:"Create connector"}],v=b(f),g=v.reduceRight((function(e,t,n){return t.isActive&&n>e?n:e}),-1)+1;return n.createElement(y,{className:"cos",steps:f,currentStep:g,onNext:function(){return m("next")},onBack:function(){return m("prev")},onClose:i,onSave:function(){return!1},goToStep:function(e){switch(e){case 1:m("jumpToSelectConnector");break;case 2:m("jumpToSelectKafka");break;case 3:m("jumpToSelectCluster");break;case v.length:m("jumpToReviewConfiguration");break;default:e<v.length&&m({type:"jumpToConfigureConnector",subStep:e-4})}},goToStepById:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.log("goToStepById",t)},goToStepByName:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.log("goToStepByName",t)},hasNoBodyPadding:!0})};\n//# sourceMappingURL=creation-wizard.cjs.production.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81778\n')},70793:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\n\nif (true) {\n  module.exports = __webpack_require__(81778)\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA3OTMuanMiLCJtYXBwaW5ncyI6Ijt3QkFDWTs7QUFFWixJQUFJLElBQXFDO0FBQ3pDLEVBQUUsMkNBQW1FO0FBQ3JFLEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvcy11aS1hcHBzL2Nvcy11aS8uLi8uLi9wYWNrYWdlcy9jcmVhdGlvbldpemFyZC9kaXN0L2luZGV4LmpzPzAzYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NyZWF0aW9uLXdpemFyZC5janMucHJvZHVjdGlvbi5taW4uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NyZWF0aW9uLXdpemFyZC5janMuZGV2ZWxvcG1lbnQuanMnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70793\n")},25102:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JsonSchemaConfigurator\": () => (/* binding */ JsonSchemaConfigurator),\n/* harmony export */   \"createValidator\": () => (/* binding */ createValidator)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10791);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77240);\n/* harmony import */ var uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uniforms_bridge_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94977);\n/* harmony import */ var uniforms_bridge_json_schema__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(uniforms_bridge_json_schema__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96293);\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ajv__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var uniforms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7249);\n/* harmony import */ var uniforms__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(uniforms__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nvar ajv = /*#__PURE__*/new (ajv__WEBPACK_IMPORTED_MODULE_3___default())({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false\n});\nfunction createValidator(schema) {\n  var validator = ajv.compile(schema);\n  return function (model) {\n    var _validator$errors;\n\n    validator(model);\n    return ((_validator$errors = validator.errors) == null ? void 0 : _validator$errors.length) ? {\n      details: validator.errors\n    } : null;\n  };\n}\nvar JsonSchemaConfigurator = function JsonSchemaConfigurator(_ref) {\n  var schema = _ref.schema,\n      configuration = _ref.configuration,\n      onChange = _ref.onChange;\n  schema.type = schema.type || 'object';\n  var schemaValidator = createValidator(schema);\n  var bridge = new uniforms_bridge_json_schema__WEBPACK_IMPORTED_MODULE_2__.JSONSchemaBridge(schema, schemaValidator);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1__.AutoForm, {\n    schema: bridge,\n    model: configuration,\n    autosave: true,\n    autosaveDelay: 0\n  }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1__.AutoFields, null), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(uniforms_patternfly__WEBPACK_IMPORTED_MODULE_1__.ErrorsField, null), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WizardNext, {\n    onChange: onChange\n  }));\n};\n\nvar WizardNext = function WizardNext(_ref2) {\n  var onChange = _ref2.onChange;\n\n  var _useForm = (0,uniforms__WEBPACK_IMPORTED_MODULE_4__.useForm)(),\n      changed = _useForm.changed,\n      submitted = _useForm.submitted,\n      error = _useForm.error,\n      model = _useForm.model;\n\n  var isValid = !error;\n  var prevChangeModel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (prevChangeModel.current !== model && changed && submitted) {\n      prevChangeModel.current = model;\n      onChange(isValid ? model : undefined, isValid);\n    }\n  }, [prevChangeModel, changed, submitted, isValid, model, onChange]);\n  return null;\n};\n\n\n//# sourceMappingURL=json-schema-configurator.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUxMDIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O2dDQUFpRDtrQkFDdUI7a0JBQ1Q7NENBQ3pDO2tCQUNhOztBQUVuQywyQkFBMkIsNENBQUc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUVBQWdCO0FBQ25DLFNBQVMsMERBQW1CLENBQUMseURBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEVBQUUsMERBQW1CLENBQUMsMkRBQVUsU0FBUywwREFBbUIsQ0FBQyw0REFBVyxTQUFTLDBEQUFtQjtBQUN2RztBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixpREFBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3Qiw2Q0FBTTtBQUM5QixFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7a0JBRW1EO0FBQ25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvcy11aS1hcHBzL2Nvcy11aS8uLi8uLi9wYWNrYWdlcy9qc29uU2NoZW1hQ29uZmlndXJhdG9yL2Rpc3QvanNvbi1zY2hlbWEtY29uZmlndXJhdG9yLmVzbS5qcz82ZjMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1dG9Gb3JtLCBBdXRvRmllbGRzLCBFcnJvcnNGaWVsZCB9IGZyb20gJ3VuaWZvcm1zLXBhdHRlcm5mbHknO1xuaW1wb3J0IHsgSlNPTlNjaGVtYUJyaWRnZSB9IGZyb20gJ3VuaWZvcm1zLWJyaWRnZS1qc29uLXNjaGVtYSc7XG5pbXBvcnQgQWp2IGZyb20gJ2Fqdic7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSAndW5pZm9ybXMnO1xuXG52YXIgYWp2ID0gLyojX19QVVJFX18qL25ldyBBanYoe1xuICBhbGxFcnJvcnM6IHRydWUsXG4gIHVzZURlZmF1bHRzOiBmYWxzZSxcbiAgc3RyaWN0OiAnbG9nJyxcbiAgc3RyaWN0U2NoZW1hOiBmYWxzZVxufSk7XG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0b3Ioc2NoZW1hKSB7XG4gIHZhciB2YWxpZGF0b3IgPSBhanYuY29tcGlsZShzY2hlbWEpO1xuICByZXR1cm4gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgdmFyIF92YWxpZGF0b3IkZXJyb3JzO1xuXG4gICAgdmFsaWRhdG9yKG1vZGVsKTtcbiAgICByZXR1cm4gKChfdmFsaWRhdG9yJGVycm9ycyA9IHZhbGlkYXRvci5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfdmFsaWRhdG9yJGVycm9ycy5sZW5ndGgpID8ge1xuICAgICAgZGV0YWlsczogdmFsaWRhdG9yLmVycm9yc1xuICAgIH0gOiBudWxsO1xuICB9O1xufVxudmFyIEpzb25TY2hlbWFDb25maWd1cmF0b3IgPSBmdW5jdGlvbiBKc29uU2NoZW1hQ29uZmlndXJhdG9yKF9yZWYpIHtcbiAgdmFyIHNjaGVtYSA9IF9yZWYuc2NoZW1hLFxuICAgICAgY29uZmlndXJhdGlvbiA9IF9yZWYuY29uZmlndXJhdGlvbixcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZTtcbiAgc2NoZW1hLnR5cGUgPSBzY2hlbWEudHlwZSB8fCAnb2JqZWN0JztcbiAgdmFyIHNjaGVtYVZhbGlkYXRvciA9IGNyZWF0ZVZhbGlkYXRvcihzY2hlbWEpO1xuICB2YXIgYnJpZGdlID0gbmV3IEpTT05TY2hlbWFCcmlkZ2Uoc2NoZW1hLCBzY2hlbWFWYWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvRm9ybSwge1xuICAgIHNjaGVtYTogYnJpZGdlLFxuICAgIG1vZGVsOiBjb25maWd1cmF0aW9uLFxuICAgIGF1dG9zYXZlOiB0cnVlLFxuICAgIGF1dG9zYXZlRGVsYXk6IDBcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvRmllbGRzLCBudWxsKSwgUmVhY3QuY3JlYXRlRWxlbWVudChFcnJvcnNGaWVsZCwgbnVsbCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2l6YXJkTmV4dCwge1xuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICB9KSk7XG59O1xuXG52YXIgV2l6YXJkTmV4dCA9IGZ1bmN0aW9uIFdpemFyZE5leHQoX3JlZjIpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZjIub25DaGFuZ2U7XG5cbiAgdmFyIF91c2VGb3JtID0gdXNlRm9ybSgpLFxuICAgICAgY2hhbmdlZCA9IF91c2VGb3JtLmNoYW5nZWQsXG4gICAgICBzdWJtaXR0ZWQgPSBfdXNlRm9ybS5zdWJtaXR0ZWQsXG4gICAgICBlcnJvciA9IF91c2VGb3JtLmVycm9yLFxuICAgICAgbW9kZWwgPSBfdXNlRm9ybS5tb2RlbDtcblxuICB2YXIgaXNWYWxpZCA9ICFlcnJvcjtcbiAgdmFyIHByZXZDaGFuZ2VNb2RlbCA9IHVzZVJlZigpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcmV2Q2hhbmdlTW9kZWwuY3VycmVudCAhPT0gbW9kZWwgJiYgY2hhbmdlZCAmJiBzdWJtaXR0ZWQpIHtcbiAgICAgIHByZXZDaGFuZ2VNb2RlbC5jdXJyZW50ID0gbW9kZWw7XG4gICAgICBvbkNoYW5nZShpc1ZhbGlkID8gbW9kZWwgOiB1bmRlZmluZWQsIGlzVmFsaWQpO1xuICAgIH1cbiAgfSwgW3ByZXZDaGFuZ2VNb2RlbCwgY2hhbmdlZCwgc3VibWl0dGVkLCBpc1ZhbGlkLCBtb2RlbCwgb25DaGFuZ2VdKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgeyBKc29uU2NoZW1hQ29uZmlndXJhdG9yLCBjcmVhdGVWYWxpZGF0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb24tc2NoZW1hLWNvbmZpZ3VyYXRvci5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25102\n")},83255:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConnectorsMachineProvider\": () => (/* binding */ ConnectorsMachineProvider),\n/* harmony export */   \"CreationWizardMachineProvider\": () => (/* binding */ CreationWizardMachineProvider),\n/* harmony export */   \"PAGINATED_MACHINE_ID\": () => (/* binding */ PAGINATED_MACHINE_ID),\n/* harmony export */   \"clustersMachine\": () => (/* binding */ clustersMachine),\n/* harmony export */   \"configuratorLoaderMachine\": () => (/* binding */ configuratorLoaderMachine),\n/* harmony export */   \"configuratorMachine\": () => (/* binding */ configuratorMachine),\n/* harmony export */   \"connectorMachine\": () => (/* binding */ connectorMachine),\n/* harmony export */   \"connectorTypesMachine\": () => (/* binding */ connectorTypesMachine),\n/* harmony export */   \"connectorsMachine\": () => (/* binding */ connectorsMachine),\n/* harmony export */   \"creationWizardMachine\": () => (/* binding */ creationWizardMachine),\n/* harmony export */   \"getPaginatedApiMachineEvents\": () => (/* binding */ getPaginatedApiMachineEvents),\n/* harmony export */   \"getPaginatedApiMachineEventsHandlers\": () => (/* binding */ getPaginatedApiMachineEventsHandlers),\n/* harmony export */   \"kafkasMachine\": () => (/* binding */ kafkasMachine),\n/* harmony export */   \"makeConnectorMachine\": () => (/* binding */ makeConnectorMachine),\n/* harmony export */   \"makeFetchMachine\": () => (/* binding */ makeFetchMachine),\n/* harmony export */   \"makePaginatedApiMachine\": () => (/* binding */ makePaginatedApiMachine),\n/* harmony export */   \"reviewMachine\": () => (/* binding */ reviewMachine),\n/* harmony export */   \"useClustersMachine\": () => (/* binding */ useClustersMachine),\n/* harmony export */   \"useClustersMachineIsReady\": () => (/* binding */ useClustersMachineIsReady),\n/* harmony export */   \"useConnector\": () => (/* binding */ useConnector),\n/* harmony export */   \"useConnectorTypesMachine\": () => (/* binding */ useConnectorTypesMachine),\n/* harmony export */   \"useConnectorTypesMachineIsReady\": () => (/* binding */ useConnectorTypesMachineIsReady),\n/* harmony export */   \"useConnectorsMachine\": () => (/* binding */ useConnectorsMachine),\n/* harmony export */   \"useConnectorsMachineIsReady\": () => (/* binding */ useConnectorsMachineIsReady),\n/* harmony export */   \"useConnectorsMachineService\": () => (/* binding */ useConnectorsMachineService),\n/* harmony export */   \"useCreationWizardMachineClustersActor\": () => (/* binding */ useCreationWizardMachineClustersActor),\n/* harmony export */   \"useCreationWizardMachineConnectorTypesActor\": () => (/* binding */ useCreationWizardMachineConnectorTypesActor),\n/* harmony export */   \"useCreationWizardMachineKafkasActor\": () => (/* binding */ useCreationWizardMachineKafkasActor),\n/* harmony export */   \"useCreationWizardMachineReviewActor\": () => (/* binding */ useCreationWizardMachineReviewActor),\n/* harmony export */   \"useCreationWizardMachineService\": () => (/* binding */ useCreationWizardMachineService),\n/* harmony export */   \"useKafkasMachine\": () => (/* binding */ useKafkasMachine),\n/* harmony export */   \"useKafkasMachineIsReady\": () => (/* binding */ useKafkasMachineIsReady),\n/* harmony export */   \"usePagination\": () => (/* binding */ usePagination),\n/* harmony export */   \"useReviewMachine\": () => (/* binding */ useReviewMachine)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10791);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59993);\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xstate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(25612);\n/* harmony import */ var xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(32292);\n/* harmony import */ var xstate_lib_model__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30086);\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_xstate_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(49198);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22750);\n/* harmony import */ var _cos_ui_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_cos_ui_api__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _cos_ui_json_schema_configurator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25102);\n\n\n\n\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar startConnector = function startConnector(_ref) {\n  var accessToken = _ref.accessToken,\n      basePath = _ref.basePath,\n      connector = _ref.connector;\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorsApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (callback) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    apisService.patchConnector(connector.id, {\n      desired_state: 'ready'\n    }, undefined, {\n      cancelToken: source.token,\n      headers: {\n        'Content-type': 'application/merge-patch+json'\n      }\n    }).then(function (response) {\n      callback({\n        type: 'connector.actionSuccess',\n        connector: response.data\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        callback({\n          type: 'connector.actionError',\n          error: error.response.data.reason\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nvar stopConnector = function stopConnector(_ref2) {\n  var accessToken = _ref2.accessToken,\n      basePath = _ref2.basePath,\n      connector = _ref2.connector;\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorsApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (callback) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    apisService.patchConnector(connector.id, {\n      desired_state: 'stopped'\n    }, undefined, {\n      cancelToken: source.token,\n      headers: {\n        'Content-type': 'application/merge-patch+json'\n      }\n    }).then(function (response) {\n      callback({\n        type: 'connector.actionSuccess',\n        connector: response.data\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        callback({\n          type: 'connector.actionError',\n          error: error.response.data.reason\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nvar deleteConnector = function deleteConnector(_ref3) {\n  var accessToken = _ref3.accessToken,\n      basePath = _ref3.basePath,\n      connector = _ref3.connector;\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorsApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (callback) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    apisService.deleteConnector(connector.id, undefined, {\n      cancelToken: source.token\n    }).then(function () {\n      callback({\n        type: 'connector.actionSuccess',\n        connector: _extends({}, connector, {\n          status: 'deleting',\n          desired_state: 'deleted'\n        })\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        callback({\n          type: 'connector.actionError',\n          error: error.response.data.reason\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nvar fetchConnectors = function fetchConnectors(accessToken, basePath) {\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorsApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (request, onSuccess, onError) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    var page = request.page,\n        size = request.size; // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n\n    apisService.listConnectors(\"\" + page, \"\" + size, undefined, {\n      cancelToken: source.token\n    }).then(function (response) {\n      onSuccess({\n        items: response.data.items,\n        total: response.data.total,\n        page: response.data.page,\n        size: response.data.size\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        onError({\n          error: error.message,\n          page: request.page\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nvar connectorMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar connectorMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  accessToken: function accessToken() {\n    return Promise.resolve('');\n  },\n  basePath: '',\n  connector: {}\n}, {\n  events: {\n    'connector.start': function connectorStart() {\n      return {};\n    },\n    'connector.stop': function connectorStop() {\n      return {};\n    },\n    'connector.remove': function connectorRemove() {\n      return {};\n    },\n    'connector.select': function connectorSelect() {\n      return {};\n    },\n    'connector.actionSuccess': function connectorActionSuccess(payload) {\n      return payload;\n    },\n    'connector.actionError': function connectorActionError(payload) {\n      return payload;\n    }\n  }\n});\nvar connectorMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: connectorMachineSchema,\n  id: 'connector',\n  initial: 'verify',\n  context: connectorMachineModel.initialContext,\n  states: {\n    verify: {\n      always: [{\n        target: 'ready',\n        cond: 'isReady'\n      }, {\n        target: 'stopped',\n        cond: 'isStopped'\n      }, {\n        target: 'deleted',\n        cond: 'isDeleted'\n      }]\n    },\n    ready: {\n      on: {\n        'connector.stop': 'stoppingConnector',\n        'connector.remove': 'deletingConnector'\n      }\n    },\n    stopped: {\n      on: {\n        'connector.start': 'startingConnector',\n        'connector.remove': 'deletingConnector'\n      }\n    },\n    deleted: {},\n    startingConnector: {\n      invoke: {\n        id: 'startingConnectorCb',\n        src: function src(context) {\n          return startConnector({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            connector: context.connector\n          });\n        }\n      },\n      on: {\n        'connector.actionSuccess': {\n          target: 'verify',\n          actions: ['updateState', 'notifySuccessToParent']\n        },\n        'connector.actionError': {\n          target: 'verify',\n          actions: 'notifyErrorToParent'\n        }\n      }\n    },\n    stoppingConnector: {\n      invoke: {\n        id: 'stoppingConnectorCb',\n        src: function src(context) {\n          return stopConnector({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            connector: context.connector\n          });\n        }\n      },\n      on: {\n        'connector.actionSuccess': {\n          target: 'verify',\n          actions: ['updateState', 'notifySuccessToParent']\n        },\n        'connector.actionError': {\n          target: 'verify',\n          actions: 'notifyErrorToParent'\n        }\n      }\n    },\n    deletingConnector: {\n      invoke: {\n        id: 'deletingConnectorCb',\n        src: function src(context) {\n          return deleteConnector({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            connector: context.connector\n          });\n        }\n      },\n      on: {\n        'connector.actionSuccess': {\n          target: 'deleted',\n          actions: ['updateState', 'notifySuccessToParent']\n        },\n        'connector.actionError': {\n          target: 'verify',\n          actions: 'notifyErrorToParent'\n        }\n      }\n    }\n  },\n  on: {\n    'connector.select': {\n      actions: 'notifySelectToParent'\n    }\n  }\n}, {\n  guards: {\n    isReady: function isReady(context) {\n      return context.connector.desired_state === 'ready';\n    },\n    isStopped: function isStopped(context) {\n      return context.connector.desired_state === 'stopped';\n    },\n    isDeleted: function isDeleted(context) {\n      return context.connector.desired_state === 'deleted';\n    }\n  },\n  actions: {\n    updateState: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'connector.actionSuccess') return {};\n      return {\n        connector: event.connector\n      };\n    }),\n    notifySuccessToParent: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)('actionSuccess'),\n    notifyErrorToParent: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)('actionFailure'),\n    notifySelectToParent: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)(function (_ref) {\n      var connector = _ref.connector;\n      return {\n        type: 'selectConnector',\n        connector: connector\n      };\n    })\n  }\n});\nvar makeConnectorMachine = function makeConnectorMachine(context) {\n  return connectorMachine.withContext(context);\n};\nvar useConnector = function useConnector(ref) {\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(ref, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return {\n      connector: state.context.connector,\n      canStart: connectorMachine.transition(state, 'connector.start').changed === true,\n      canStop: connectorMachine.transition(state, 'connector.stop').changed === true,\n      canDelete: connectorMachine.transition(state, 'connector.remove').changed === true\n    };\n  }, [ref])),\n      connector = _useSelector.connector,\n      canStart = _useSelector.canStart,\n      canStop = _useSelector.canStop,\n      canDelete = _useSelector.canDelete;\n\n  var onStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return ref.send({\n      type: 'connector.start'\n    });\n  }, [ref]);\n  var onStop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return ref.send({\n      type: 'connector.stop'\n    });\n  }, [ref]);\n  var onDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return ref.send({\n      type: 'connector.remove'\n    });\n  }, [ref]);\n  var onSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return ref.send({\n      type: 'connector.select'\n    });\n  }, [ref]);\n  return {\n    connector: connector,\n    canStart: canStart,\n    canStop: canStop,\n    canDelete: canDelete,\n    onStart: onStart,\n    onStop: onStop,\n    onDelete: onDelete,\n    onSelect: onSelect\n  };\n};\n\nfunction makeFetchMachine() {\n  var fetchMachineSchema = {\n    context: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n  };\n  var fetchMachineModel = (0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n    data: undefined,\n    error: undefined\n  });\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n    schema: fetchMachineSchema,\n    id: 'fetchMachine',\n    context: {},\n    initial: 'loading',\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchService',\n          src: 'fetchService',\n          onDone: {\n            target: 'success',\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n              return {\n                data: event.data\n              };\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n              error: function error(_context, event) {\n                return event.data;\n              }\n            })\n          }\n        }\n      },\n      failure: {\n        type: 'final'\n      },\n      success: {\n        type: 'final',\n        data: function data(_ref) {\n          var _data = _ref.data;\n          return _extends({}, _data);\n        }\n      }\n    }\n  });\n}\n\nvar paginatedApiMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar getPaginatedApiMachineEvents = function getPaginatedApiMachineEvents() {\n  return {\n    'api.refresh': function apiRefresh() {\n      return {};\n    },\n    'api.nextPage': function apiNextPage() {\n      return {};\n    },\n    'api.prevPage': function apiPrevPage() {\n      return {};\n    },\n    'api.query': function apiQuery(payload) {\n      return payload;\n    },\n    'api.setResponse': function apiSetResponse(payload) {\n      return payload;\n    },\n    'api.setError': function apiSetError(payload) {\n      return payload;\n    },\n    // notifyParent\n    'api.ready': function apiReady() {\n      return {};\n    },\n    'api.loading': function apiLoading(payload) {\n      return payload;\n    },\n    'api.success': function apiSuccess(payload) {\n      return payload;\n    },\n    'api.error': function apiError(payload) {\n      return payload;\n    }\n  };\n};\nvar getPaginatedApiMachineEventsHandlers = function getPaginatedApiMachineEventsHandlers(to) {\n  return {\n    'api.refresh': {\n      actions: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n        return e;\n      }, {\n        to: to\n      })\n    },\n    'api.nextPage': {\n      actions: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n        return e;\n      }, {\n        to: to\n      })\n    },\n    'api.prevPage': {\n      actions: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n        return e;\n      }, {\n        to: to\n      })\n    },\n    'api.query': {\n      actions: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.send)(function (_, e) {\n        return e;\n      }, {\n        to: to\n      })\n    }\n  };\n};\nfunction makePaginatedApiMachine(service, dataTransformer, options) {\n  var paginatedApiMachineModel = (0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n    request: {\n      page: 1,\n      size: 10\n    },\n    response: undefined,\n    pollingEnabled: (options == null ? void 0 : options.pollingEnabled) || false,\n    onBeforeSetResponse: options == null ? void 0 : options.onBeforeSetResponse,\n    dataTransformer: dataTransformer\n  }, {\n    events: _extends({}, getPaginatedApiMachineEvents())\n  });\n\n  var callApi = function callApi(context) {\n    return function (callback) {\n      return service(context.request, function (payload) {\n        return callback(paginatedApiMachineModel.events['api.setResponse'](payload));\n      }, function (payload) {\n        return callback(paginatedApiMachineModel.events['api.setError'](payload));\n      });\n    };\n  };\n\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n    schema: paginatedApiMachineSchema,\n    id: 'paginatedApiMachine',\n    context: paginatedApiMachineModel.initialContext,\n    type: 'parallel',\n    states: {\n      api: {\n        initial: 'idle',\n        states: {\n          idle: {\n            entry: 'notifyReady',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              }\n            }\n          },\n          success: {\n            always: [{\n              target: 'queryEmpty',\n              cond: 'isQueryEmpty'\n            }, {\n              target: 'queryResults',\n              cond: 'isQuerySuccesful'\n            }, {\n              target: 'empty',\n              cond: 'isTotalZero'\n            }, {\n              target: 'results'\n            }]\n          },\n          queryEmpty: {\n            tags: 'queryEmpty',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.prevPage': {\n                target: 'loading',\n                actions: 'decreasePage',\n                cond: 'isNotFirstPage'\n              },\n              'api.refresh': {\n                target: 'loading',\n                actions: 'fetch'\n              }\n            }\n          },\n          queryResults: {\n            tags: 'queryResults',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.nextPage': {\n                target: 'loading',\n                actions: 'increasePage',\n                cond: 'isNotLastPage'\n              },\n              'api.prevPage': {\n                target: 'loading',\n                actions: 'decreasePage',\n                cond: 'isNotFirstPage'\n              },\n              'api.refresh': {\n                target: 'loading'\n              }\n            }\n          },\n          empty: {\n            tags: 'empty',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.refresh': {\n                target: 'loading'\n              }\n            }\n          },\n          results: {\n            tags: 'results',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.nextPage': {\n                target: 'loading',\n                actions: 'increasePage',\n                cond: 'isNotLastPage'\n              },\n              'api.prevPage': {\n                target: 'loading',\n                actions: 'decreasePage',\n                cond: 'isNotFirstPage'\n              },\n              'api.refresh': {\n                target: 'loading'\n              }\n            }\n          },\n          error: {\n            tags: 'error',\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.refresh': {\n                target: 'loading'\n              },\n              'api.prevPage': {\n                target: 'loading',\n                actions: 'decreasePage',\n                cond: 'isNotFirstPage'\n              }\n            }\n          },\n          loading: {\n            tags: ['loading'],\n            entry: ['notifyLoading', 'fetch'],\n            on: {\n              'api.query': {\n                target: 'loading',\n                actions: 'query'\n              },\n              'api.setResponse': {\n                target: 'success',\n                actions: ['setResponse', 'notifySuccess']\n              },\n              'api.setError': {\n                target: 'error',\n                actions: ['setError', 'notifyError']\n              }\n            }\n          }\n        },\n        on: {\n          '*': {\n            actions: 'forwardUnknownEventsToParent'\n          }\n        }\n      },\n      polling: {\n        entry: 'fetch',\n        on: {\n          'api.setResponse': {\n            actions: 'setResponse'\n          }\n        },\n        after: {\n          INTERVAL: {\n            cond: 'isPollingEnabled',\n            target: 'polling'\n          }\n        }\n      }\n    }\n  }, {\n    delays: {\n      INTERVAL: 5000\n    },\n    actions: {\n      fetch: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n        if (context.actor && context.actor.stop) {\n          context.actor.stop();\n        }\n\n        var actor = (0,xstate__WEBPACK_IMPORTED_MODULE_1__.spawn)(callApi(context));\n        return {\n          actor: actor\n        };\n      }),\n      setResponse: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context, e) {\n        var _e$items;\n\n        if (e.type !== 'api.setResponse' || e.page !== context.request.page) return {};\n\n        if (context.onBeforeSetResponse) {\n          var _context$response;\n\n          context.onBeforeSetResponse((_context$response = context.response) == null ? void 0 : _context$response.items);\n        }\n\n        return {\n          response: {\n            items: (_e$items = e.items) == null ? void 0 : _e$items.map(function (i) {\n              return context.dataTransformer(i);\n            }),\n            total: e.total,\n            error: undefined\n          }\n        };\n      }),\n      setError: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context, e) {\n        var _context$response2, _context$response3;\n\n        if (e.type !== 'api.setError' || e.page !== context.request.page) return {};\n        return {\n          response: {\n            items: ((_context$response2 = context.response) == null ? void 0 : _context$response2.items) || [],\n            total: ((_context$response3 = context.response) == null ? void 0 : _context$response3.total) || 0,\n            error: e.error\n          }\n        };\n      }),\n      increasePage: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n        return {\n          request: _extends({}, context.request, {\n            page: context.request.page + 1\n          })\n        };\n      }),\n      decreasePage: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n        return {\n          request: _extends({}, context.request, {\n            page: context.request.page - 1\n          })\n        };\n      }),\n      query: (0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context, event) {\n        if (event.type !== 'api.query') return {};\n        var page = event.page,\n            size = event.size,\n            query = event.query;\n        return {\n          request: {\n            page: page || context.request.page,\n            size: size || context.request.size,\n            query: query\n          }\n        };\n      }),\n      notifyReady: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)({\n        type: 'api.ready'\n      }),\n      notifySuccess: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)(function (context) {\n        return _extends({\n          type: 'api.success'\n        }, context.response);\n      }),\n      notifyError: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)(function (context) {\n        var _context$response4;\n\n        return {\n          type: 'api.error',\n          error: (_context$response4 = context.response) == null ? void 0 : _context$response4.error\n        };\n      }),\n      notifyLoading: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)(function (context) {\n        return _extends({\n          type: 'api.loading'\n        }, context.request);\n      }),\n      forwardUnknownEventsToParent: (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.pure)(function (_context, event) {\n        if (Object.keys(paginatedApiMachineModel.events).includes(event.type) === false) {\n          return (0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)(function (_context, _event, meta) {\n            return meta._event.data;\n          });\n        }\n\n        return [];\n      })\n    },\n    guards: {\n      isNotFirstPage: function isNotFirstPage(context) {\n        return context.response !== undefined && context.request.page > 1;\n      },\n      isNotLastPage: function isNotLastPage(context) {\n        return context.response !== undefined && context.request.size > 0 && context.request.page < Math.ceil(context.response.total / context.request.size);\n      },\n      isTotalZero: function isTotalZero(context) {\n        var _context$response5;\n\n        return ((_context$response5 = context.response) == null ? void 0 : _context$response5.total) === 0;\n      },\n      isQuerySuccesful: function isQuerySuccesful(context) {\n        var _context$response6;\n\n        return context.request.query !== undefined && context.response !== undefined && ((_context$response6 = context.response) == null ? void 0 : _context$response6.total) > 0;\n      },\n      isQueryEmpty: function isQueryEmpty(context) {\n        var _context$response7;\n\n        return context.request.query !== undefined && context.response !== undefined && ((_context$response7 = context.response) == null ? void 0 : _context$response7.total) === 0;\n      },\n      isPollingEnabled: function isPollingEnabled(context) {\n        return context.pollingEnabled;\n      }\n    }\n  });\n} // https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\n\nvar usePagination = function usePagination(actor) {\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return {\n      request: state.context.request,\n      response: state.context.response,\n      loading: state.hasTag('loading'),\n      queryEmpty: state.hasTag('queryEmpty'),\n      queryResults: state.hasTag('queryResults'),\n      noResults: state.hasTag('empty'),\n      results: state.hasTag('results'),\n      error: state.hasTag('error'),\n      firstRequest: state.context.response === undefined\n    };\n  }, [actor]));\n};\n\nvar PAGINATED_MACHINE_ID = 'paginatedApi';\nvar connectorsMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar connectorsMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  accessToken: function accessToken() {\n    return Promise.resolve('');\n  },\n  basePath: '',\n  selectedConnector: undefined\n}, {\n  events: /*#__PURE__*/_extends({}, /*#__PURE__*/getPaginatedApiMachineEvents(), {\n    actionSuccess: function actionSuccess() {\n      return {};\n    },\n    actionFailure: function actionFailure() {\n      return {};\n    },\n    selectConnector: function selectConnector(payload) {\n      return payload;\n    },\n    deselectConnector: function deselectConnector() {\n      return {};\n    }\n  })\n});\nvar connectorsMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: connectorsMachineSchema,\n  id: 'connectors',\n  initial: 'root',\n  context: connectorsMachineModel.initialContext,\n  states: {\n    root: {\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          invoke: {\n            id: PAGINATED_MACHINE_ID,\n            src: function src(context) {\n              return makePaginatedApiMachine(fetchConnectors(context.accessToken, context.basePath), function (connector) {\n                return (0,xstate__WEBPACK_IMPORTED_MODULE_1__.spawn)(makeConnectorMachine({\n                  accessToken: context.accessToken,\n                  basePath: context.basePath,\n                  connector: connector\n                }), \"connector-\" + connector.id);\n              }, {\n                pollingEnabled: true,\n                onBeforeSetResponse: function onBeforeSetResponse(data) {\n                  if (data) {\n                    data.forEach(function (d) {\n                      if (d && d.stop) {\n                        d.stop();\n                      }\n                    });\n                  }\n                }\n              });\n            }\n          },\n          states: {\n            idle: {\n              on: {\n                'api.ready': 'ready'\n              }\n            },\n            ready: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('api.query', {\n                to: PAGINATED_MACHINE_ID\n              })\n            }\n          },\n          on: /*#__PURE__*/_extends({}, /*#__PURE__*/getPaginatedApiMachineEventsHandlers(PAGINATED_MACHINE_ID), {\n            'api.error': {\n              actions: 'notifyError'\n            },\n            actionSuccess: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('api.query', {\n                to: PAGINATED_MACHINE_ID\n              })\n            },\n            actionFailure: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('api.query', {\n                to: PAGINATED_MACHINE_ID\n              })\n            },\n            selectConnector: {\n              actions: 'setSelectedConnector'\n            },\n            deselectConnector: {\n              actions: 'unsetSelectedConnector'\n            }\n          })\n        },\n        listing: {}\n      }\n    }\n  }\n}, {\n  actions: {\n    setSelectedConnector: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'selectConnector') return {};\n      return {\n        selectedConnector: event.connector\n      };\n    }),\n    unsetSelectedConnector: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'deselectConnector') return {};\n      return {\n        selectedConnector: undefined\n      };\n    }),\n    notifyError: function notifyError(context, event) {\n      console.log(context, event);\n\n      if (event.type === 'api.error' && context.onError) {\n        context.onError(event.error);\n      }\n    }\n  }\n});\nvar useConnectorsMachine = function useConnectorsMachine(service) {\n  var apiData = usePagination(service.state.children[PAGINATED_MACHINE_ID]);\n\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return {\n      selectedConnector: state.context.selectedConnector\n    };\n  }, [service])),\n      selectedConnector = _useSelector.selectedConnector;\n\n  var deselectConnector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    service.send({\n      type: 'deselectConnector'\n    });\n  }, [service]);\n  return _extends({}, apiData, {\n    selectedConnector: selectedConnector,\n    deselectConnector: deselectConnector\n  });\n};\n\nvar ConnectorsMachineServiceContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar ConnectorsMachineProvider = function ConnectorsMachineProvider(_ref) {\n  var children = _ref.children,\n      accessToken = _ref.accessToken,\n      basePath = _ref.basePath,\n      onError = _ref.onError;\n  var service = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useInterpret)(connectorsMachine, {\n    context: {\n      accessToken: accessToken,\n      basePath: basePath,\n      onError: onError\n    },\n    devTools: true\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ConnectorsMachineServiceContext.Provider, {\n    value: service\n  }, children);\n};\nvar useConnectorsMachineService = function useConnectorsMachineService() {\n  var service = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConnectorsMachineServiceContext);\n\n  if (!service) {\n    throw new Error(\"useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>\");\n  }\n\n  return service;\n};\nvar useConnectorsMachineIsReady = function useConnectorsMachineIsReady(service) {\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.matches({\n      root: {\n        api: 'ready'\n      }\n    });\n  }, [service]));\n};\n\nvar PAGINATED_MACHINE_ID$1 = 'paginatedApi';\n\nvar fetchClusters = function fetchClusters(accessToken, basePath) {\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorClustersApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (request, onSuccess, onError) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    var page = request.page,\n        size = request.size;\n    apisService.listConnectorClusters(\"\" + page, \"\" + size, {\n      cancelToken: source.token\n    }).then(function (response) {\n      onSuccess({\n        items: response.data.items,\n        total: response.data.total,\n        page: response.data.page,\n        size: response.data.size\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        onError({\n          error: error.message,\n          page: request.page\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nvar clustersMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar clustersMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  accessToken: function accessToken() {\n    return Promise.resolve('');\n  },\n  basePath: '',\n  clusters: undefined,\n  selectedCluster: undefined,\n  error: undefined\n}, {\n  events: /*#__PURE__*/_extends({\n    selectCluster: function selectCluster(payload) {\n      return _extends({}, payload);\n    },\n    deselectCluster: function deselectCluster() {\n      return {};\n    },\n    confirm: function confirm() {\n      return {};\n    }\n  }, /*#__PURE__*/getPaginatedApiMachineEvents())\n});\nvar clustersMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: clustersMachineSchema,\n  id: 'clusters',\n  initial: 'root',\n  context: clustersMachineModel.initialContext,\n  states: {\n    root: {\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          invoke: {\n            id: PAGINATED_MACHINE_ID$1,\n            src: function src(context) {\n              return makePaginatedApiMachine(fetchClusters(context.accessToken, context.basePath), function (i) {\n                return i;\n              });\n            }\n          },\n          states: {\n            idle: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('api.query', {\n                to: PAGINATED_MACHINE_ID$1\n              }),\n              on: {\n                'api.ready': 'ready'\n              }\n            },\n            ready: {}\n          },\n          on: /*#__PURE__*/_extends({}, /*#__PURE__*/getPaginatedApiMachineEventsHandlers(PAGINATED_MACHINE_ID$1), {\n            'api.success': {\n              actions: 'success'\n            }\n          })\n        },\n        selection: {\n          id: 'selection',\n          initial: 'verify',\n          states: {\n            verify: {\n              always: [{\n                target: 'selecting',\n                cond: 'noClusterSelected'\n              }, {\n                target: 'valid',\n                cond: 'clusterSelected'\n              }]\n            },\n            selecting: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isInvalid'),\n              on: {\n                selectCluster: {\n                  target: 'valid',\n                  actions: 'selectCluster'\n                }\n              }\n            },\n            valid: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isValid'),\n              on: {\n                selectCluster: {\n                  target: 'verify',\n                  actions: 'selectCluster',\n                  cond: function cond(_, event) {\n                    return event.selectedCluster !== undefined;\n                  }\n                },\n                deselectCluster: {\n                  target: 'verify',\n                  actions: 'reset'\n                },\n                confirm: {\n                  target: '#done',\n                  cond: 'clusterSelected'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    done: {\n      id: 'done',\n      type: 'final',\n      data: {\n        selectedCluster: function selectedCluster(context) {\n          return context.selectedCluster;\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    success: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'api.success') return {};\n\n      var response = _objectWithoutPropertiesLoose(event, [\"type\"]);\n\n      return {\n        response: response\n      };\n    }),\n    selectCluster: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedCluster: function selectedCluster(context, event) {\n        if (event.type === 'selectCluster') {\n          var _context$response, _context$response$ite;\n\n          return (_context$response = context.response) == null ? void 0 : (_context$response$ite = _context$response.items) == null ? void 0 : _context$response$ite.find(function (i) {\n            return i.id === event.selectedCluster;\n          });\n        }\n\n        return context.selectedCluster;\n      }\n    }),\n    reset: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedCluster: function selectedCluster(context, event) {\n        return event.type === 'deselectCluster' ? undefined : context.selectedCluster;\n      }\n    })\n  },\n  guards: {\n    clusterSelected: function clusterSelected(context) {\n      return context.selectedCluster !== undefined;\n    },\n    noClusterSelected: function noClusterSelected(context) {\n      return context.selectedCluster === undefined;\n    }\n  }\n});\nvar useClustersMachineIsReady = function useClustersMachineIsReady(actor) {\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.matches({\n      root: {\n        api: 'ready'\n      }\n    });\n  }, [actor]));\n};\nvar useClustersMachine = function useClustersMachine(actor) {\n  var api = usePagination(actor.state.children[PAGINATED_MACHINE_ID$1]);\n\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    var _state$context$select;\n\n    return {\n      selectedId: (_state$context$select = state.context.selectedCluster) == null ? void 0 : _state$context$select.id\n    };\n  }, [actor])),\n      selectedId = _useSelector.selectedId;\n\n  var onSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (selectedCluster) {\n    actor.send({\n      type: 'selectCluster',\n      selectedCluster: selectedCluster\n    });\n  }, [actor]);\n  var onQuery = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (request) {\n    actor.send(_extends({\n      type: 'api.query'\n    }, request));\n  }, [actor]);\n  return _extends({}, api, {\n    selectedId: selectedId,\n    onSelect: onSelect,\n    onQuery: onQuery\n  });\n};\n\nvar configuratorLoaderMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar configuratorLoaderMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  connector: {\n    id: 'something',\n    name: 'something',\n    version: '0.1'\n  },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined\n});\nvar configuratorLoaderMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: configuratorLoaderMachineSchema,\n  id: 'configurator',\n  initial: 'loading',\n  context: configuratorLoaderMachineModel.initialContext,\n  states: {\n    loading: {\n      invoke: {\n        id: 'fetchConfigurator',\n        src: 'fetchConfigurator',\n        onDone: {\n          target: 'success',\n          actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n            return event.data;\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n            error: function error(_context, event) {\n              return event.data;\n            }\n          })\n        }\n      }\n    },\n    failure: {\n      entry: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.escalate)(function (context) {\n        return {\n          message: context.error\n        };\n      })\n    },\n    success: {\n      type: 'final',\n      data: function data(_ref) {\n        var Configurator = _ref.Configurator,\n            steps = _ref.steps;\n        return {\n          Configurator: Configurator,\n          steps: steps\n        };\n      }\n    }\n  }\n});\n\nvar configuratorMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar configuratorMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: configuratorMachineSchema,\n  id: 'configurator',\n  initial: 'configuring',\n  context: {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      json_schema: {}\n    },\n    steps: ['one', 'two', 'three'],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined\n  },\n  states: {\n    configuring: {\n      entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isInvalid'),\n      always: [{\n        target: 'valid',\n        cond: 'activeStepValid'\n      }]\n    },\n    valid: {\n      id: 'valid',\n      initial: 'determineStep',\n      entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isValid'),\n      states: {\n        determineStep: {\n          always: [{\n            target: '#valid.lastStep',\n            cond: 'isLastStep'\n          }, {\n            target: '#valid.hasNextStep'\n          }]\n        },\n        hasNextStep: {\n          on: {\n            next: {\n              target: '#configurator.configuring',\n              actions: ['nextStep', 'changedStep']\n            }\n          }\n        },\n        lastStep: {\n          on: {\n            next: '#configurator.configured'\n          }\n        }\n      }\n    },\n    configured: {\n      type: 'final',\n      data: function data(_ref2) {\n        var configuration = _ref2.configuration;\n        return {\n          configuration: configuration\n        };\n      }\n    }\n  },\n  on: {\n    change: {\n      target: 'configuring',\n      actions: 'change'\n    },\n    prev: {\n      target: 'configuring',\n      actions: ['prevStep', 'changedStep']\n    }\n  }\n}, {\n  actions: {\n    nextStep: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n      return {\n        activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n        isActiveStepValid: false\n      };\n    }),\n    prevStep: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n      return {\n        activeStep: Math.max(context.activeStep - 1, 0),\n        isActiveStepValid: false\n      };\n    }),\n    change: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n      return event.type === 'change' ? {\n        configuration: event.configuration,\n        isActiveStepValid: event.isValid\n      } : {};\n    }),\n    changedStep: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)(function (context) {\n      return {\n        type: 'changedStep',\n        step: context.activeStep\n      };\n    })\n  },\n  guards: {\n    isLastStep: function isLastStep(context) {\n      return context.activeStep === context.steps.length - 1;\n    },\n    activeStepValid: function activeStepValid(context) {\n      return context.isActiveStepValid;\n    }\n  }\n});\n\nvar PAGINATED_MACHINE_ID$2 = 'paginatedApi';\n\nvar fetchConnectorTypes = function fetchConnectorTypes(accessToken, basePath) {\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorTypesApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (request, onSuccess, onError) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    var page = request.page,\n        size = request.size,\n        query = request.query;\n\n    var _ref = query || {},\n        name = _ref.name,\n        _ref$categories = _ref.categories,\n        categories = _ref$categories === void 0 ? [] : _ref$categories;\n\n    apisService.listConnectorTypes('1', '1000', {\n      cancelToken: source.token\n    }).then(function (response) {\n      var _filteredItems;\n\n      var lcName = name ? name.toLowerCase() : undefined;\n      var rawItems = response.data.items;\n      var filteredItems = lcName ? rawItems == null ? void 0 : rawItems.filter(function (c) {\n        return c.name.toLowerCase().includes(lcName);\n      }) : rawItems;\n      filteredItems = categories.length > 0 ? (_filteredItems = filteredItems) == null ? void 0 : _filteredItems.filter(function (c) {\n        var _c$labels;\n\n        return (((_c$labels = c.labels) == null ? void 0 : _c$labels.filter(function (l) {\n          return categories.includes(l);\n        })) || []).length > 0;\n      }) : filteredItems;\n      var total = filteredItems.length;\n      var offset = (page - 1) * size;\n      var items = filteredItems.slice(offset, offset + size);\n      onSuccess({\n        items: items,\n        total: total,\n        page: page,\n        size: size\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        onError({\n          error: error.message,\n          page: request.page\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nvar connectorTypesMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar connectorTypesMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  accessToken: function accessToken() {\n    return Promise.resolve('');\n  },\n  basePath: '',\n  response: undefined,\n  selectedConnector: undefined,\n  error: undefined\n}, {\n  events: /*#__PURE__*/_extends({\n    selectConnector: function selectConnector(payload) {\n      return _extends({}, payload);\n    },\n    deselectConnector: function deselectConnector() {\n      return {};\n    },\n    confirm: function confirm() {\n      return {};\n    }\n  }, /*#__PURE__*/getPaginatedApiMachineEvents())\n});\nvar connectorTypesMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: connectorTypesMachineSchema,\n  context: connectorTypesMachineModel.initialContext,\n  id: 'connectors',\n  initial: 'root',\n  states: {\n    root: {\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          invoke: {\n            id: PAGINATED_MACHINE_ID$2,\n            src: function src(context) {\n              return makePaginatedApiMachine(fetchConnectorTypes(context.accessToken, context.basePath), function (i) {\n                return i;\n              });\n            }\n          },\n          states: {\n            idle: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)({\n                type: 'api.query',\n                query: {\n                  categories: ['sink', 'source']\n                }\n              }, {\n                to: PAGINATED_MACHINE_ID$2\n              }),\n              on: {\n                'api.ready': 'ready'\n              }\n            },\n            ready: {}\n          },\n          on: /*#__PURE__*/_extends({}, /*#__PURE__*/getPaginatedApiMachineEventsHandlers(PAGINATED_MACHINE_ID$2), {\n            'api.success': {\n              actions: 'success'\n            }\n          })\n        },\n        selection: {\n          id: 'selection',\n          initial: 'verify',\n          states: {\n            verify: {\n              always: [{\n                target: 'selecting',\n                cond: 'noConnectorSelected'\n              }, {\n                target: 'valid',\n                cond: 'connectorSelected'\n              }]\n            },\n            selecting: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isInvalid'),\n              on: {\n                selectConnector: {\n                  target: 'valid',\n                  actions: 'selectConnector',\n                  cond: function cond(_, event) {\n                    return event.selectedConnector !== undefined;\n                  }\n                }\n              }\n            },\n            valid: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isValid'),\n              on: {\n                selectConnector: {\n                  target: 'verify',\n                  actions: 'selectConnector'\n                },\n                deselectConnector: {\n                  target: 'verify',\n                  actions: 'reset'\n                },\n                confirm: {\n                  target: '#done',\n                  cond: 'connectorSelected'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    done: {\n      id: 'done',\n      type: 'final',\n      data: {\n        selectedConnector: function selectedConnector(context) {\n          return context.selectedConnector;\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    success: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'api.success') return {};\n\n      var response = _objectWithoutPropertiesLoose(event, [\"type\"]);\n\n      return {\n        response: response\n      };\n    }),\n    selectConnector: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedConnector: function selectedConnector(context, event) {\n        if (event.type === 'selectConnector') {\n          var _context$response, _context$response$ite;\n\n          return (_context$response = context.response) == null ? void 0 : (_context$response$ite = _context$response.items) == null ? void 0 : _context$response$ite.find(function (i) {\n            return i.id === event.selectedConnector;\n          });\n        }\n\n        return context.selectedConnector;\n      }\n    }),\n    reset: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedConnector: function selectedConnector(context, event) {\n        return event.type === 'deselectConnector' ? undefined : context.selectedConnector;\n      }\n    })\n  },\n  guards: {\n    connectorSelected: function connectorSelected(context) {\n      return context.selectedConnector !== undefined;\n    },\n    noConnectorSelected: function noConnectorSelected(context) {\n      return context.selectedConnector === undefined;\n    }\n  }\n});\nvar useConnectorTypesMachineIsReady = function useConnectorTypesMachineIsReady(actor) {\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.matches({\n      root: {\n        api: 'ready'\n      }\n    });\n  }, [actor]));\n};\nvar useConnectorTypesMachine = function useConnectorTypesMachine(actor) {\n  var api = usePagination(actor.state.children[PAGINATED_MACHINE_ID$2]);\n\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    var _state$context$select;\n\n    return {\n      selectedId: (_state$context$select = state.context.selectedConnector) == null ? void 0 : _state$context$select.id\n    };\n  }, [actor])),\n      selectedId = _useSelector.selectedId;\n\n  var onSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (selectedConnector) {\n    actor.send({\n      type: 'selectConnector',\n      selectedConnector: selectedConnector\n    });\n  }, [actor]);\n  var onQuery = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (request) {\n    actor.send(_extends({\n      type: 'api.query'\n    }, request));\n  }, [actor]);\n  return _extends({}, api, {\n    selectedId: selectedId,\n    onSelect: onSelect,\n    onQuery: onQuery\n  });\n};\n\nvar PAGINATED_MACHINE_ID$3 = 'paginatedApi';\n\nvar fetchKafkaInstances = function fetchKafkaInstances(accessToken, basePath) {\n  // TODO: remove after demo\n  basePath = 'https://api.openshift.com';\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.DefaultApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (request, onSuccess, onError) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    var page = request.page,\n        size = request.size,\n        query = request.query;\n\n    var _ref = query || {},\n        name = _ref.name,\n        statuses = _ref.statuses,\n        owner = _ref.owner,\n        cloudProviders = _ref.cloudProviders,\n        regions = _ref.regions;\n\n    var nameSearch = name && name.length > 0 ? \" name LIKE \" + name : undefined;\n    var ownerSearch = owner && owner.length > 0 ? \" owner LIKE \" + owner : undefined;\n    var statusSearch = statuses && statuses.length > 0 ? statuses.map(function (s) {\n      return \"status = \" + s;\n    }).join(' OR ') : undefined;\n    var cloudProviderSearch = cloudProviders && cloudProviders.length > 0 ? cloudProviders.map(function (s) {\n      return \"cloud_provider = \" + s;\n    }).join(' OR ') : undefined;\n    var regionSearch = regions && regions.length > 0 ? regions.map(function (s) {\n      return \"region = \" + s;\n    }).join(' OR ') : undefined;\n    var search = [nameSearch, ownerSearch, statusSearch, cloudProviderSearch, regionSearch].filter(Boolean).map(function (s) {\n      return \"(\" + s + \")\";\n    }).join(' AND ');\n    apisService.getKafkas(\"\" + page, \"\" + size, undefined, search, {\n      cancelToken: source.token\n    }).then(function (response) {\n      onSuccess({\n        items: response.data.items,\n        total: response.data.total,\n        page: response.data.page,\n        size: response.data.size\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        onError({\n          error: error.message,\n          page: request.page\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nvar kafkasMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar kafkasMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  accessToken: function accessToken() {\n    return Promise.resolve('');\n  },\n  basePath: '',\n  instances: undefined,\n  selectedInstance: undefined,\n  error: undefined\n}, {\n  events: /*#__PURE__*/_extends({\n    selectInstance: function selectInstance(payload) {\n      return _extends({}, payload);\n    },\n    deselectInstance: function deselectInstance() {\n      return {};\n    },\n    confirm: function confirm() {\n      return {};\n    }\n  }, /*#__PURE__*/getPaginatedApiMachineEvents())\n});\nvar kafkasMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: kafkasMachineSchema,\n  id: 'kafkas',\n  initial: 'root',\n  context: kafkasMachineModel.initialContext,\n  states: {\n    root: {\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          invoke: {\n            id: PAGINATED_MACHINE_ID$3,\n            src: function src(context) {\n              return makePaginatedApiMachine(fetchKafkaInstances(context.accessToken, context.basePath), function (i) {\n                return i;\n              });\n            }\n          },\n          states: {\n            idle: {\n              entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('api.query', {\n                to: PAGINATED_MACHINE_ID$3\n              }),\n              on: {\n                'api.ready': 'ready'\n              }\n            },\n            ready: {}\n          },\n          on: /*#__PURE__*/_extends({}, /*#__PURE__*/getPaginatedApiMachineEventsHandlers(PAGINATED_MACHINE_ID$3), {\n            'api.success': {\n              actions: 'success'\n            }\n          })\n        },\n        selection: {\n          id: 'selection',\n          initial: 'verify',\n          states: {\n            verify: {\n              always: [{\n                target: 'selecting',\n                cond: 'noInstanceSelected'\n              }, {\n                target: 'valid',\n                cond: 'instanceSelected'\n              }]\n            },\n            selecting: {\n              entry: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)('isInvalid'),\n              on: {\n                selectInstance: {\n                  target: 'valid',\n                  actions: 'selectInstance'\n                }\n              }\n            },\n            valid: {\n              entry: /*#__PURE__*/(0,xstate_lib_actions__WEBPACK_IMPORTED_MODULE_7__.sendParent)('isValid'),\n              on: {\n                selectInstance: {\n                  target: 'verify',\n                  actions: 'selectInstance',\n                  cond: function cond(_, event) {\n                    return event.selectedInstance !== undefined;\n                  }\n                },\n                deselectInstance: {\n                  target: 'verify',\n                  actions: 'reset'\n                },\n                confirm: {\n                  target: '#done',\n                  cond: 'instanceSelected'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    done: {\n      id: 'done',\n      type: 'final',\n      data: {\n        selectedInstance: function selectedInstance(context) {\n          return context.selectedInstance;\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    success: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n      if (event.type !== 'api.success') return {};\n\n      var response = _objectWithoutPropertiesLoose(event, [\"type\"]);\n\n      return {\n        response: response\n      };\n    }),\n    selectInstance: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedInstance: function selectedInstance(context, event) {\n        if (event.type === 'selectInstance') {\n          var _context$response, _context$response$ite;\n\n          return (_context$response = context.response) == null ? void 0 : (_context$response$ite = _context$response.items) == null ? void 0 : _context$response$ite.find(function (i) {\n            return i.id === event.selectedInstance;\n          });\n        }\n\n        return context.selectedInstance;\n      }\n    }),\n    reset: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n      selectedInstance: function selectedInstance(context, event) {\n        return event.type === 'deselectInstance' ? undefined : context.selectedInstance;\n      }\n    })\n  },\n  guards: {\n    instanceSelected: function instanceSelected(context) {\n      return context.selectedInstance !== undefined;\n    },\n    noInstanceSelected: function noInstanceSelected(context) {\n      return context.selectedInstance === undefined;\n    }\n  }\n});\nvar useKafkasMachineIsReady = function useKafkasMachineIsReady(actor) {\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.matches({\n      root: {\n        api: 'ready'\n      }\n    });\n  }, [actor]));\n};\nvar useKafkasMachine = function useKafkasMachine(actor) {\n  var api = usePagination(actor.state.children[PAGINATED_MACHINE_ID$3]);\n\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    var _state$context$select;\n\n    return {\n      selectedId: (_state$context$select = state.context.selectedInstance) == null ? void 0 : _state$context$select.id\n    };\n  }, [actor])),\n      selectedId = _useSelector.selectedId;\n\n  var onSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (selectedInstance) {\n    actor.send({\n      type: 'selectInstance',\n      selectedInstance: selectedInstance\n    });\n  }, [actor]);\n  var onQuery = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (request) {\n    actor.send(_extends({\n      type: 'api.query'\n    }, request));\n  }, [actor]);\n  return _extends({}, api, {\n    selectedId: selectedId,\n    onSelect: onSelect,\n    onQuery: onQuery\n  });\n};\n\nvar saveConnector = function saveConnector(_ref) {\n  var accessToken = _ref.accessToken,\n      basePath = _ref.basePath,\n      kafka = _ref.kafka,\n      cluster = _ref.cluster,\n      connectorType = _ref.connectorType,\n      configuration = _ref.configuration,\n      name = _ref.name,\n      userServiceAccount = _ref.userServiceAccount;\n  var apisService = new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.ConnectorsApi(new _cos_ui_api__WEBPACK_IMPORTED_MODULE_4__.Configuration({\n    accessToken: accessToken,\n    basePath: basePath\n  }));\n  return function (callback) {\n    var CancelToken = (axios__WEBPACK_IMPORTED_MODULE_3___default().CancelToken);\n    var source = CancelToken.source();\n    var async = true;\n    var connector = {\n      kind: 'Connector',\n      metadata: {\n        name: name,\n        kafka_id: kafka.id\n      },\n      deployment_location: {\n        kind: 'addon',\n        cluster_id: cluster.id\n      },\n      connector_type_id: connectorType.id,\n      kafka: {\n        bootstrap_server: kafka.bootstrap_server_host || 'demo',\n        client_id: userServiceAccount == null ? void 0 : userServiceAccount.clientId,\n        client_secret: userServiceAccount == null ? void 0 : userServiceAccount.clientSecret\n      },\n      connector_spec: configuration\n    };\n    apisService.createConnector(async, connector, {\n      cancelToken: source.token\n    }).then(function () {\n      callback({\n        type: 'success'\n      });\n    })[\"catch\"](function (error) {\n      if (!axios__WEBPACK_IMPORTED_MODULE_3___default().isCancel(error)) {\n        callback({\n          type: 'failure',\n          message: error.response.data.reason\n        });\n      }\n    });\n    return function () {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nvar reviewMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar reviewMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({\n  initialConfiguration: undefined,\n  configString: '',\n  name: '',\n  validator: /*#__PURE__*/(0,_cos_ui_json_schema_configurator__WEBPACK_IMPORTED_MODULE_5__.createValidator)({})\n}, {\n  events: {\n    setName: function setName(payload) {\n      return payload;\n    },\n    setServiceAccount: function setServiceAccount(payload) {\n      return payload;\n    },\n    updateConfiguration: function updateConfiguration(payload) {\n      return payload;\n    },\n    save: function save() {\n      return {};\n    },\n    success: function success() {\n      return {};\n    },\n    failure: function failure(payload) {\n      return payload;\n    }\n  }\n});\nvar reviewMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: reviewMachineSchema,\n  id: 'review',\n  initial: 'verify',\n  context: reviewMachineModel.initialContext,\n  entry: 'initialize',\n  states: {\n    verify: {\n      entry: 'verifyConfigString',\n      always: [{\n        target: 'valid',\n        cond: 'isAllConfigured'\n      }, {\n        target: 'reviewing'\n      }]\n    },\n    reviewing: {\n      entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isInvalid'),\n      on: {\n        setName: {\n          target: 'verify',\n          actions: 'setName'\n        },\n        setServiceAccount: {\n          target: 'verify',\n          actions: 'setServiceAccount'\n        },\n        updateConfiguration: {\n          target: 'verify',\n          actions: 'updateConfiguration'\n        }\n      }\n    },\n    valid: {\n      id: 'valid',\n      entry: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.sendParent)('isValid'),\n      on: {\n        setName: {\n          target: 'verify',\n          actions: 'setName'\n        },\n        setServiceAccount: {\n          target: 'verify',\n          actions: 'setServiceAccount'\n        },\n        updateConfiguration: {\n          target: 'verify',\n          actions: 'updateConfiguration'\n        },\n        save: 'saving'\n      }\n    },\n    saving: {\n      invoke: {\n        src: function src(context) {\n          return saveConnector({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            kafka: context.kafka,\n            cluster: context.cluster,\n            connectorType: context.connectorType,\n            configuration: JSON.parse(context.configString),\n            name: context.name,\n            userServiceAccount: context.userServiceAccount\n          });\n        }\n      },\n      on: {\n        success: 'saved',\n        failure: {\n          target: 'valid',\n          actions: 'setSavingError'\n        }\n      },\n      tags: ['saving']\n    },\n    saved: {\n      type: 'final'\n    }\n  }\n}, {\n  actions: {\n    initialize: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n      return {\n        configString: dataToPrettyString(context.initialConfiguration),\n        validator: (0,_cos_ui_json_schema_configurator__WEBPACK_IMPORTED_MODULE_5__.createValidator)(context.connectorType.json_schema)\n      };\n    }),\n    setName: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n      return event.type === 'setName' ? {\n        name: event.name\n      } : {};\n    }),\n    setServiceAccount: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n      return event.type === 'setServiceAccount' ? {\n        userServiceAccount: event.serviceAccount\n      } : {};\n    }),\n    updateConfiguration: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n      return event.type === 'updateConfiguration' ? {\n        configString: event.data\n      } : {};\n    }),\n    verifyConfigString: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (context) {\n      var _verifyData = verifyData(context.configString, context.validator),\n          warnings = _verifyData.warnings,\n          error = _verifyData.error;\n\n      return {\n        configStringWarnings: warnings,\n        configStringError: error\n      };\n    }),\n    setSavingError: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n      if (event.type !== 'failure') return {};\n      return {\n        savingError: event.message\n      };\n    })\n  },\n  guards: {\n    isAllConfigured: function isAllConfigured(context) {\n      return context.configString !== undefined && context.configStringError === undefined && context.name.length > 0;\n    }\n  }\n});\n\nfunction dataToPrettyString(data) {\n  var dataVal = data instanceof Map ? mapToObject(data) : data;\n\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction mapToObject(inputMap) {\n  var obj = {};\n  inputMap.forEach(function (value, key) {\n    obj[key] = value;\n  });\n  return obj;\n}\n\nfunction verifyData(data, validator) {\n  try {\n    var parsedData = JSON.parse(data);\n    var validationResult = validator(parsedData);\n    return {\n      warnings: validationResult ? validationResult.details.map(function (d) {\n        return d.instancePath + \" \" + d.message;\n      }) : undefined,\n      error: undefined\n    };\n  } catch (e) {\n    return {\n      warnings: undefined,\n      error: \"Invalid JSON: \" + e.message\n    };\n  }\n}\n\nvar useReviewMachine = function useReviewMachine(actor) {\n  var _useSelector = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(actor, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return {\n      name: state.context.name,\n      serviceAccount: state.context.userServiceAccount,\n      configString: state.context.configString,\n      configStringError: state.context.configStringError,\n      configStringWarnings: state.context.configStringWarnings,\n      isSaving: state.hasTag('saving'),\n      savingError: state.context.savingError\n    };\n  }, [actor])),\n      name = _useSelector.name,\n      serviceAccount = _useSelector.serviceAccount,\n      configString = _useSelector.configString,\n      configStringError = _useSelector.configStringError,\n      configStringWarnings = _useSelector.configStringWarnings,\n      isSaving = _useSelector.isSaving,\n      savingError = _useSelector.savingError;\n\n  var onSetName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (name) {\n    actor.send({\n      type: 'setName',\n      name: name\n    });\n  }, [actor]);\n  var onSetServiceAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (serviceAccount) {\n    actor.send({\n      type: 'setServiceAccount',\n      serviceAccount: serviceAccount\n    });\n  }, [actor]);\n  var onUpdateConfiguration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (data) {\n    actor.send({\n      type: 'updateConfiguration',\n      data: data || ''\n    });\n  }, [actor]);\n  return {\n    name: name,\n    serviceAccount: serviceAccount,\n    configString: configString,\n    configStringError: configStringError,\n    configStringWarnings: configStringWarnings,\n    isSaving: isSaving,\n    savingError: savingError,\n    onSetName: onSetName,\n    onSetServiceAccount: onSetServiceAccount,\n    onUpdateConfiguration: onUpdateConfiguration\n  };\n};\n\nvar creationWizardMachineSchema = {\n  context: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createSchema)()\n};\nvar creationWizardMachineModel = /*#__PURE__*/(0,xstate_lib_model__WEBPACK_IMPORTED_MODULE_6__.createModel)({}, {\n  events: {\n    isValid: function isValid() {\n      return {};\n    },\n    isInvalid: function isInvalid() {\n      return {};\n    },\n    prev: function prev() {\n      return {};\n    },\n    next: function next() {\n      return {};\n    },\n    changedStep: function changedStep(_ref) {\n      var step = _ref.step;\n      return {\n        step: step\n      };\n    },\n    jumpToSelectKafka: function jumpToSelectKafka() {\n      return {};\n    },\n    jumpToSelectCluster: function jumpToSelectCluster() {\n      return {};\n    },\n    jumpToSelectConnector: function jumpToSelectConnector() {\n      return {};\n    },\n    jumpToConfigureConnector: function jumpToConfigureConnector(_ref2) {\n      var subStep = _ref2.subStep;\n      return {\n        subStep: subStep\n      };\n    },\n    jumpToReviewConfiguration: function jumpToReviewConfiguration() {\n      return {};\n    }\n  }\n});\nvar creationWizardMachine = /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({\n  schema: creationWizardMachineSchema,\n  id: 'creationWizard',\n  initial: 'selectConnector',\n  context: creationWizardMachineModel.initialContext,\n  states: {\n    selectConnector: {\n      initial: 'selecting',\n      invoke: {\n        id: 'selectConnectorRef',\n        src: connectorTypesMachine,\n        data: function data(context) {\n          return {\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedConnector: context.selectedConnector\n          };\n        },\n        onDone: {\n          target: 'selectKafka',\n          actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n            return {\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false\n            };\n          })\n        },\n        onError: '.error'\n      },\n      states: {\n        error: {},\n        selecting: {\n          on: {\n            isValid: 'valid'\n          }\n        },\n        valid: {\n          on: {\n            isInvalid: 'selecting',\n            next: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('confirm', {\n                to: 'selectConnectorRef'\n              })\n            }\n          }\n        }\n      }\n    },\n    selectKafka: {\n      initial: 'selecting',\n      invoke: {\n        id: 'selectKafkaInstanceRef',\n        src: kafkasMachine,\n        data: function data(context) {\n          return {\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10\n            }\n          };\n        },\n        onDone: {\n          target: 'selectCluster',\n          actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n            selectedKafkaInstance: function selectedKafkaInstance(_, event) {\n              return event.data.selectedInstance;\n            }\n          })\n        },\n        onError: '.error'\n      },\n      states: {\n        error: {},\n        selecting: {\n          on: {\n            isValid: 'valid'\n          }\n        },\n        valid: {\n          on: {\n            isInvalid: 'selecting',\n            next: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('confirm', {\n                to: 'selectKafkaInstanceRef'\n              })\n            }\n          }\n        }\n      },\n      on: {\n        prev: 'selectConnector'\n      }\n    },\n    selectCluster: {\n      initial: 'selecting',\n      invoke: {\n        id: 'selectClusterRef',\n        src: clustersMachine,\n        data: function data(context) {\n          return {\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedCluster: context.selectedCluster\n          };\n        },\n        onDone: {\n          target: 'configureConnector',\n          actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n            selectedCluster: function selectedCluster(_, event) {\n              return event.data.selectedCluster;\n            }\n          })\n        },\n        onError: '.error'\n      },\n      states: {\n        error: {},\n        selecting: {\n          on: {\n            isValid: 'valid'\n          }\n        },\n        valid: {\n          on: {\n            isInvalid: 'selecting',\n            next: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('confirm', {\n                to: 'selectClusterRef'\n              })\n            }\n          }\n        }\n      },\n      on: {\n        prev: 'selectKafka'\n      }\n    },\n    configureConnector: {\n      initial: 'loadConfigurator',\n      states: {\n        loadConfigurator: {\n          invoke: {\n            id: 'configuratorLoader',\n            src: 'makeConfiguratorLoaderMachine',\n            data: function data(context) {\n              return {\n                connector: context.selectedConnector\n              };\n            },\n            onDone: {\n              target: 'configure',\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_context, event) {\n                return {\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps\n                };\n              })\n            },\n            onError: {\n              actions: function actions(_context, event) {\n                return console.error(event.data.message);\n              }\n            }\n          }\n        },\n        configure: {\n          id: 'configure',\n          initial: 'configuring',\n          invoke: {\n            id: 'configuratorRef',\n            src: configuratorMachine,\n            data: function data(context) {\n              return {\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false\n              };\n            },\n            onDone: {\n              target: '#creationWizard.reviewConfiguration',\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n                return {\n                  connectorConfiguration: event.data.configuration || true\n                };\n              })\n            },\n            onError: {\n              actions: function actions(_context, event) {\n                return console.error(event.data.message);\n              }\n            }\n          },\n          states: {\n            configuring: {\n              on: {\n                isValid: 'valid'\n              }\n            },\n            valid: {\n              on: {\n                isInvalid: 'configuring',\n                next: {\n                  actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('next', {\n                    to: 'configuratorRef'\n                  })\n                }\n              }\n            }\n          },\n          on: {\n            prev: [{\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('prev', {\n                to: 'configuratorRef'\n              }),\n              cond: 'areThereSubsteps'\n            }, {\n              target: '#creationWizard.selectCluster'\n            }],\n            changedStep: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)({\n                activeConfigurationStep: function activeConfigurationStep(_, event) {\n                  return event.step;\n                }\n              })\n            }\n          }\n        }\n      }\n    },\n    reviewConfiguration: {\n      id: 'review',\n      initial: 'reviewing',\n      invoke: {\n        id: 'reviewRef',\n        src: reviewMachine,\n        data: function data(context) {\n          return {\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: ''\n          };\n        },\n        onDone: {\n          target: '#creationWizard.saved',\n          actions: [/*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n            return {\n              connectorConfiguration: event.data\n            };\n          }), 'notifySave']\n        },\n        onError: {\n          actions: function actions(_context, event) {\n            return console.error(event.data.message);\n          }\n        }\n      },\n      states: {\n        reviewing: {\n          on: {\n            isValid: 'valid'\n          }\n        },\n        valid: {\n          on: {\n            isInvalid: 'reviewing',\n            next: {\n              actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.send)('save', {\n                to: 'reviewRef'\n              })\n            }\n          }\n        }\n      },\n      on: {\n        prev: 'configureConnector'\n      }\n    },\n    saved: {\n      id: 'saved',\n      type: 'final'\n    }\n  },\n  on: {\n    jumpToSelectConnector: {\n      target: 'selectConnector'\n    },\n    jumpToSelectKafka: {\n      target: 'selectKafka',\n      cond: 'isConnectorSelected'\n    },\n    jumpToSelectCluster: {\n      target: 'selectCluster',\n      cond: 'isKafkaInstanceSelected'\n    },\n    jumpToConfigureConnector: {\n      target: 'configureConnector',\n      cond: 'isClusterSelected',\n      actions: /*#__PURE__*/(0,xstate__WEBPACK_IMPORTED_MODULE_1__.assign)(function (_, event) {\n        return {\n          activeConfigurationStep: event.subStep || 0\n        };\n      })\n    },\n    jumpToReviewConfiguration: {\n      target: 'reviewConfiguration',\n      cond: 'isConnectorConfigured'\n    }\n  }\n}, {\n  guards: {\n    isKafkaInstanceSelected: function isKafkaInstanceSelected(context) {\n      return context.selectedKafkaInstance !== undefined;\n    },\n    isClusterSelected: function isClusterSelected(context) {\n      return context.selectedCluster !== undefined;\n    },\n    isConnectorSelected: function isConnectorSelected(context, event) {\n      var subStep = event.subStep;\n\n      if (subStep) {\n        return context.selectedConnector !== undefined && (context.connectorConfiguration !== undefined || subStep <= context.activeConfigurationStep);\n      }\n\n      return context.selectedConnector !== undefined;\n    },\n    isConnectorConfigured: function isConnectorConfigured(context) {\n      if (!context.configurationSteps) {\n        return context.connectorConfiguration !== undefined && context.connectorConfiguration !== false;\n      }\n\n      return context.connectorConfiguration !== undefined && context.connectorConfiguration !== false || context.activeConfigurationStep === context.configurationSteps.length - 1 && context.isConfigurationValid === true;\n    },\n    areThereSubsteps: function areThereSubsteps(context) {\n      return context.activeConfigurationStep > 0;\n    }\n  },\n  actions: {\n    notifySave: function notifySave(context) {\n      if (context.onSave) {\n        context.onSave();\n      }\n    }\n  },\n  services: {\n    makeConfiguratorLoaderMachine: function makeConfiguratorLoaderMachine() {\n      return configuratorLoaderMachine;\n    }\n  }\n});\n\nvar CreationWizardMachineService = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar CreationWizardMachineProvider = function CreationWizardMachineProvider(_ref) {\n  var children = _ref.children,\n      accessToken = _ref.accessToken,\n      basePath = _ref.basePath,\n      _fetchConfigurator = _ref.fetchConfigurator,\n      onSave = _ref.onSave;\n  var makeConfiguratorLoaderMachine = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return configuratorLoaderMachine.withConfig({\n      services: {\n        fetchConfigurator: function fetchConfigurator(context) {\n          return _fetchConfigurator(context.connector);\n        }\n      }\n    });\n  }, [_fetchConfigurator]);\n  var service = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useInterpret)(creationWizardMachine, {\n    devTools: true,\n    context: {\n      accessToken: accessToken,\n      basePath: basePath,\n      onSave: onSave\n    },\n    services: {\n      makeConfiguratorLoaderMachine: makeConfiguratorLoaderMachine\n    }\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CreationWizardMachineService.Provider, {\n    value: service\n  }, children);\n};\nvar useCreationWizardMachineService = function useCreationWizardMachineService() {\n  var service = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CreationWizardMachineService);\n\n  if (!service) {\n    throw new Error(\"useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>\");\n  }\n\n  return service;\n};\nvar useCreationWizardMachineConnectorTypesActor = function useCreationWizardMachineConnectorTypesActor() {\n  var service = useCreationWizardMachineService();\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.children.selectConnectorRef;\n  }, [service]));\n};\nvar useCreationWizardMachineKafkasActor = function useCreationWizardMachineKafkasActor() {\n  var service = useCreationWizardMachineService();\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.children.selectKafkaInstanceRef;\n  }, [service]));\n};\nvar useCreationWizardMachineClustersActor = function useCreationWizardMachineClustersActor() {\n  var service = useCreationWizardMachineService();\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.children.selectClusterRef;\n  }, [service]));\n};\nvar useCreationWizardMachineReviewActor = function useCreationWizardMachineReviewActor() {\n  var service = useCreationWizardMachineService();\n  return (0,_xstate_react__WEBPACK_IMPORTED_MODULE_2__.useSelector)(service, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (state) {\n    return state.children.reviewRef;\n  }, [service]));\n};\n\n\n//# sourceMappingURL=machines.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///83255\n")},41361:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "EmptyState": () => (/* binding */ EmptyState),\n/* harmony export */   "EmptyStateVariant": () => (/* binding */ EmptyStateVariant),\n/* harmony export */   "Loading": () => (/* binding */ Loading),\n/* harmony export */   "NoMatchFound": () => (/* binding */ NoMatchFound),\n/* harmony export */   "useDebounce": () => (/* binding */ useDebounce)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10791);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78817);\n/* harmony import */ var _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _patternfly_react_icons_dist_js_icons_plus_circle_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21191);\n/* harmony import */ var _patternfly_react_icons_dist_js_icons_space_shuttle_icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99717);\n/* harmony import */ var _patternfly_react_icons_dist_js_icons_lock_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41469);\n/* harmony import */ var _patternfly_react_icons_dist_js_icons_search_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53106);\n/* harmony import */ var _patternfly_react_icons_dist_js_icons_exclamation_circle_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(47442);\n/* harmony import */ var _patternfly_react_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79419);\n/* harmony import */ var _patternfly_react_styles__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(97405);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\n\n\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar NotFoundIcon = "data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22utf-8%22%3F%3E%3Csvg%20version%3D%221.1%22%20id%3D%22Layer_1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20%20viewBox%3D%220%200%20100%20109%22%20style%3D%22enable-background%3Anew%200%200%20100%20109%3B%22%20xml%3Aspace%3D%22preserve%22%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%20.st0%7Bfill%3Anone%3Bstroke%3A%236A6E73%3Bstroke-linecap%3Around%3Bstroke-linejoin%3Around%3Bstroke-miterlimit%3A10%3Bstroke-dasharray%3A3%2C5%3B%7D%20.st1%7Bfill%3A%23FFFFFF%3Bstroke%3A%236A6E73%3Bstroke-linecap%3Around%3Bstroke-linejoin%3Around%3Bstroke-miterlimit%3A10%3B%7D%20.st2%7Bfill%3A%236A6E73%3B%7D%3C%2Fstyle%3E%3Cpath%20class%3D%22st0%22%20d%3D%22M12.5%2C96.5c3-33%2C17.4-35.8%2C38-24c19.1%2C11%2C36-8.1%2C21-27c-15.4-19.4-8-23-8-23%22%2F%3E%3Cpath%20class%3D%22st1%22%20d%3D%22M13%2C25v50%20M27.8%2C71.8V104%20M27.8%2C15v47.6%20M42.6%2C74v34%20M42.6%2C10v54.2%20M57.4%2C79.2V108%20M57.4%2C32v38%20M72.2%2C77v27%20%20M72.2%2C54.8v9.5%20M72.2%2C29v10.2%20M87%2C25v68%20M56%2C22.5l-40-0.2%20M59.6%2C37.1L5%2C37.1%20M59.6%2C37.1%20M95%2C37.1l-24.1%2C0%20M70.4%2C51.9L1%2C51.9%20%20M70.4%2C51.9%20M80.8%2C51.9%20M99%2C51.9l-18.2%2C0%20M18.6%2C66.6L1%2C66.6%20M70.4%2C66.6l-21.9%2C0%20M99%2C66.6l-17.9%2C0%20M10.5%2C81.4H6%20M95%2C81.4l-75%2C0%20%20M84%2C96.2l-67%2C0%22%2F%3E%3Cg%3E%20%3Cpath%20class%3D%22st2%22%20d%3D%22M81.3%2C15.7c-0.9%2C1.5-2.1%2C2.7-3.6%2C3.6c-1.5%2C0.9-3.2%2C1.3-5%2C1.3s-3.4-0.4-5-1.3c-1.5-0.9-2.7-2.1-3.6-3.6%20%20c-0.9-1.5-1.3-3.2-1.3-5s0.4-3.4%2C1.3-5c0.9-1.5%2C2.1-2.7%2C3.6-3.6c1.5-0.9%2C3.2-1.3%2C5-1.3s3.4%2C0.4%2C5%2C1.3c1.5%2C0.9%2C2.7%2C2.1%2C3.6%2C3.6%20%20c0.9%2C1.5%2C1.3%2C3.2%2C1.3%2C5S82.2%2C14.2%2C81.3%2C15.7z%20M70.3%2C4.8c-0.7%2C0.4-1.4%2C1-1.9%2C1.9c-0.1%2C0.1-0.1%2C0.2-0.1%2C0.3c0%2C0.1%2C0.1%2C0.2%2C0.2%2C0.3%20%20l1.4%2C1c0.1%2C0.1%2C0.2%2C0.1%2C0.3%2C0.1c0.1%2C0%2C0.2-0.1%2C0.3-0.2c0.4-0.5%2C0.8-0.9%2C1-1c0.4-0.3%2C0.8-0.4%2C1.3-0.4c0.5%2C0%2C0.9%2C0.1%2C1.3%2C0.4%20%20c0.4%2C0.3%2C0.6%2C0.6%2C0.6%2C0.9c0%2C0.3-0.1%2C0.5-0.4%2C0.8c-0.2%2C0.1-0.5%2C0.3-0.9%2C0.6l-0.1%2C0c-0.7%2C0.4-1.1%2C0.7-1.4%2C1c-0.5%2C0.5-0.7%2C1.1-0.7%2C1.8%20%20v0.2c0%2C0.1%2C0%2C0.2%2C0.1%2C0.3c0.1%2C0.1%2C0.2%2C0.1%2C0.3%2C0.1h2.2c0.1%2C0%2C0.2%2C0%2C0.3-0.1c0.1-0.1%2C0.1-0.2%2C0.1-0.3v0c0-0.2%2C0.1-0.4%2C0.3-0.6%20%20c0.1-0.1%2C0.4-0.3%2C0.8-0.5c0.7-0.4%2C1.2-0.8%2C1.5-1.1c0.5-0.6%2C0.8-1.3%2C0.8-2.1c0-0.7-0.2-1.4-0.7-2.1s-1-1.1-1.8-1.5s-1.5-0.5-2.2-0.5%20%20C72%2C4.2%2C71.1%2C4.4%2C70.3%2C4.8z%20M71.5%2C14.6c-0.4%2C0.4-0.5%2C0.8-0.5%2C1.3s0.2%2C0.9%2C0.5%2C1.3s0.8%2C0.5%2C1.3%2C0.5s0.9-0.2%2C1.3-0.5s0.5-0.8%2C0.5-1.3%20%20s-0.2-0.9-0.5-1.3s-0.8-0.5-1.3-0.5S71.8%2C14.2%2C71.5%2C14.6z%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E";\n\nvar NotFoundImg = function NotFoundImg() {\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("img", {\n    src: NotFoundIcon,\n    alt: "Not found page",\n    width: "128px"\n  });\n};\n\nvar EmptyStateVariant;\n\n(function (EmptyStateVariant) {\n  EmptyStateVariant["GettingStarted"] = "GettingStarted";\n  EmptyStateVariant["NoAccess"] = "NoAccess";\n  EmptyStateVariant["NoResult"] = "NoResult";\n  EmptyStateVariant["NoItems"] = "NoItems";\n  EmptyStateVariant["UnexpectedError"] = "UnexpectedError";\n  EmptyStateVariant["PageNotFound"] = "PageNotFound";\n})(EmptyStateVariant || (EmptyStateVariant = {}));\n\nvar EmptyState = function EmptyState(_ref) {\n  var titleProps = _ref.titleProps,\n      buttonProps = _ref.buttonProps,\n      emptyStateIconProps = _ref.emptyStateIconProps,\n      emptyStateProps = _ref.emptyStateProps,\n      emptyStateBodyProps = _ref.emptyStateBodyProps,\n      children = _ref.children;\n\n  var _ref2 = buttonProps || {},\n      _ref2$variant = _ref2.variant,\n      buttonVariant = _ref2$variant === void 0 ? _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.ButtonVariant.primary : _ref2$variant,\n      onClick = _ref2.onClick,\n      restButtonProps = _objectWithoutPropertiesLoose(_ref2, ["variant", "onClick"]);\n\n  var _ref3 = titleProps || {},\n      title = _ref3.title,\n      restTitleProps = _objectWithoutPropertiesLoose(_ref3, ["title"]);\n\n  var _ref4 = emptyStateBodyProps || {},\n      body = _ref4.body,\n      restEmptyStateBodyProps = _objectWithoutPropertiesLoose(_ref4, ["body"]);\n\n  var _ref5 = emptyStateProps || {},\n      _ref5$variant = _ref5.variant,\n      emptyStateVariant = _ref5$variant === void 0 ? EmptyStateVariant.GettingStarted : _ref5$variant,\n      className = _ref5.className,\n      restEmptyStateProps = _objectWithoutPropertiesLoose(_ref5, ["variant", "className"]);\n\n  var _getVariantConfig = getVariantConfig({\n    variant: emptyStateVariant,\n    emptyStateIconProps: emptyStateIconProps,\n    titleProps: titleProps\n  }),\n      variant = _getVariantConfig.variant,\n      icon = _getVariantConfig.icon,\n      titleSize = _getVariantConfig.titleSize,\n      headingLevel = _getVariantConfig.headingLevel;\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyState, _extends({\n    variant: variant,\n    className: (0,_patternfly_react_styles__WEBPACK_IMPORTED_MODULE_2__.css)(\'pf-u-pt-2xl pf-u-pt-3xl-on-md\', className)\n  }, restEmptyStateProps), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateIcon, _extends({\n    icon: icon\n  }, emptyStateIconProps)), title && react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.Title, _extends({\n    headingLevel: headingLevel,\n    size: titleSize\n  }, restTitleProps), title), body && react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateBody, _extends({}, restEmptyStateBodyProps), body), (buttonProps == null ? void 0 : buttonProps.title) && react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.Button, _extends({\n    variant: buttonVariant,\n    onClick: onClick\n  }, restButtonProps), buttonProps == null ? void 0 : buttonProps.title), children);\n};\n\nvar getVariantConfig = function getVariantConfig(_ref6) {\n  var variant = _ref6.variant,\n      emptyStateIconProps = _ref6.emptyStateIconProps,\n      titleProps = _ref6.titleProps;\n  var varaintConfig = {};\n\n  switch (variant) {\n    case EmptyStateVariant.GettingStarted:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.xl,\n        icon: _patternfly_react_icons_dist_js_icons_space_shuttle_icon__WEBPACK_IMPORTED_MODULE_4__/* .default */ .ZP,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes["4xl"],\n        headingLevel: \'h1\'\n      };\n      break;\n\n    case EmptyStateVariant.NoAccess:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.large,\n        icon: _patternfly_react_icons_dist_js_icons_lock_icon__WEBPACK_IMPORTED_MODULE_5__/* .default */ .ZP,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes.xl,\n        headingLevel: \'h2\'\n      };\n      break;\n\n    case EmptyStateVariant.NoItems:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.large,\n        icon: _patternfly_react_icons_dist_js_icons_plus_circle_icon__WEBPACK_IMPORTED_MODULE_6__/* .default */ .ZP,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes.xl,\n        headingLevel: \'h2\'\n      };\n      break;\n\n    case EmptyStateVariant.NoResult:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.large,\n        icon: _patternfly_react_icons_dist_js_icons_search_icon__WEBPACK_IMPORTED_MODULE_7__/* .default */ .ZP,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes.lg,\n        headingLevel: \'h2\'\n      };\n      break;\n\n    case EmptyStateVariant.UnexpectedError:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.full,\n        icon: _patternfly_react_icons_dist_js_icons_exclamation_circle_icon__WEBPACK_IMPORTED_MODULE_8__/* .default */ .ZP,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes.lg,\n        headingLevel: \'h1\'\n      };\n      break;\n\n    case EmptyStateVariant.PageNotFound:\n      varaintConfig = {\n        variant: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.full,\n        icon: NotFoundImg,\n        titleSize: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.TitleSizes.lg,\n        headingLevel: \'h1\'\n      };\n      break;\n\n    default:\n      varaintConfig = {\n        variant: variant || _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateVariant.full,\n        icon: emptyStateIconProps == null ? void 0 : emptyStateIconProps.icon,\n        titleSize: titleProps == null ? void 0 : titleProps.size,\n        headingLevel: titleProps == null ? void 0 : titleProps.headingLevel\n      };\n      break;\n  }\n\n  return varaintConfig;\n};\n\nvar Loading = function Loading() {\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyState, null, react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.EmptyStateIcon, {\n    variant: "container",\n    component: _patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.Spinner\n  }), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__.Title, {\n    size: "lg",\n    headingLevel: "h4"\n  }, "Loading"));\n};\n\nvar NoMatchFound = function NoMatchFound(_ref) {\n  var onClear = _ref.onClear;\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(EmptyState, {\n    emptyStateProps: {\n      variant: EmptyStateVariant.NoItems\n    },\n    titleProps: {\n      title: \'No results found\'\n    },\n    emptyStateBodyProps: {\n      body: \'No results match the filter criteria. Clear all filters to show results.\'\n    },\n    buttonProps: onClear && {\n      title: \'Clear all filters\',\n      onClick: onClear\n    }\n  });\n};\n\nvar useDebounce = function useDebounce(fnToDebounce, durationInMs) {\n  if (durationInMs === void 0) {\n    durationInMs = 200;\n  }\n\n  if (isNaN(durationInMs)) {\n    throw new TypeError(\'durationInMs for debounce should be a number\');\n  }\n\n  if (typeof fnToDebounce !== \'function\') {\n    throw new TypeError(\'fnToDebounce should be a function\');\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(lodash_debounce__WEBPACK_IMPORTED_MODULE_3___default()(fnToDebounce, durationInMs), [fnToDebounce, durationInMs]);\n};\n\n\n//# sourceMappingURL=utils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41361\n')}}]);