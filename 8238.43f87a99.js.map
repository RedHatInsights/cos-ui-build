{"version":3,"file":"8238.43f87a99.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/components/ConnectorActions/ConnectorActionsMenu.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorNamespaceProps = {\n  namespaceId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n          annotations: [\n            {\n              key: 'connector_mgmt.api.openshift.com/profile',\n              value: 'default-profile',\n            },\n          ],\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  namespaceId,\n}: ConnectorNamespaceProps): FetchCallbacks<ConnectorNamespace> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .getConnectorNamespace(namespaceId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorNamespace, {}> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function useConnectorStatusLabel(status: string) {\n  return typeof status !== undefined ? capitalize(status) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n\n/**\n * Calculate the time remaining before expiry\n * @param expireTime\n * @returns\n */\nexport const getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return { hours: hourDiff, min: minuteDiff };\n};\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\n/**\n * Calculate the time remaining before expiry and return the alert type based on that\n * @param expireTime\n * @returns\n * \"info\" if time remaining > 24 hr\n * \"warning\" if time remaining >= 3 hr\n * \"danger\" if time remaining < 3hr\n */\nexport const warningType = (expireTime: Date): AlertType => {\n  let { hours } = getPendingTime(expireTime);\n  if (hours >= 24) {\n    return 'info';\n  } else if (hours >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\n/**\n * Simple reference resolver that works with references contained in the\n * same schema object\n * @param ref\n * @param schema\n * @returns\n */\nexport const resolveReference = (ref: string, schema: Record<string, any>) => {\n  const [_, ...pathArray] = ref.split('/');\n  return pathArray.reduce((prev, key) => prev && prev[key], schema);\n};\n\n/**\n * Get whatever the default value is for a given property in the given\n * schema recursively\n * @param propertyName\n * @param schema\n * @returns\n */\nexport const createDefaultFromSchema = (\n  propertyName: string,\n  schema: Record<string, any>\n) => {\n  const prop = schema.properties[propertyName];\n  if (typeof prop === 'undefined') {\n    return undefined;\n  }\n  const definition = prop.$ref\n    ? resolveReference(prop.$ref, schema)\n    : schema.properties[propertyName];\n  if (!definition.properties) {\n    return definition.default;\n  }\n  const answer: any = {};\n  Object.keys(definition.properties).map((key) => {\n    const value = createDefaultFromSchema(key, {\n      $defs: schema.$defs,\n      ...(definition || {}),\n    });\n    if (typeof value !== 'undefined') {\n      answer[key] = value;\n    }\n  });\n  return answer;\n};\n\n/**\n * Returns a new object that does not contain empty objects as values\n * and leaves the passed in value untouched.\n * @param obj\n * @returns\n */\nexport const clearEmptyObjectValues = (obj: any): any => {\n  const answer: any = { ...obj };\n  Object.keys(answer).map((key) => {\n    const value = answer[key];\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      answer[key] = '';\n    }\n  });\n  return answer;\n};\n\n/**\n * Applies client-side workarounds to possible discrepencies in the configuration.\n *\n * Applies a default datashape value from the schema if the configuration object doesn't have one.\n *\n * @param schema\n * @param configuration\n * @returns\n */\nexport const patchConfigurationObject = (\n  schema: Record<string, any>,\n  configuration: { data_shape: any; [key: string]: any }\n) => {\n  const { data_shape: dataShape, ...rest } = configuration;\n  if (typeof dataShape === 'undefined') {\n    const dataShape = createDefaultFromSchema('data_shape', schema);\n    return { ...rest, ...(dataShape && { data_shape: dataShape }) };\n  }\n  return configuration;\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('serviceAccount')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('clientId')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { TFunction } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Popover bodyContent={content}>\n      <button\n        type=\"button\"\n        aria-label={`More info for ${name}`}\n        onClick={(e) => e.preventDefault()}\n        aria-describedby=\"form-group-label-info\"\n        className=\"pf-c-form__group-label-help\"\n      >\n        <HelpIcon noVerticalAlign />\n      </button>\n    </Popover>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  showCredentialHelpText: boolean;\n  duplicateMode: boolean;\n  t: TFunction<'translation', undefined>;\n\n  constructor(\n    schema: any,\n    validator: any,\n    t: TFunction<'translation', undefined>,\n    showCredentialHelpText: boolean,\n    duplicateMode: boolean\n  ) {\n    super(schema, validator);\n    this.t = t;\n    this.showCredentialHelpText = showCredentialHelpText;\n    this.duplicateMode = duplicateMode;\n  }\n\n  /**\n   * Returns the element properties for the named field.  Properties\n   * that should be excluded from DOM properties should be added to\n   * FilterDOMProps\n   * @param name\n   * @returns\n   */\n  getProps(name: string): any {\n    const { description, example, label, ...props } = super.getProps(name);\n    const { isSecret } = this.getField(name);\n    if (isSecret) {\n      return {\n        ...props,\n        ...(this.showCredentialHelpText && {\n          helperText: this.duplicateMode\n            ? this.t('credentialDuplicateFieldHelpText')\n            : this.t('credentialEditFieldHelpText'),\n        }),\n        labelIcon: getLabelIcon(label || name, description),\n        name,\n        label,\n        type: 'password',\n      };\n    }\n    return {\n      ...props,\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(label || name, description),\n      name,\n      label,\n    };\n  }\n\n  getField(name: string): Record<string, any> {\n    const { oneOf, ...field } = super.getField(name);\n    // use this to look at field information\n    /*\n    console.log(\n      'Complex type, name: ',\n      name,\n      ' oneOf: ',\n      oneOf,\n      ' field: ',\n      field\n    );\n    */\n    // Due to:\n    // https://uniforms.tools/docs/api-bridges/#note-on-allofanyofoneof\n    // we need to pick the appropriate type for the form, let's use the\n    // schema to guide these choices.\n    if (typeof oneOf !== 'undefined') {\n      // credentials are either a string field or an opaque object, for\n      // forms let's pick the string field and override it to a password\n      // We are assuming that the schema is consistent here\n      const [asString] = oneOf;\n      return {\n        ...asString,\n        name,\n        required: field.required,\n        type: asString.format,\n        isSecret: asString.format === 'password',\n      };\n    } else {\n      return { name, ...field };\n    }\n  }\n}\n","import { createValidator } from '@utils/createValidator';\nimport { clearEmptyObjectValues } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  duplicateMode?: boolean;\n  editMode?: boolean;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, duplicateMode, editMode, onChange }) => {\n    const { t } = useTranslation();\n    schema.type = schema.type || 'object';\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(\n      schema,\n      schemaValidator,\n      t,\n      duplicateMode || editMode || false,\n      duplicateMode || false\n    );\n\n    const onChangeModel = async (model: any) => {\n      // schemaValidator returns null when there's no errors in the form\n      const errors = schemaValidator(model);\n      // handy for seeing form validation problems\n      // console.log(\"onChangeModel, form validation errors: \", errors);\n      onChange(model, errors === null);\n    };\n\n    // no need to create form elements for error_handler, processors or steps\n    const { error_handler, processors, steps, ...properties } =\n      bridge.schema.properties;\n    // this is great for diagnosing form rendering problems\n    // console.log('properties: ', properties, ' configuration: ', configuration);\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={clearEmptyObjectValues(configuration)}\n          onChangeModel={(model: any) => onChangeModel(model)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(properties).map((key) => (\n            <AutoField key={key} name={key} />\n          ))}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport {\n  clearEmptyObjectValues,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport './ConfigurationStep.css';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = patchConfigurationObject(\n    schema,\n    clearEmptyObjectValues(JSON.parse(JSON.stringify(configuration)))\n  );\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  const getFieldViewComponent = (\n    propertyKey: string,\n    propertyDefinition: {\n      title?: string;\n      type?: string;\n      oneOf?: Array<{ format: string }>;\n    },\n    value: any\n  ): React.ReactNode => {\n    const { title, type, oneOf } = propertyDefinition;\n    // a good place to start troubleshooting problems in the detail view\n    /*\n    console.log(\n      'getViewComponent, propertyName: ',\n      propertyName,\n      ' propertyDefinition: ',\n      propertyDefinition,\n      ' value: ',\n      value\n    );\n    */\n    const propertyNameFallback = _.capitalize(propertyKey.replace('_', ' '));\n    const noPropertySet = (name: string) => (\n      <Text className={'connector-detail__field_view_no_value'}>\n        {t('propertyNotConfigured', { name })}\n      </Text>\n    );\n    // Use the schema to determine the best way to\n    // represent the data\n    switch (type) {\n      case 'object':\n        if (propertyKey === 'data_shape') {\n          return <DataShape data={value} />;\n        }\n        if (value) {\n          return (\n            <Text component={TextVariants.pre}>{JSON.stringify(value)}</Text>\n          );\n        }\n        return noPropertySet(title || propertyNameFallback);\n      case 'boolean':\n        if (typeof value !== 'undefined') {\n          return <Text>{JSON.stringify(value)}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n      default:\n        if (typeof oneOf !== 'undefined') {\n          // we are assuming the schema is consistent here\n          const [def] = oneOf;\n          if (def.format === 'password') {\n            return <Text>**************************</Text>;\n          }\n        }\n        if (typeof value !== 'undefined') {\n          return <Text>{value}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n    }\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('connectorSpecific')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration}\n          onChange={onChange}\n          editMode={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {getFieldViewComponent(\n                  key,\n                  schema.properties[key],\n                  formConfiguration[key]\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler | undefined;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(\n      configuration\n        ? Object.keys(configuration)[0]\n        : Object.keys(error_handler.default)[0]\n    );\n    if (\n      configuration &&\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport { ConnectorConfiguratorComponent } from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearEmptyObjectValues, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-update-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-update-success',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConnectorConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConnectorConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = clearEmptyObjectValues(\n      JSON.parse(JSON.stringify(configuration))\n    );\n  }\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      isViewMode={!isEditMode}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport './ConnectorInfoTextList.css';\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  namespaceMsg?: string | undefined;\n  namespaceMsgVariant: AlertType;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    namespaceMsg,\n    namespaceMsgVariant,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {namespaceMsg &&\n            textListItem(\n              t(''),\n              <Alert\n                customIcon={<OutlinedClockIcon />}\n                className=\"my-class\"\n                variant={namespaceMsgVariant}\n                isInline\n                isPlain\n                title={namespaceMsg}\n              />\n            )}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const getNamespaceData = useCallback((data) => {\n    setNamespaceData(data as ConnectorNamespace);\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-overview-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const getConnectorExpireAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredMsg');\n    }\n    return t('connectorExpire', { hours, min });\n  };\n\n  const getConnectorExpireInlineAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredInline');\n    }\n    return t('connectorExpireInline', { hours, min });\n  };\n\n  useEffect(() => {\n    getNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      namespaceId: connectorData?.namespace_id!,\n    })(getNamespaceData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      {namespaceData?.expiration && (\n        <Alert\n          customIcon={<ClockIcon />}\n          className=\"pf-u-mb-md\"\n          variant={warningType(new Date(namespaceData?.expiration!))}\n          isInline\n          title={getConnectorExpireAlert(namespaceData?.expiration!)}\n        />\n      )}\n\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={connectorData?.kafka?.id}\n        namespaceId={\n          namespaceData ? namespaceData.name : connectorData?.namespace_id!\n        }\n        namespaceMsg={\n          namespaceData?.expiration &&\n          getConnectorExpireInlineAlert(namespaceData?.expiration!)\n        }\n        namespaceMsgVariant={\n          namespaceData?.expiration\n            ? warningType(new Date(namespaceData?.expiration!))\n            : undefined\n        }\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-details-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n  const basename = useBasename();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'} hasShadowBottom>\n      <Breadcrumb>\n        <BreadcrumbItem to={basename?.getBasename()}>\n          {t('connectorsInstances')}\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              name={connectorData?.name!}\n              status={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useConnectorsMachine } from '@app/pages/ConnectorsPage/ConnectorsPageContext';\nimport React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownSeparator,\n} from '@patternfly/react-core';\n\ntype connectorActionsMenuProps = {\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorActionsMenu: FunctionComponent<connectorActionsMenuProps> =\n  ({ onConnectorDetail, onDuplicateConnector }) => {\n    const { response, selectedConnector } = useConnectorsMachine();\n\n    const currentConnectorRef = response?.items?.filter((ref: any) => {\n      return ref.id == `connector-${selectedConnector?.id}`;\n    })[0];\n\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n      useState(false);\n\n    const {\n      connector,\n      canStart,\n      canStop,\n      canDelete,\n      onStart,\n      onStop,\n      onDelete,\n    } = useConnector(currentConnectorRef as ConnectorMachineActorRef);\n\n    const onToggle = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n    };\n    const onSelect = (\n      _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n    ) => {\n      setIsOpen(!isOpen);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById('connector-action');\n      element?.focus();\n    };\n    const doCancelDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n      onDelete();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key=\"start action\"\n        component=\"button\"\n        onClick={onStart}\n        isDisabled={!canStart}\n      >\n        {t('Start')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"stop action\"\n        component=\"button\"\n        onClick={onStop}\n        isDisabled={!canStop}\n      >\n        {t('Stop')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"edit action\"\n        component=\"button\"\n        onClick={() => onConnectorDetail(connector.id!, 'configuration')}\n      >\n        {t('Edit')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"Duplicate action\"\n        component=\"button\"\n        onClick={() => onDuplicateConnector(connector.id!)}\n      >\n        {t('Duplicate')}\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem\n        key=\"delete action\"\n        component=\"button\"\n        onClick={() => setShowDeleteConnectorConfirm(true)}\n        isDisabled={!canDelete}\n      >\n        {t('Delete')}\n      </DropdownItem>,\n    ];\n    return (\n      <>\n        <DialogDeleteConnector\n          connectorName={connector.name}\n          showDialog={showDeleteConnectorConfirm}\n          onCancel={doCancelDeleteConnector}\n          onConfirm={doDeleteConnector}\n        />\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorActionsMenu } from '../ConnectorActions/ConnectorActionsMenu';\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  currentConnectorRef,\n  children,\n  connector,\n  onClose,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n              currentConnectorRef={currentConnectorRef}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    currentConnectorRef,\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    error,\n    onClose,\n    onConnectorDetail,\n    onDuplicateConnector,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n    const { connectorsApiBasePath, getToken } = useCos();\n\n    const alert = useAlert();\n\n    const getNamespaceData = useCallback((data) => {\n      setNamespaceData(data as ConnectorNamespace);\n    }, []);\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    useEffect(() => {\n      getNamespace({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        namespaceId: namespaceId,\n      })(getNamespaceData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [namespaceId]);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const { connector } = useConnector(\n      currentConnectorRef as ConnectorMachineActorRef\n    );\n\n    React.useEffect(() => {\n      if (connector.status?.state == 'deleted') {\n        onClose();\n      }\n    }, [connector, onClose]);\n\n    const getConnectorExpireAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredMsg');\n      }\n      return t('connectorExpire', { hours, min });\n    };\n\n    const getConnectorExpireInlineAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredInline');\n      }\n      return t('connectorExpireInline', { hours, min });\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus\n                  name={name}\n                  status={connector.status?.state!}\n                />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <ConnectorActionsMenu\n              onDuplicateConnector={onDuplicateConnector}\n              onConnectorDetail={onConnectorDetail}\n              onClose={onClose}\n            />\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              {namespaceData?.expiration && (\n                <Alert\n                  customIcon={<ClockIcon />}\n                  className=\"pf-u-mt-md\"\n                  variant={warningType(new Date(namespaceData?.expiration!))}\n                  isInline\n                  title={getConnectorExpireAlert(namespaceData?.expiration!)}\n                />\n              )}\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={kafkaId}\n                  namespaceId={namespaceData ? namespaceData.name : namespaceId}\n                  namespaceMsg={\n                    namespaceData?.expiration &&\n                    getConnectorExpireInlineAlert(namespaceData?.expiration!)\n                  }\n                  namespaceMsgVariant={\n                    namespaceData?.expiration\n                      ? warningType(new Date(namespaceData?.expiration!))\n                      : undefined\n                  }\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={new Date(connector.modified_at!)}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicate'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n    {\n      title: '20',\n      value: 20,\n    },\n    {\n      title: '50',\n      value: 50,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const toolbarItems = (\n    <>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('clearAllFilters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  const currentConnectorRef = response?.items?.filter((ref) => {\n    return ref.id == `connector-${selectedConnector?.id}`;\n  })[0];\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart(t('getting-started-connectors'))\n          }\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          currentConnectorRef={currentConnectorRef as ConnectorMachineActorRef}\n          connector={selectedConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  isViewMode?: boolean;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        {},\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst deselectNamespace = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  {},\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: deselectNamespace,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid:\n                    context.duplicateMode ||\n                    context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedNamespace !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedNamespace !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorNamespace, {}, ConnectorNamespace>(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorNamespace, {}, ConnectorNamespace>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    namespaceRef.send({ type: 'deselectNamespace' });\n  }, [namespaceRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-service-account',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      setLoading(true);\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n              >\n                {t('create')}\n              </Button>,\n              <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport {\n  clearEmptyObjectValues,\n  mapToObject,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector, connectorData } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n        connectorData: state.context.connectorData,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    const defaultEntries = JSON.parse(JSON.stringify(connectorData?.connector));\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(mapToObject(configuration)),\n      };\n    } else {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(configuration),\n      };\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      isViewMode={duplicateMode && false}\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  const schema = (connector as ConnectorTypeAllOf).schema!;\n  const initialConfiguration = patchConfigurationObject(schema, {} as any);\n  return (\n    <JsonSchemaConfigurator\n      schema={schema}\n      configuration={\n        configuration\n          ? patchConfigurationObject(schema, configuration as any)\n          : initialConfiguration\n      }\n      duplicateMode={duplicateMode || false}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n    configurationSteps,\n    activeConfigurationStep,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n          configurationSteps: state.context.configurationSteps,\n          activeConfigurationStep: state.context.activeConfigurationStep,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={\n        typeof configurationSteps === 'object' &&\n        activeConfigurationStep !== undefined\n          ? t(configurationSteps[activeConfigurationStep])\n          : t('connectorSpecific')\n      }\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title={t('duplicateAlertConnectorType')}\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          <CardHeader>\n                            <CardTitle>\n                              {\n                                (connectorTypeDetails as ConnectorTypeAllOf)\n                                  .name\n                              }\n                            </CardTitle>\n                          </CardHeader>\n                          <CardBody>\n                            <DescriptionList>\n                              {/* <DescriptionListGroup>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup> */}\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  {t('version')}\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>ID</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {(connectorTypeDetails as ObjectReference).id}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            <CardHeader>\n                              <CardTitle>\n                                {(c as ConnectorTypeAllOf).name}\n                              </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                              <DescriptionList>\n                                {/* <DescriptionListGroup>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup> */}\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    {t('version')}\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>ID</DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ObjectReference).id}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption\n      key=\"sink\"\n      value=\"sink\"\n      description={t('shortDescriptionSink')}\n    >\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption\n      key=\"source\"\n      value=\"source\"\n      description={t('shortDescriptionSource')}\n    >\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(page, size) =>\n              onQuery({ page, size, query: request.query || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (page: number, size: number) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={onChange}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  useEffect(() => {\n    errorHandler ?? onSetErrorHandler(Object.keys(error_handler['default'])[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [kafkaExpired, setKafkaExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setKafkaExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={() => {\n                  window.open(\n                    'https://console.redhat.com/application-services/streams/kafkas',\n                    '_blank'\n                  );\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && kafkaExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertKafka')}\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://console.redhat.com/application-services/streams/kafkas\"\n            target=\"_blank\"\n          >\n            {t('createKafkaInstance')}\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Tooltip content={<div>{t('namespaceEnabledTooltip')}</div>}>\n            <Button variant=\"primary\" onClick={onModalToggle}>\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`preview-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'preview-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'preview-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClockIcon, FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n  const [namespaceExpired, setNamespaceExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    selectedId,\n    duplicateMode,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const getEvalNamespaceAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('evalNamespaceExpiredMsg');\n    }\n    return t('evalNamespaceExpire', { hours, min });\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setNamespaceExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && namespaceExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertNamespace')}\n                    />\n                  )}\n\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      customIcon={<ClockIcon />}\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {getEvalNamespaceAlert(evalInstance.expiration!)}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <ConnectorStatus\n                                    name={''}\n                                    status={i.status.state}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('accessKey') ||\n                      _.startCase(el) === t('secretKey') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('databasePassword') ||\n                      _.startCase(el) === t('password') ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('connectorsInstances')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  TextContent,\n  Modal,\n  PageSection,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useBasename,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorTypeAllOf>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-duplicate-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorTypeAllOf);\n    }, []);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('connectorsInstances')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <TextContent className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n            {connectorData && connectorTypeDetails ? (\n              <Text>\n                <strong>{t('Connector')}: </strong>\n                {connectorTypeDetails.name}\n              </Text>\n            ) : null}\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={true}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('leaveDuplicateConnectorConfirmModalTitle')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","getNamespace","namespaceId","namespacesAPI","ConnectorNamespacesApi","getConnectorNamespace","ConnectorStatus","name","status","label","undefined","capitalize","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","fetchConfigurator","connector","config","defaultConfig","Promise","resolve","steps","Configurator","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","id","split","maybeConf","reject","url","element","document","createElement","src","type","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","getPendingTime","expireTime","diff","getTime","hourDiff","Math","floor","hours","min","warningType","createDefaultFromSchema","propertyName","schema","prop","properties","definition","$ref","ref","_","pathArray","reduce","prev","resolveReference","answer","Object","keys","map","$defs","clearEmptyObjectValues","length","patchConfigurationObject","configuration","data_shape","dataShape","rest","StepBodyLayout","title","description","component","className","Level","LevelItem","Title","headingLevel","CommonStep","editMode","changeIsValid","onUpdateConfiguration","t","useTranslation","Form","FormGroup","isRequired","fieldId","labelIcon","Popover","bodyContent","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","service_account","client_id","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","model","errors","details","getLabelIcon","content","CustomJsonSchemaBridge","constructor","showCredentialHelpText","duplicateMode","super","this","getProps","example","props","isSecret","getField","helperText","exampleText","oneOf","field","asString","required","format","JsonSchemaConfigurator","schemaValidator","bridge","error_handler","processors","Grid","hasGutter","KameletForm","onChangeModel","AutoField","Auto","parent","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","JSON","parse","stringify","isValid","entries","filter","includes","replace","propertyKey","propertyDefinition","propertyNameFallback","noPropertySet","DataShape","def","getFieldViewComponent","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","JSONSchemaBridge","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","variant","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","r","push","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","Button","hasShadowTop","connectorUpdate","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","actions","activeStep","isViewMode","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceMsg","namespaceMsgVariant","createdAt","modifiedAt","textListItem","TextListItem","TextListItemVariants","TextContent","TextList","TextListVariants","Alert","customIcon","OutlinedClockIcon","isInline","isPlain","date","dateTime","toISOString","OverviewPage","namespaceData","setNamespaceData","getNamespaceData","namespace_id","expiration","ClockIcon","getConnectorExpireAlert","kafka","getConnectorExpireInlineAlert","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","basename","useBasename","hasShadowBottom","Breadcrumb","BreadcrumbItem","to","getBasename","isActive","state","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","assign","_context","event","connectorMachine","createMachine","initial","initialContext","states","verify","always","target","cond","ready","on","stopped","deleted","startingConnector","invoke","desired_state","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","useConnector","canStart","canStop","canDelete","useSelector","transition","changed","onStart","send","onStop","onDelete","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","Stack","StackItem","Trans","i18nKey","makePaginatedApiMachine","service","dataTransformer","options","request","page","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","items","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","ConnectorActionsMenu","onConnectorDetail","onDuplicateConnector","currentConnectorRef","setIsOpen","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","onFocus","getElementById","focus","DropdownItem","DropdownSeparator","Dropdown","toggle","KebabToggle","position","DropdownPosition","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","openDetail","isSeparator","Td","dataLabel","isVisitedLink","Pagination","itemCount","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","toolbarItems","ToolbarGroup","ToolbarItem","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","EmptyStateNoMatchesFound","onClear","SearchIcon","ConnectedConnectorsPage","onCreateConnector","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","qsContext","QuickStartContext","ConnectorsPageTitle","isFilled","Card","setActiveQuickStart","ConnectedTable","ConnectedRow","connectorRef","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientId","clientSecret","setName","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","version","isActiveStepValid","change","next","complete","changedStep","nextStep","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","configuratorLoaderMachine","onDone","failure","escalate","find","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","slice","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","s","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","client_secret","createConnector","saveConnector","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isNamespaceSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onDeselect","onQuery","onRefresh","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","validated","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroup","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","headerContent","helperTextInvalid","test","StepCommon","onSetName","useBasicMachine","defaultEntries","combineConfiguration","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Gallery","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","isHoverable","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","toggleGroupItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","kafkaExpired","setKafkaExpired","KafkaToolbar","open","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","DropdownToggle","showToolbarItem","placeholder","href","KafkasPagination","EmptyStateNoNamespace","onModalToggle","Tooltip","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","annotations","registerEvalNamespace","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","setIsModalOpen","evalInstance","setEvalInstance","namespaceExpired","setNamespaceExpired","getEvalNamespaceAlert","tenant","ClustersToolbar","isEvalPresent","cluster_id","searchInputRef","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","DuplicateConnectorPage","substring","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}