{"version":3,"file":"597.0b1e64fe.js","mappings":"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","sources":["webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepBasic.machine.ts","webpack://cos-ui/./src/app/machines/StepClusters.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepBasic.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepClusters.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return (\n        <CheckCircleIcon className=\"cos--connectors__table--icon--completed\" />\n      );\n    case 'failed':\n      return (\n        <ExclamationCircleIcon className=\"cos--connectors__table--icon--failed\" />\n      );\n    case 'accepted':\n      return <PendingIcon />;\n    case 'provisioning':\n    case 'preparing':\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Creation in progress\"\n        />\n      );\n    case 'deprovision':\n    case 'deleted':\n      return null;\n  }\n  return <PendingIcon />;\n};\n\nexport enum ConnectorStatuses {\n  Ready = 'ready',\n  Failed = 'failed',\n  Assigning = 'assigning',\n  Assigned = 'assigned',\n  Updating = 'updating',\n  Provisioning = 'provisioning',\n  Deleting = 'deleting',\n  Deleted = 'deleted',\n}\n\nexport function useConnectorStatusLabel(status: string) {\n  const { t } = useTranslation();\n\n  const statusOptions = [\n    { value: ConnectorStatuses.Ready, label: t('Running') },\n    { value: ConnectorStatuses.Failed, label: t('Failed') },\n    { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n    { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n    { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n  ];\n\n  return statusOptions.find((s) => s.value === status)?.label || status;\n}\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              cluster={connector.deployment_location.cluster_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  cluster: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    cluster,\n    createdAt,\n    modifiedAt,\n    status,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              Connector name\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('Details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <TextContent>\n                  <TextList component={TextListVariants.dl}>\n                    {textListItem('Bootstrap server', bootstrapServer)}\n                    {textListItem('Connector', name)}\n                    {textListItem('Kafka_instance', kafkaId)}\n                    {textListItem('Targeted OSD Cluster', cluster)}\n                    {textListItem('Owner', owner)}\n                    {textListItem(\n                      'Time created',\n                      <time\n                        title={t('{{date}}', { date: createdAt })}\n                        dateTime={createdAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: createdAt })}\n                      </time>\n                    )}\n                    {textListItem(\n                      'Time updated',\n                      <time\n                        title={t('{{date}}', { date: modifiedAt })}\n                        dateTime={modifiedAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: modifiedAt })}\n                      </time>\n                    )}\n                  </TextList>\n                </TextContent>\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('Name')}</Th>\n          <Th>{t('Connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('Status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  onSelect,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: 'Start',\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: 'Stop',\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: 'Delete',\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: 'Details',\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('Name')}>{name}</Td>\n      <Td dataLabel={t('Type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('Status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnChange = useDebounce(onChange, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(value) =>\n              debouncedOnChange({\n                size: perPage,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n              <ToolbarFilter\n                chips={statuses}\n                deleteChip={onSelectStatus}\n                deleteChipGroup={() => setStatuses([])}\n                categoryName=\"Status\"\n              >\n                <Select\n                  variant={'checkbox'}\n                  aria-label=\"Status\"\n                  onToggle={toggleStatuses}\n                  onSelect={onSelectStatus}\n                  selections={statuses}\n                  isOpen={statusesToggled}\n                  placeholderText=\"Status\"\n                >\n                  {statusMenuItems}\n                </Select>\n              </ToolbarFilter>\n            </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"toolbar-group-types\" collapseListedFiltersBreakpoint=\"xl\">\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('Delete connector')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('Delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('Something went wrong')}\n      </Title>\n      <EmptyStateBody>\n        {t('There was a problem processing the request. Please try again.')}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport SpaceShuttleIcon from '@patternfly/react-icons/dist/js/icons/space-shuttle-icon';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('Welcome to Managed Connectors')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('Create Connector')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('No results found')}\n      </Title>\n      <EmptyStateBody>\n        <Trans>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('Clear all filters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios, { CancelTokenSource } from 'axios';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorCluster,\n  ConnectorClustersApi,\n  ConnectorDesiredState,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchClusters = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorCluster, {}> => {\n  const connectorsAPI = new ConnectorClustersApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    connectorsAPI\n      .listConnectorClusters(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n\n  kafkaManagementApiBasePath: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  kafka,\n  cluster,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n\n  const getOrCreateServiceAccount = async (source: CancelTokenSource) => {\n    if (userServiceAccount) return Promise.resolve(userServiceAccount);\n\n    // the passed service account info is undefined, we have to create a new SA\n    // automatically on behalf of the user\n    const response = await securityAPI.createServiceAccount(\n      {\n        name: `connector-${(connectorType as ObjectReference).id?.replaceAll(\n          /[_\\.]/g,\n          '-'\n        )}-${Date.now()}`,\n      },\n      {\n        cancelToken: source.token,\n      }\n    );\n    return {\n      clientId: response.data.client_id!,\n      clientSecret: response.data.client_secret!,\n    };\n  };\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n    getOrCreateServiceAccount(source).then(({ clientId, clientSecret }) => {\n      let connectorConfiguration = {};\n      if (userErrorHandler) {\n        connectorConfiguration = {\n          ...configuration,\n          ...{\n            error_handling: {\n              [userErrorHandler]: topic ? { topic: topic } : null,\n            },\n          },\n        };\n      } else {\n        connectorConfiguration = configuration;\n      }\n      const connector: Connector = {\n        kind: 'Connector',\n        name: name,\n        channel: Channel.Stable,\n        deployment_location: {\n          kind: 'addon',\n          cluster_id: cluster.id,\n        },\n        desired_state: ConnectorDesiredState.Ready,\n        connector_type_id: (connectorType as ObjectReference).id!,\n        kafka: {\n          id: kafka.id!,\n          url: kafka.bootstrap_server_host || 'demo',\n        },\n        service_account: {\n          client_id: clientId,\n          client_secret: clientSecret,\n        },\n        connector: connectorConfiguration,\n      };\n      connectorsAPI\n        .createConnector(async, connector, {\n          cancelToken: source.token,\n        })\n        .then(() => {\n          callback({ type: 'success' });\n        })\n        .catch((error) => {\n          if (!axios.isCancel(error)) {\n            callback({ type: 'failure', message: error.response.data.reason });\n          }\n        });\n    });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage onCreateConnector={onCreateConnector} />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody onCreateConnector={onCreateConnector} />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('Connectors')}</Title>\n    </TextContent>\n  );\n};\n\nexport const ConnectedTable: FunctionComponent = () => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n};\n\nconst model = createModel(\n  {\n    name: '',\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount | undefined;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId.length > 0 &&\n            context.userServiceAccount.clientSecret.length > 0,\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { fetchClusters } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorCluster } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorCluster>;\n  selectedCluster?: ConnectorCluster;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectCluster: (payload: { selectedCluster: string }) => ({\n        ...payload,\n      }),\n      deselectCluster: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<ConnectorCluster, {}, ConnectorCluster>(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectCluster = model.assign(\n  {\n    selectedCluster: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedCluster\n      );\n    },\n  },\n  'selectCluster'\n);\nconst reset = model.assign(\n  {\n    selectedCluster: undefined,\n  },\n  'deselectCluster'\n);\n\nexport const clustersMachine = model.createMachine(\n  {\n    id: 'clusters',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<ConnectorCluster, {}, ConnectorCluster>(\n                  fetchClusters(context),\n                  (i) => i\n                ),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noClusterSelected' },\n                  { target: 'valid', cond: 'clusterSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectCluster: {\n                    target: 'valid',\n                    actions: selectCluster,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectCluster: {\n                    target: 'verify',\n                    actions: selectCluster,\n                    cond: (_, event) => event.selectedCluster !== undefined,\n                  },\n                  deselectCluster: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'clusterSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedCluster: (context: Context) => context.selectedCluster,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      clusterSelected: (context) => context.selectedCluster !== undefined,\n      noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n  }\n);\n\nexport type ClustersMachineActorRef = ActorRefFrom<typeof clustersMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst reset = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  cluster: context.cluster,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.kafka,\n              cluster: context.cluster,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction mapToObject(inputMap: Map<string, unknown>) {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepBasic.machine';\nimport { clustersMachine } from '@app/machines/StepClusters.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedCluster?: ConnectorCluster;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: () => void;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectCluster: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedConnector: context.selectedConnector,\n          }),\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((_context, event) => ({\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10,\n            },\n          }),\n          onDone: {\n            target: 'selectCluster',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectCluster: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectClusterRef',\n          src: clustersMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedCluster: context.selectedCluster,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedCluster: (_, event) => event.data.selectedCluster,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectClusterRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => ({\n                connector: context.selectedConnector,\n              }),\n              onDone: {\n                target: 'configure',\n                actions: assign((_context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => ({\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false,\n              }),\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((_, event) => ({\n                name: event.data.name,\n                userServiceAccount: event.data.userServiceAccount,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectCluster',\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connector: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((_, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((_, event) => ({\n                connectorConfiguration: event.data,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectCluster: {\n        target: 'selectCluster',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isClusterSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isClusterSelected: (context) => context.selectedCluster !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId?.length > 0 &&\n            context.userServiceAccount.clientSecret?.length > 0,\n\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave();\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepBasic.machine';\nimport { ClustersMachineActorRef } from '@app/machines/StepClusters.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  onSave: () => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  clusterRef: ClustersMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        clusterRef: state.children.selectClusterRef as ClustersMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useClustersMachineIsReady = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  return useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [clusterRef]\n    )\n  );\n};\n\nexport const useClustersMachine = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorCluster, {}, ConnectorCluster>(\n    clusterRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorCluster, {}, ConnectorCluster>\n  );\n  const { selectedId } = useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => ({\n        selectedId: state.context.selectedCluster?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedCluster: string) => {\n      clusterRef.send({ type: 'selectCluster', selectedCluster });\n    },\n    [clusterRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      clusterRef.send({ type: 'api.query', ...request });\n    },\n    [clusterRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, serviceAccount } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount | undefined) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    onSetName,\n    onSetServiceAccount,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        cluster: state.context.cluster,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n  };\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-u-p-md pf-l-stack__item'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n\n      <div className={'pf-l-stack__item pf-l-stack pf-m-fill'}>{children}</div>\n    </div>\n  );\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  Radio,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport function Basic() {\n  const { t } = useTranslation();\n\n  const { name, serviceAccount, onSetName, onSetServiceAccount } =\n    useBasicMachine();\n\n  return (\n    <StepBodyLayout title={t('Common')} description={t('basicStepDescription')}>\n      <Card>\n        <CardBody>\n          <Form>\n            <FormGroup\n              label=\"Name\"\n              isRequired\n              fieldId=\"name\"\n              helperText=\"Please provide a unique name for the connector\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label=\"Service account\"\n              isRequired\n              fieldId=\"service-account\"\n            >\n              <Radio\n                isChecked={serviceAccount === undefined}\n                name=\"service-account\"\n                onChange={() => onSetServiceAccount(undefined)}\n                label=\"Automatically create a service account for this connector.\"\n                id=\"service-account-automatic\"\n                value=\"automatic\"\n              />\n              <Radio\n                isChecked={serviceAccount !== undefined}\n                name=\"service-account\"\n                onChange={() =>\n                  onSetServiceAccount({ clientId: '', clientSecret: '' })\n                }\n                label=\"Provide the credentials manually.\"\n                id=\"service-account-user\"\n                value=\"user\"\n              />\n              {serviceAccount !== undefined && (\n                <>\n                  <FormGroup label=\"Client ID\" isRequired fieldId=\"clientId\">\n                    <TextInput\n                      value={serviceAccount.clientId}\n                      onChange={(clientId) =>\n                        onSetServiceAccount({ ...serviceAccount, clientId })\n                      }\n                      id=\"clientId\"\n                    />\n                  </FormGroup>\n                  <FormGroup\n                    label=\"Client Secret\"\n                    isRequired\n                    fieldId=\"clientSecret\"\n                  >\n                    <TextInput\n                      value={serviceAccount.clientSecret}\n                      onChange={(clientSecret) =>\n                        onSetServiceAccount({ ...serviceAccount, clientSecret })\n                      }\n                      id=\"clientSecret\"\n                    />\n                  </FormGroup>\n                </>\n              )}\n            </FormGroup>\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClusterIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoOSDClusterProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoOSDCluster: FunctionComponent<EmptyStateNoOSDClusterProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={ClusterIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No OSD Cluster available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useClustersMachineIsReady,\n  useClustersMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoOSDCluster } from '@app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { useDebounce } from '@utils/useDebounce';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent, // ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport function SelectCluster() {\n  const isReady = useClustersMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const history = useHistory();\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useClustersMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('OSD cluster')}\n      description={t('clusterStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoOSDCluster\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst ClustersToolbar: FunctionComponent = () => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useClustersMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {/* <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('createClustersInstance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup> */}\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useClustersMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import { createValidator } from '@utils/createValidator';\nimport { ValidateFunction } from 'ajv';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\nimport { AutoFields, SubmitField } from 'uniforms-patternfly';\n\nimport { Card, CardBody } from '@patternfly/react-core';\n\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange }) => {\n    schema.type = schema.type || 'object';\n    // suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n    const schemaValidator = createValidator(schema);\n    const bridge = new JSONSchemaBridge(schema, schemaValidator);\n    return (\n      <KameletForm\n        schema={bridge}\n        model={configuration}\n        onChangeModel={(model: any) => onChange(model, false)}\n        onSubmit={(model: any) => onChange(model, true)}\n        className=\"configurator\"\n      >\n        <Card isPlain>\n          <CardBody>\n            <AutoFields omitFields={['processors', 'error_handler']} />\n          </CardBody>\n        </Card>\n        <Card isPlain>\n          <CardBody>\n            {/*\n            // @ts-expect-error */}\n            <SubmitField value={'Verify configuration'} />\n          </CardBody>\n        </Card>\n        {/* <WizardNext onChange={onChange} /> */}\n      </KameletForm>\n    );\n  };\n\n// const WizardNext: FunctionComponent<{\n//   onChange: (data: unknown, isValid: boolean) => void;\n// }> = ({ onChange }) => {\n//   const { changed, submitted, error, model } = useForm();\n//   const isValid = !error;\n//   const prevChangeModel = useRef<DeepPartial<unknown>>();\n//   useEffect(() => {\n//     if (prevChangeModel.current !== model && changed && submitted) {\n//       prevChangeModel.current = model;\n//       onChange(, isValid);\n//     }\n//   }, [prevChangeModel, changed, submitted, isValid, model, onChange]);\n//   return null;\n// };\n\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n}> = ({ actor, Configurator }) => {\n  const { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n}> = ({ actor }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <JsonSchemaConfigurator\n      schema={(connector as ConnectorTypeAllOf).schema!}\n      configuration={configuration || {}}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n\n  return (\n    <StepBodyLayout\n      title={t('Configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                />\n              </React.Suspense>\n            );\n          default:\n            return <ConnectedJsonSchemaConfigurator actor={configuratorRef} />;\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((c) => (\n                      <Card\n                        isHoverable\n                        key={(c as ObjectReference).id}\n                        isSelectable\n                        isSelected={selectedId === (c as ObjectReference).id}\n                        onClick={() => onSelect((c as ObjectReference).id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>\n                            {(c as ConnectorTypeAllOf).name}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).description}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Version</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).version}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>ID</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ObjectReference).id}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\n\nconst ConnectorTypesToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ConnectorTypesPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => onQuery({ page, size })}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const { connector, topic, errorHandler, onSetTopic, onSetErrorHandler } =\n    useErrorHandlingMachine();\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  return (\n    <StepBodyLayout\n      title={t('Error handler')}\n      description={t(\n        'Configure error handling stop, log and dead letter queues'\n      )}\n    >\n      <Card>\n        <CardBody>\n          <Form>\n            <FormGroup\n              label={t('Error handler')}\n              fieldId=\"error-handler_strategy\"\n              className=\"error-handler_strategy\"\n            >\n              <Select\n                variant={SelectVariant.single}\n                aria-label=\"Select Error handler\"\n                onToggle={onToggle}\n                onSelect={onSelect}\n                selections={errorHandler}\n                isOpen={isOpen}\n                placeholderText=\"Select type\"\n              >\n                {dropdownItems}\n              </Select>\n            </FormGroup>\n            {errorHandler === 'dead_letter_queue' && (\n              <FormGroup\n                label=\"Dead Letter Topic Name\"\n                isRequired\n                fieldId=\"topic\"\n                helperText=\"The name of the Kafka topic used as dead letter queue\"\n              >\n                <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n              </FormGroup>\n            )}\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { SpaceShuttleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No Kafka instance available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\n// import { useBasename } from '@rhoas/app-services-ui-shared';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const basename = useBasename();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Kafka instance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('Filter by status')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('CloudProvider')}\n          showToolbarItem={selectedCategory === t('CloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('CloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('Filter by cloud provider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('Filter by region')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('Create Kafka instance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('Review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('ViewJSONFormat')}\n          labelOff={t('ViewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Card>\n        <CardBody>\n          <Form>\n            {savingError && (\n              <FormAlert>\n                <Alert\n                  variant=\"danger\"\n                  title={savingError}\n                  aria-live=\"polite\"\n                  isInline\n                />\n              </FormAlert>\n            )}\n            {toggleView ? (\n              <ViewJSONFormat />\n            ) : (\n              <>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Connector category')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>\n                    {(connectorType as ConnectorTypeAllOf).description}\n                  </GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Kafka instance')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{kafka.name}</GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('OSD Cluster')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{cluster.name}</GridItem>\n                </Grid>\n\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Basic')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Connector name')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{name}</GridItem>\n                </Grid>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Type')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>\n                    {(connectorType as ConnectorTypeAllOf).labels?.map(\n                      (type) => type\n                    )}\n                  </GridItem>\n                </Grid>\n                {userServiceAccount?.clientId && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('Client ID')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      <Flex>\n                        <FlexItem>\n                          {toggleMaskView.clientId\n                            ? maskValue(userServiceAccount?.clientId)\n                            : userServiceAccount?.clientId}\n                          {}\n                        </FlexItem>\n                        <FlexItem onClick={updateMaskView} id=\"clientId\">\n                          {toggleMaskView.clientId ? (\n                            <EyeIcon />\n                          ) : (\n                            <EyeSlashIcon />\n                          )}\n                        </FlexItem>\n                      </Flex>\n                    </GridItem>\n                  </Grid>\n                )}\n                {userServiceAccount?.clientSecret && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('Client Secret')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      <Flex>\n                        <FlexItem>\n                          {toggleMaskView.clientSecret\n                            ? maskValue(userServiceAccount?.clientSecret)\n                            : userServiceAccount?.clientSecret}\n                          {}\n                        </FlexItem>\n                        <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                          {toggleMaskView.clientSecret ? (\n                            <EyeIcon />\n                          ) : (\n                            <EyeSlashIcon />\n                          )}\n                        </FlexItem>\n                      </Flex>\n                    </GridItem>\n                  </Grid>\n                )}\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Connector specific')}\n                </Title>\n                {connector &&\n                  Object.keys(connector).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>\n                          {_.startCase(el) === t('Access Key') ||\n                          _.startCase(el) === t('Secret Key') ? (\n                            <Flex>\n                              <FlexItem>\n                                {toggleMaskView[el]\n                                  ? maskValue(connector[el])\n                                  : connector[el]}\n                                {}\n                              </FlexItem>\n                              <FlexItem onClick={updateMaskView} id={el}>\n                                {toggleMaskView[el] ? (\n                                  <EyeIcon />\n                                ) : (\n                                  <EyeSlashIcon />\n                                )}\n                              </FlexItem>\n                            </Flex>\n                          ) : (\n                            connector[el]\n                          )}\n                        </GridItem>\n                      </Grid>\n                    );\n                  })}\n                {kafkaTopic &&\n                  Object.keys(kafkaTopic).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                      </Grid>\n                    );\n                  })}\n                {connector === undefined &&\n                  Object.keys(modifiedObject).map((el) => {\n                    return (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(el)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>\n                          {_.startCase(el) === t('Database Password') ||\n                          _.startCase(el) === t('Password')\n                            ? maskValue(modifiedObject[el])\n                            : modifiedObject[el]}\n                        </GridItem>\n                      </Grid>\n                    );\n                  })}\n                {userErrorHandler && (\n                  <>\n                    <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                      {t('Error handling')}\n                    </Title>\n                    <Grid>\n                      <GridItem span={4}>\n                        <strong>{t('Error handling')}</strong>\n                      </GridItem>\n                      <GridItem span={8}>{userErrorHandler}</GridItem>\n                    </Grid>\n                    {topic && (\n                      <Grid>\n                        <GridItem span={4}>\n                          <strong>{_.startCase(topic)}</strong>\n                        </GridItem>\n                        <GridItem span={8}>{topic}</GridItem>\n                      </Grid>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n}\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { Basic } from '@app/pages/CreateConnectorPage/StepBasic';\nimport { SelectCluster } from '@app/pages/CreateConnectorPage/StepClusters';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Kafka instance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Common'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <Basic />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Connector Specific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Error handling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('Connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('OSD cluster'),\n        isActive: state.matches('selectCluster'),\n        component: (\n          <StepErrorBoundary>\n            <SelectCluster />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('selectCluster'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('Configurations'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('Review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: 'Create connector',\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectCluster');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: () => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('Connectors')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('Create connector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('Create connector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t(\n                'Changes you have made will be lost and no connector will be created.'\n              )}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const onConnectorSave = useCallback(() => {\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('wizard.creation-success'),\n    });\n    goToConnectorsList();\n  }, [alert, goToConnectorsList, t]);\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage onCreateConnector={goToCreateConnector} />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["ConnectorStatus","name","status","label","t","useTranslation","statusOptions","value","ConnectorStatuses","Ready","Failed","Assigning","Assigned","Updating","Provisioning","Deleting","Deleted","find","s","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","size","ConnectorDrawer","children","connector","onClose","Drawer","isExpanded","undefined","DrawerContent","panelContent","ConnectorDrawerPanelContent","bootstrapServer","kafka","url","kafkaId","id","owner","cluster","deployment_location","cluster_id","createdAt","Date","created_at","modifiedAt","modified_at","state","activeTabKey","setActiveTabKey","useState","textListItem","title","TextListItem","component","TextListItemVariants","DrawerPanelContent","widths","DrawerHead","TextContent","Text","TextVariants","Title","headingLevel","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Tabs","activeKey","onSelect","_","eventKey","Tab","TabTitleText","TextList","TextListVariants","date","dateTime","toISOString","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","connectorId","type","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","actions","isDisabled","isSeparator","event","target","Td","dataLabel","items","Pagination","itemCount","page","perPage","isCompact","onChange","perPageOptions","onSetPage","onPerPageSelect","variant","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","useCallback","ConnectorsToolbar","searchInputRef","useRef","debouncedOnChange","toggleGroupItems","ToolbarItem","InputGroup","TextInput","ref","Button","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","to","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","Modal","ModalVariant","titleIconVariant","isOpen","key","Stack","StackItem","Trans","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","saveConnector","accessToken","connectorsApiBasePath","kafkaManagementApiBasePath","connectorType","configuration","userServiceAccount","userErrorHandler","topic","connectorsAPI","ConnectorsApi","Configuration","basePath","securityAPI","SecurityApi","callback","source","Promise","resolve","response","createServiceAccount","replaceAll","now","cancelToken","token","clientId","data","client_id","clientSecret","client_secret","getOrCreateServiceAccount","then","connectorConfiguration","error_handling","kind","channel","Channel","desired_state","ConnectorDesiredState","connector_type_id","bootstrap_server_host","service_account","createConnector","catch","error","message","reason","cancel","model","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","assign","_context","connectorMachine","createMachine","initial","context","initialContext","states","verify","always","cond","ready","on","stopped","deleted","startingConnector","invoke","src","patchConnector","headers","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","CosContext","createContext","CosContextProvider","getToken","Provider","useCos","useContext","Error","PAGINATED_MACHINE_ID","makePaginatedApiMachine","service","dataTransformer","options","request","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","e","map","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","Object","keys","includes","_event","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","onSuccess","onError","listConnectors","fetchConnectors","withContext","makeConnectorMachine","forEach","d","send","listing","console","log","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","props","ConnectedConnectorsPage","onCreateConnector","alert","useAlert","description","addAlert","AlertVariant","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","Loading","PageSection","ConnectorsPageTitle","padding","isFilled","Card","ConnectedTable","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","category","ErrorFallback","role","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","getFlattenedSteps","steps","flattenedSteps","step","childStep","push","UncontrolledWizard","Component","constructor","super","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","length","initSteps","j","canJumpTo","getElement","appendTo","document","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onSave","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","activeStep","computedSteps","firstStep","isValid","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","style","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","index","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","content","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","setName","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","clusters","selectedCluster","selectCluster","deselectCluster","clustersMachine","ConnectorClustersApi","listConnectorClusters","fetchClusters","selection","selecting","clusterSelected","noClusterSelected","version","schema","isActiveStepValid","change","next","prev","complete","changedStep","nextStep","min","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","Configurator","configuratorLoaderMachine","onDone","failure","escalate","connectorTypesMachine","ConnectorTypesApi","categories","getConnectorTypes","lcName","rawItems","filteredItems","filter","c","labels","l","offset","slice","fetchConnectorTypes","connectorSelected","noConnectorSelected","setTopic","setErrorHandler","errorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","initialConfiguration","configString","save","initialize","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","JSON","parse","saved","isAllConfigured","dataVal","Map","inputMap","obj","mapToObject","stringify","isInvalid","jumpToSelectKafka","jumpToSelectCluster","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","configureConnector","loadConfigurator","configure","submittable","invalid","basicConfiguration","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isClusterSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","fetchConfigurator","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","clusterRef","selectClusterRef","basicRef","errorRef","reviewRef","useClustersMachine","getSnapshot","selectedId","onQuery","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","StepBodyLayout","Level","LevelItem","Basic","onSetName","onSetServiceAccount","useBasicMachine","CardBody","Form","FormGroup","isRequired","fieldId","helperText","Radio","isChecked","EmptyStateNoOSDCluster","ClusterIcon","SelectCluster","useClustersMachineIsReady","ClustersGallery","ClustersToolbar","Gallery","hasGutter","isHoverable","isSelectable","CardHeader","CardTitle","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","debouncedOnQuery","ClustersPagination","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","errors","details","JsonSchemaConfigurator","properties","schemaValidator","bridge","JSONSchemaBridge","KameletForm","onChangeModel","onSubmit","isPlain","AutoFields","omitFields","SubmitField","Auto","parent","AutoForm","ValidatedQuickForm","ConnectedCustomConfigurator","ConnectedJsonSchemaConfigurator","ConfiguratorStep","isLoading","hasErrors","configuratorRef","hasCustomConfigurator","fallback","stringToChip","node","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","categoriesToggled","setCategoriesToggled","nameInputRef","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","useEffect","current","typeMenuItems","SelectOption","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","Select","onToggle","selections","placeholderText","ConnectorTypesPagination","StepErrorHandling","setOpen","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","isPlaceholder","clearSelection","error_handler","dropdownItems","item","SelectVariant","EmptyStateNoKafkaInstances","SpaceShuttleIcon","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","showToolbarItem","placeholder","KafkasPagination","ViewJSONFormat","copied","setCopied","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","indexOf","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","createElement","toString","appendChild","select","execCommand","removeChild","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","Tooltip","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","href","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","config","kafkaTopic","modifiedObject","replace","maskValue","Switch","labelOff","FormAlert","Alert","Grid","GridItem","span","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","isActive","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","defaultConfig","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","loadFederatedConfigurator","maybeConfiguration","split","maybeConf","reject","element","async","onload","head","onerror","CreateConnectorPage","useConfig","basename","useBasename","askForLeaveConfirm","setAskForLeaveConfirm","closeLeaveConfirm","hasShadowBottom","Breadcrumb","BreadcrumbItem","getBasename","zIndex","cos","configurators","CosRoutes","history","useHistory","goToConnectorsList","goToCreateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","format","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}