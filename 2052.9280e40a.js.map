{"version":3,"file":"2052.9280e40a.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewTab.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/components/ConnectorActions/ConnectorActionsMenu.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\nimport { PlaceholderOrderBy } from './../app/machines/PaginatedResponse.machine';\n\nexport enum SortOrderValue {\n  asc = 'asc',\n  desc = 'desc',\n}\n\nexport type SortOrder = keyof typeof SortOrderValue;\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string | undefined;\n  updatedServiceAccount?: ServiceAccount | undefined;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorNamespaceProps = {\n  namespaceId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorsOrderBy = {\n  name?: SortOrder;\n};\n\nexport type ConnectorsSearch = {\n  name?: string;\n  description?: string;\n  version?: string;\n  label?: string[];\n  channel?: string;\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  Connector,\n  ConnectorsOrderBy,\n  ConnectorsSearch\n> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const searchString: string = [nameSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, '', searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  namespaceId,\n}: ConnectorNamespaceProps): FetchCallbacks<ConnectorNamespace> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .getConnectorNamespace(namespaceId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorNamespaceSearch = {\n  name?: string;\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  ConnectorNamespace,\n  PlaceholderOrderBy,\n  ConnectorNamespaceSearch\n> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const searchString: string = [nameSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`, undefined, searchString)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesSearch = {\n  name?: string;\n  categories?: string[];\n\n  description?: string;\n  version?: string;\n  label?: string[];\n  channel?: string;\n};\n\nexport type ConnectorTypesOrderBy = {\n  name?: SortOrder;\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  ConnectorType,\n  PlaceholderOrderBy,\n  ConnectorTypesSearch\n> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name, categories = [] } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const labelSearch =\n      categories && categories.length > 0\n        ? categories.map((s) => `label = ${s}`).join(' OR ')\n        : undefined;\n    const searchString: string = [nameSearch, labelSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getConnectorTypes(`${page}`, `${size}`, undefined, searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasSearch = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<\n  KafkaRequest,\n  PlaceholderOrderBy,\n  KafkasSearch\n> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name, statuses, owner, cloudProviders, regions } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE '%${name}%'` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE '%${owner}%'` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const searchString = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(`${page}`, `${size}`, undefined, searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id!,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n  updatedServiceAccount,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n          ...(updatedServiceAccount && {\n            service_account: updatedServiceAccount,\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FC, ReactNode } from 'react';\n\nimport {\n  Split,\n  SplitItem,\n  Spinner,\n  Stack,\n  StackItem,\n  Button,\n  Popover,\n  PopoverPosition,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  desiredState: string;\n  name: string;\n  state: string;\n  clickable?: boolean;\n  popoverBody?: ReactNode;\n  popoverHeader?: ReactNode;\n};\n\nexport const ConnectorStatus: FC<ConnectorStatusProps> = ({\n  desiredState,\n  name,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => (\n  <Split className={'connector-status__split'} hasGutter>\n    <SplitItem>\n      <ConnectorStatusIcon name={name} state={state} />\n    </SplitItem>\n    <SplitItem isFilled>\n      <ConnectorStatusLabel\n        desiredState={desiredState}\n        state={state}\n        clickable={clickable}\n        popoverBody={popoverBody}\n        popoverHeader={popoverHeader}\n      />\n    </SplitItem>\n  </Split>\n);\n\ntype ConnectorStatusLabelProps = {\n  desiredState: string;\n  state: string;\n  clickable: boolean | undefined;\n  popoverBody: ReactNode;\n  popoverHeader: ReactNode;\n};\n\nexport const ConnectorStatusLabel: FC<ConnectorStatusLabelProps> = ({\n  desiredState,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n    case 'failed':\n    case 'stopped':\n    case 'deleted':\n    case '':\n      return (\n        <>\n          {clickable ? (\n            <Popover\n              aria-label=\"connector status popover\"\n              position={PopoverPosition.auto}\n              hideOnOutsideClick={true}\n              headerContent={popoverHeader}\n              bodyContent={popoverBody}\n            >\n              <Button variant=\"link\" isInline>\n                {convertToLabel(state)}\n              </Button>\n            </Popover>\n          ) : (\n            convertToLabel(state)\n          )}\n        </>\n      );\n    default:\n      return (\n        <Stack className={'connector-status-label__stack'}>\n          <StackItem className={'connector-status-label__state-label'}>\n            {convertToLabel(state)}\n          </StackItem>\n          <StackItem className={'connector-status-label__desired-state-label'}>\n            Transitioning to <b>{convertToLabel(desiredState)}</b>\n          </StackItem>\n        </Stack>\n      );\n  }\n};\n\ntype ConnectorStatusIconProps = {\n  name: string;\n  state: string;\n};\n\nexport const ConnectorStatusIcon: FC<ConnectorStatusIconProps> = ({\n  name,\n  state,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function convertToLabel(state: string) {\n  return typeof state !== undefined ? capitalize(state) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport enum ConfigurationMode {\n  CREATE = 'create',\n  VIEW = 'view',\n  EDIT = 'edit',\n  DUPLICATE = 'duplicate',\n}\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  uiPath: ConfigurationMode;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\nexport const dataToPrettyString = (data: unknown) => {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const getPasswordType = (schema: Record<string, any>) => {\n  let dataToHide: string[] = [];\n  const keys = Object.keys(schema.properties);\n  keys.map((key) => {\n    const oneOf = schema.properties[key].oneOf;\n    if (typeof oneOf !== 'undefined') {\n      const [def] = oneOf;\n      if (def.format === 'password') {\n        dataToHide.push(key);\n      }\n    }\n  });\n  return dataToHide;\n};\n\n/**\n * Calculate the time remaining before expiry\n * @param expireTime\n * @returns\n */\nexport const getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return { hours: hourDiff, min: minuteDiff };\n};\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\n/**\n * Calculate the time remaining before expiry and return the alert type based on that\n * @param expireTime\n * @returns\n * \"info\" if time remaining > 24 hr\n * \"warning\" if time remaining >= 3 hr\n * \"danger\" if time remaining < 3hr\n */\nexport const warningType = (expireTime: Date): AlertType => {\n  let { hours } = getPendingTime(expireTime);\n  if (hours >= 24) {\n    return 'info';\n  } else if (hours >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\n/**\n * Simple reference resolver that works with references contained in the\n * same schema object\n * @param ref\n * @param schema\n * @returns\n */\nexport const resolveReference = (ref: string, schema: Record<string, any>) => {\n  const [_, ...pathArray] = ref.split('/');\n  return pathArray.reduce((prev, key) => prev && prev[key], schema);\n};\n\n/**\n * Get whatever the default value is for a given property in the given\n * schema recursively\n * @param propertyName\n * @param schema\n * @returns\n */\nexport const createDefaultFromSchema = (\n  propertyName: string,\n  schema: Record<string, any>\n) => {\n  const prop = schema.properties[propertyName];\n  if (typeof prop === 'undefined') {\n    return undefined;\n  }\n  const definition = prop.$ref\n    ? resolveReference(prop.$ref, schema)\n    : schema.properties[propertyName];\n  if (!definition.properties) {\n    return definition.default;\n  }\n  const answer: any = {};\n  Object.keys(definition.properties).map((key) => {\n    const value = createDefaultFromSchema(key, {\n      $defs: schema.$defs,\n      ...(definition || {}),\n    });\n    if (typeof value !== 'undefined') {\n      answer[key] = value;\n    }\n  });\n  return answer;\n};\n\n/**\n * Returns a new object that does not contain empty objects as values\n * and leaves the passed in value untouched.\n * @param obj\n * @returns\n */\nexport const clearEmptyObjectValues = (obj: any): any => {\n  const answer: any = { ...obj };\n  Object.keys(answer).map((key) => {\n    const value = answer[key];\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      answer[key] = '';\n    }\n  });\n  return answer;\n};\n\n/**\n * Applies client-side workarounds to possible discrepencies in the configuration.\n *\n * Applies a default datashape value from the schema if the configuration object doesn't have one.\n *\n * @param schema\n * @param configuration\n * @returns\n */\nexport const patchConfigurationObject = (\n  schema: Record<string, any>,\n  configuration: { data_shape: any; [key: string]: any }\n) => {\n  const { data_shape: dataShape, ...rest } = configuration;\n  if (typeof dataShape === 'undefined') {\n    const dataShape = createDefaultFromSchema('data_shape', schema);\n    return { ...rest, ...(dataShape && { data_shape: dataShape }) };\n  }\n  return configuration;\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  InputGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ExclamationCircleIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  HelpIcon,\n} from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const [isSAUpdate, setIsSAUpdate] = React.useState(false);\n  const [passwordHidden, setPasswordHidden] = React.useState<boolean>(true);\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  const onSAChange = (\n    val: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    if (event.currentTarget.id === 'connector-sa-id') {\n      onUpdateConfiguration('common', {\n        ...configuration,\n        service_account: {\n          client_id: val,\n          client_secret: configuration.service_account.client_secret,\n        },\n      });\n      !isSAUpdate &&\n        setIsSAUpdate((prev) => {\n          if (!prev) {\n            changeIsValid(false);\n          }\n          return true;\n        });\n    } else {\n      onUpdateConfiguration('common', {\n        ...configuration,\n        service_account: {\n          client_id: configuration.service_account.client_id,\n          client_secret: val,\n        },\n      });\n    }\n\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"connector-name-helper\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('serviceAccount')}\n          isRequired\n          fieldId=\"service-account\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('serviceAccountDescText')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"service-account-helper\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          <Text component={TextVariants.p}>\n            {t('serviceAccountEditDescription')}\n          </Text>\n        </FormGroup>\n        <FormGroup\n          label={t('clientId')}\n          isRequired\n          validated={\n            configuration?.service_account?.client_id ? 'default' : 'error'\n          }\n          helperTextInvalid={t('clientIdRequired')}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          fieldId=\"clientId\"\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration?.service_account?.client_id}\n              validated={\n                configuration?.service_account?.client_id ? 'default' : 'error'\n              }\n              onChange={onSAChange}\n              id=\"connector-sa-id\"\n            />\n          ) : (\n            <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n              {configuration?.service_account?.client_id}\n            </ClipboardCopy>\n          )}\n        </FormGroup>\n        {isSAUpdate && editMode ? (\n          <FormGroup\n            label={t('clientSecret')}\n            isRequired\n            validated={\n              configuration?.service_account?.client_secret\n                ? 'default'\n                : 'error'\n            }\n            helperTextInvalid={t('clientSecretRequired')}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            fieldId=\"clientSecret\"\n          >\n            <InputGroup>\n              <TextInput\n                value={configuration?.service_account?.client_secret}\n                type={passwordHidden ? 'password' : 'text'}\n                validated={\n                  configuration?.service_account?.client_secret\n                    ? 'default'\n                    : 'error'\n                }\n                onChange={onSAChange}\n                id=\"connector-sa-secret\"\n              />\n              <Button\n                variant=\"control\"\n                onClick={() => setPasswordHidden(!passwordHidden)}\n                aria-label={passwordHidden ? 'Show password' : 'Hide password'}\n              >\n                {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        ) : (\n          <></>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { TFunction } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Popover bodyContent={content}>\n      <button\n        type=\"button\"\n        aria-label={`More info for ${name}`}\n        onClick={(e) => e.preventDefault()}\n        aria-describedby=\"form-group-label-info\"\n        className=\"pf-c-form__group-label-help\"\n      >\n        <HelpIcon noVerticalAlign />\n      </button>\n    </Popover>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  showCredentialHelpText: boolean;\n  duplicateMode: boolean;\n  t: TFunction<'translation', undefined>;\n\n  constructor(\n    schema: any,\n    validator: any,\n    t: TFunction<'translation', undefined>,\n    showCredentialHelpText: boolean,\n    duplicateMode: boolean\n  ) {\n    super(schema, validator);\n    this.t = t;\n    this.showCredentialHelpText = showCredentialHelpText;\n    this.duplicateMode = duplicateMode;\n  }\n\n  /**\n   * Returns the element properties for the named field.  Properties\n   * that should be excluded from DOM properties should be added to\n   * FilterDOMProps\n   * @param name\n   * @returns\n   */\n  getProps(name: string): any {\n    const { description, example, label, ...props } = super.getProps(name);\n    const { isSecret } = this.getField(name);\n    if (isSecret) {\n      return {\n        ...props,\n        ...(this.showCredentialHelpText && {\n          helperText: this.duplicateMode\n            ? this.t('credentialDuplicateFieldHelpText')\n            : this.t('credentialEditFieldHelpText'),\n        }),\n        labelIcon: getLabelIcon(label || name, description),\n        name,\n        label,\n        type: 'password',\n      };\n    }\n    return {\n      ...props,\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(label || name, description),\n      name,\n      label,\n    };\n  }\n\n  getField(name: string): Record<string, any> {\n    const { enum: enumValues, oneOf, ...field } = super.getField(name);\n    // use this to look at field information\n    /*\n    console.log(\n      'Complex type, name: ',\n      name,\n      ' oneOf: ',\n      oneOf,\n      ' field: ',\n      field\n    );\n    */\n    // uniforms will show the first enum value even if the underlying\n    // model object doesn't have this set or if there's no default value\n    let newEnumValues = undefined;\n    if (\n      typeof field.type !== 'undefined' &&\n      field.type === 'string' &&\n      typeof enumValues !== 'undefined'\n    ) {\n      if (enumValues[0] !== '') {\n        newEnumValues = ['', ...enumValues];\n      }\n    }\n    // Due to:\n    // https://uniforms.tools/docs/api-bridges/#note-on-allofanyofoneof\n    // we need to pick the appropriate type for the form, let's use the\n    // schema to guide these choices.\n    if (typeof oneOf !== 'undefined') {\n      // credentials are either a string field or an opaque object, for\n      // forms let's pick the string field and override it to a password\n      // We are assuming that the schema is consistent here\n      const [asString] = oneOf;\n      return {\n        ...asString,\n        name,\n        required: field.required,\n        type: asString.format,\n        isSecret: asString.format === 'password',\n      };\n    } else {\n      return {\n        name,\n        ...field,\n        ...(typeof newEnumValues !== undefined && { enum: newEnumValues }),\n      };\n    }\n  }\n}\n","import { createValidator } from '@utils/createValidator';\nimport { clearEmptyObjectValues } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  duplicateMode?: boolean;\n  editMode?: boolean;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, duplicateMode, editMode, onChange }) => {\n    const { t } = useTranslation();\n    schema.type = schema.type || 'object';\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(\n      schema,\n      schemaValidator,\n      t,\n      duplicateMode || editMode || false,\n      duplicateMode || false\n    );\n\n    const onChangeModel = async (model: any) => {\n      // schemaValidator returns null when there's no errors in the form\n      const errors = schemaValidator(model);\n      // handy for seeing form validation problems\n      // console.log(\"onChangeModel, form validation errors: \", errors);\n      onChange(model, errors === null);\n    };\n\n    // no need to create form elements for error_handler, processors or steps\n    const { error_handler, processors, steps, ...properties } =\n      bridge.schema.properties;\n    // this is great for diagnosing form rendering problems\n    // console.log('properties: ', properties, ' configuration: ', configuration);\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={clearEmptyObjectValues(configuration)}\n          onChangeModel={(model: any) => onChangeModel(model)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(properties).map((key) => (\n            <AutoField key={key} name={key} />\n          ))}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport {\n  clearEmptyObjectValues,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport './ConfigurationStep.css';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = patchConfigurationObject(\n    schema,\n    clearEmptyObjectValues(JSON.parse(JSON.stringify(configuration)))\n  );\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  const getFieldViewComponent = (\n    propertyKey: string,\n    propertyDefinition: {\n      title?: string;\n      type?: string;\n      oneOf?: Array<{ format: string }>;\n    },\n    value: any\n  ): React.ReactNode => {\n    const { title, type, oneOf } = propertyDefinition;\n    // a good place to start troubleshooting problems in the detail view\n    /*\n    console.log(\n      'getViewComponent, propertyName: ',\n      propertyName,\n      ' propertyDefinition: ',\n      propertyDefinition,\n      ' value: ',\n      value\n    );\n    */\n    const propertyNameFallback = _.capitalize(propertyKey.replace('_', ' '));\n    const noPropertySet = (name: string) => (\n      <Text className={'connector-detail__field_view_no_value'}>\n        {t('propertyNotConfigured', { name })}\n      </Text>\n    );\n    // Use the schema to determine the best way to\n    // represent the data\n    switch (type) {\n      case 'object':\n        if (propertyKey === 'data_shape') {\n          return <DataShape data={value} />;\n        }\n        if (value) {\n          return (\n            <Text component={TextVariants.pre}>{JSON.stringify(value)}</Text>\n          );\n        }\n        return noPropertySet(title || propertyNameFallback);\n      case 'boolean':\n        if (typeof value !== 'undefined') {\n          return <Text>{JSON.stringify(value)}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n      default:\n        if (typeof oneOf !== 'undefined') {\n          // we are assuming the schema is consistent here\n          const [def] = oneOf;\n          if (def.format === 'password') {\n            return <Text>**************************</Text>;\n          }\n        }\n        if (typeof value !== 'undefined') {\n          return <Text>{value}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n    }\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('connectorSpecific')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration}\n          onChange={onChange}\n          editMode={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {getFieldViewComponent(\n                  key,\n                  schema.properties[key],\n                  formConfiguration[key]\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler | undefined;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(\n      configuration\n        ? Object.keys(configuration)[0]\n        : Object.keys(error_handler.default)[0]\n    );\n    if (\n      configuration &&\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearEmptyObjectValues, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport './ConfigurationTab.css';\nimport { CommonStep } from './ConfigurationTab/CommonStep';\nimport { ConfigurationStep } from './ConfigurationTab/ConfigurationStep';\nimport {\n  ErrorHandler,\n  ErrorHandlerStep,\n} from './ConfigurationTab/ErrorHandlerStep';\n\nexport type ConfigurationTabProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationTab: FC<ConfigurationTabProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-update-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-update-success',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n      ...(commonConfiguration.service_account !==\n        connectorData.service_account && {\n        updatedServiceAccount: commonConfiguration.service_account,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConnectorConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConnectorConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = clearEmptyObjectValues(\n      JSON.parse(JSON.stringify(configuration))\n    );\n  }\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      uiPath={isEditMode ? ConfigurationMode.EDIT : ConfigurationMode.VIEW}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport './ConnectorInfoTextList.css';\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  namespaceMsg?: string | undefined;\n  namespaceMsgVariant: AlertType;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    namespaceMsg,\n    namespaceMsgVariant,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const [failureReasonExpand, setFailureReasonExpand] = React.useState(false);\n    const getFailureReason = (value: string): ReactNode => {\n      if ((value as string).length > 200) {\n        return (\n          <>\n            {!failureReasonExpand && (value as string).length > 200\n              ? (value as string).substring(0, 200) + '... '\n              : value}\n\n            <Button\n              onClick={() => setFailureReasonExpand(!failureReasonExpand)}\n              variant={'link'}\n            >\n              {failureReasonExpand ? t('viewLess') : t('viewMore')}\n            </Button>\n          </>\n        );\n      }\n      return value;\n    };\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {title === t('failureReason')\n                ? getFailureReason(value as string)\n                : value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {namespaceMsg &&\n            textListItem(\n              t(''),\n              <Alert\n                customIcon={<OutlinedClockIcon />}\n                className=\"my-class\"\n                variant={namespaceMsgVariant}\n                isInline\n                isPlain\n                title={namespaceMsg}\n              />\n            )}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Hint,\n  HintBody,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewTabProps {\n  connectorData: Connector;\n}\n\nexport const OverviewTab: FC<OverviewTabProps> = ({ connectorData }) => {\n  const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const getNamespaceData = useCallback((data) => {\n    setNamespaceData(data as ConnectorNamespace);\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-overview-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const getConnectorExpireAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredMsg');\n    }\n    return t('connectorExpire', { hours, min });\n  };\n\n  const getConnectorExpireInlineAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredInline');\n    }\n    return t('connectorExpireInline', { hours, min });\n  };\n\n  useEffect(() => {\n    getNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      namespaceId: connectorData?.namespace_id!,\n    })(getNamespaceData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      {namespaceData?.expiration && (\n        <Alert\n          customIcon={<ClockIcon />}\n          className=\"pf-u-mb-md\"\n          variant={warningType(new Date(namespaceData?.expiration!))}\n          isInline\n          title={getConnectorExpireAlert(namespaceData?.expiration!)}\n        />\n      )}\n      {connectorData?.status?.state === 'failed' && (\n        <Hint className=\"pf-u-mb-md\">\n          <HintBody>\n            <p>{t('previewModeMsg')}</p>\n            <Trans i18nKey={'supportEmailMsg'}>\n              You can still get help by emailing us at\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                rhosak-eval-support@redhat.com\n              </ClipboardCopy>\n              . This mailing list is monitored by the Red Hat OpenShift\n              Application Services team.\n            </Trans>\n          </HintBody>\n        </Hint>\n      )}\n\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={connectorData?.kafka?.id}\n        namespaceId={\n          namespaceData ? namespaceData.name : connectorData?.namespace_id!\n        }\n        namespaceMsg={\n          namespaceData?.expiration &&\n          getConnectorExpireInlineAlert(namespaceData?.expiration!)\n        }\n        namespaceMsgVariant={\n          namespaceData?.expiration\n            ? warningType(new Date(namespaceData?.expiration!))\n            : undefined\n        }\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationTab } from './ConfigurationTab';\nimport { OverviewTab } from './OverviewTab';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substring(1, hash.indexOf('&'))\n    : hash.substring(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-details-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewTab connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationTab\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'}>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={'/'}>{t('connectorsInstances')}</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              desiredState={connectorData?.desired_state!}\n              name={connectorData?.name!}\n              state={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport const DEFAULT_PAGE_SIZE = 10;\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, OrderBy, Search> = (\n  request: PaginatedApiRequest<OrderBy, Search>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\nexport type PlaceholderOrderBy = object;\nexport type PlaceholderSearch = object;\nexport type PaginatedApiRequest<OrderBy, Search> = {\n  page: number;\n  size: number;\n  orderBy?: OrderBy;\n  search?: Search;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, OrderBy, Search, DataType> = {\n  request: PaginatedApiRequest<OrderBy, Search>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\nexport type PaginatedMachineOptions<DataType> = {\n  initialPageSize?: number;\n  pollingEnabled?: boolean;\n  onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n};\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  OrderBy,\n  Search,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<OrderBy, Search>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<OrderBy, Search>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, OrderBy, Search, DataType>(\n  service: ApiCallback<RawDataType, OrderBy, Search>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: PaginatedMachineOptions<DataType>\n) {\n  const { pollingEnabled, initialPageSize, onBeforeSetResponse } =\n    options || {};\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: initialPageSize || DEFAULT_PAGE_SIZE,\n      },\n      response: undefined,\n      pollingEnabled: pollingEnabled || false,\n      onBeforeSetResponse: onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, OrderBy, Search, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<\n          RawDataType,\n          OrderBy,\n          Search,\n          DataType\n        >(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, search: query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        search: query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (\n      context: PaginatedMachineContext<RawDataType, OrderBy, Search, DataType>\n    ) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.search !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.search !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, OrderBy, Search, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, OrderBy, Search>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, OrderBy, Search, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, OrderBy, Search, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, OrderBy, Search, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<OrderBy, Search, DataType> = {\n  request: PaginatedApiRequest<OrderBy, Search>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, OrderBy, Search, DataType>(\n  actor: PaginatedApiActorType<RawDataType, OrderBy, Search, DataType>\n): usePaginationReturnValue<OrderBy, Search, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<OrderBy, Search, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import {\n  ConnectorsOrderBy,\n  ConnectorsSearch,\n  fetchConnectors,\n} from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        ConnectorsOrderBy,\n        ConnectorsSearch,\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  ConnectorsOrderBy,\n                  ConnectorsSearch,\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorsOrderBy, ConnectorsSearch } from '@apis/api';\nimport { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  ConnectorsOrderBy,\n  ConnectorsSearch,\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  runQuery: (\n    props: PaginatedApiRequest<ConnectorsOrderBy, ConnectorsSearch>\n  ) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<\n    Connector,\n    ConnectorsOrderBy,\n    ConnectorsSearch,\n    ConnectorMachineActorRef\n  >(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      ConnectorsOrderBy,\n      ConnectorsSearch,\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const runQuery = useCallback(\n    (props: PaginatedApiRequest<ConnectorsOrderBy, ConnectorsSearch>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    runQuery,\n  };\n};\n","import { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useConnectorsMachine } from '@app/pages/ConnectorsPage/ConnectorsPageContext';\nimport React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownSeparator,\n} from '@patternfly/react-core';\n\ntype connectorActionsMenuProps = {\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorActionsMenu: FunctionComponent<connectorActionsMenuProps> =\n  ({ onConnectorDetail, onDuplicateConnector }) => {\n    const { response, selectedConnector } = useConnectorsMachine();\n\n    const currentConnectorRef = response?.items?.filter((ref: any) => {\n      return ref.id == `connector-${selectedConnector?.id}`;\n    })[0];\n\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n      useState(false);\n\n    const {\n      connector,\n      canStart,\n      canStop,\n      canDelete,\n      onStart,\n      onStop,\n      onDelete,\n    } = useConnector(currentConnectorRef as ConnectorMachineActorRef);\n\n    const onToggle = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n    };\n    const onSelect = (\n      _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n    ) => {\n      setIsOpen(!isOpen);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById('connector-action');\n      element?.focus();\n    };\n    const doCancelDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n      onDelete();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key=\"start action\"\n        component=\"button\"\n        onClick={onStart}\n        isDisabled={!canStart}\n      >\n        {t('Start')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"stop action\"\n        component=\"button\"\n        onClick={onStop}\n        isDisabled={!canStop}\n      >\n        {t('Stop')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"edit action\"\n        component=\"button\"\n        onClick={() => onConnectorDetail(connector.id!, 'configuration')}\n      >\n        {t('Edit')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"Duplicate action\"\n        component=\"button\"\n        onClick={() => onDuplicateConnector(connector.id!)}\n      >\n        {t('Duplicate')}\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem\n        key=\"delete action\"\n        component=\"button\"\n        onClick={() => setShowDeleteConnectorConfirm(true)}\n        isDisabled={!canDelete}\n      >\n        {t('Delete')}\n      </DropdownItem>,\n    ];\n    return (\n      <>\n        <DialogDeleteConnector\n          connectorName={connector.name}\n          showDialog={showDeleteConnectorConfirm}\n          onCancel={doCancelDeleteConnector}\n          onConfirm={doDeleteConnector}\n        />\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Hint,\n  HintBody,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorActionsMenu } from '../ConnectorActions/ConnectorActionsMenu';\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  currentConnectorRef,\n  children,\n  connector,\n  onClose,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n              currentConnectorRef={currentConnectorRef}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    currentConnectorRef,\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    status,\n    error,\n    onClose,\n    onConnectorDetail,\n    onDuplicateConnector,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n    const { connectorsApiBasePath, getToken } = useCos();\n\n    const alert = useAlert();\n\n    const getNamespaceData = useCallback((data) => {\n      setNamespaceData(data as ConnectorNamespace);\n    }, []);\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    useEffect(() => {\n      getNamespace({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        namespaceId: namespaceId,\n      })(getNamespaceData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [namespaceId]);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const { connector } = useConnector(\n      currentConnectorRef as ConnectorMachineActorRef\n    );\n\n    React.useEffect(() => {\n      if (connector.status?.state == 'deleted') {\n        onClose();\n      }\n    }, [connector, onClose]);\n\n    const getConnectorExpireAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredMsg');\n      }\n      return t('connectorExpire', { hours, min });\n    };\n\n    const getConnectorExpireInlineAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredInline');\n      }\n      return t('connectorExpireInline', { hours, min });\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus\n                  desiredState={connector.desired_state!}\n                  name={name}\n                  state={connector.status?.state!}\n                />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n\n          <DrawerActions>\n            <ConnectorActionsMenu\n              onDuplicateConnector={onDuplicateConnector}\n              onConnectorDetail={onConnectorDetail}\n              onClose={onClose}\n            />\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        {status === 'failed' && (\n          <Hint className=\"pf-u-mr-lg pf-u-ml-lg pf-u-p-md\">\n            <HintBody>\n              <p>{t('previewModeMsg')}</p>\n              <Trans i18nKey={'supportEmailMsg'}>\n                You can still get help by emailing us at\n                <ClipboardCopy\n                  hoverTip=\"Copy\"\n                  clickTip=\"Copied\"\n                  variant=\"inline-compact\"\n                >\n                  rhosak-eval-support@redhat.com\n                </ClipboardCopy>\n                . This mailing list is monitored by the Red Hat OpenShift\n                Application Services team.\n              </Trans>\n            </HintBody>\n          </Hint>\n        )}\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              {namespaceData?.expiration && (\n                <Alert\n                  customIcon={<ClockIcon />}\n                  className=\"pf-u-mt-md\"\n                  variant={warningType(new Date(namespaceData?.expiration!))}\n                  isInline\n                  title={getConnectorExpireAlert(namespaceData?.expiration!)}\n                />\n              )}\n\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={kafkaId}\n                  namespaceId={namespaceData ? namespaceData.name : namespaceId}\n                  namespaceMsg={\n                    namespaceData?.expiration &&\n                    getConnectorExpireInlineAlert(namespaceData?.expiration!)\n                  }\n                  namespaceMsgVariant={\n                    namespaceData?.expiration\n                      ? warningType(new Date(namespaceData?.expiration!))\n                      : undefined\n                  }\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={new Date(connector.modified_at!)}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { ClipboardCopy, Text, TextVariants } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  desiredState: string;\n  name: string;\n  type: string;\n  category: string;\n  state: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  desiredState,\n  name,\n  type,\n  state,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicate'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        {state?.toLowerCase() === 'failed' ? (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n            clickable={true}\n            popoverBody={\n              <div>\n                <p>{t('previewModeMsg')}</p>\n                <Trans i18nKey={'supportEmailMsg'}>\n                  You can still get help by emailing us at\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"inline-compact\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    rhosak-eval-support@redhat.com\n                  </ClipboardCopy>\n                  . This mailing list is monitored by the Red Hat OpenShift\n                  Application Services team.\n                </Trans>\n              </div>\n            }\n            popoverHeader={\n              <h1 className=\"connectors-failed_pop_over\">\n                <ExclamationCircleIcon /> {t('failed')}\n              </h1>\n            }\n          />\n        ) : (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n          />\n        )}\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationEvent<OrderBy, Search> = {\n  page: number;\n  size: number;\n  orderBy?: OrderBy;\n  search?: Search;\n};\n\nexport type PaginationProps<OrderBy, Search> = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (event: PaginationEvent<OrderBy, Search>) => void;\n  orderBy?: OrderBy;\n  search?: Search;\n};\nexport const Pagination: FunctionComponent<PaginationProps<object, object>> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n    {\n      title: '20',\n      value: 20,\n    },\n    {\n      title: '50',\n      value: 50,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange({ page, size: perPage })}\n      onPerPageSelect={(_, perPage) => onChange({ page: 1, size: perPage })}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { ConnectorsOrderBy, ConnectorsSearch } from '@apis/api';\nimport {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\ntype ConnectorsToolbarProps = {} & PaginationProps<\n  ConnectorsOrderBy,\n  ConnectorsSearch\n>;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n  orderBy,\n  search,\n}) => {\n  const { t } = useTranslation();\n  // this is until we add a search field selector for other fields\n  const initialName = search ? search.name || '' : '';\n  const [name, setName] = useState<string>(initialName);\n  const runQuery = () => {\n    onChange({\n      page: 1,\n      size: perPage,\n      orderBy,\n      search: {\n        name,\n      },\n    });\n  };\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            value={`${name}`}\n            ouiaId={'search-field'}\n            onChange={setName}\n            onKeyUp={(event) => {\n              if (event.key === 'Enter') {\n                runQuery();\n              }\n            }}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            onClick={runQuery}\n            ouiaId={'button-search'}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n    </>\n  );\n\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n            data-ouia-component-id={'button-create'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={(event) =>\n            onChange({\n              ...event,\n              orderBy: orderBy,\n              search: search,\n            })\n          }\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n              ouiaId={'link-QuickStart'}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate} ouiaId={'button-create'}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            Clear all filters\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    runQuery,\n  } = useConnectorsMachine();\n\n  const currentConnectorRef = response?.items?.filter((ref) => {\n    return ref.id == `connector-${selectedConnector?.id}`;\n  })[0];\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => runQuery({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={runQuery}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart(t('connectors-getting-started'))\n          }\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          currentConnectorRef={currentConnectorRef as ConnectorMachineActorRef}\n          connector={selectedConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, runQuery } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        search={request.search}\n        orderBy={request.orderBy}\n        onChange={runQuery}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(event) =>\n          runQuery({\n            ...event,\n            orderBy: request.orderBy,\n            search: request.search,\n          })\n        }\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        desiredState={connector.desired_state!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        state={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nfunction toOUIAId(victim: string): string {\n  return victim.toLocaleLowerCase().replaceAll(' ', '-');\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                  ouiaId={toOUIAId(\n                    `button-${\n                      (activeStep && activeStep.nextButtonText) ||\n                      nextButtonText\n                    }`\n                  )}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                    ouiaId={toOUIAId(`button-${backButtonText}`)}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button\n                      variant={ButtonVariant.link}\n                      onClick={onClose}\n                      ouiaId={toOUIAId(`button-${cancelButtonText}`)}\n                    >\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import {\n  ConnectorTypesOrderBy,\n  ConnectorTypesSearch,\n  fetchConnectorTypes,\n} from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\nexport const DEFAULT_CONNECTOR_TYPES_PAGE_SIZE = 20;\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesOrderBy,\n        ConnectorTypesSearch,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesOrderBy,\n                  ConnectorTypesSearch,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i, {\n                  initialPageSize: DEFAULT_CONNECTOR_TYPES_PAGE_SIZE,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasSearch, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n  PlaceholderOrderBy,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        PlaceholderOrderBy,\n        KafkasSearch,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  PlaceholderOrderBy,\n                  KafkasSearch,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PlaceholderOrderBy,\n  PlaceholderSearch,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        PlaceholderOrderBy,\n        PlaceholderSearch,\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst deselectNamespace = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  PlaceholderOrderBy,\n                  PlaceholderSearch,\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: deselectNamespace,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { dataToPrettyString } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid:\n                    context.duplicateMode ||\n                    context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesOrderBy,\n  ConnectorTypesSearch,\n  KafkasSearch,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n  PlaceholderOrderBy,\n  PlaceholderSearch,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    ConnectorNamespace,\n    PlaceholderOrderBy,\n    PlaceholderSearch,\n    ConnectorNamespace\n  >(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorNamespace,\n      PlaceholderOrderBy,\n      PlaceholderSearch,\n      ConnectorNamespace\n    >\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    namespaceRef.send({ type: 'deselectNamespace' });\n  }, [namespaceRef]);\n\n  const runQuery = useCallback(\n    (request: PaginatedApiRequest<PlaceholderOrderBy, PlaceholderSearch>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    runQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    ConnectorType,\n    ConnectorTypesOrderBy,\n    ConnectorTypesSearch,\n    ConnectorType\n  >(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesOrderBy,\n      ConnectorTypesSearch,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const runQuery = useCallback(\n    (\n      request: PaginatedApiRequest<ConnectorTypesOrderBy, ConnectorTypesSearch>\n    ) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    runQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    KafkaRequest,\n    PlaceholderOrderBy,\n    KafkasSearch,\n    KafkaRequest\n  >(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      KafkaRequest,\n      PlaceholderOrderBy,\n      KafkasSearch,\n      KafkaRequest\n    >\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const runQuery = useCallback(\n    (request: PaginatedApiRequest<PlaceholderOrderBy, KafkasSearch>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    runQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-service-account',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      setLoading(true);\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n                ouiaId={'button-create'}\n              >\n                {t('create')}\n              </Button>,\n              <Button\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={handleModalToggle}\n                ouiaId={'button-cancel'}\n              >\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n      ouiaId={\n        sACreated ? 'modal-CredentialsGenerated' : 'modal-CreateServiceAcct'\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n            ouiaId={'button-close'}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n                ouiaId={'button-create-service-acct'}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                  helperText={\n                    duplicateMode ? t('credentialDuplicateFieldHelpText') : ''\n                  }\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport {\n  clearEmptyObjectValues,\n  mapToObject,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = {\n        ...clearEmptyObjectValues(mapToObject(configuration)),\n      };\n    } else {\n      combineConfiguration = {\n        ...clearEmptyObjectValues(configuration),\n      };\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      uiPath={\n        duplicateMode ? ConfigurationMode.DUPLICATE : ConfigurationMode.CREATE\n      }\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  const schema = (connector as ConnectorTypeAllOf).schema!;\n  const initialConfiguration = patchConfigurationObject(schema, {} as any);\n  return (\n    <JsonSchemaConfigurator\n      schema={schema}\n      configuration={\n        configuration\n          ? patchConfigurationObject(schema, configuration as any)\n          : initialConfiguration\n      }\n      duplicateMode={duplicateMode || false}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n    configurationSteps,\n    activeConfigurationStep,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n          configurationSteps: state.context.configurationSteps,\n          activeConfigurationStep: state.context.activeConfigurationStep,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={\n        typeof configurationSteps === 'object' &&\n        activeConfigurationStep !== undefined\n          ? t(configurationSteps[activeConfigurationStep])\n          : t('connectorSpecific')\n      }\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import { ConnectorTypesOrderBy, ConnectorTypesSearch } from '@apis/api';\nimport {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport {\n  Pagination,\n  PaginationEvent,\n} from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { DEFAULT_CONNECTOR_TYPES_PAGE_SIZE } from '@app/machines/StepConnectorTypes.machine';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    runQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() =>\n                    runQuery({\n                      page: 1,\n                      size: DEFAULT_CONNECTOR_TYPES_PAGE_SIZE,\n                      search: undefined,\n                    })\n                  }\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title={t('duplicateAlertConnectorType')}\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          <CardHeader>\n                            <CardTitle>\n                              {\n                                (connectorTypeDetails as ConnectorTypeAllOf)\n                                  .name\n                              }\n                            </CardTitle>\n                          </CardHeader>\n                          <CardBody>\n                            <DescriptionList>\n                              {/* <DescriptionListGroup>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup> */}\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  {t('version')}\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>ID</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {(connectorTypeDetails as ObjectReference).id}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            <CardHeader>\n                              <CardTitle>\n                                {(c as ConnectorTypeAllOf).name}\n                              </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                              <DescriptionList>\n                                {/* <DescriptionListGroup>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup> */}\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    {t('version')}\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>ID</DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ObjectReference).id}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                  <ConnectorTypesPagination onChange={runQuery} />\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, runQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  const { name, categories = [] } = request.search || {};\n\n  const clearAllFilters = useCallback(\n    () => runQuery({ page: 1, size: request.size, search: undefined }),\n    [runQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption\n      key=\"sink\"\n      value=\"sink\"\n      description={t('shortDescriptionSink')}\n    >\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption\n      key=\"source\"\n      value=\"source\"\n      description={t('shortDescriptionSource')}\n    >\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                search: {\n                  ...request.search,\n                  name,\n                },\n              })\n            }\n            ouiaId={'search-field'}\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(event) =>\n              runQuery({ ...event, search: request.search || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (\n    event: PaginationEvent<ConnectorTypesOrderBy, ConnectorTypesSearch>\n  ) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(event) => {\n          onChange({\n            ...event,\n            orderBy: request.orderBy,\n            search: request.search,\n          });\n        }}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  useEffect(() => {\n    errorHandler ?? onSetErrorHandler(Object.keys(error_handler['default'])[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [kafkaExpired, setKafkaExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    runQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setKafkaExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => runQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={() => {\n                  window.open(\n                    'https://console.redhat.com/application-services/streams/kafkas',\n                    '_blank'\n                  );\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && kafkaExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertKafka')}\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, runQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.search || {};\n\n  const clearAllFilters = useCallback(\n    () => runQuery({ page: 1, size: request.size }),\n    [runQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    runQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    runQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://console.redhat.com/application-services/streams/kafkas\"\n            target=\"_blank\"\n          >\n            {t('createKafkaInstance')}\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, runQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(event) =>\n        runQuery({ ...event, orderBy: request.orderBy, search: request.search })\n      }\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Tooltip content={<div>{t('namespaceEnabledTooltip')}</div>}>\n            <Button variant=\"primary\" onClick={onModalToggle}>\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`preview-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'preview-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'preview-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Spinner,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClockIcon, FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n  const [namespaceExpired, setNamespaceExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    selectedId,\n    duplicateMode,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    runQuery: onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const getEvalNamespaceAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('evalNamespaceExpiredMsg');\n    }\n    return t('evalNamespaceExpire', { hours, min });\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setNamespaceExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && namespaceExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertNamespace')}\n                    />\n                  )}\n\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      customIcon={<ClockIcon />}\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {getEvalNamespaceAlert(evalInstance.expiration!)}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <Alert\n                                    variant=\"info\"\n                                    customIcon={\n                                      <Spinner\n                                        size=\"md\"\n                                        aria-label={t('Provisioning')}\n                                        aria-valuetext=\"Please wait...\"\n                                      />\n                                    }\n                                    isInline\n                                    isPlain\n                                    title={t('Provisioning')}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, runQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                search: {\n                  name: value,\n                },\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n              ouiaId={'button-create'}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, runQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(event) =>\n        runQuery({ ...event, orderBy: request.orderBy, search: request.search })\n      }\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { dataToPrettyString, getPasswordType } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  ConnectorDesiredState,\n  ObjectReference,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const {\n    name,\n    userServiceAccount,\n    configString,\n    kafka,\n    namespace,\n    connectorType,\n  } = useReviewMachine();\n\n  const schema: Record<string, any> = (connectorType as ConnectorTypeAllOf)\n    .schema!;\n  const connectorTypeConfig = connectorType as ConnectorTypeAllOf;\n  const combinedConfig = Object.assign(\n    { name: name },\n    { kind: 'ConnectorType' },\n    { channels: connectorTypeConfig.channels },\n    { connector_type_id: (connectorType as ObjectReference).id! },\n    { desired_state: ConnectorDesiredState.Ready },\n    {\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n    },\n    { namespace_id: namespace.id },\n    {\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n    },\n    { connector: JSON.parse(configString) }\n  );\n\n  const configPrettyString = dataToPrettyString(combinedConfig);\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = getPasswordType(schema).concat('clientSecret');\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) =>\n            onClick(e, getJson(configPrettyString, showServiceAccount))\n          }\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configPrettyString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configPrettyString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport { getPasswordType } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n  const schema: Record<string, any> = (connectorType as ConnectorTypeAllOf)\n    .schema!;\n  const dataToHide = getPasswordType(schema);\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n          ouiaId={'toggle'}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {dataToHide.includes(el) ? (\n                        <Flex>\n                          <FlexItem>{maskValue(connector[el])}</FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {dataToHide.includes(el) ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  TextContent,\n  Modal,\n  PageSection,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorTypeAllOf>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-duplicate-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorTypeAllOf);\n    }, []);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <TextContent className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n            {connectorData && connectorTypeDetails ? (\n              <Text>\n                <strong>{t('Connector')}: </strong>\n                {connectorTypeDetails.name}\n              </Text>\n            ) : null}\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={true}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('leaveDuplicateConnectorConfirmModalTitle')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["SortOrderValue","getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","getNamespace","namespaceId","namespacesAPI","ConnectorNamespacesApi","getConnectorNamespace","ConnectorStatus","desiredState","name","state","clickable","popoverBody","popoverHeader","Split","className","hasGutter","SplitItem","ConnectorStatusIcon","isFilled","ConnectorStatusLabel","toLowerCase","Popover","position","PopoverPosition","hideOnOutsideClick","headerContent","bodyContent","Button","variant","isInline","convertToLabel","Stack","StackItem","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","undefined","capitalize","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","ConfigurationMode","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","createModel","connector","id","version","Configurator","steps","duplicateMode","configuratorLoaderMachine","createMachine","schema","initial","initialContext","states","loading","invoke","src","onDone","target","actions","assign","_context","event","failure","entry","escalate","success","type","fetchConfigurator","config","defaultConfig","Promise","resolve","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","default","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","split","maybeConf","reject","url","element","document","createElement","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","dataToPrettyString","dataVal","Map","JSON","stringify","getPasswordType","dataToHide","Object","keys","properties","map","oneOf","def","format","push","getPendingTime","expireTime","diff","getTime","hourDiff","Math","floor","hours","min","warningType","createDefaultFromSchema","propertyName","prop","definition","$ref","ref","_","pathArray","reduce","prev","resolveReference","answer","$defs","clearEmptyObjectValues","length","patchConfigurationObject","configuration","data_shape","dataShape","rest","StepBodyLayout","title","description","component","Level","LevelItem","Title","headingLevel","CommonStep","editMode","changeIsValid","onUpdateConfiguration","t","useTranslation","isSAUpdate","setIsSAUpdate","passwordHidden","setPasswordHidden","onSAChange","val","currentTarget","service_account","client_id","client_secret","Form","FormGroup","label","isRequired","fieldId","labelIcon","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","onNameChange","Text","TextVariants","validated","helperTextInvalid","helperTextInvalidIcon","ClipboardCopy","isReadOnly","hoverTip","clickTip","InputGroup","EyeIcon","EyeSlashIcon","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","model","errors","details","getLabelIcon","content","CustomJsonSchemaBridge","constructor","showCredentialHelpText","super","this","getProps","example","props","isSecret","getField","helperText","exampleText","enum","enumValues","field","newEnumValues","asString","required","JsonSchemaConfigurator","schemaValidator","bridge","error_handler","processors","Grid","KameletForm","onChangeModel","AutoField","Auto","parent","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","parse","isValid","entries","filter","includes","replace","propertyKey","propertyDefinition","propertyNameFallback","noPropertySet","DataShape","getFieldViewComponent","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","JSONSchemaBridge","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","r","acc","ConfigurationTab","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","hasShadowTop","connectorUpdate","updatedName","updatedServiceAccount","patchConnector","headers","updateConnector","isDisabled","Modal","onClose","activeStep","uiPath","EDIT","VIEW","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceMsg","namespaceMsgVariant","createdAt","modifiedAt","failureReasonExpand","setFailureReasonExpand","textListItem","TextListItem","TextListItemVariants","substring","getFailureReason","TextContent","TextList","TextListVariants","Alert","customIcon","OutlinedClockIcon","isPlain","date","dateTime","toISOString","OverviewTab","namespaceData","setNamespaceData","getNamespaceData","namespace_id","expiration","ClockIcon","getConnectorExpireAlert","status","Hint","HintBody","Trans","i18nKey","kafka","getConnectorExpireInlineAlert","created_at","modified_at","getTab","hash","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","Breadcrumb","BreadcrumbItem","Link","to","isActive","desired_state","events","payload","notifySuccess","notifyError","notifySelect","updateState","connectorMachine","verify","always","cond","ready","on","stopped","deleted","startingConnector","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","useConnector","canStart","canStop","canDelete","useSelector","transition","changed","onStart","send","onStop","onDelete","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","makePaginatedApiMachine","service","dataTransformer","options","pollingEnabled","initialPageSize","onBeforeSetResponse","request","page","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","items","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","search","api","idle","queryEmpty","tags","queryResults","empty","results","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","searchString","Boolean","s","join","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","runQuery","ConnectorActionsMenu","onConnectorDetail","onDuplicateConnector","currentConnectorRef","setIsOpen","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","onFocus","getElementById","focus","DropdownItem","DropdownSeparator","Dropdown","toggle","KebabToggle","DropdownPosition","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","Flex","FlexItem","spacer","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","openDetail","isSeparator","Td","dataLabel","isVisitedLink","stopPropagation","Pagination","itemCount","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","orderBy","initialName","setName","toggleGroupItems","ToolbarItem","ouiaId","onKeyUp","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","EmptyStateNoMatchesFound","onClear","ConnectedConnectorsPage","onCreateConnector","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","qsContext","QuickStartContext","ConnectorsPageTitle","Card","setActiveQuickStart","ConnectedTable","ConnectedRow","connectorRef","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","toOUIAId","victim","toLocaleLowerCase","replaceAll","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientId","clientSecret","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","isActiveStepValid","change","next","complete","changedStep","nextStep","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","find","connectorTypesMachine","categories","getConnectorTypes","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","createConnector","saveConnector","saved","isAllConfigured","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isConnectorSelected","isKafkaInstanceSelected","isNamespaceSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onDeselect","onRefresh","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","test","StepCommon","onSetName","useBasicMachine","combineConfiguration","DUPLICATE","CREATE","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Gallery","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","c","isHoverable","ConnectorTypesPagination","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","kafkaExpired","setKafkaExpired","KafkaToolbar","open","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","DropdownToggle","showToolbarItem","placeholder","href","KafkasPagination","EmptyStateNoNamespace","onModalToggle","Tooltip","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","registerEvalNamespace","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","setIsModalOpen","evalInstance","setEvalInstance","namespaceExpired","setNamespaceExpired","onQuery","getEvalNamespaceAlert","tenant","ClustersToolbar","isEvalPresent","cluster_id","searchInputRef","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","connectorTypeConfig","combinedConfig","channels","configPrettyString","getJson","showHiddenFields","inputObj","concat","repeat","maskPropertyValues","text","clipboard","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","labels","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","hasShadowBottom","DuplicateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}