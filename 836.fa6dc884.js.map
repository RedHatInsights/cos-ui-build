{"version":3,"sources":["webpack://cos-ui/./src/api.ts","webpack://cos-ui/./src/Connector.machine.ts","webpack://cos-ui/./src/ConnectorStatus.tsx","webpack://cos-ui/./src/ConnectorDrawer.tsx","webpack://cos-ui/./src/PaginatedResponse.machine.ts","webpack://cos-ui/./src/constants.tsx","webpack://cos-ui/./src/ConnectorsPage.machine.ts","webpack://cos-ui/./src/ConnectorsPageContext.tsx","webpack://cos-ui/./src/ConnectorsTable.tsx","webpack://cos-ui/./src/Pagination.tsx","webpack://cos-ui/./src/useDebounce.ts","webpack://cos-ui/./src/ConnectorsToolbar.tsx","webpack://cos-ui/./src/CosContext.tsx","webpack://cos-ui/./src/DialogDeleteConnector.tsx","webpack://cos-ui/./src/EmptyStateGenericError.tsx","webpack://cos-ui/./src/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/ConnectorsPage.tsx","webpack://cos-ui/./src/StepClusters.machine.ts","webpack://cos-ui/./src/StepConfigurator.machine.ts","webpack://cos-ui/./src/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/StepKafkas.machine.ts","webpack://cos-ui/./src/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/StepReview.machine.ts","webpack://cos-ui/./src/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/EmptyStateNoOSDCluster.tsx","webpack://cos-ui/./src/StepBodyLayout.tsx","webpack://cos-ui/./src/StepClusters.tsx","webpack://cos-ui/./src/StepConfigurator.tsx","webpack://cos-ui/./src/stringToChip.tsx","webpack://cos-ui/./src/StepConnectorTypes.tsx","webpack://cos-ui/./src/StepErrorBoundary.tsx","webpack://cos-ui/./src/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/StepKafkas.tsx","webpack://cos-ui/./src/StepReview.tsx","webpack://cos-ui/./src/UncontrolledWizard.tsx","webpack://cos-ui/./src/CreateConnectorWizard.tsx","webpack://cos-ui/./src/loadFederatedConfigurator.ts","webpack://cos-ui/./src/CreateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/Loading.tsx","webpack://cos-ui/./src/i18n.ts"],"names":["model","createModel","accessToken","Promise","resolve","basePath","connector","events","payload","actions","notifySuccess","notifyError","notifySelect","updateState","assign","_context","event","connectorMachine","createMachine","id","initial","context","initialContext","states","verify","always","target","cond","ready","on","stopped","deleted","startingConnector","invoke","src","apisService","ConnectorsApi","Configuration","callback","source","patchConnector","desired_state","undefined","cancelToken","token","headers","then","response","type","data","catch","error","reason","cancel","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","status","guards","isReady","isStopped","isDeleted","sendParent","ConnectorStatus","name","label","t","useTranslation","statusOptions","value","ConnectorStatuses","Ready","Failed","Assigning","Assigned","Updating","Provisioning","Deleting","Deleted","find","s","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","size","ConnectorDrawer","children","onClose","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","metadata","bootstrapServer","kafka","bootstrap_server","kafkaId","kafka_id","owner","cluster","deployment_location","cluster_id","createdAt","Date","created_at","updatedAt","updated_at","activeTabKey","setActiveTabKey","useState","textListItem","title","TextListItem","component","TextListItemVariants","DrawerPanelContent","widths","DrawerHead","TextContent","Text","TextVariants","Title","headingLevel","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Tabs","activeKey","onSelect","_","eventKey","Tab","TabTitleText","TextList","TextListVariants","date","dateTime","toISOString","makePaginatedApiMachine","service","dataTransformer","options","request","page","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","e","items","map","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","Object","keys","includes","_event","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","useCallback","state","hasTag","noResults","firstRequest","PAGINATED_MACHINE_ID","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","onSuccess","onError","listConnectors","message","fetchConnectors","withContext","makeConnectorMachine","forEach","d","send","to","listing","console","log","ConnectorsPageContext","createContext","ConnectorsPageProvider","useInterpret","devTools","Provider","useConnectorsPageMachineService","useContext","Error","useConnectorsMachine","apiData","props","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","connectorId","category","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","isDisabled","isSeparator","Td","dataLabel","Pagination","itemCount","perPage","isCompact","onChange","perPageOptions","onSetPage","onPerPageSelect","variant","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","ConnectorsToolbar","searchInputRef","useRef","debouncedOnChange","toggleGroupItems","ToolbarItem","InputGroup","TextInput","ref","Button","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","CosContext","CosContextProvider","getToken","useCos","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","Modal","ModalVariant","titleIconVariant","isOpen","key","Stack","StackItem","Trans","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","ConnectedConnectorsPage","onCreateConnector","alert","useAlert","description","addAlert","AlertVariant","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","Loading","PageSection","ConnectorsPageTitle","padding","isFilled","Card","ConnectedTable","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","connector_type_id","clusters","selectedCluster","selectCluster","deselectCluster","confirm","clustersMachine","ConnectorClustersApi","listConnectorClusters","fetchClusters","selection","selecting","valid","done","clusterSelected","noClusterSelected","version","json_schema","steps","activeStep","isActiveStepValid","configuration","change","isValid","next","prev","complete","changedStep","nextStep","min","length","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","step","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","Configurator","configuratorLoaderMachine","schema","onDone","failure","escalate","connectorTypesMachine","ConnectorTypesApi","categories","listConnectorTypes","lcName","rawItems","filteredItems","filter","c","labels","l","offset","slice","fetchConnectorTypes","connectorSelected","noConnectorSelected","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","errors","details","JsonSchemaConfigurator","properties","schemaValidator","bridge","JSONSchemaBridge","KameletForm","onChangeModel","onSubmit","AutoFields","isPlain","CardBody","SubmitField","Auto","parent","AutoForm","super","ValidatedQuickForm","initialConfiguration","configString","setName","setServiceAccount","updateConfiguration","save","initialize","dataToPrettyString","connectorType","userServiceAccount","serviceAccount","verifyConfigString","warnings","validationResult","JSON","parse","instancePath","stringify","verifyData","configStringWarnings","configStringError","setSavingError","savingError","reviewMachine","reviewing","saving","kind","bootstrap_server_host","client_id","clientId","client_secret","clientSecret","connector_spec","createConnector","saveConnector","saved","isAllConfigured","dataVal","Map","inputMap","obj","mapToObject","isInvalid","jumpToSelectKafka","jumpToSelectCluster","jumpToSelectConnector","jumpToConfigureConnector","subStep","jumpToReviewConfiguration","notifySave","creationWizardMachine","connectorConfiguration","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","configureConnector","loadConfigurator","configure","submittable","invalid","reviewConfiguration","isKafkaInstanceSelected","isClusterSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","onSave","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","fetchConfigurator","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","clusterRef","selectClusterRef","reviewRef","useClustersMachine","getSnapshot","selectedId","onQuery","useConnectorTypesMachine","useKafkasMachine","EmptyStateNoOSDCluster","ClusterIcon","StepBodyLayout","Level","SelectCluster","useClustersMachineIsReady","ClustersGallery","ClustersToolbar","Gallery","hasGutter","isHoverable","isSelectable","CardHeader","CardTitle","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","debouncedOnQuery","ClustersPagination","ConnectedCustomConfigurator","ConnectedJsonSchemaConfigurator","ConfiguratorStep","isLoading","hasErrors","configuratorRef","hasCustomConfigurator","fallback","stringToChip","node","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","categoriesToggled","setCategoriesToggled","nameInputRef","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","useEffect","current","typeMenuItems","SelectOption","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","Select","onToggle","selections","placeholderText","ConnectorTypesPagination","ErrorFallback","role","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","now","EmptyStateNoKafkaInstances","SpaceShuttleIcon","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","style","width","dropdownItems","showToolbarItem","placeholder","KafkasPagination","Review","isSaving","onSetName","onSetServiceAccount","onUpdateConfiguration","useReviewMachine","Form","FormAlert","Alert","FormGroup","isRequired","fieldId","helperText","Radio","isChecked","helperTextInvalid","validated","TextArea","autoResize","AlertGroup","w","idx","getFlattenedSteps","flattenedSteps","childStep","push","UncontrolledWizard","Component","constructor","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","document","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","index","enabled","navItemStep","hasActiveChild","canJumpToParent","WizardNavItem","content","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","CreateConnectorWizard","useActor","kafkaInstanceStep","isActive","useKafkaInstanceStep","configurationStep","canJumpToStep","useConfigurationStep","reduceRight","currentIdx","stepIndex","args","config","defaultConfig","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","loadFederatedConfigurator","maybeConfiguration","maybeConf","reject","url","element","createElement","async","onload","head","removeChild","onerror","appendChild","CreateConnectorPage","useConfig","basename","useBasename","askForLeaveConfirm","setAskForLeaveConfirm","closeLeaveConfirm","hasShadowBottom","Breadcrumb","BreadcrumbItem","getBasename","zIndex","cos","configurators","CosRoutes","apiBasepath","history","useHistory","goToConnectorsList","goToCreateConnector","onConnectorSave","Switch","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","format","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"mappings":"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","file":"836.fa6dc884.js","sourcesContent":["import axios from 'axios';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Configuration,\n  Connector,\n  ConnectorCluster,\n  ConnectorClustersApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypesApi,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest, DefaultApi } from '@rhoas/kafka-management-sdk';\n\nimport { ApiCallback } from './PaginatedResponse.machine';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\nexport const startConnector = ({\n  accessToken,\n  basePath,\n  connector,\n}: ConnectorApiProps) => {\n  const apisService = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    apisService\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: 'ready',\n        },\n        undefined,\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  basePath,\n  connector,\n}: ConnectorApiProps) => {\n  const apisService = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    apisService\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: 'stopped',\n        },\n        undefined,\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  basePath,\n  connector,\n}: ConnectorApiProps) => {\n  const apisService = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    apisService\n      .deleteConnector(connector.id!, undefined, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  basePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const apisService = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    apisService\n      .listConnectors(`${page}`, `${size}`, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchClusters = ({\n  accessToken,\n  basePath,\n}: CommonApiProps): ApiCallback<ConnectorCluster, {}> => {\n  const apisService = new ConnectorClustersApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    apisService\n      .listConnectorClusters(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  basePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const apisService = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    apisService\n      .listConnectorTypes('1', '1000', {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) => c.name?.toLowerCase().includes(lcName))\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (c.labels?.filter((l) => categories.includes(l)) || [])\n                    .length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  basePath,\n}: CommonApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  // TODO: remove after demo\n  basePath = 'https://api.openshift.com';\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    apisService\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  basePath,\n  kafka,\n  cluster,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n}: SaveConnectorProps) => {\n  const apisService = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n    const connector: Connector = {\n      kind: 'Connector',\n      metadata: {\n        name,\n        kafka_id: kafka.id,\n      },\n      deployment_location: {\n        kind: 'addon',\n        cluster_id: cluster.id,\n      },\n      connector_type_id: connectorType.id,\n      kafka: {\n        bootstrap_server: kafka.bootstrap_server_host || 'demo',\n        client_id: userServiceAccount?.clientId,\n        client_secret: userServiceAccount?.clientSecret,\n      },\n      connector_spec: configuration,\n    };\n    apisService\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({ type: 'failure', message: error.response.data.reason });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { deleteConnector, startConnector, stopConnector } from './api';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              basePath: context.basePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              basePath: context.basePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              basePath: context.basePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return (\n        <CheckCircleIcon className=\"cos--connectors__table--icon--completed\" />\n      );\n    case 'failed':\n      return (\n        <ExclamationCircleIcon className=\"cos--connectors__table--icon--failed\" />\n      );\n    case 'accepted':\n      return <PendingIcon />;\n    case 'provisioning':\n    case 'preparing':\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Creation in progress\"\n        />\n      );\n    case 'deprovision':\n    case 'deleted':\n      return null;\n  }\n  return <PendingIcon />;\n};\n\nexport enum ConnectorStatuses {\n  Ready = 'ready',\n  Failed = 'failed',\n  Assigning = 'assigning',\n  Assigned = 'assigned',\n  Updating = 'updating',\n  Provisioning = 'provisioning',\n  Deleting = 'deleting',\n  Deleted = 'deleted',\n}\n\nexport function useConnectorStatusLabel(status: string) {\n  const { t } = useTranslation();\n\n  const statusOptions = [\n    { value: ConnectorStatuses.Ready, label: t('Running') },\n    { value: ConnectorStatuses.Failed, label: t('Failed') },\n    { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n    { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n    { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n  ];\n\n  return statusOptions.find((s) => s.value === status)?.label || status;\n}\n","import React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { AddonClusterTarget, Connector } from '@rhoas/connector-management-sdk';\n\nimport './ConnectorDrawer.css';\nimport { ConnectorStatus } from './ConnectorStatus';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.metadata!.name!}\n              bootstrapServer={connector.kafka!.bootstrap_server!}\n              kafkaId={connector.metadata!.kafka_id!}\n              owner={connector.metadata!.owner!}\n              cluster={\n                (connector.deployment_location as AddonClusterTarget)\n                  .cluster_id!\n              }\n              createdAt={new Date(connector.metadata!.created_at!)}\n              updatedAt={new Date(connector.metadata!.updated_at!)}\n              status={connector.status!}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  cluster: string;\n  createdAt: Date;\n  updatedAt: Date;\n  status: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    cluster,\n    createdAt,\n    updatedAt,\n    status,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              Connector name\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('Details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <TextContent>\n                  <TextList component={TextListVariants.dl}>\n                    {textListItem('Bootstrap server', bootstrapServer)}\n                    {textListItem('Connector', name)}\n                    {textListItem('Kafka_instance', kafkaId)}\n                    {textListItem('Targeted OSD Cluster', cluster)}\n                    {textListItem('Owner', owner)}\n                    {textListItem(\n                      'Time created',\n                      <time\n                        title={t('{{date}}', { date: createdAt })}\n                        dateTime={createdAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: createdAt })}\n                      </time>\n                    )}\n                    {textListItem(\n                      'Time updated',\n                      <time\n                        title={t('{{date}}', { date: updatedAt })}\n                        dateTime={updatedAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: updatedAt })}\n                      </time>\n                    )}\n                  </TextList>\n                </TextContent>\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { fetchConnectors } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        basePath: context.basePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorMachineActorRef } from './Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from './ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from './PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, basePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, basePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport { ConnectorStatus } from './ConnectorStatus';\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('Name')}</Th>\n          <Th>{t('Type')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('Status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  category,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  onSelect,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: 'Start',\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: 'Stop',\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: 'Delete',\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: 'Details',\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('Name')}>{name}</Td>\n      <Td dataLabel={t('Type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('Status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import React, { FunctionComponent, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { Pagination, PaginationProps } from './Pagination';\nimport { useDebounce } from './useDebounce';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnChange = useDebounce(onChange, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(value) =>\n              debouncedOnChange({\n                size: perPage,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n              <ToolbarFilter\n                chips={statuses}\n                deleteChip={onSelectStatus}\n                deleteChipGroup={() => setStatuses([])}\n                categoryName=\"Status\"\n              >\n                <Select\n                  variant={'checkbox'}\n                  aria-label=\"Status\"\n                  onToggle={toggleStatuses}\n                  onSelect={onSelectStatus}\n                  selections={statuses}\n                  isOpen={statusesToggled}\n                  placeholderText=\"Status\"\n                >\n                  {statusMenuItems}\n                </Select>\n              </ToolbarFilter>\n            </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            Create Connector\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"toolbar-group-types\" collapseListedFiltersBreakpoint=\"xl\">\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `basePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  basePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  basePath,\n  children,\n}) => (\n  <CosContext.Provider value={{ getToken, basePath }}>\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('Delete connector')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('Delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('Something went wrong')}\n      </Title>\n      <EmptyStateBody>\n        {t('There was a problem processing the request. Please try again.')}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport SpaceShuttleIcon from '@patternfly/react-icons/dist/js/icons/space-shuttle-icon';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('Welcome to Managed Connectors')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('Create Connector')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('No results found')}\n      </Title>\n      <EmptyStateBody>\n        <Trans>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('Clear all filters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorMachineActorRef, useConnector } from './Connector.machine';\nimport { ConnectorDrawer } from './ConnectorDrawer';\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\nimport { ConnectorsTable, ConnectorsTableRow } from './ConnectorsTable';\nimport { ConnectorsToolbar } from './ConnectorsToolbar';\nimport { useCos } from './CosContext';\nimport { DialogDeleteConnector } from './DialogDeleteConnector';\nimport { EmptyStateGenericError } from './EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from './EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { basePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        basePath={basePath}\n        onError={onError}\n      >\n        <ConnectorsPage onCreateConnector={onCreateConnector} />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody onCreateConnector={onCreateConnector} />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('Connectors')}</Title>\n    </TextContent>\n  );\n};\n\nexport const ConnectedTable: FunctionComponent = () => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.metadata?.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.metadata!.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorCluster } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { fetchClusters } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  response?: ApiSuccessResponse<ConnectorCluster>;\n  selectedCluster?: ConnectorCluster;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectCluster: (payload: { selectedCluster: string }) => ({\n        ...payload,\n      }),\n      deselectCluster: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<KafkaRequest, {}, KafkaRequest>(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectCluster = model.assign(\n  {\n    selectedCluster: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedCluster\n      );\n    },\n  },\n  'selectCluster'\n);\nconst reset = model.assign(\n  {\n    selectedCluster: undefined,\n  },\n  'deselectCluster'\n);\n\nexport const clustersMachine = model.createMachine(\n  {\n    id: 'clusters',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<KafkaRequest, {}, KafkaRequest>(\n                  fetchClusters(context),\n                  (i) => i\n                ),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noClusterSelected' },\n                  { target: 'valid', cond: 'clusterSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectCluster: {\n                    target: 'valid',\n                    actions: selectCluster,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectCluster: {\n                    target: 'verify',\n                    actions: selectCluster,\n                    cond: (_, event) => event.selectedCluster !== undefined,\n                  },\n                  deselectCluster: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'clusterSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedCluster: (context: Context) => context.selectedCluster,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      clusterSelected: (context) => context.selectedCluster !== undefined,\n      noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n  }\n);\n\nexport type ClustersMachineActorRef = ActorRefFrom<typeof clustersMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      json_schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        json_schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\nimport { ConnectorTypesQuery, fetchConnectorTypes } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\nimport { KafkasQuery, fetchKafkaInstances } from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst reset = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import Ajv, { ValidateFunction } from 'ajv';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\nimport { AutoFields, SubmitField } from 'uniforms-patternfly';\n\nimport { Card, CardBody } from '@patternfly/react-core';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\n\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange }) => {\n    schema.type = schema.type || 'object';\n    // suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n    const schemaValidator = createValidator(schema);\n    const bridge = new JSONSchemaBridge(schema, schemaValidator);\n    return (\n      <KameletForm\n        schema={bridge}\n        model={configuration}\n        onChangeModel={(model: any) => onChange(model, false)}\n        onSubmit={(model: any) => onChange(model, true)}\n        // autosave\n        // autosaveDelay={0}\n      >\n        <AutoFields />\n\n        <Card isPlain>\n          <CardBody>\n            <SubmitField value={'Verify configuration'} />\n          </CardBody>\n        </Card>\n        {/* <WizardNext onChange={onChange} /> */}\n      </KameletForm>\n    );\n  };\n\n// const WizardNext: FunctionComponent<{\n//   onChange: (data: unknown, isValid: boolean) => void;\n// }> = ({ onChange }) => {\n//   const { changed, submitted, error, model } = useForm();\n//   const isValid = !error;\n//   const prevChangeModel = useRef<DeepPartial<unknown>>();\n//   useEffect(() => {\n//     if (prevChangeModel.current !== model && changed && submitted) {\n//       prevChangeModel.current = model;\n//       onChange(, isValid);\n//     }\n//   }, [prevChangeModel, changed, submitted, isValid, model, onChange]);\n//   return null;\n// };\n\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n\n      super.onChange(key, value);\n    }\n  }\n\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport { CreateValidatorType, createValidator } from './JsonSchemaConfigurator';\nimport { saveConnector, UserProvidedServiceAccount } from './api';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  validator: CreateValidatorType;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n    validator: createValidator({}),\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount | undefined;\n      }) => payload,\n      updateConfiguration: (payload: { data: string }) => payload,\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  configString: dataToPrettyString(context.initialConfiguration),\n  validator: createValidator(context.connectorType.json_schema!),\n}));\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\nconst updateConfiguration = model.assign(\n  (_, event) => ({\n    configString: event.data,\n  }),\n  'updateConfiguration'\n);\nconst verifyConfigString = model.assign((context) => {\n  const { warnings, error } = verifyData(\n    context.configString,\n    context.validator!\n  );\n  return { configStringWarnings: warnings, configStringError: error };\n});\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        entry: verifyConfigString,\n        always: [\n          { target: 'valid', cond: 'isAllConfigured' },\n          { target: 'reviewing' },\n        ],\n      },\n      reviewing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          updateConfiguration: {\n            target: 'verify',\n            actions: updateConfiguration,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          updateConfiguration: {\n            target: 'verify',\n            actions: updateConfiguration,\n          },\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              basePath: context.basePath,\n              kafka: context.kafka,\n              cluster: context.cluster,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) =>\n        context.configString !== undefined &&\n        context.configStringError === undefined &&\n        context.name.length > 0,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction mapToObject(inputMap: Map<string, unknown>) {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n}\n\nfunction verifyData(\n  data: string,\n  validator: ReturnType<typeof createValidator>\n) {\n  try {\n    const parsedData = JSON.parse(data);\n    const validationResult = validator(parsedData);\n    return {\n      warnings: validationResult\n        ? validationResult.details.map((d) => `${d.instancePath} ${d.message}`)\n        : undefined,\n      error: undefined,\n    };\n  } catch (e) {\n    const maybeMessage = (e as any)?.message;\n    return {\n      warnings: undefined,\n      error: `Invalid JSON: ${maybeMessage || JSON.stringify(e)}`,\n    };\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport { clustersMachine } from './StepClusters.machine';\nimport { configuratorMachine } from './StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from './StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from './StepConnectorTypes.machine';\nimport { kafkasMachine } from './StepKafkas.machine';\nimport { reviewMachine } from './StepReview.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedCluster?: ConnectorCluster;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  onSave?: () => void;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectCluster: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedConnector: context.selectedConnector,\n          }),\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((_context, event) => ({\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10,\n            },\n          }),\n          onDone: {\n            target: 'selectCluster',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectCluster: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectClusterRef',\n          src: clustersMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            selectedCluster: context.selectedCluster,\n          }),\n          onDone: {\n            target: 'configureConnector',\n            actions: assign({\n              selectedCluster: (_, event) => event.data.selectedCluster,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectClusterRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => ({\n                connector: context.selectedConnector,\n              }),\n              onDone: {\n                target: 'configure',\n                actions: assign((_context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => ({\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false,\n              }),\n              onDone: {\n                target: '#creationWizard.reviewConfiguration',\n                actions: assign((_, event) => ({\n                  connectorConfiguration: event.data.configuration || true,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.selectCluster' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            basePath: context.basePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: '',\n          }),\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((_, event) => ({\n                connectorConfiguration: event.data,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectCluster: {\n        target: 'selectCluster',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isClusterSelected',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isClusterSelected: (context) => context.selectedCluster !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave();\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from './CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from './PaginatedResponse.machine';\nimport { ClustersMachineActorRef } from './StepClusters.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from './StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from './StepConnectorTypes.machine';\nimport { KafkaMachineActorRef } from './StepKafkas.machine';\nimport { ReviewMachineActorRef } from './StepReview.machine';\nimport {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from './api';\nimport { PAGINATED_MACHINE_ID } from './constants';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  onSave: () => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({ children, accessToken, basePath, fetchConfigurator, onSave }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        basePath,\n        onSave,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  clusterRef: ClustersMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        clusterRef: state.children.selectClusterRef as ClustersMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useClustersMachineIsReady = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  return useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [clusterRef]\n    )\n  );\n};\n\nexport const useClustersMachine = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorCluster, {}, ConnectorCluster>(\n    clusterRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorCluster, {}, ConnectorCluster>\n  );\n  const { selectedId } = useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => ({\n        selectedId: state.context.selectedCluster?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedCluster: string) => {\n      clusterRef.send({ type: 'selectCluster', selectedCluster });\n    },\n    [clusterRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      clusterRef.send({ type: 'api.query', ...request });\n    },\n    [clusterRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: state.context.selectedConnector?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    name,\n    serviceAccount,\n    configString,\n    configStringError,\n    configStringWarnings,\n    isSaving,\n    savingError,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n        configString: state.context.configString,\n        configStringError: state.context.configStringError,\n        configStringWarnings: state.context.configStringWarnings,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      reviewRef.send({ type: 'setName', name });\n    },\n    [reviewRef]\n  );\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount | undefined) => {\n      reviewRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [reviewRef]\n  );\n  const onUpdateConfiguration = useCallback(\n    (data?: string) => {\n      reviewRef.send({ type: 'updateConfiguration', data: data || '' });\n    },\n    [reviewRef]\n  );\n  return {\n    name,\n    serviceAccount,\n    configString,\n    configStringError,\n    configStringWarnings,\n    isSaving,\n    savingError,\n    onSetName,\n    onSetServiceAccount,\n    onUpdateConfiguration,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClusterIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoOSDClusterProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoOSDCluster: FunctionComponent<EmptyStateNoOSDClusterProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={ClusterIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No OSD Cluster available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, Title } from '@patternfly/react-core';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, children }) => (\n    <div className={'pf-l-stack'}>\n      <Level className={'pf-u-p-md pf-l-stack__item'}>\n        <Title headingLevel=\"h2\">{title}</Title>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p>{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </Level>\n      <div className={'pf-l-stack__item pf-l-stack pf-m-fill'}>{children}</div>\n    </div>\n  );\n","import React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useClustersMachineIsReady,\n  useClustersMachine,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { EmptyStateNoOSDCluster } from './EmptyStateNoOSDCluster';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { useDebounce } from './useDebounce';\n\nexport function SelectCluster() {\n  const isReady = useClustersMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const history = useHistory();\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useClustersMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('OSD cluster')}\n      description={\n        'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos'\n      }\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoOSDCluster\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.metadata?.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.metadata?.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.metadata?.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst ClustersToolbar: FunctionComponent = () => {\n  const { request, onQuery } = useClustersMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">Create Clusters Instance</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useClustersMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from './JsonSchemaConfigurator';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { ConfiguratorActorRef } from './StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from './StepConfiguratorLoader.machine';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n}> = ({ actor, Configurator }) => {\n  const { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n}> = ({ actor }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <JsonSchemaConfigurator\n      schema={connector.json_schema!}\n      configuration={configuration || {}}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n\n  return (\n    <StepBodyLayout\n      title={t('Configurations')}\n      description={\n        'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos'\n      }\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                />\n              </React.Suspense>\n            );\n          default:\n            return <ConnectedJsonSchemaConfigurator actor={configuratorRef} />;\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from './EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { stringToChip } from './stringToChip';\nimport { useDebounce } from './useDebounce';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Connector category')}\n      description={\n        'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos'\n      }\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((c) => (\n                      <Card\n                        isHoverable\n                        key={c.id}\n                        isSelectable\n                        isSelected={selectedId === c.id}\n                        onClick={() => onSelect(c.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{c.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListDescription>\n                                {c.description}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Version</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {c.version}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>ID</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {c.id}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\n\nconst ConnectorTypesToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ConnectorTypesPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => onQuery({ page, size })}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { SpaceShuttleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No Kafka instance available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from './CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from './EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from './EmptyStateNoMatchesFound';\nimport { Loading } from './Loading';\nimport { Pagination } from './Pagination';\n// import { useBasename } from '@rhoas/app-services-ui-shared';\nimport { StepBodyLayout } from './StepBodyLayout';\nimport { stringToChip } from './stringToChip';\nimport { useDebounce } from './useDebounce';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const basename = useBasename();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Kafka instance')}\n      description={\n        'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos'\n      }\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill pf-u-p-md'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('Filter by status')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('CloudProvider')}\n          showToolbarItem={selectedCategory === t('CloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('CloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('Filter by cloud provider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('Filter by region')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">Create Kafka Instance</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertGroup,\n  Card,\n  CardBody,\n  Form,\n  FormAlert,\n  FormGroup,\n  Radio,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\n\nimport { useReviewMachine } from './CreateConnectorWizardContext';\nimport { StepBodyLayout } from './StepBodyLayout';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const {\n    name,\n    serviceAccount,\n    configString,\n    configStringError,\n    configStringWarnings,\n    isSaving,\n    savingError,\n    onSetName,\n    onSetServiceAccount,\n    onUpdateConfiguration,\n  } = useReviewMachine();\n  return (\n    <StepBodyLayout\n      title={t('Review')}\n      description={\n        'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos'\n      }\n    >\n      <Card>\n        <CardBody>\n          <Form>\n            {savingError && (\n              <FormAlert>\n                <Alert\n                  variant=\"danger\"\n                  title={savingError}\n                  aria-live=\"polite\"\n                  isInline\n                />\n              </FormAlert>\n            )}\n            <FormGroup\n              label=\"Name\"\n              isRequired\n              fieldId=\"name\"\n              helperText=\"Please provide a unique name for the connector\"\n            >\n              <TextInput\n                isDisabled={isSaving}\n                value={name}\n                onChange={onSetName}\n                id=\"name\"\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Service Account\"\n              isRequired\n              fieldId=\"service-account\"\n            >\n              <Radio\n                isDisabled={isSaving}\n                isChecked={serviceAccount === undefined}\n                name=\"service-account\"\n                onChange={() => onSetServiceAccount(undefined)}\n                label=\"Automatically create a Service Account for this connector\"\n                id=\"service-account-automatic\"\n                value=\"automatic\"\n              />\n              <Radio\n                isDisabled={isSaving}\n                isChecked={serviceAccount !== undefined}\n                name=\"service-account\"\n                onChange={() =>\n                  onSetServiceAccount({ clientId: '', clientSecret: '' })\n                }\n                label=\"Provide the credentials manually\"\n                id=\"service-account-user\"\n                value=\"user\"\n              />\n              {serviceAccount !== undefined && (\n                <>\n                  <FormGroup label=\"Client ID\" isRequired fieldId=\"clientId\">\n                    <TextInput\n                      isDisabled={isSaving}\n                      value={serviceAccount.clientId}\n                      onChange={(clientId) =>\n                        onSetServiceAccount({ ...serviceAccount, clientId })\n                      }\n                      id=\"clientId\"\n                    />\n                  </FormGroup>\n                  <FormGroup\n                    label=\"Client Secret\"\n                    isRequired\n                    fieldId=\"clientSecret\"\n                  >\n                    <TextInput\n                      isDisabled={isSaving}\n                      value={serviceAccount.clientSecret}\n                      onChange={(clientSecret) =>\n                        onSetServiceAccount({ ...serviceAccount, clientSecret })\n                      }\n                      id=\"clientSecret\"\n                    />\n                  </FormGroup>\n                </>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Configuration\"\n              isRequired\n              fieldId=\"configuration\"\n              helperText=\"Please review the configuration data.\"\n              helperTextInvalid={configStringError}\n              validated={\n                configStringError !== undefined\n                  ? 'error'\n                  : configStringWarnings !== undefined\n                  ? 'warning'\n                  : 'default'\n              }\n            >\n              <TextArea\n                value={configString}\n                onChange={onUpdateConfiguration}\n                autoResize={true}\n              />\n              <AlertGroup>\n                {configStringWarnings?.map((w, idx) => (\n                  <Alert key={idx} title={w} variant=\"warning\" isInline />\n                ))}\n              </AlertGroup>\n            </FormGroup>\n          </Form>\n        </CardBody>\n      </Card>\n    </StepBodyLayout>\n  );\n}\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { creationWizardMachine } from './CreateConnectorWizard.machine';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\nimport { SelectCluster } from './StepClusters';\nimport { ConfiguratorStep } from './StepConfigurator';\nimport { SelectConnectorType } from './StepConnectorTypes';\nimport { StepErrorBoundary } from './StepErrorBoundary';\nimport { SelectKafkaInstance } from './StepKafkas';\nimport { Review } from './StepReview';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from './UncontrolledWizard';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Kafka instance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConfigurationStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, activeStep, canJumpTo, canJumpToStep, enableNext, steps } =\n    useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => ({\n          isActive: state.matches('configureConnector'),\n          canJumpTo:\n            creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n              .changed || state.matches('configureConnector'),\n          enableNext: creationWizardMachine.transition(state, 'next').changed,\n          steps: state.context.configurationSteps,\n          activeStep: state.context.activeConfigurationStep,\n          canJumpToStep: (idx: number) =>\n            creationWizardMachine.transition(state, {\n              type: 'jumpToConfigureConnector',\n              subStep: idx,\n            }).changed,\n        }),\n        [service]\n      )\n    );\n  return {\n    name: t('Configurations'),\n    isActive,\n    canJumpTo,\n    steps: steps\n      ? steps.map((step, idx) => ({\n          name: step,\n          isActive: isActive && activeStep === idx,\n          canJumpTo: canJumpToStep(idx),\n          enableNext,\n          component: (\n            <StepErrorBoundary>\n              <ConfiguratorStep />\n            </StepErrorBoundary>\n          ),\n        }))\n      : undefined,\n    enableNext,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const configurationStep = useConfigurationStep();\n\n    if (state.value === 'saved') return null;\n\n    const steps = [\n      {\n        name: t('Connector category'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('OSD cluster'),\n        isActive: state.matches('selectCluster'),\n        component: (\n          <StepErrorBoundary>\n            <SelectCluster />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('selectCluster'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      configurationStep,\n      {\n        name: t('Review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: 'Create connector',\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectCluster');\n          break;\n        // case 4:\n        //   send('jumpToConfigureConnector');\n        //   break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 4 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorConfiguratorResponse } from './StepConfiguratorLoader.machine';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration = config[connector.id!];\n  console.log(\n    `Candidate configuration for \"${connector.id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\nimport { useCos } from './CosContext';\nimport { CreateConnectorWizard } from './CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from './CreateConnectorWizardContext';\nimport { fetchConfigurator } from './loadFederatedConfigurator';\n\ntype CreateConnectorPageProps = {\n  onSave: () => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { basePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('Connectors')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('Create connector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('Create connector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            basePath={basePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t(\n                'Changes you have made will be lost and no connector will be created.'\n              )}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ConnectedConnectorsPage } from './ConnectorsPage';\nimport { CosContextProvider } from './CosContext';\nimport { CreateConnectorPage } from './CreateConnectorPage';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  apiBasepath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  apiBasepath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const onConnectorSave = useCallback(() => {\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('wizard.creation-success'),\n    });\n    goToConnectorsList();\n  }, [alert, goToConnectorsList, t]);\n  return (\n    <CosContextProvider getToken={getToken} basePath={apiBasepath}>\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage onCreateConnector={goToCreateConnector} />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"sourceRoot":""}