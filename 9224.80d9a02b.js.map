{"version":3,"file":"9224.80d9a02b.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/components/ConnectorActions/ConnectorActionsMenu.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorNamespaceProps = {\n  namespaceId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  namespaceId,\n}: ConnectorNamespaceProps): FetchCallbacks<ConnectorNamespace> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .getConnectorNamespace(namespaceId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorNamespace, {}> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id!,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FC, ReactNode } from 'react';\n\nimport {\n  Split,\n  SplitItem,\n  Spinner,\n  Stack,\n  StackItem,\n  Button,\n  Popover,\n  PopoverPosition,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  desiredState: string;\n  name: string;\n  state: string;\n  clickable?: boolean;\n  popoverBody?: ReactNode;\n  popoverHeader?: ReactNode;\n};\n\nexport const ConnectorStatus: FC<ConnectorStatusProps> = ({\n  desiredState,\n  name,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => (\n  <Split className={'connector-status__split'} hasGutter>\n    <SplitItem>\n      <ConnectorStatusIcon name={name} state={state} />\n    </SplitItem>\n    <SplitItem isFilled>\n      <ConnectorStatusLabel\n        desiredState={desiredState}\n        state={state}\n        clickable={clickable}\n        popoverBody={popoverBody}\n        popoverHeader={popoverHeader}\n      />\n    </SplitItem>\n  </Split>\n);\n\ntype ConnectorStatusLabelProps = {\n  desiredState: string;\n  state: string;\n  clickable: boolean | undefined;\n  popoverBody: ReactNode;\n  popoverHeader: ReactNode;\n};\n\nexport const ConnectorStatusLabel: FC<ConnectorStatusLabelProps> = ({\n  desiredState,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n    case 'failed':\n    case 'stopped':\n    case 'deleted':\n    case '':\n      return (\n        <>\n          {clickable ? (\n            <Popover\n              aria-label=\"connector status popover\"\n              position={PopoverPosition.auto}\n              hideOnOutsideClick={true}\n              headerContent={popoverHeader}\n              bodyContent={popoverBody}\n            >\n              <Button variant=\"link\" isInline>\n                {convertToLabel(state)}\n              </Button>\n            </Popover>\n          ) : (\n            convertToLabel(state)\n          )}\n        </>\n      );\n    default:\n      return (\n        <Stack className={'connector-status-label__stack'}>\n          <StackItem className={'connector-status-label__state-label'}>\n            {convertToLabel(state)}\n          </StackItem>\n          <StackItem className={'connector-status-label__desired-state-label'}>\n            Transitioning to <b>{convertToLabel(desiredState)}</b>\n          </StackItem>\n        </Stack>\n      );\n  }\n};\n\ntype ConnectorStatusIconProps = {\n  name: string;\n  state: string;\n};\n\nexport const ConnectorStatusIcon: FC<ConnectorStatusIconProps> = ({\n  name,\n  state,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function convertToLabel(state: string) {\n  return typeof state !== undefined ? capitalize(state) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport enum ConfigurationMode {\n  CREATE = 'create',\n  VIEW = 'view',\n  EDIT = 'edit',\n  DUPLICATE = 'duplicate',\n}\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  uiPath: ConfigurationMode;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n\n/**\n * Calculate the time remaining before expiry\n * @param expireTime\n * @returns\n */\nexport const getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return { hours: hourDiff, min: minuteDiff };\n};\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\n/**\n * Calculate the time remaining before expiry and return the alert type based on that\n * @param expireTime\n * @returns\n * \"info\" if time remaining > 24 hr\n * \"warning\" if time remaining >= 3 hr\n * \"danger\" if time remaining < 3hr\n */\nexport const warningType = (expireTime: Date): AlertType => {\n  let { hours } = getPendingTime(expireTime);\n  if (hours >= 24) {\n    return 'info';\n  } else if (hours >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\n/**\n * Simple reference resolver that works with references contained in the\n * same schema object\n * @param ref\n * @param schema\n * @returns\n */\nexport const resolveReference = (ref: string, schema: Record<string, any>) => {\n  const [_, ...pathArray] = ref.split('/');\n  return pathArray.reduce((prev, key) => prev && prev[key], schema);\n};\n\n/**\n * Get whatever the default value is for a given property in the given\n * schema recursively\n * @param propertyName\n * @param schema\n * @returns\n */\nexport const createDefaultFromSchema = (\n  propertyName: string,\n  schema: Record<string, any>\n) => {\n  const prop = schema.properties[propertyName];\n  if (typeof prop === 'undefined') {\n    return undefined;\n  }\n  const definition = prop.$ref\n    ? resolveReference(prop.$ref, schema)\n    : schema.properties[propertyName];\n  if (!definition.properties) {\n    return definition.default;\n  }\n  const answer: any = {};\n  Object.keys(definition.properties).map((key) => {\n    const value = createDefaultFromSchema(key, {\n      $defs: schema.$defs,\n      ...(definition || {}),\n    });\n    if (typeof value !== 'undefined') {\n      answer[key] = value;\n    }\n  });\n  return answer;\n};\n\n/**\n * Returns a new object that does not contain empty objects as values\n * and leaves the passed in value untouched.\n * @param obj\n * @returns\n */\nexport const clearEmptyObjectValues = (obj: any): any => {\n  const answer: any = { ...obj };\n  Object.keys(answer).map((key) => {\n    const value = answer[key];\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      answer[key] = '';\n    }\n  });\n  return answer;\n};\n\n/**\n * Applies client-side workarounds to possible discrepencies in the configuration.\n *\n * Applies a default datashape value from the schema if the configuration object doesn't have one.\n *\n * @param schema\n * @param configuration\n * @returns\n */\nexport const patchConfigurationObject = (\n  schema: Record<string, any>,\n  configuration: { data_shape: any; [key: string]: any }\n) => {\n  const { data_shape: dataShape, ...rest } = configuration;\n  if (typeof dataShape === 'undefined') {\n    const dataShape = createDefaultFromSchema('data_shape', schema);\n    return { ...rest, ...(dataShape && { data_shape: dataShape }) };\n  }\n  return configuration;\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('serviceAccount')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('clientId')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { TFunction } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Popover bodyContent={content}>\n      <button\n        type=\"button\"\n        aria-label={`More info for ${name}`}\n        onClick={(e) => e.preventDefault()}\n        aria-describedby=\"form-group-label-info\"\n        className=\"pf-c-form__group-label-help\"\n      >\n        <HelpIcon noVerticalAlign />\n      </button>\n    </Popover>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  showCredentialHelpText: boolean;\n  duplicateMode: boolean;\n  t: TFunction<'translation', undefined>;\n\n  constructor(\n    schema: any,\n    validator: any,\n    t: TFunction<'translation', undefined>,\n    showCredentialHelpText: boolean,\n    duplicateMode: boolean\n  ) {\n    super(schema, validator);\n    this.t = t;\n    this.showCredentialHelpText = showCredentialHelpText;\n    this.duplicateMode = duplicateMode;\n  }\n\n  /**\n   * Returns the element properties for the named field.  Properties\n   * that should be excluded from DOM properties should be added to\n   * FilterDOMProps\n   * @param name\n   * @returns\n   */\n  getProps(name: string): any {\n    const { description, example, label, ...props } = super.getProps(name);\n    const { isSecret } = this.getField(name);\n    if (isSecret) {\n      return {\n        ...props,\n        ...(this.showCredentialHelpText && {\n          helperText: this.duplicateMode\n            ? this.t('credentialDuplicateFieldHelpText')\n            : this.t('credentialEditFieldHelpText'),\n        }),\n        labelIcon: getLabelIcon(label || name, description),\n        name,\n        label,\n        type: 'password',\n      };\n    }\n    return {\n      ...props,\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(label || name, description),\n      name,\n      label,\n    };\n  }\n\n  getField(name: string): Record<string, any> {\n    const { enum: enumValues, oneOf, ...field } = super.getField(name);\n    // use this to look at field information\n    /*\n    console.log(\n      'Complex type, name: ',\n      name,\n      ' oneOf: ',\n      oneOf,\n      ' field: ',\n      field\n    );\n    */\n    // uniforms will show the first enum value even if the underlying\n    // model object doesn't have this set or if there's no default value\n    let newEnumValues = undefined;\n    if (\n      typeof field.type !== 'undefined' &&\n      field.type === 'string' &&\n      typeof enumValues !== 'undefined'\n    ) {\n      if (enumValues[0] !== '') {\n        newEnumValues = ['', ...enumValues];\n      }\n    }\n    // Due to:\n    // https://uniforms.tools/docs/api-bridges/#note-on-allofanyofoneof\n    // we need to pick the appropriate type for the form, let's use the\n    // schema to guide these choices.\n    if (typeof oneOf !== 'undefined') {\n      // credentials are either a string field or an opaque object, for\n      // forms let's pick the string field and override it to a password\n      // We are assuming that the schema is consistent here\n      const [asString] = oneOf;\n      return {\n        ...asString,\n        name,\n        required: field.required,\n        type: asString.format,\n        isSecret: asString.format === 'password',\n      };\n    } else {\n      return {\n        name,\n        ...field,\n        ...(typeof newEnumValues !== undefined && { enum: newEnumValues }),\n      };\n    }\n  }\n}\n","import { createValidator } from '@utils/createValidator';\nimport { clearEmptyObjectValues } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  duplicateMode?: boolean;\n  editMode?: boolean;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, duplicateMode, editMode, onChange }) => {\n    const { t } = useTranslation();\n    schema.type = schema.type || 'object';\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(\n      schema,\n      schemaValidator,\n      t,\n      duplicateMode || editMode || false,\n      duplicateMode || false\n    );\n\n    const onChangeModel = async (model: any) => {\n      // schemaValidator returns null when there's no errors in the form\n      const errors = schemaValidator(model);\n      // handy for seeing form validation problems\n      // console.log(\"onChangeModel, form validation errors: \", errors);\n      onChange(model, errors === null);\n    };\n\n    // no need to create form elements for error_handler, processors or steps\n    const { error_handler, processors, steps, ...properties } =\n      bridge.schema.properties;\n    // this is great for diagnosing form rendering problems\n    // console.log('properties: ', properties, ' configuration: ', configuration);\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={clearEmptyObjectValues(configuration)}\n          onChangeModel={(model: any) => onChangeModel(model)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(properties).map((key) => (\n            <AutoField key={key} name={key} />\n          ))}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport {\n  clearEmptyObjectValues,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport './ConfigurationStep.css';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = patchConfigurationObject(\n    schema,\n    clearEmptyObjectValues(JSON.parse(JSON.stringify(configuration)))\n  );\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  const getFieldViewComponent = (\n    propertyKey: string,\n    propertyDefinition: {\n      title?: string;\n      type?: string;\n      oneOf?: Array<{ format: string }>;\n    },\n    value: any\n  ): React.ReactNode => {\n    const { title, type, oneOf } = propertyDefinition;\n    // a good place to start troubleshooting problems in the detail view\n    /*\n    console.log(\n      'getViewComponent, propertyName: ',\n      propertyName,\n      ' propertyDefinition: ',\n      propertyDefinition,\n      ' value: ',\n      value\n    );\n    */\n    const propertyNameFallback = _.capitalize(propertyKey.replace('_', ' '));\n    const noPropertySet = (name: string) => (\n      <Text className={'connector-detail__field_view_no_value'}>\n        {t('propertyNotConfigured', { name })}\n      </Text>\n    );\n    // Use the schema to determine the best way to\n    // represent the data\n    switch (type) {\n      case 'object':\n        if (propertyKey === 'data_shape') {\n          return <DataShape data={value} />;\n        }\n        if (value) {\n          return (\n            <Text component={TextVariants.pre}>{JSON.stringify(value)}</Text>\n          );\n        }\n        return noPropertySet(title || propertyNameFallback);\n      case 'boolean':\n        if (typeof value !== 'undefined') {\n          return <Text>{JSON.stringify(value)}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n      default:\n        if (typeof oneOf !== 'undefined') {\n          // we are assuming the schema is consistent here\n          const [def] = oneOf;\n          if (def.format === 'password') {\n            return <Text>**************************</Text>;\n          }\n        }\n        if (typeof value !== 'undefined') {\n          return <Text>{value}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n    }\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('connectorSpecific')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration}\n          onChange={onChange}\n          editMode={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {getFieldViewComponent(\n                  key,\n                  schema.properties[key],\n                  formConfiguration[key]\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler | undefined;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(\n      configuration\n        ? Object.keys(configuration)[0]\n        : Object.keys(error_handler.default)[0]\n    );\n    if (\n      configuration &&\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearEmptyObjectValues, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-update-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-update-success',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConnectorConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConnectorConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = clearEmptyObjectValues(\n      JSON.parse(JSON.stringify(configuration))\n    );\n  }\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      uiPath={isEditMode ? ConfigurationMode.EDIT : ConfigurationMode.VIEW}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport './ConnectorInfoTextList.css';\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  namespaceMsg?: string | undefined;\n  namespaceMsgVariant: AlertType;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    namespaceMsg,\n    namespaceMsgVariant,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const [failureReasonExpand, setFailureReasonExpand] = React.useState(false);\n    const getFailureReason = (value: string): ReactNode => {\n      if ((value as string).length > 200) {\n        return (\n          <>\n            {!failureReasonExpand && (value as string).length > 200\n              ? (value as string).substring(0, 200) + '... '\n              : value}\n\n            <Button\n              onClick={() => setFailureReasonExpand(!failureReasonExpand)}\n              variant={'link'}\n            >\n              {failureReasonExpand ? t('viewLess') : t('viewMore')}\n            </Button>\n          </>\n        );\n      }\n      return value;\n    };\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {title === t('failureReason')\n                ? getFailureReason(value as string)\n                : value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {namespaceMsg &&\n            textListItem(\n              t(''),\n              <Alert\n                customIcon={<OutlinedClockIcon />}\n                className=\"my-class\"\n                variant={namespaceMsgVariant}\n                isInline\n                isPlain\n                title={namespaceMsg}\n              />\n            )}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Hint,\n  HintBody,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const getNamespaceData = useCallback((data) => {\n    setNamespaceData(data as ConnectorNamespace);\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-overview-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const getConnectorExpireAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredMsg');\n    }\n    return t('connectorExpire', { hours, min });\n  };\n\n  const getConnectorExpireInlineAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredInline');\n    }\n    return t('connectorExpireInline', { hours, min });\n  };\n\n  useEffect(() => {\n    getNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      namespaceId: connectorData?.namespace_id!,\n    })(getNamespaceData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      {namespaceData?.expiration && (\n        <Alert\n          customIcon={<ClockIcon />}\n          className=\"pf-u-mb-md\"\n          variant={warningType(new Date(namespaceData?.expiration!))}\n          isInline\n          title={getConnectorExpireAlert(namespaceData?.expiration!)}\n        />\n      )}\n      {connectorData?.status?.state === 'failed' && (\n        <Hint className=\"pf-u-mb-md\">\n          <HintBody>\n            <p>{t('previewModeMsg')}</p>\n            <Trans i18nKey={'supportEmailMsg'}>\n              You can still get help by emailing us at\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                rhosak-eval-support@redhat.com\n              </ClipboardCopy>\n              . This mailing list is monitored by the Red Hat OpenShift\n              Application Services team.\n            </Trans>\n          </HintBody>\n        </Hint>\n      )}\n\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={connectorData?.kafka?.id}\n        namespaceId={\n          namespaceData ? namespaceData.name : connectorData?.namespace_id!\n        }\n        namespaceMsg={\n          namespaceData?.expiration &&\n          getConnectorExpireInlineAlert(namespaceData?.expiration!)\n        }\n        namespaceMsgVariant={\n          namespaceData?.expiration\n            ? warningType(new Date(namespaceData?.expiration!))\n            : undefined\n        }\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-details-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'}>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={'/'}>{t('connectorsInstances')}</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              desiredState={connectorData?.desired_state!}\n              name={connectorData?.name!}\n              state={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useConnectorsMachine } from '@app/pages/ConnectorsPage/ConnectorsPageContext';\nimport React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownSeparator,\n} from '@patternfly/react-core';\n\ntype connectorActionsMenuProps = {\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorActionsMenu: FunctionComponent<connectorActionsMenuProps> =\n  ({ onConnectorDetail, onDuplicateConnector }) => {\n    const { response, selectedConnector } = useConnectorsMachine();\n\n    const currentConnectorRef = response?.items?.filter((ref: any) => {\n      return ref.id == `connector-${selectedConnector?.id}`;\n    })[0];\n\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n      useState(false);\n\n    const {\n      connector,\n      canStart,\n      canStop,\n      canDelete,\n      onStart,\n      onStop,\n      onDelete,\n    } = useConnector(currentConnectorRef as ConnectorMachineActorRef);\n\n    const onToggle = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n    };\n    const onSelect = (\n      _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n    ) => {\n      setIsOpen(!isOpen);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById('connector-action');\n      element?.focus();\n    };\n    const doCancelDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n      onDelete();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key=\"start action\"\n        component=\"button\"\n        onClick={onStart}\n        isDisabled={!canStart}\n      >\n        {t('Start')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"stop action\"\n        component=\"button\"\n        onClick={onStop}\n        isDisabled={!canStop}\n      >\n        {t('Stop')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"edit action\"\n        component=\"button\"\n        onClick={() => onConnectorDetail(connector.id!, 'configuration')}\n      >\n        {t('Edit')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"Duplicate action\"\n        component=\"button\"\n        onClick={() => onDuplicateConnector(connector.id!)}\n      >\n        {t('Duplicate')}\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem\n        key=\"delete action\"\n        component=\"button\"\n        onClick={() => setShowDeleteConnectorConfirm(true)}\n        isDisabled={!canDelete}\n      >\n        {t('Delete')}\n      </DropdownItem>,\n    ];\n    return (\n      <>\n        <DialogDeleteConnector\n          connectorName={connector.name}\n          showDialog={showDeleteConnectorConfirm}\n          onCancel={doCancelDeleteConnector}\n          onConfirm={doDeleteConnector}\n        />\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Hint,\n  HintBody,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorActionsMenu } from '../ConnectorActions/ConnectorActionsMenu';\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  currentConnectorRef,\n  children,\n  connector,\n  onClose,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n              currentConnectorRef={currentConnectorRef}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    currentConnectorRef,\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    status,\n    error,\n    onClose,\n    onConnectorDetail,\n    onDuplicateConnector,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n    const { connectorsApiBasePath, getToken } = useCos();\n\n    const alert = useAlert();\n\n    const getNamespaceData = useCallback((data) => {\n      setNamespaceData(data as ConnectorNamespace);\n    }, []);\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    useEffect(() => {\n      getNamespace({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        namespaceId: namespaceId,\n      })(getNamespaceData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [namespaceId]);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const { connector } = useConnector(\n      currentConnectorRef as ConnectorMachineActorRef\n    );\n\n    React.useEffect(() => {\n      if (connector.status?.state == 'deleted') {\n        onClose();\n      }\n    }, [connector, onClose]);\n\n    const getConnectorExpireAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredMsg');\n      }\n      return t('connectorExpire', { hours, min });\n    };\n\n    const getConnectorExpireInlineAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredInline');\n      }\n      return t('connectorExpireInline', { hours, min });\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus\n                  desiredState={connector.desired_state!}\n                  name={name}\n                  state={connector.status?.state!}\n                />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n\n          <DrawerActions>\n            <ConnectorActionsMenu\n              onDuplicateConnector={onDuplicateConnector}\n              onConnectorDetail={onConnectorDetail}\n              onClose={onClose}\n            />\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        {status === 'failed' && (\n          <Hint className=\"pf-u-mr-lg pf-u-ml-lg pf-u-p-md\">\n            <HintBody>\n              <p>{t('previewModeMsg')}</p>\n              <Trans i18nKey={'supportEmailMsg'}>\n                You can still get help by emailing us at\n                <ClipboardCopy\n                  hoverTip=\"Copy\"\n                  clickTip=\"Copied\"\n                  variant=\"inline-compact\"\n                >\n                  rhosak-eval-support@redhat.com\n                </ClipboardCopy>\n                . This mailing list is monitored by the Red Hat OpenShift\n                Application Services team.\n              </Trans>\n            </HintBody>\n          </Hint>\n        )}\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              {namespaceData?.expiration && (\n                <Alert\n                  customIcon={<ClockIcon />}\n                  className=\"pf-u-mt-md\"\n                  variant={warningType(new Date(namespaceData?.expiration!))}\n                  isInline\n                  title={getConnectorExpireAlert(namespaceData?.expiration!)}\n                />\n              )}\n\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={kafkaId}\n                  namespaceId={namespaceData ? namespaceData.name : namespaceId}\n                  namespaceMsg={\n                    namespaceData?.expiration &&\n                    getConnectorExpireInlineAlert(namespaceData?.expiration!)\n                  }\n                  namespaceMsgVariant={\n                    namespaceData?.expiration\n                      ? warningType(new Date(namespaceData?.expiration!))\n                      : undefined\n                  }\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={new Date(connector.modified_at!)}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { ClipboardCopy, Text, TextVariants } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  desiredState: string;\n  name: string;\n  type: string;\n  category: string;\n  state: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  desiredState,\n  name,\n  type,\n  state,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicate'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        {state?.toLowerCase() === 'failed' ? (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n            clickable={true}\n            popoverBody={\n              <div>\n                <p>{t('previewModeMsg')}</p>\n                <Trans i18nKey={'supportEmailMsg'}>\n                  You can still get help by emailing us at\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"inline-compact\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    rhosak-eval-support@redhat.com\n                  </ClipboardCopy>\n                  . This mailing list is monitored by the Red Hat OpenShift\n                  Application Services team.\n                </Trans>\n              </div>\n            }\n            popoverHeader={\n              <h1 className=\"connectors-failed_pop_over\">\n                <ExclamationCircleIcon /> {t('failed')}\n              </h1>\n            }\n          />\n        ) : (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n          />\n        )}\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n    {\n      title: '20',\n      value: 20,\n    },\n    {\n      title: '50',\n      value: 50,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const toolbarItems = (\n    <>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n            data-ouia-component-id={'button-create'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n              ouiaId={'link-QuickStart'}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate} ouiaId={'button-create'}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            Clear all filters\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  const currentConnectorRef = response?.items?.filter((ref) => {\n    return ref.id == `connector-${selectedConnector?.id}`;\n  })[0];\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart(t('connectors-getting-started'))\n          }\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          currentConnectorRef={currentConnectorRef as ConnectorMachineActorRef}\n          connector={selectedConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        desiredState={connector.desired_state!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        state={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nfunction toOUIAId(victim: string): string {\n  return victim.toLocaleLowerCase().replaceAll(' ', '-');\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                  ouiaId={toOUIAId(\n                    `button-${\n                      (activeStep && activeStep.nextButtonText) ||\n                      nextButtonText\n                    }`\n                  )}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                    ouiaId={toOUIAId(`button-${backButtonText}`)}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button\n                      variant={ButtonVariant.link}\n                      onClick={onClose}\n                      ouiaId={toOUIAId(`button-${cancelButtonText}`)}\n                    >\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        {},\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst deselectNamespace = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  {},\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: deselectNamespace,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid:\n                    context.duplicateMode ||\n                    context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorNamespace, {}, ConnectorNamespace>(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorNamespace, {}, ConnectorNamespace>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    namespaceRef.send({ type: 'deselectNamespace' });\n  }, [namespaceRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-service-account',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      setLoading(true);\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n                ouiaId={'button-create'}\n              >\n                {t('create')}\n              </Button>,\n              <Button\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={handleModalToggle}\n                ouiaId={'button-cancel'}\n              >\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n      ouiaId={\n        sACreated ? 'modal-CredentialsGenerated' : 'modal-CreateServiceAcct'\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n            ouiaId={'button-close'}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n                ouiaId={'button-create-service-acct'}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                  helperText={\n                    duplicateMode ? t('credentialDuplicateFieldHelpText') : ''\n                  }\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport {\n  clearEmptyObjectValues,\n  mapToObject,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector, connectorData } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n        connectorData: state.context.connectorData,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    const defaultEntries = JSON.parse(JSON.stringify(connectorData?.connector));\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(mapToObject(configuration)),\n      };\n    } else {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(configuration),\n      };\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      uiPath={\n        duplicateMode ? ConfigurationMode.DUPLICATE : ConfigurationMode.CREATE\n      }\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  const schema = (connector as ConnectorTypeAllOf).schema!;\n  const initialConfiguration = patchConfigurationObject(schema, {} as any);\n  return (\n    <JsonSchemaConfigurator\n      schema={schema}\n      configuration={\n        configuration\n          ? patchConfigurationObject(schema, configuration as any)\n          : initialConfiguration\n      }\n      duplicateMode={duplicateMode || false}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n    configurationSteps,\n    activeConfigurationStep,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n          configurationSteps: state.context.configurationSteps,\n          activeConfigurationStep: state.context.activeConfigurationStep,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={\n        typeof configurationSteps === 'object' &&\n        activeConfigurationStep !== undefined\n          ? t(configurationSteps[activeConfigurationStep])\n          : t('connectorSpecific')\n      }\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title={t('duplicateAlertConnectorType')}\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          <CardHeader>\n                            <CardTitle>\n                              {\n                                (connectorTypeDetails as ConnectorTypeAllOf)\n                                  .name\n                              }\n                            </CardTitle>\n                          </CardHeader>\n                          <CardBody>\n                            <DescriptionList>\n                              {/* <DescriptionListGroup>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup> */}\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  {t('version')}\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>ID</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {(connectorTypeDetails as ObjectReference).id}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            <CardHeader>\n                              <CardTitle>\n                                {(c as ConnectorTypeAllOf).name}\n                              </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                              <DescriptionList>\n                                {/* <DescriptionListGroup>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup> */}\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    {t('version')}\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>ID</DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ObjectReference).id}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption\n      key=\"sink\"\n      value=\"sink\"\n      description={t('shortDescriptionSink')}\n    >\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption\n      key=\"source\"\n      value=\"source\"\n      description={t('shortDescriptionSource')}\n    >\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ouiaId={'search-field'}\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(page, size) =>\n              onQuery({ page, size, query: request.query || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (page: number, size: number) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={onChange}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  useEffect(() => {\n    errorHandler ?? onSetErrorHandler(Object.keys(error_handler['default'])[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [kafkaExpired, setKafkaExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setKafkaExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={() => {\n                  window.open(\n                    'https://console.redhat.com/application-services/streams/kafkas',\n                    '_blank'\n                  );\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && kafkaExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertKafka')}\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://console.redhat.com/application-services/streams/kafkas\"\n            target=\"_blank\"\n          >\n            {t('createKafkaInstance')}\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Tooltip content={<div>{t('namespaceEnabledTooltip')}</div>}>\n            <Button variant=\"primary\" onClick={onModalToggle}>\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`preview-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'preview-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'preview-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Spinner,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClockIcon, FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n  const [namespaceExpired, setNamespaceExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    selectedId,\n    duplicateMode,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const getEvalNamespaceAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('evalNamespaceExpiredMsg');\n    }\n    return t('evalNamespaceExpire', { hours, min });\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setNamespaceExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && namespaceExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertNamespace')}\n                    />\n                  )}\n\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      customIcon={<ClockIcon />}\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {getEvalNamespaceAlert(evalInstance.expiration!)}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <Alert\n                                    variant=\"info\"\n                                    customIcon={\n                                      <Spinner\n                                        size=\"md\"\n                                        aria-label={t('Provisioning')}\n                                        aria-valuetext=\"Please wait...\"\n                                      />\n                                    }\n                                    isInline\n                                    isPlain\n                                    title={t('Provisioning')}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n              ouiaId={'button-create'}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n          ouiaId={'toggle'}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('accessKey') ||\n                      _.startCase(el) === t('secretKey') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('databasePassword') ||\n                      _.startCase(el) === t('password') ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  TextContent,\n  Modal,\n  PageSection,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorTypeAllOf>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-duplicate-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorTypeAllOf);\n    }, []);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <TextContent className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n            {connectorData && connectorTypeDetails ? (\n              <Text>\n                <strong>{t('Connector')}: </strong>\n                {connectorTypeDetails.name}\n              </Text>\n            ) : null}\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={true}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('leaveDuplicateConnectorConfirmModalTitle')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","getNamespace","namespaceId","namespacesAPI","ConnectorNamespacesApi","getConnectorNamespace","ConnectorStatus","desiredState","name","state","clickable","popoverBody","popoverHeader","Split","className","hasGutter","SplitItem","ConnectorStatusIcon","isFilled","ConnectorStatusLabel","toLowerCase","Popover","position","PopoverPosition","hideOnOutsideClick","headerContent","bodyContent","Button","variant","isInline","convertToLabel","Stack","StackItem","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","undefined","capitalize","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","ConfigurationMode","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","createModel","connector","id","version","Configurator","steps","duplicateMode","configuratorLoaderMachine","createMachine","schema","initial","initialContext","states","loading","invoke","src","onDone","target","actions","assign","_context","event","failure","entry","escalate","success","type","fetchConfigurator","config","defaultConfig","Promise","resolve","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","default","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","split","maybeConf","reject","url","element","document","createElement","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","getPendingTime","expireTime","diff","getTime","hourDiff","Math","floor","hours","min","warningType","createDefaultFromSchema","propertyName","prop","properties","definition","$ref","ref","_","pathArray","reduce","prev","resolveReference","answer","Object","keys","map","$defs","clearEmptyObjectValues","length","patchConfigurationObject","configuration","data_shape","dataShape","rest","StepBodyLayout","title","description","component","Level","LevelItem","Title","headingLevel","CommonStep","editMode","changeIsValid","onUpdateConfiguration","t","useTranslation","Form","FormGroup","label","isRequired","fieldId","labelIcon","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","service_account","client_id","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","model","errors","details","getLabelIcon","content","CustomJsonSchemaBridge","constructor","showCredentialHelpText","super","this","getProps","example","props","isSecret","getField","helperText","exampleText","enum","enumValues","oneOf","field","newEnumValues","asString","required","format","JsonSchemaConfigurator","schemaValidator","bridge","error_handler","processors","Grid","KameletForm","onChangeModel","AutoField","Auto","parent","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","JSON","parse","stringify","isValid","entries","filter","includes","replace","propertyKey","propertyDefinition","propertyNameFallback","noPropertySet","DataShape","def","getFieldViewComponent","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","JSONSchemaBridge","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","r","push","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","hasShadowTop","connectorUpdate","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","activeStep","uiPath","EDIT","VIEW","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceMsg","namespaceMsgVariant","createdAt","modifiedAt","failureReasonExpand","setFailureReasonExpand","textListItem","TextListItem","TextListItemVariants","substring","getFailureReason","TextContent","TextList","TextListVariants","Alert","customIcon","OutlinedClockIcon","isPlain","date","dateTime","toISOString","OverviewPage","namespaceData","setNamespaceData","getNamespaceData","namespace_id","expiration","ClockIcon","getConnectorExpireAlert","status","Hint","HintBody","Trans","i18nKey","kafka","getConnectorExpireInlineAlert","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","Breadcrumb","BreadcrumbItem","Link","to","isActive","desired_state","events","payload","notifySuccess","notifyError","notifySelect","updateState","connectorMachine","verify","always","cond","ready","on","stopped","deleted","startingConnector","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","useConnector","canStart","canStop","canDelete","useSelector","transition","changed","onStart","send","onStop","onDelete","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","makePaginatedApiMachine","service","dataTransformer","options","request","page","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","items","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","queryEmpty","tags","queryResults","empty","results","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","ConnectorActionsMenu","onConnectorDetail","onDuplicateConnector","currentConnectorRef","setIsOpen","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","onFocus","getElementById","focus","DropdownItem","DropdownSeparator","Dropdown","toggle","KebabToggle","DropdownPosition","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","Flex","FlexItem","spacer","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","openDetail","isSeparator","Td","dataLabel","isVisitedLink","stopPropagation","Pagination","itemCount","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","toolbarItems","ToolbarGroup","ToolbarItem","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","ouiaId","EmptyStateNoMatchesFound","onClear","SearchIcon","ConnectedConnectorsPage","onCreateConnector","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","qsContext","QuickStartContext","ConnectorsPageTitle","Card","setActiveQuickStart","ConnectedTable","ConnectedRow","connectorRef","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","toOUIAId","victim","toLocaleLowerCase","replaceAll","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientId","clientSecret","setName","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","isActiveStepValid","change","next","complete","changedStep","nextStep","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","find","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","slice","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","s","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","client_secret","createConnector","saveConnector","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isConnectorSelected","isKafkaInstanceSelected","isNamespaceSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onDeselect","onQuery","onRefresh","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","validated","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroup","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","helperTextInvalid","test","StepCommon","onSetName","useBasicMachine","defaultEntries","combineConfiguration","DUPLICATE","CREATE","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Gallery","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","isHoverable","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","toggleGroupItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","kafkaExpired","setKafkaExpired","KafkaToolbar","open","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","DropdownToggle","showToolbarItem","placeholder","href","KafkasPagination","EmptyStateNoNamespace","onModalToggle","Tooltip","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","registerEvalNamespace","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","setIsModalOpen","evalInstance","setEvalInstance","namespaceExpired","setNamespaceExpired","getEvalNamespaceAlert","tenant","ClustersToolbar","isEvalPresent","cluster_id","searchInputRef","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","hasShadowBottom","DuplicateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}