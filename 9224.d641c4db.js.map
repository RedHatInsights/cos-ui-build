{"version":3,"file":"9224.d641c4db.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/components/ConnectorActions/ConnectorActionsMenu.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorNamespaceProps = {\n  namespaceId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  namespaceId,\n}: ConnectorNamespaceProps): FetchCallbacks<ConnectorNamespace> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .getConnectorNamespace(namespaceId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorNamespace, {}> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id!,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FC, ReactNode } from 'react';\n\nimport {\n  Split,\n  SplitItem,\n  Spinner,\n  Stack,\n  StackItem,\n  Button,\n  Popover,\n  PopoverPosition,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  desiredState: string;\n  name: string;\n  state: string;\n  clickable?: boolean;\n  popoverBody?: ReactNode;\n  popoverHeader?: ReactNode;\n};\n\nexport const ConnectorStatus: FC<ConnectorStatusProps> = ({\n  desiredState,\n  name,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => (\n  <Split className={'connector-status__split'} hasGutter>\n    <SplitItem>\n      <ConnectorStatusIcon name={name} state={state} />\n    </SplitItem>\n    <SplitItem isFilled>\n      <ConnectorStatusLabel\n        desiredState={desiredState}\n        state={state}\n        clickable={clickable}\n        popoverBody={popoverBody}\n        popoverHeader={popoverHeader}\n      />\n    </SplitItem>\n  </Split>\n);\n\ntype ConnectorStatusLabelProps = {\n  desiredState: string;\n  state: string;\n  clickable: boolean | undefined;\n  popoverBody: ReactNode;\n  popoverHeader: ReactNode;\n};\n\nexport const ConnectorStatusLabel: FC<ConnectorStatusLabelProps> = ({\n  desiredState,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n    case 'failed':\n    case 'stopped':\n    case 'deleted':\n    case '':\n      return (\n        <>\n          {clickable ? (\n            <Popover\n              aria-label=\"connector status popover\"\n              position={PopoverPosition.auto}\n              hideOnOutsideClick={true}\n              headerContent={popoverHeader}\n              bodyContent={popoverBody}\n            >\n              <Button variant=\"link\" isInline>\n                {convertToLabel(state)}\n              </Button>\n            </Popover>\n          ) : (\n            convertToLabel(state)\n          )}\n        </>\n      );\n    default:\n      return (\n        <Stack className={'connector-status-label__stack'}>\n          <StackItem className={'connector-status-label__state-label'}>\n            {convertToLabel(state)}\n          </StackItem>\n          <StackItem className={'connector-status-label__desired-state-label'}>\n            Transitioning to <b>{convertToLabel(desiredState)}</b>\n          </StackItem>\n        </Stack>\n      );\n  }\n};\n\ntype ConnectorStatusIconProps = {\n  name: string;\n  state: string;\n};\n\nexport const ConnectorStatusIcon: FC<ConnectorStatusIconProps> = ({\n  name,\n  state,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function convertToLabel(state: string) {\n  return typeof state !== undefined ? capitalize(state) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n\n/**\n * Calculate the time remaining before expiry\n * @param expireTime\n * @returns\n */\nexport const getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return { hours: hourDiff, min: minuteDiff };\n};\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\n/**\n * Calculate the time remaining before expiry and return the alert type based on that\n * @param expireTime\n * @returns\n * \"info\" if time remaining > 24 hr\n * \"warning\" if time remaining >= 3 hr\n * \"danger\" if time remaining < 3hr\n */\nexport const warningType = (expireTime: Date): AlertType => {\n  let { hours } = getPendingTime(expireTime);\n  if (hours >= 24) {\n    return 'info';\n  } else if (hours >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\n/**\n * Simple reference resolver that works with references contained in the\n * same schema object\n * @param ref\n * @param schema\n * @returns\n */\nexport const resolveReference = (ref: string, schema: Record<string, any>) => {\n  const [_, ...pathArray] = ref.split('/');\n  return pathArray.reduce((prev, key) => prev && prev[key], schema);\n};\n\n/**\n * Get whatever the default value is for a given property in the given\n * schema recursively\n * @param propertyName\n * @param schema\n * @returns\n */\nexport const createDefaultFromSchema = (\n  propertyName: string,\n  schema: Record<string, any>\n) => {\n  const prop = schema.properties[propertyName];\n  if (typeof prop === 'undefined') {\n    return undefined;\n  }\n  const definition = prop.$ref\n    ? resolveReference(prop.$ref, schema)\n    : schema.properties[propertyName];\n  if (!definition.properties) {\n    return definition.default;\n  }\n  const answer: any = {};\n  Object.keys(definition.properties).map((key) => {\n    const value = createDefaultFromSchema(key, {\n      $defs: schema.$defs,\n      ...(definition || {}),\n    });\n    if (typeof value !== 'undefined') {\n      answer[key] = value;\n    }\n  });\n  return answer;\n};\n\n/**\n * Returns a new object that does not contain empty objects as values\n * and leaves the passed in value untouched.\n * @param obj\n * @returns\n */\nexport const clearEmptyObjectValues = (obj: any): any => {\n  const answer: any = { ...obj };\n  Object.keys(answer).map((key) => {\n    const value = answer[key];\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      answer[key] = '';\n    }\n  });\n  return answer;\n};\n\n/**\n * Applies client-side workarounds to possible discrepencies in the configuration.\n *\n * Applies a default datashape value from the schema if the configuration object doesn't have one.\n *\n * @param schema\n * @param configuration\n * @returns\n */\nexport const patchConfigurationObject = (\n  schema: Record<string, any>,\n  configuration: { data_shape: any; [key: string]: any }\n) => {\n  const { data_shape: dataShape, ...rest } = configuration;\n  if (typeof dataShape === 'undefined') {\n    const dataShape = createDefaultFromSchema('data_shape', schema);\n    return { ...rest, ...(dataShape && { data_shape: dataShape }) };\n  }\n  return configuration;\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('serviceAccount')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('clientId')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { TFunction } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Popover bodyContent={content}>\n      <button\n        type=\"button\"\n        aria-label={`More info for ${name}`}\n        onClick={(e) => e.preventDefault()}\n        aria-describedby=\"form-group-label-info\"\n        className=\"pf-c-form__group-label-help\"\n      >\n        <HelpIcon noVerticalAlign />\n      </button>\n    </Popover>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  showCredentialHelpText: boolean;\n  duplicateMode: boolean;\n  t: TFunction<'translation', undefined>;\n\n  constructor(\n    schema: any,\n    validator: any,\n    t: TFunction<'translation', undefined>,\n    showCredentialHelpText: boolean,\n    duplicateMode: boolean\n  ) {\n    super(schema, validator);\n    this.t = t;\n    this.showCredentialHelpText = showCredentialHelpText;\n    this.duplicateMode = duplicateMode;\n  }\n\n  /**\n   * Returns the element properties for the named field.  Properties\n   * that should be excluded from DOM properties should be added to\n   * FilterDOMProps\n   * @param name\n   * @returns\n   */\n  getProps(name: string): any {\n    const { description, example, label, ...props } = super.getProps(name);\n    const { isSecret } = this.getField(name);\n    if (isSecret) {\n      return {\n        ...props,\n        ...(this.showCredentialHelpText && {\n          helperText: this.duplicateMode\n            ? this.t('credentialDuplicateFieldHelpText')\n            : this.t('credentialEditFieldHelpText'),\n        }),\n        labelIcon: getLabelIcon(label || name, description),\n        name,\n        label,\n        type: 'password',\n      };\n    }\n    return {\n      ...props,\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(label || name, description),\n      name,\n      label,\n    };\n  }\n\n  getField(name: string): Record<string, any> {\n    const { oneOf, ...field } = super.getField(name);\n    // use this to look at field information\n    /*\n    console.log(\n      'Complex type, name: ',\n      name,\n      ' oneOf: ',\n      oneOf,\n      ' field: ',\n      field\n    );\n    */\n    // Due to:\n    // https://uniforms.tools/docs/api-bridges/#note-on-allofanyofoneof\n    // we need to pick the appropriate type for the form, let's use the\n    // schema to guide these choices.\n    if (typeof oneOf !== 'undefined') {\n      // credentials are either a string field or an opaque object, for\n      // forms let's pick the string field and override it to a password\n      // We are assuming that the schema is consistent here\n      const [asString] = oneOf;\n      return {\n        ...asString,\n        name,\n        required: field.required,\n        type: asString.format,\n        isSecret: asString.format === 'password',\n      };\n    } else {\n      return { name, ...field };\n    }\n  }\n}\n","import { createValidator } from '@utils/createValidator';\nimport { clearEmptyObjectValues } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  duplicateMode?: boolean;\n  editMode?: boolean;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, duplicateMode, editMode, onChange }) => {\n    const { t } = useTranslation();\n    schema.type = schema.type || 'object';\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(\n      schema,\n      schemaValidator,\n      t,\n      duplicateMode || editMode || false,\n      duplicateMode || false\n    );\n\n    const onChangeModel = async (model: any) => {\n      // schemaValidator returns null when there's no errors in the form\n      const errors = schemaValidator(model);\n      // handy for seeing form validation problems\n      // console.log(\"onChangeModel, form validation errors: \", errors);\n      onChange(model, errors === null);\n    };\n\n    // no need to create form elements for error_handler, processors or steps\n    const { error_handler, processors, steps, ...properties } =\n      bridge.schema.properties;\n    // this is great for diagnosing form rendering problems\n    // console.log('properties: ', properties, ' configuration: ', configuration);\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={clearEmptyObjectValues(configuration)}\n          onChangeModel={(model: any) => onChangeModel(model)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(properties).map((key) => (\n            <AutoField key={key} name={key} />\n          ))}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport {\n  clearEmptyObjectValues,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport './ConfigurationStep.css';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = patchConfigurationObject(\n    schema,\n    clearEmptyObjectValues(JSON.parse(JSON.stringify(configuration)))\n  );\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  const getFieldViewComponent = (\n    propertyKey: string,\n    propertyDefinition: {\n      title?: string;\n      type?: string;\n      oneOf?: Array<{ format: string }>;\n    },\n    value: any\n  ): React.ReactNode => {\n    const { title, type, oneOf } = propertyDefinition;\n    // a good place to start troubleshooting problems in the detail view\n    /*\n    console.log(\n      'getViewComponent, propertyName: ',\n      propertyName,\n      ' propertyDefinition: ',\n      propertyDefinition,\n      ' value: ',\n      value\n    );\n    */\n    const propertyNameFallback = _.capitalize(propertyKey.replace('_', ' '));\n    const noPropertySet = (name: string) => (\n      <Text className={'connector-detail__field_view_no_value'}>\n        {t('propertyNotConfigured', { name })}\n      </Text>\n    );\n    // Use the schema to determine the best way to\n    // represent the data\n    switch (type) {\n      case 'object':\n        if (propertyKey === 'data_shape') {\n          return <DataShape data={value} />;\n        }\n        if (value) {\n          return (\n            <Text component={TextVariants.pre}>{JSON.stringify(value)}</Text>\n          );\n        }\n        return noPropertySet(title || propertyNameFallback);\n      case 'boolean':\n        if (typeof value !== 'undefined') {\n          return <Text>{JSON.stringify(value)}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n      default:\n        if (typeof oneOf !== 'undefined') {\n          // we are assuming the schema is consistent here\n          const [def] = oneOf;\n          if (def.format === 'password') {\n            return <Text>**************************</Text>;\n          }\n        }\n        if (typeof value !== 'undefined') {\n          return <Text>{value}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n    }\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('connectorSpecific')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration}\n          onChange={onChange}\n          editMode={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {getFieldViewComponent(\n                  key,\n                  schema.properties[key],\n                  formConfiguration[key]\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler | undefined;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(\n      configuration\n        ? Object.keys(configuration)[0]\n        : Object.keys(error_handler.default)[0]\n    );\n    if (\n      configuration &&\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport { ConnectorConfiguratorComponent } from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearEmptyObjectValues, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-update-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-update-success',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConnectorConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConnectorConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = clearEmptyObjectValues(\n      JSON.parse(JSON.stringify(configuration))\n    );\n  }\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      isViewMode={!isEditMode}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport './ConnectorInfoTextList.css';\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  namespaceMsg?: string | undefined;\n  namespaceMsgVariant: AlertType;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    namespaceMsg,\n    namespaceMsgVariant,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const [failureReasonExpand, setFailureReasonExpand] = React.useState(false);\n    const getFailureReason = (value: string): ReactNode => {\n      if ((value as string).length > 200) {\n        return (\n          <>\n            {!failureReasonExpand && (value as string).length > 200\n              ? (value as string).substring(0, 200) + '... '\n              : value}\n\n            <Button\n              onClick={() => setFailureReasonExpand(!failureReasonExpand)}\n              variant={'link'}\n            >\n              {failureReasonExpand ? t('viewLess') : t('viewMore')}\n            </Button>\n          </>\n        );\n      }\n      return value;\n    };\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {title === t('failureReason')\n                ? getFailureReason(value as string)\n                : value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {namespaceMsg &&\n            textListItem(\n              t(''),\n              <Alert\n                customIcon={<OutlinedClockIcon />}\n                className=\"my-class\"\n                variant={namespaceMsgVariant}\n                isInline\n                isPlain\n                title={namespaceMsg}\n              />\n            )}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Hint,\n  HintBody,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const getNamespaceData = useCallback((data) => {\n    setNamespaceData(data as ConnectorNamespace);\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-overview-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const getConnectorExpireAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredMsg');\n    }\n    return t('connectorExpire', { hours, min });\n  };\n\n  const getConnectorExpireInlineAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredInline');\n    }\n    return t('connectorExpireInline', { hours, min });\n  };\n\n  useEffect(() => {\n    getNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      namespaceId: connectorData?.namespace_id!,\n    })(getNamespaceData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      {namespaceData?.expiration && (\n        <Alert\n          customIcon={<ClockIcon />}\n          className=\"pf-u-mb-md\"\n          variant={warningType(new Date(namespaceData?.expiration!))}\n          isInline\n          title={getConnectorExpireAlert(namespaceData?.expiration!)}\n        />\n      )}\n      {connectorData?.status?.state === 'failed' && (\n        <Hint className=\"pf-u-mb-md\">\n          <HintBody>\n            <p>{t('previewModeMsg')}</p>\n            <Trans i18nKey={'supportEmailMsg'}>\n              You can still get help by emailing us at\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                rhosak-eval-support@redhat.com\n              </ClipboardCopy>\n              . This mailing list is monitored by the Red Hat OpenShift\n              Application Services team.\n            </Trans>\n          </HintBody>\n        </Hint>\n      )}\n\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={connectorData?.kafka?.id}\n        namespaceId={\n          namespaceData ? namespaceData.name : connectorData?.namespace_id!\n        }\n        namespaceMsg={\n          namespaceData?.expiration &&\n          getConnectorExpireInlineAlert(namespaceData?.expiration!)\n        }\n        namespaceMsgVariant={\n          namespaceData?.expiration\n            ? warningType(new Date(namespaceData?.expiration!))\n            : undefined\n        }\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-details-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'}>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={'/'}>{t('connectorsInstances')}</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              desiredState={connectorData?.desired_state!}\n              name={connectorData?.name!}\n              state={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useConnectorsMachine } from '@app/pages/ConnectorsPage/ConnectorsPageContext';\nimport React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownSeparator,\n} from '@patternfly/react-core';\n\ntype connectorActionsMenuProps = {\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorActionsMenu: FunctionComponent<connectorActionsMenuProps> =\n  ({ onConnectorDetail, onDuplicateConnector }) => {\n    const { response, selectedConnector } = useConnectorsMachine();\n\n    const currentConnectorRef = response?.items?.filter((ref: any) => {\n      return ref.id == `connector-${selectedConnector?.id}`;\n    })[0];\n\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n      useState(false);\n\n    const {\n      connector,\n      canStart,\n      canStop,\n      canDelete,\n      onStart,\n      onStop,\n      onDelete,\n    } = useConnector(currentConnectorRef as ConnectorMachineActorRef);\n\n    const onToggle = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n    };\n    const onSelect = (\n      _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n    ) => {\n      setIsOpen(!isOpen);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById('connector-action');\n      element?.focus();\n    };\n    const doCancelDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n      onDelete();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key=\"start action\"\n        component=\"button\"\n        onClick={onStart}\n        isDisabled={!canStart}\n      >\n        {t('Start')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"stop action\"\n        component=\"button\"\n        onClick={onStop}\n        isDisabled={!canStop}\n      >\n        {t('Stop')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"edit action\"\n        component=\"button\"\n        onClick={() => onConnectorDetail(connector.id!, 'configuration')}\n      >\n        {t('Edit')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"Duplicate action\"\n        component=\"button\"\n        onClick={() => onDuplicateConnector(connector.id!)}\n      >\n        {t('Duplicate')}\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem\n        key=\"delete action\"\n        component=\"button\"\n        onClick={() => setShowDeleteConnectorConfirm(true)}\n        isDisabled={!canDelete}\n      >\n        {t('Delete')}\n      </DropdownItem>,\n    ];\n    return (\n      <>\n        <DialogDeleteConnector\n          connectorName={connector.name}\n          showDialog={showDeleteConnectorConfirm}\n          onCancel={doCancelDeleteConnector}\n          onConfirm={doDeleteConnector}\n        />\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </>\n    );\n  };\n","import { getNamespace } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Hint,\n  HintBody,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorActionsMenu } from '../ConnectorActions/ConnectorActionsMenu';\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  currentConnectorRef,\n  children,\n  connector,\n  onClose,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n              currentConnectorRef={currentConnectorRef}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    currentConnectorRef,\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    status,\n    error,\n    onClose,\n    onConnectorDetail,\n    onDuplicateConnector,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n\n    const { connectorsApiBasePath, getToken } = useCos();\n\n    const alert = useAlert();\n\n    const getNamespaceData = useCallback((data) => {\n      setNamespaceData(data as ConnectorNamespace);\n    }, []);\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    useEffect(() => {\n      getNamespace({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        namespaceId: namespaceId,\n      })(getNamespaceData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [namespaceId]);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const { connector } = useConnector(\n      currentConnectorRef as ConnectorMachineActorRef\n    );\n\n    React.useEffect(() => {\n      if (connector.status?.state == 'deleted') {\n        onClose();\n      }\n    }, [connector, onClose]);\n\n    const getConnectorExpireAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredMsg');\n      }\n      return t('connectorExpire', { hours, min });\n    };\n\n    const getConnectorExpireInlineAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredInline');\n      }\n      return t('connectorExpireInline', { hours, min });\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus\n                  desiredState={connector.desired_state!}\n                  name={name}\n                  state={connector.status?.state!}\n                />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n\n          <DrawerActions>\n            <ConnectorActionsMenu\n              onDuplicateConnector={onDuplicateConnector}\n              onConnectorDetail={onConnectorDetail}\n              onClose={onClose}\n            />\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        {status === 'failed' && (\n          <Hint className=\"pf-u-mr-lg pf-u-ml-lg pf-u-p-md\">\n            <HintBody>\n              <p>{t('previewModeMsg')}</p>\n              <Trans i18nKey={'supportEmailMsg'}>\n                You can still get help by emailing us at\n                <ClipboardCopy\n                  hoverTip=\"Copy\"\n                  clickTip=\"Copied\"\n                  variant=\"inline-compact\"\n                >\n                  rhosak-eval-support@redhat.com\n                </ClipboardCopy>\n                . This mailing list is monitored by the Red Hat OpenShift\n                Application Services team.\n              </Trans>\n            </HintBody>\n          </Hint>\n        )}\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              {namespaceData?.expiration && (\n                <Alert\n                  customIcon={<ClockIcon />}\n                  className=\"pf-u-mt-md\"\n                  variant={warningType(new Date(namespaceData?.expiration!))}\n                  isInline\n                  title={getConnectorExpireAlert(namespaceData?.expiration!)}\n                />\n              )}\n\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={kafkaId}\n                  namespaceId={namespaceData ? namespaceData.name : namespaceId}\n                  namespaceMsg={\n                    namespaceData?.expiration &&\n                    getConnectorExpireInlineAlert(namespaceData?.expiration!)\n                  }\n                  namespaceMsgVariant={\n                    namespaceData?.expiration\n                      ? warningType(new Date(namespaceData?.expiration!))\n                      : undefined\n                  }\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={new Date(connector.modified_at!)}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { ClipboardCopy, Text, TextVariants } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  desiredState: string;\n  name: string;\n  type: string;\n  category: string;\n  state: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  desiredState,\n  name,\n  type,\n  state,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicate'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        {state?.toLowerCase() === 'failed' ? (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n            clickable={true}\n            popoverBody={\n              <div>\n                <p>{t('previewModeMsg')}</p>\n                <Trans i18nKey={'supportEmailMsg'}>\n                  You can still get help by emailing us at\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"inline-compact\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    rhosak-eval-support@redhat.com\n                  </ClipboardCopy>\n                  . This mailing list is monitored by the Red Hat OpenShift\n                  Application Services team.\n                </Trans>\n              </div>\n            }\n            popoverHeader={\n              <h1 className=\"connectors-failed_pop_over\">\n                <ExclamationCircleIcon /> {t('failed')}\n              </h1>\n            }\n          />\n        ) : (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n          />\n        )}\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n    {\n      title: '20',\n      value: 20,\n    },\n    {\n      title: '50',\n      value: 50,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const toolbarItems = (\n    <>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('clearAllFilters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  const currentConnectorRef = response?.items?.filter((ref) => {\n    return ref.id == `connector-${selectedConnector?.id}`;\n  })[0];\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart(t('connectors-getting-started'))\n          }\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          currentConnectorRef={currentConnectorRef as ConnectorMachineActorRef}\n          connector={selectedConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        desiredState={connector.desired_state!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        state={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  isViewMode?: boolean;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        {},\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst deselectNamespace = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  {},\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: deselectNamespace,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid:\n                    context.duplicateMode ||\n                    context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedNamespace !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedNamespace !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorNamespace, {}, ConnectorNamespace>(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorNamespace, {}, ConnectorNamespace>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    namespaceRef.send({ type: 'deselectNamespace' });\n  }, [namespaceRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-service-account',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      setLoading(true);\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n              >\n                {t('create')}\n              </Button>,\n              <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport {\n  clearEmptyObjectValues,\n  mapToObject,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector, connectorData } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n        connectorData: state.context.connectorData,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    const defaultEntries = JSON.parse(JSON.stringify(connectorData?.connector));\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(mapToObject(configuration)),\n      };\n    } else {\n      combineConfiguration = {\n        ...defaultEntries,\n        ...clearEmptyObjectValues(configuration),\n      };\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      isViewMode={duplicateMode && false}\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  const schema = (connector as ConnectorTypeAllOf).schema!;\n  const initialConfiguration = patchConfigurationObject(schema, {} as any);\n  return (\n    <JsonSchemaConfigurator\n      schema={schema}\n      configuration={\n        configuration\n          ? patchConfigurationObject(schema, configuration as any)\n          : initialConfiguration\n      }\n      duplicateMode={duplicateMode || false}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n    configurationSteps,\n    activeConfigurationStep,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n          configurationSteps: state.context.configurationSteps,\n          activeConfigurationStep: state.context.activeConfigurationStep,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={\n        typeof configurationSteps === 'object' &&\n        activeConfigurationStep !== undefined\n          ? t(configurationSteps[activeConfigurationStep])\n          : t('connectorSpecific')\n      }\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title={t('duplicateAlertConnectorType')}\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          <CardHeader>\n                            <CardTitle>\n                              {\n                                (connectorTypeDetails as ConnectorTypeAllOf)\n                                  .name\n                              }\n                            </CardTitle>\n                          </CardHeader>\n                          <CardBody>\n                            <DescriptionList>\n                              {/* <DescriptionListGroup>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup> */}\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  {t('version')}\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>ID</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {(connectorTypeDetails as ObjectReference).id}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            <CardHeader>\n                              <CardTitle>\n                                {(c as ConnectorTypeAllOf).name}\n                              </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                              <DescriptionList>\n                                {/* <DescriptionListGroup>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup> */}\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    {t('version')}\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>ID</DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ObjectReference).id}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption\n      key=\"sink\"\n      value=\"sink\"\n      description={t('shortDescriptionSink')}\n    >\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption\n      key=\"source\"\n      value=\"source\"\n      description={t('shortDescriptionSource')}\n    >\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(page, size) =>\n              onQuery({ page, size, query: request.query || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (page: number, size: number) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={onChange}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  useEffect(() => {\n    errorHandler ?? onSetErrorHandler(Object.keys(error_handler['default'])[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [kafkaExpired, setKafkaExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setKafkaExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={() => {\n                  window.open(\n                    'https://console.redhat.com/application-services/streams/kafkas',\n                    '_blank'\n                  );\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && kafkaExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertKafka')}\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://console.redhat.com/application-services/streams/kafkas\"\n            target=\"_blank\"\n          >\n            {t('createKafkaInstance')}\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Tooltip content={<div>{t('namespaceEnabledTooltip')}</div>}>\n            <Button variant=\"primary\" onClick={onModalToggle}>\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`preview-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'preview-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'preview-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Spinner,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClockIcon, FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n  const [namespaceExpired, setNamespaceExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    selectedId,\n    duplicateMode,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const getEvalNamespaceAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('evalNamespaceExpiredMsg');\n    }\n    return t('evalNamespaceExpire', { hours, min });\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setNamespaceExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && namespaceExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertNamespace')}\n                    />\n                  )}\n\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      customIcon={<ClockIcon />}\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {getEvalNamespaceAlert(evalInstance.expiration!)}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <Alert\n                                    variant=\"info\"\n                                    customIcon={\n                                      <Spinner\n                                        size=\"md\"\n                                        aria-label={t('Provisioning')}\n                                        aria-valuetext=\"Please wait...\"\n                                      />\n                                    }\n                                    isInline\n                                    isPlain\n                                    title={t('Provisioning')}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('accessKey') ||\n                      _.startCase(el) === t('secretKey') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('databasePassword') ||\n                      _.startCase(el) === t('password') ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  TextContent,\n  Modal,\n  PageSection,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorTypeAllOf>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-duplicate-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorTypeAllOf);\n    }, []);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <TextContent className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n            {connectorData && connectorTypeDetails ? (\n              <Text>\n                <strong>{t('Connector')}: </strong>\n                {connectorTypeDetails.name}\n              </Text>\n            ) : null}\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={true}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('leaveDuplicateConnectorConfirmModalTitle')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","getNamespace","namespaceId","namespacesAPI","ConnectorNamespacesApi","getConnectorNamespace","ConnectorStatus","desiredState","name","state","clickable","popoverBody","popoverHeader","Split","className","hasGutter","SplitItem","ConnectorStatusIcon","isFilled","ConnectorStatusLabel","toLowerCase","Popover","position","PopoverPosition","hideOnOutsideClick","headerContent","bodyContent","Button","variant","isInline","convertToLabel","Stack","StackItem","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","undefined","capitalize","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","fetchConfigurator","connector","config","defaultConfig","Promise","resolve","steps","Configurator","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","default","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","id","split","maybeConf","reject","url","element","document","createElement","src","type","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","getPendingTime","expireTime","diff","getTime","hourDiff","Math","floor","hours","min","warningType","createDefaultFromSchema","propertyName","schema","prop","properties","definition","$ref","ref","_","pathArray","reduce","prev","resolveReference","answer","Object","keys","map","$defs","clearEmptyObjectValues","length","patchConfigurationObject","configuration","data_shape","dataShape","rest","StepBodyLayout","title","description","component","Level","LevelItem","Title","headingLevel","CommonStep","editMode","changeIsValid","onUpdateConfiguration","t","useTranslation","Form","FormGroup","label","isRequired","fieldId","labelIcon","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","service_account","client_id","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","model","errors","details","getLabelIcon","content","CustomJsonSchemaBridge","constructor","showCredentialHelpText","duplicateMode","super","this","getProps","example","props","isSecret","getField","helperText","exampleText","oneOf","field","asString","required","format","JsonSchemaConfigurator","schemaValidator","bridge","error_handler","processors","Grid","KameletForm","onChangeModel","AutoField","Auto","parent","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","JSON","parse","stringify","isValid","entries","filter","includes","replace","propertyKey","propertyDefinition","propertyNameFallback","noPropertySet","DataShape","def","getFieldViewComponent","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","JSONSchemaBridge","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","r","push","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","hasShadowTop","connectorUpdate","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","actions","activeStep","isViewMode","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceMsg","namespaceMsgVariant","createdAt","modifiedAt","failureReasonExpand","setFailureReasonExpand","textListItem","TextListItem","TextListItemVariants","substring","getFailureReason","TextContent","TextList","TextListVariants","Alert","customIcon","OutlinedClockIcon","isPlain","date","dateTime","toISOString","OverviewPage","namespaceData","setNamespaceData","getNamespaceData","namespace_id","expiration","ClockIcon","getConnectorExpireAlert","status","Hint","HintBody","Trans","i18nKey","kafka","getConnectorExpireInlineAlert","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","Breadcrumb","BreadcrumbItem","Link","to","isActive","desired_state","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","assign","_context","event","connectorMachine","createMachine","initial","initialContext","states","verify","always","target","cond","ready","on","stopped","deleted","startingConnector","invoke","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","useConnector","canStart","canStop","canDelete","useSelector","transition","changed","onStart","send","onStop","onDelete","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","makePaginatedApiMachine","service","dataTransformer","options","request","page","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","items","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","ConnectorActionsMenu","onConnectorDetail","onDuplicateConnector","currentConnectorRef","setIsOpen","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","onFocus","getElementById","focus","DropdownItem","DropdownSeparator","Dropdown","toggle","KebabToggle","DropdownPosition","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","Flex","FlexItem","spacer","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","openDetail","isSeparator","Td","dataLabel","isVisitedLink","stopPropagation","Pagination","itemCount","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","toolbarItems","ToolbarGroup","ToolbarItem","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","EmptyStateNoMatchesFound","onClear","SearchIcon","ConnectedConnectorsPage","onCreateConnector","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","qsContext","QuickStartContext","ConnectorsPageTitle","Card","setActiveQuickStart","ConnectedTable","ConnectedRow","connectorRef","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientId","clientSecret","setName","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","version","isActiveStepValid","change","next","complete","changedStep","nextStep","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","configuratorLoaderMachine","onDone","failure","escalate","find","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","slice","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","s","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","client_secret","createConnector","saveConnector","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isNamespaceSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onDeselect","onQuery","onRefresh","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","validated","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroup","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","helperTextInvalid","test","StepCommon","onSetName","useBasicMachine","defaultEntries","combineConfiguration","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Gallery","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","isHoverable","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","toggleGroupItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","kafkaExpired","setKafkaExpired","KafkaToolbar","open","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","DropdownToggle","showToolbarItem","placeholder","href","KafkasPagination","EmptyStateNoNamespace","onModalToggle","Tooltip","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","registerEvalNamespace","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","setIsModalOpen","evalInstance","setEvalInstance","namespaceExpired","setNamespaceExpired","getEvalNamespaceAlert","tenant","ClustersToolbar","isEvalPresent","cluster_id","searchInputRef","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","hasShadowBottom","DuplicateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}