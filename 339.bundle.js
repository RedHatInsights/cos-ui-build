"use strict";(self.webpackChunkcos_ui=self.webpackChunkcos_ui||[]).push([[339,496],{25375:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"AppFederated\": () => (/* binding */ AppFederated),\n  \"default\": () => (/* binding */ src_AppFederated)\n});\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(70655);\n// EXTERNAL MODULE: consume shared module (default) react@=17.0.2 (singleton) (fallback: ./node_modules/react/index.js) (eager)\nvar index_js_eager_ = __webpack_require__(75418);\nvar index_js_eager_default = /*#__PURE__*/__webpack_require__.n(index_js_eager_);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/I18nextProvider.js\nvar I18nextProvider = __webpack_require__(6339);\n// EXTERNAL MODULE: consume shared module (default) react-router-dom@=5.2.1 (singleton) (fallback: ./node_modules/react-router-dom/esm/react-router-dom.js) (eager)\nvar react_router_dom_js_eager_ = __webpack_require__(98068);\n// EXTERNAL MODULE: consume shared module (default) @rhoas/app-services-ui-shared@=0.14.1 (singleton) (fallback: ./node_modules/@rhoas/app-services-ui-shared/dist/esm/index.js) (eager)\nvar esm_index_js_eager_ = __webpack_require__(11272);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/useTranslation.js\nvar useTranslation = __webpack_require__(26793);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Page/PageSection.js\nvar PageSection = __webpack_require__(32045);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js\nvar Card = __webpack_require__(32203);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Text/TextContent.js\nvar TextContent = __webpack_require__(68774);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js\nvar Title = __webpack_require__(60485);\n// EXTERNAL MODULE: consume shared module (default) @xstate/react@=1.6.1 (strict) (fallback: ./node_modules/@xstate/react/es/index.js)\nvar index_js_ = __webpack_require__(92563);\n// EXTERNAL MODULE: ./node_modules/xstate/lib/actions.js\nvar actions = __webpack_require__(41428);\n// EXTERNAL MODULE: ./node_modules/xstate/lib/model.js\nvar lib_model = __webpack_require__(66310);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n// EXTERNAL MODULE: ./node_modules/@rhoas/connector-management-sdk/dist/index.js\nvar dist = __webpack_require__(47570);\n// EXTERNAL MODULE: ./node_modules/@rhoas/kafka-management-sdk/dist/index.js\nvar kafka_management_sdk_dist = __webpack_require__(77834);\n;// CONCATENATED MODULE: ./src/api.ts\n\n\n\nconst startConnector = ({ accessToken, basePath, connector, }) => {\n    const apisService = new dist.ConnectorsApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (callback) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        apisService\n            .patchConnector(connector.id, {\n            desired_state: 'ready',\n        }, undefined, {\n            cancelToken: source.token,\n            headers: {\n                'Content-type': 'application/merge-patch+json',\n            },\n        })\n            .then((response) => {\n            callback({\n                type: 'connector.actionSuccess',\n                connector: response.data,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                callback({\n                    type: 'connector.actionError',\n                    error: error.response.data.reason,\n                });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst stopConnector = ({ accessToken, basePath, connector, }) => {\n    const apisService = new dist.ConnectorsApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (callback) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        apisService\n            .patchConnector(connector.id, {\n            desired_state: 'stopped',\n        }, undefined, {\n            cancelToken: source.token,\n            headers: {\n                'Content-type': 'application/merge-patch+json',\n            },\n        })\n            .then((response) => {\n            callback({\n                type: 'connector.actionSuccess',\n                connector: response.data,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                callback({\n                    type: 'connector.actionError',\n                    error: error.response.data.reason,\n                });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst deleteConnector = ({ accessToken, basePath, connector, }) => {\n    const apisService = new dist.ConnectorsApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (callback) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        apisService\n            .deleteConnector(connector.id, undefined, {\n            cancelToken: source.token,\n        })\n            .then(() => {\n            callback({\n                type: 'connector.actionSuccess',\n                connector: Object.assign(Object.assign({}, connector), { status: 'deleting', desired_state: 'deleted' }),\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                callback({\n                    type: 'connector.actionError',\n                    error: error.response.data.reason,\n                });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst fetchConnectors = ({ accessToken, basePath, }) => {\n    const apisService = new dist.ConnectorsApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (request, onSuccess, onError) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        const { page, size /*, name = '' */ } = request;\n        // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n        apisService\n            .listConnectors(`${page}`, `${size}`, undefined, {\n            cancelToken: source.token,\n        })\n            .then((response) => {\n            onSuccess({\n                items: response.data.items || [],\n                total: response.data.total,\n                page: response.data.page,\n                size: response.data.size,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                onError({ error: error.message, page: request.page });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst fetchClusters = ({ accessToken, basePath, }) => {\n    const apisService = new dist.ConnectorClustersApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (request, onSuccess, onError) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        const { page, size } = request;\n        apisService\n            .listConnectorClusters(`${page}`, `${size}`, {\n            cancelToken: source.token,\n        })\n            .then((response) => {\n            onSuccess({\n                items: response.data.items || [],\n                total: response.data.total,\n                page: response.data.page,\n                size: response.data.size,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                onError({ error: error.message, page: request.page });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst fetchConnectorTypes = ({ accessToken, basePath, }) => {\n    const apisService = new dist.ConnectorTypesApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (request, onSuccess, onError) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        const { page, size, query } = request;\n        const { name, categories = [] } = query || {};\n        apisService\n            .listConnectorTypes('1', '1000', {\n            cancelToken: source.token,\n        })\n            .then((response) => {\n            const lcName = name ? name.toLowerCase() : undefined;\n            const rawItems = response.data.items || [];\n            let filteredItems = lcName\n                ? rawItems === null || rawItems === void 0 ? void 0 : rawItems.filter((c) => { var _a; return (_a = c.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(lcName); })\n                : rawItems;\n            filteredItems =\n                categories.length > 0\n                    ? filteredItems === null || filteredItems === void 0 ? void 0 : filteredItems.filter((c) => {\n                        var _a;\n                        return (((_a = c.labels) === null || _a === void 0 ? void 0 : _a.filter((l) => categories.includes(l))) || [])\n                            .length > 0;\n                    })\n                    : filteredItems;\n            const total = filteredItems.length;\n            const offset = (page - 1) * size;\n            const items = filteredItems.slice(offset, offset + size);\n            onSuccess({\n                items,\n                total,\n                page,\n                size,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                onError({ error: error.message, page: request.page });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst fetchKafkaInstances = ({ accessToken, basePath, }) => {\n    // TODO: remove after demo\n    basePath = 'https://api.openshift.com';\n    const apisService = new kafka_management_sdk_dist.DefaultApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (request, onSuccess, onError) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        const { page, size, query } = request;\n        const { name, statuses, owner, cloudProviders, regions } = query || {};\n        const nameSearch = name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n        const ownerSearch = owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n        const statusSearch = statuses && statuses.length > 0\n            ? statuses.map((s) => `status = ${s}`).join(' OR ')\n            : undefined;\n        const cloudProviderSearch = cloudProviders && cloudProviders.length > 0\n            ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n            : undefined;\n        const regionSearch = regions && regions.length > 0\n            ? regions.map((s) => `region = ${s}`).join(' OR ')\n            : undefined;\n        const search = [\n            nameSearch,\n            ownerSearch,\n            statusSearch,\n            cloudProviderSearch,\n            regionSearch,\n        ]\n            .filter(Boolean)\n            .map((s) => `(${s})`)\n            .join(' AND ');\n        apisService\n            .getKafkas(`${page}`, `${size}`, undefined, search, {\n            cancelToken: source.token,\n        })\n            .then((response) => {\n            onSuccess({\n                items: response.data.items || [],\n                total: response.data.total,\n                page: response.data.page,\n                size: response.data.size,\n            });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                onError({ error: error.message, page: request.page });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\nconst saveConnector = ({ accessToken, basePath, kafka, cluster, connectorType, configuration, name, userServiceAccount, }) => {\n    const apisService = new dist.ConnectorsApi(new dist.Configuration({\n        accessToken,\n        basePath,\n    }));\n    return (callback) => {\n        const CancelToken = (axios_default()).CancelToken;\n        const source = CancelToken.source();\n        const async = true;\n        const connector = {\n            kind: 'Connector',\n            metadata: {\n                name,\n                kafka_id: kafka.id,\n            },\n            deployment_location: {\n                kind: 'addon',\n                cluster_id: cluster.id,\n            },\n            connector_type_id: connectorType.id,\n            kafka: {\n                bootstrap_server: kafka.bootstrap_server_host || 'demo',\n                client_id: userServiceAccount === null || userServiceAccount === void 0 ? void 0 : userServiceAccount.clientId,\n                client_secret: userServiceAccount === null || userServiceAccount === void 0 ? void 0 : userServiceAccount.clientSecret,\n            },\n            connector_spec: configuration,\n        };\n        apisService\n            .createConnector(async, connector, {\n            cancelToken: source.token,\n        })\n            .then(() => {\n            callback({ type: 'success' });\n        })\n            .catch((error) => {\n            if (!axios_default().isCancel(error)) {\n                callback({ type: 'failure', message: error.response.data.reason });\n            }\n        });\n        return () => {\n            source.cancel('Operation canceled by the user.');\n        };\n    };\n};\n\n;// CONCATENATED MODULE: ./src/Connector.machine.ts\n\n\n\n\n\nconst model = (0,lib_model.createModel)({\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    connector: {},\n}, {\n    events: {\n        'connector.start': () => ({}),\n        'connector.stop': () => ({}),\n        'connector.remove': () => ({}),\n        'connector.select': () => ({}),\n        'connector.actionSuccess': (payload) => payload,\n        'connector.actionError': (payload) => payload,\n    },\n    actions: {\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        notifySelect: ({ connector }) => ({\n            connector,\n        }),\n    },\n});\nconst updateState = model.assign((_context, event) => ({\n    connector: event.connector,\n}), 'connector.actionSuccess');\nconst connectorMachine = model.createMachine({\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n        verify: {\n            always: [\n                { target: 'ready', cond: 'isReady' },\n                { target: 'stopped', cond: 'isStopped' },\n                { target: 'deleted', cond: 'isDeleted' },\n            ],\n        },\n        ready: {\n            on: {\n                'connector.stop': 'stoppingConnector',\n                'connector.remove': 'deletingConnector',\n            },\n        },\n        stopped: {\n            on: {\n                'connector.start': 'startingConnector',\n                'connector.remove': 'deletingConnector',\n            },\n        },\n        deleted: {},\n        startingConnector: {\n            invoke: {\n                id: 'startingConnectorCb',\n                src: (context) => startConnector({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    connector: context.connector,\n                }),\n            },\n            on: {\n                'connector.actionSuccess': {\n                    target: 'verify',\n                    actions: [updateState, 'notifySuccess'],\n                },\n                'connector.actionError': {\n                    target: 'verify',\n                    actions: 'notifyError',\n                },\n            },\n        },\n        stoppingConnector: {\n            invoke: {\n                id: 'stoppingConnectorCb',\n                src: (context) => stopConnector({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    connector: context.connector,\n                }),\n            },\n            on: {\n                'connector.actionSuccess': {\n                    target: 'verify',\n                    actions: ['updateState', 'notifySuccess'],\n                },\n                'connector.actionError': {\n                    target: 'verify',\n                    actions: 'notifyError',\n                },\n            },\n        },\n        deletingConnector: {\n            invoke: {\n                id: 'deletingConnectorCb',\n                src: (context) => deleteConnector({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    connector: context.connector,\n                }),\n            },\n            on: {\n                'connector.actionSuccess': {\n                    target: 'deleted',\n                    actions: ['updateState', 'notifySuccess'],\n                },\n                'connector.actionError': {\n                    target: 'verify',\n                    actions: 'notifyError',\n                },\n            },\n        },\n    },\n    on: {\n        'connector.select': {\n            actions: 'notifySelect',\n        },\n    },\n}, {\n    guards: {\n        isReady: (context) => context.connector.desired_state === 'ready',\n        isStopped: (context) => context.connector.desired_state === 'stopped',\n        isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n        notifySuccess: (0,actions.sendParent)('actionSuccess'),\n        notifyError: (0,actions.sendParent)('actionFailure'),\n        notifySelect: (0,actions.sendParent)(({ connector }) => ({\n            type: 'selectConnector',\n            connector,\n        })),\n    },\n});\nconst makeConnectorMachine = (context) => connectorMachine.withContext(context);\nconst useConnector = (ref) => {\n    const { connector, canStart, canStop, canDelete } = (0,index_js_.useSelector)(ref, (0,index_js_eager_.useCallback)((state) => ({\n        connector: state.context.connector,\n        canStart: connectorMachine.transition(state, 'connector.start').changed ===\n            true,\n        canStop: connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete: connectorMachine.transition(state, 'connector.remove').changed ===\n            true,\n    }), [ref]));\n    const onStart = (0,index_js_eager_.useCallback)(() => ref.send({ type: 'connector.start' }), [ref]);\n    const onStop = (0,index_js_eager_.useCallback)(() => ref.send({ type: 'connector.stop' }), [ref]);\n    const onDelete = (0,index_js_eager_.useCallback)(() => ref.send({ type: 'connector.remove' }), [ref]);\n    const onSelect = (0,index_js_eager_.useCallback)(() => ref.send({ type: 'connector.select' }), [ref]);\n    return {\n        connector,\n        canStart,\n        canStop,\n        canDelete,\n        onStart,\n        onStop,\n        onDelete,\n        onSelect,\n    };\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js\nvar Drawer = __webpack_require__(5436);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js\nvar DrawerContent = __webpack_require__(78135);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js\nvar TextListItem = __webpack_require__(78140);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js\nvar DrawerPanelContent = __webpack_require__(16941);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js\nvar DrawerHead = __webpack_require__(58409);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Text/Text.js\nvar Text = __webpack_require__(68340);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js\nvar Flex = __webpack_require__(28191);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js\nvar FlexItem = __webpack_require__(92298);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerActions.js\nvar DrawerActions = __webpack_require__(76770);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerCloseButton.js\nvar DrawerCloseButton = __webpack_require__(28985);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js\nvar DrawerPanelBody = __webpack_require__(29821);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js\nvar Tabs = __webpack_require__(14638);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js\nvar Tab = __webpack_require__(48099);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleText.js\nvar TabTitleText = __webpack_require__(29873);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js\nvar TextList = __webpack_require__(25834);\n;// CONCATENATED MODULE: ./src/ConnectorDrawer.css\n// extracted by mini-css-extract-plugin\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\nvar Spinner = __webpack_require__(2372);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js\nvar check_circle_icon = __webpack_require__(68778);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js\nvar exclamation_circle_icon = __webpack_require__(43047);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/pending-icon.js\nvar pending_icon = __webpack_require__(43957);\n;// CONCATENATED MODULE: ./src/ConnectorStatus.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/ConnectorStatus.tsx\n\n\n\n\n\nconst ConnectorStatus = ({ name, status, }) => {\n    const label = useConnectorStatusLabel(status);\n    return (index_js_eager_default().createElement(Flex/* Flex */.k, null,\n        index_js_eager_default().createElement(FlexItem/* FlexItem */.B, { spacer: { default: 'spacerSm' } },\n            index_js_eager_default().createElement(ConnectorStatusIcon, { name: name, status: status })),\n        index_js_eager_default().createElement(FlexItem/* FlexItem */.B, null, label)));\n};\nconst ConnectorStatusIcon = ({ name, status, }) => {\n    switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n        case 'ready':\n            return (index_js_eager_default().createElement(check_circle_icon/* CheckCircleIcon */.rE, { className: \"cos--connectors__table--icon--completed\" }));\n        case 'failed':\n            return (index_js_eager_default().createElement(exclamation_circle_icon/* ExclamationCircleIcon */.$O, { className: \"cos--connectors__table--icon--failed\" }));\n        case 'accepted':\n            return index_js_eager_default().createElement(pending_icon/* PendingIcon */.tu, null);\n        case 'provisioning':\n        case 'preparing':\n            return (index_js_eager_default().createElement(Spinner/* Spinner */.$, { size: \"md\", \"aria-label\": name, \"aria-valuetext\": \"Creation in progress\" }));\n        case 'deprovision':\n        case 'deleted':\n            return null;\n    }\n    return index_js_eager_default().createElement(pending_icon/* PendingIcon */.tu, null);\n};\nvar ConnectorStatuses;\n(function (ConnectorStatuses) {\n    ConnectorStatuses[\"Ready\"] = \"ready\";\n    ConnectorStatuses[\"Failed\"] = \"failed\";\n    ConnectorStatuses[\"Assigning\"] = \"assigning\";\n    ConnectorStatuses[\"Assigned\"] = \"assigned\";\n    ConnectorStatuses[\"Updating\"] = \"updating\";\n    ConnectorStatuses[\"Provisioning\"] = \"provisioning\";\n    ConnectorStatuses[\"Deleting\"] = \"deleting\";\n    ConnectorStatuses[\"Deleted\"] = \"deleted\";\n})(ConnectorStatuses || (ConnectorStatuses = {}));\nfunction useConnectorStatusLabel(status) {\n    var _a;\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const statusOptions = [\n        { value: ConnectorStatuses.Ready, label: t('Running') },\n        { value: ConnectorStatuses.Failed, label: t('Failed') },\n        { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n        { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n        { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n        { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n        { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n        { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n    ];\n    return ((_a = statusOptions.find((s) => s.value === status)) === null || _a === void 0 ? void 0 : _a.label) || status;\n}\n\n;// CONCATENATED MODULE: ./src/ConnectorDrawer.tsx\n\n\n\n\n\nconst ConnectorDrawer = ({ children, connector, onClose, }) => {\n    return (index_js_eager_default().createElement(Drawer/* Drawer */.dy, { isExpanded: connector !== undefined },\n        index_js_eager_default().createElement(DrawerContent/* DrawerContent */.s, { panelContent: connector ? (index_js_eager_default().createElement(ConnectorDrawerPanelContent, { name: connector.metadata.name, bootstrapServer: connector.kafka.bootstrap_server, kafkaId: connector.metadata.kafka_id, owner: connector.metadata.owner, cluster: connector.deployment_location\n                    .cluster_id, createdAt: new Date(connector.metadata.created_at), updatedAt: new Date(connector.metadata.updated_at), status: connector.status, onClose: onClose })) : undefined }, children)));\n};\nconst ConnectorDrawerPanelContent = ({ name, bootstrapServer, kafkaId, owner, cluster, createdAt, updatedAt, status, onClose, }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const [activeTabKey, setActiveTabKey] = (0,index_js_eager_.useState)(0);\n    const selectActiveKey = (_, eventKey) => {\n        setActiveTabKey(eventKey);\n    };\n    const textListItem = (title, value) => (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null, value && (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(TextListItem/* TextListItem */.T, { component: TextListItem/* TextListItemVariants.dt */.v.dt }, title),\n        index_js_eager_default().createElement(TextListItem/* TextListItem */.T, { component: TextListItem/* TextListItemVariants.dd */.v.dd }, value)))));\n    return (index_js_eager_default().createElement(DrawerPanelContent/* DrawerPanelContent */.S, { widths: { default: 'width_50' } },\n        index_js_eager_default().createElement(DrawerHead/* DrawerHead */.h, null,\n            index_js_eager_default().createElement(TextContent/* TextContent */.D, null,\n                index_js_eager_default().createElement(Text/* Text */.x, { component: Text/* TextVariants.small */.q.small, className: \"connector-drawer__header-text\" }, \"Connector name\"),\n                index_js_eager_default().createElement(Flex/* Flex */.k, null,\n                    index_js_eager_default().createElement(FlexItem/* FlexItem */.B, null,\n                        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h2', size: Title/* TitleSizes.xl */.H.xl, className: \"connector-drawer__header-title\" }, name)),\n                    index_js_eager_default().createElement(FlexItem/* FlexItem */.B, { spacer: { default: 'spacerSm' } },\n                        index_js_eager_default().createElement(ConnectorStatus, { name: name, status: status })))),\n            index_js_eager_default().createElement(DrawerActions/* DrawerActions */.x, null,\n                index_js_eager_default().createElement(DrawerCloseButton/* DrawerCloseButton */.c, { onClick: onClose }))),\n        index_js_eager_default().createElement(DrawerPanelBody/* DrawerPanelBody */.F, null,\n            index_js_eager_default().createElement(Tabs/* Tabs */.m, { activeKey: activeTabKey, onSelect: selectActiveKey },\n                index_js_eager_default().createElement(Tab/* Tab */.O, { eventKey: 0, title: index_js_eager_default().createElement(TabTitleText/* TabTitleText */.T, null, t('Details')) },\n                    index_js_eager_default().createElement(\"div\", { className: \"connector-drawer__tab-content\" },\n                        index_js_eager_default().createElement(TextContent/* TextContent */.D, null,\n                            index_js_eager_default().createElement(TextList/* TextList */.G, { component: TextList/* TextListVariants.dl */.F.dl },\n                                textListItem('Bootstrap server', bootstrapServer),\n                                textListItem('Connector', name),\n                                textListItem('Kafka_instance', kafkaId),\n                                textListItem('Targeted OSD Cluster', cluster),\n                                textListItem('Owner', owner),\n                                textListItem('Time created', index_js_eager_default().createElement(\"time\", { title: t('{{date}}', { date: createdAt }), dateTime: createdAt.toISOString() }, t('{{ date, ago }}', { date: createdAt }))),\n                                textListItem('Time updated', index_js_eager_default().createElement(\"time\", { title: t('{{date}}', { date: updatedAt }), dateTime: updatedAt.toISOString() }, t('{{ date, ago }}', { date: updatedAt })))))))))));\n};\n\n// EXTERNAL MODULE: consume shared module (default) xstate@=4.25.0 (strict) (fallback: ./node_modules/xstate/es/index.js)\nvar es_index_js_ = __webpack_require__(45496);\n;// CONCATENATED MODULE: ./src/PaginatedResponse.machine.ts\n\n\n\n\n\nconst getPaginatedApiMachineEvents = () => ({\n    'api.refresh': () => ({}),\n    'api.nextPage': () => ({}),\n    'api.prevPage': () => ({}),\n    'api.query': (payload) => payload,\n    'api.setResponse': (payload) => payload,\n    'api.setError': (payload) => payload,\n    // notifyParent\n    'api.ready': () => ({}),\n    'api.loading': (payload) => payload,\n    'api.success': (payload) => payload,\n    'api.error': (payload) => payload,\n});\nfunction makePaginatedApiMachine(service, dataTransformer, options) {\n    const model = (0,lib_model.createModel)({\n        request: {\n            page: 1,\n            size: 10,\n        },\n        response: undefined,\n        pollingEnabled: (options === null || options === void 0 ? void 0 : options.pollingEnabled) || false,\n        onBeforeSetResponse: options === null || options === void 0 ? void 0 : options.onBeforeSetResponse,\n        dataTransformer,\n    }, {\n        events: Object.assign({}, getPaginatedApiMachineEvents()),\n        actions: {\n            notifyReady: () => ({}),\n            notifyLoading: () => ({}),\n            notifySuccess: () => ({}),\n            notifyError: () => ({}),\n            forwardUnknownEventsToParent: () => ({}),\n        },\n    });\n    const setResponse = model.assign((context, e) => {\n        var _a, _b;\n        if (e.page !== context.request.page)\n            return {};\n        if (context.onBeforeSetResponse) {\n            context.onBeforeSetResponse((_a = context.response) === null || _a === void 0 ? void 0 : _a.items);\n        }\n        return {\n            response: {\n                items: (_b = e.items) === null || _b === void 0 ? void 0 : _b.map((i) => context.dataTransformer(i)),\n                total: e.total,\n                error: undefined,\n            },\n        };\n    }, 'api.setResponse');\n    const fetch = model.assign((context) => {\n        if (context.actor && context.actor.stop) {\n            context.actor.stop();\n        }\n        // eslint-disable-next-line xstate/spawn-usage\n        const actor = (0,es_index_js_.spawn)(callApi(context));\n        return { actor };\n    });\n    const setError = model.assign((context, e) => {\n        var _a, _b;\n        if (e.page !== context.request.page)\n            return {};\n        return {\n            response: {\n                items: ((_a = context.response) === null || _a === void 0 ? void 0 : _a.items) || [],\n                total: ((_b = context.response) === null || _b === void 0 ? void 0 : _b.total) || 0,\n                error: e.error,\n            },\n        };\n    }, 'api.setError');\n    const increasePage = model.assign((context) => {\n        return {\n            request: Object.assign(Object.assign({}, context.request), { page: context.request.page + 1 }),\n        };\n    }, 'api.nextPage');\n    const decreasePage = model.assign((context) => {\n        return {\n            request: Object.assign(Object.assign({}, context.request), { page: context.request.page - 1 }),\n        };\n    }, 'api.prevPage');\n    const query = model.assign((context, event) => {\n        const { page, size, query } = event;\n        return {\n            request: {\n                page: page || context.request.page,\n                size: size || context.request.size,\n                query,\n            },\n        };\n    }, 'api.query');\n    const callApi = (context) => (callback) => {\n        return service(context.request, (payload) => callback(model.events['api.setResponse'](payload)), (payload) => callback(model.events['api.setError'](payload)));\n    };\n    return model.createMachine({\n        id: 'paginatedApiMachine',\n        context: model.initialContext,\n        type: 'parallel',\n        states: {\n            api: {\n                initial: 'idle',\n                states: {\n                    idle: {\n                        entry: model.actions.notifyReady(),\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                        },\n                    },\n                    success: {\n                        always: [\n                            { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                            { target: 'queryResults', cond: 'isQuerySuccesful' },\n                            { target: 'empty', cond: 'isTotalZero' },\n                            { target: 'results' },\n                        ],\n                    },\n                    queryEmpty: {\n                        tags: 'queryEmpty',\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.prevPage': {\n                                target: 'loading',\n                                actions: decreasePage,\n                                cond: 'isNotFirstPage',\n                            },\n                            'api.refresh': {\n                                target: 'loading',\n                            },\n                        },\n                    },\n                    queryResults: {\n                        tags: 'queryResults',\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.nextPage': {\n                                target: 'loading',\n                                actions: increasePage,\n                                cond: 'isNotLastPage',\n                            },\n                            'api.prevPage': {\n                                target: 'loading',\n                                actions: decreasePage,\n                                cond: 'isNotFirstPage',\n                            },\n                            'api.refresh': {\n                                target: 'loading',\n                            },\n                        },\n                    },\n                    empty: {\n                        tags: 'empty',\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.refresh': {\n                                target: 'loading',\n                            },\n                        },\n                    },\n                    results: {\n                        tags: 'results',\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.nextPage': {\n                                target: 'loading',\n                                actions: increasePage,\n                                cond: 'isNotLastPage',\n                            },\n                            'api.prevPage': {\n                                target: 'loading',\n                                actions: decreasePage,\n                                cond: 'isNotFirstPage',\n                            },\n                            'api.refresh': {\n                                target: 'loading',\n                            },\n                        },\n                    },\n                    error: {\n                        tags: 'error',\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.refresh': {\n                                target: 'loading',\n                            },\n                            'api.prevPage': {\n                                target: 'loading',\n                                actions: decreasePage,\n                                cond: 'isNotFirstPage',\n                            },\n                        },\n                    },\n                    loading: {\n                        tags: ['loading'],\n                        entry: [model.actions.notifyLoading(), fetch],\n                        on: {\n                            'api.query': {\n                                target: 'loading',\n                                actions: query,\n                            },\n                            'api.setResponse': {\n                                target: 'success',\n                                actions: [setResponse, model.actions.notifySuccess()],\n                            },\n                            'api.setError': {\n                                target: 'error',\n                                actions: [setError, model.actions.notifyError()],\n                            },\n                        },\n                    },\n                },\n                on: {\n                    '*': {\n                        actions: 'forwardUnknownEventsToParent',\n                    },\n                },\n            },\n            polling: {\n                entry: fetch,\n                on: {\n                    'api.setResponse': {\n                        actions: setResponse,\n                    },\n                },\n                after: {\n                    INTERVAL: {\n                        cond: 'isPollingEnabled',\n                        target: 'polling',\n                    },\n                },\n            },\n        },\n    }, {\n        delays: {\n            INTERVAL: 5000,\n        },\n        actions: {\n            notifyReady: (0,actions.sendParent)({\n                type: 'api.ready',\n            }),\n            notifySuccess: (0,actions.sendParent)((context) => (Object.assign({ type: 'api.success' }, context.response))),\n            notifyError: (0,actions.sendParent)((context) => {\n                var _a;\n                return ({\n                    type: 'api.error',\n                    error: (_a = context.response) === null || _a === void 0 ? void 0 : _a.error,\n                });\n            }),\n            notifyLoading: (0,actions.sendParent)((context) => (Object.assign({ type: 'api.loading' }, context.request))),\n            forwardUnknownEventsToParent: (0,actions.pure)((_context, event) => {\n                if (Object.keys(model.events).includes(event.type) === false) {\n                    return (0,actions.sendParent)((_context, _event, meta) => {\n                        return meta._event.data;\n                    });\n                }\n                return [];\n            }),\n        },\n        guards: {\n            isNotFirstPage: (context) => context.response !== undefined && context.request.page > 1,\n            isNotLastPage: (context) => context.response !== undefined &&\n                context.request.size > 0 &&\n                context.request.page <\n                    Math.ceil(context.response.total / context.request.size),\n            isTotalZero: (context) => { var _a; return ((_a = context.response) === null || _a === void 0 ? void 0 : _a.total) === 0; },\n            isQuerySuccesful: (context) => {\n                var _a;\n                return context.request.query !== undefined &&\n                    context.response !== undefined &&\n                    ((_a = context.response) === null || _a === void 0 ? void 0 : _a.total) > 0;\n            },\n            isQueryEmpty: (context) => {\n                var _a;\n                return context.request.query !== undefined &&\n                    context.response !== undefined &&\n                    ((_a = context.response) === null || _a === void 0 ? void 0 : _a.total) === 0;\n            },\n            isPollingEnabled: (context) => context.pollingEnabled,\n        },\n    });\n}\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper {\n    wrapped(service, dataTransformer) {\n        return makePaginatedApiMachine(service, dataTransformer);\n    }\n}\nconst usePagination = (actor) => {\n    return (0,index_js_.useSelector)(actor, (0,index_js_eager_.useCallback)((state) => {\n        return {\n            request: state.context.request,\n            response: state.context.response,\n            loading: state.hasTag('loading'),\n            queryEmpty: state.hasTag('queryEmpty'),\n            queryResults: state.hasTag('queryResults'),\n            noResults: state.hasTag('empty'),\n            results: state.hasTag('results'),\n            error: state.hasTag('error'),\n            firstRequest: state.context.response === undefined,\n        };\n    }, [actor]));\n};\n\n;// CONCATENATED MODULE: ./src/constants.tsx\nconst PAGINATED_MACHINE_ID = 'paginatedApi';\nconst defaultPerPageOptions = [\n    {\n        title: '1',\n        value: 1,\n    },\n    {\n        title: '5',\n        value: 5,\n    },\n    {\n        title: '10',\n        value: 10,\n    },\n];\n\n;// CONCATENATED MODULE: ./src/ConnectorsPage.machine.ts\n\n\n\n\n\n\nconst ConnectorsPage_machine_model = (0,lib_model.createModel)({\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    selectedConnector: undefined,\n}, {\n    events: Object.assign(Object.assign({}, getPaginatedApiMachineEvents()), { selectConnector: (payload) => payload, deselectConnector: () => ({}) }),\n    actions: {\n        notifyError: () => ({}),\n    },\n});\nconst setSelectedConnector = ConnectorsPage_machine_model.assign((_context, event) => ({\n    selectedConnector: event.connector,\n}), 'selectConnector');\nconst unsetSelectedConnector = ConnectorsPage_machine_model.assign((_context) => ({\n    selectedConnector: undefined,\n}), 'deselectConnector');\nconst connectorsPageMachine = ConnectorsPage_machine_model.createMachine({\n    id: 'connectors',\n    initial: 'root',\n    context: ConnectorsPage_machine_model.initialContext,\n    states: {\n        root: {\n            type: 'parallel',\n            states: {\n                api: {\n                    initial: 'idle',\n                    invoke: {\n                        id: PAGINATED_MACHINE_ID,\n                        src: (context) => makePaginatedApiMachine(fetchConnectors(context), (connector) => \n                        // eslint-disable-next-line xstate/spawn-usage\n                        (0,es_index_js_.spawn)(makeConnectorMachine({\n                            accessToken: context.accessToken,\n                            basePath: context.basePath,\n                            connector,\n                        }), `connector-${connector.id}`), {\n                            pollingEnabled: true,\n                            onBeforeSetResponse: (data) => {\n                                if (data) {\n                                    data.forEach((d) => {\n                                        if (d && d.stop) {\n                                            d.stop();\n                                        }\n                                    });\n                                }\n                            },\n                        }),\n                    },\n                    states: {\n                        idle: {\n                            on: {\n                                'api.ready': 'ready',\n                            },\n                        },\n                        ready: {\n                            entry: (0,es_index_js_.send)('api.query', { to: PAGINATED_MACHINE_ID }),\n                        },\n                    },\n                    on: {\n                        'api.refresh': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.nextPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.prevPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.query': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.error': {\n                            actions: 'notifyError',\n                        },\n                        selectConnector: {\n                            actions: setSelectedConnector,\n                        },\n                        deselectConnector: {\n                            actions: unsetSelectedConnector,\n                        },\n                    },\n                },\n                listing: {},\n            },\n        },\n    },\n}, {\n    actions: {\n        notifyError: (context, event) => {\n            console.log(context, event);\n            if (event.type === 'api.error' && context.onError) {\n                context.onError(event.error);\n            }\n        },\n    },\n});\n\n;// CONCATENATED MODULE: ./src/ConnectorsPageContext.tsx\n\n\n\n\n\nconst ConnectorsPageContext = (0,index_js_eager_.createContext)(null);\nconst ConnectorsPageProvider = ({ children, accessToken, basePath, onError }) => {\n    const service = (0,index_js_.useInterpret)(connectorsPageMachine, {\n        context: { accessToken, basePath, onError },\n        devTools: true,\n    });\n    return (index_js_eager_default().createElement(ConnectorsPageContext.Provider, { value: service }, children));\n};\nconst useConnectorsPageMachineService = () => {\n    const service = (0,index_js_eager_.useContext)(ConnectorsPageContext);\n    if (!service) {\n        throw new Error(`useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`);\n    }\n    return service;\n};\nconst useConnectorsPageIsReady = () => {\n    const service = useConnectorsPageMachineService();\n    return (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => {\n        return state.matches({ root: { api: 'ready' } });\n    }, [service]));\n};\nconst useConnectorsMachine = () => {\n    const service = useConnectorsPageMachineService();\n    const apiData = usePagination(service.state.children[PAGINATED_MACHINE_ID]);\n    const { selectedConnector } = (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => ({\n        selectedConnector: state.context.selectedConnector,\n    }), [service]));\n    const deselectConnector = (0,index_js_eager_.useCallback)(() => {\n        service.send({ type: 'deselectConnector' });\n    }, [service]);\n    const query = (0,index_js_eager_.useCallback)((props) => {\n        service.send(Object.assign({ type: 'api.query' }, props));\n    }, [service]);\n    return Object.assign(Object.assign({}, apiData), { selectedConnector,\n        deselectConnector,\n        query });\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-styles/dist/esm/index.js\nvar esm = __webpack_require__(38296);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/TableComposable.js\nvar TableComposable = __webpack_require__(26479);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/Thead.js\nvar Thead = __webpack_require__(58240);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/Tr.js\nvar Tr = __webpack_require__(86151);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/Th.js\nvar Th = __webpack_require__(10951);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/Tbody.js\nvar Tbody = __webpack_require__(3134);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-table/dist/esm/components/TableComposable/Td.js\nvar Td = __webpack_require__(4509);\n;// CONCATENATED MODULE: ./src/ConnectorsTable.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/ConnectorsTable.tsx\n\n\n\n\n\n\nconst ConnectorsTable = ({ children }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(TableComposable/* TableComposable */.X, { \"aria-label\": \"Sortable Table\", className: (0,esm/* css */.i)('connectors-table-view__table') },\n        index_js_eager_default().createElement(Thead/* Thead */.h, null,\n            index_js_eager_default().createElement(Tr.Tr, null,\n                index_js_eager_default().createElement(Th.Th, null, t('Name')),\n                index_js_eager_default().createElement(Th.Th, null, t('Type')),\n                index_js_eager_default().createElement(Th.Th, null, t('Category')),\n                index_js_eager_default().createElement(Th.Th, null, t('Status')))),\n        index_js_eager_default().createElement(Tbody/* Tbody */.p, null, children)));\n};\nconst ConnectorsTableRow = ({ connectorId, name, type, category, status, isSelected, canStart, canStop, canDelete, onStart, onStop, onDelete, onSelect, }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const actions = [\n        {\n            title: 'Start',\n            onClick: onStart,\n            isDisabled: !canStart,\n        },\n        {\n            title: 'Stop',\n            onClick: onStop,\n            isDisabled: !canStop,\n        },\n        {\n            title: 'Delete',\n            onClick: onDelete,\n            isDisabled: !canDelete,\n        },\n        {\n            isSeparator: true,\n        },\n        {\n            title: 'Details',\n            onClick: onSelect,\n        },\n    ];\n    return (index_js_eager_default().createElement(Tr.Tr, { onClick: (event) => {\n            var _a;\n            // send the event only if the click didn't happen on the actions button\n            if (((_a = event.target) === null || _a === void 0 ? void 0 : _a.type) !== 'button') {\n                onSelect();\n            }\n        }, className: (0,esm/* css */.i)('pf-c-table-row__item', 'pf-m-selectable', isSelected && 'pf-m-selected') },\n        index_js_eager_default().createElement(Td.Td, { dataLabel: t('Name') }, name),\n        index_js_eager_default().createElement(Td.Td, { dataLabel: t('Type') }, type),\n        index_js_eager_default().createElement(Td.Td, { dataLabel: t('Category') }, category),\n        index_js_eager_default().createElement(Td.Td, { dataLabel: t('Status') },\n            index_js_eager_default().createElement(ConnectorStatus, { name: name, status: status })),\n        index_js_eager_default().createElement(Td.Td, { actions: { items: actions }, \"data-testid\": `actions-for-${connectorId}` })));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js\nvar ToolbarItem = __webpack_require__(1595);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js + 1 modules\nvar InputGroup = __webpack_require__(82011);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js\nvar TextInput = __webpack_require__(92607);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js\nvar Button = __webpack_require__(47173);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarToggleGroup.js\nvar ToolbarToggleGroup = __webpack_require__(12466);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarGroup.js\nvar ToolbarGroup = __webpack_require__(33109);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js\nvar Toolbar = __webpack_require__(62894);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarContent.js\nvar ToolbarContent = __webpack_require__(39841);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js\nvar search_icon = __webpack_require__(80810);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/filter-icon.js\nvar filter_icon = __webpack_require__(76889);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js\nvar Pagination = __webpack_require__(32265);\n;// CONCATENATED MODULE: ./src/Pagination.tsx\n\n\nconst Pagination_Pagination = ({ itemCount, page, perPage, isCompact = false, onChange, }) => {\n    const defaultPerPageOptions = [\n        {\n            title: '1',\n            value: 1,\n        },\n        {\n            title: '5',\n            value: 5,\n        },\n        {\n            title: '10',\n            value: 10,\n        },\n    ];\n    return (index_js_eager_default().createElement(Pagination/* Pagination */.t, { itemCount: itemCount, page: page, perPage: perPage, perPageOptions: defaultPerPageOptions, onSetPage: (_, page) => onChange(page, perPage), onPerPageSelect: (_, perPage) => onChange(page, perPage), variant: isCompact ? 'top' : 'bottom', isCompact: isCompact }));\n};\n\n// EXTERNAL MODULE: consume shared module (default) lodash.debounce@=4.0.8 (strict) (fallback: ./node_modules/lodash.debounce/index.js)\nvar lodash_debounce_index_js_ = __webpack_require__(3889);\nvar lodash_debounce_index_js_default = /*#__PURE__*/__webpack_require__.n(lodash_debounce_index_js_);\n;// CONCATENATED MODULE: ./src/useDebounce.ts\n\n\nconst useDebounce = (fnToDebounce, durationInMs = 200) => {\n    if (isNaN(durationInMs)) {\n        throw new TypeError('durationInMs for debounce should be a number');\n    }\n    if (typeof fnToDebounce !== 'function') {\n        throw new TypeError('fnToDebounce should be a function');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return (0,index_js_eager_.useCallback)(lodash_debounce_index_js_default()(fnToDebounce, durationInMs), [\n        fnToDebounce,\n        durationInMs,\n    ]);\n};\n\n;// CONCATENATED MODULE: ./src/ConnectorsToolbar.tsx\n\n\n\n\n\n\nconst ConnectorsToolbar = ({ itemCount, page, perPage, onChange, }) => {\n    const searchInputRef = (0,index_js_eager_.useRef)(null);\n    const debouncedOnChange = useDebounce(onChange, 1000);\n    // const [statuses, setStatuses] = useState<string[]>([\n    //   'Pending',\n    //   'Created',\n    //   'Cancelled',\n    // ]);\n    // const [statusesToggled, setStatusesToggled] = useState(false);\n    // const clearAllFilters = useCallback(() => {\n    //   setSearchValue('');\n    //   setStatuses([]);\n    // }, []);\n    // const toggleStatuses = useCallback(\n    //   () => setStatusesToggled(prev => !prev),\n    //   []\n    // );\n    // const onSelectStatus = useCallback(\n    //   (_, status) =>\n    //     setStatuses(prev =>\n    //       prev.includes(status)\n    //         ? prev.filter(s => s !== status)\n    //         : [...prev, status]\n    //     ),\n    //   []\n    // );\n    // const statusMenuItems = [\n    //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n    //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n    //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n    // ];\n    // ensure the search input value reflects what's specified in the request object\n    // useEffect(() => {\n    //   if (searchInputRef.current) {\n    //     searchInputRef.current.value = (request.name as string | undefined) || '';\n    //   }\n    // }, [searchInputRef, request]);\n    const toggleGroupItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n            index_js_eager_default().createElement(InputGroup/* InputGroup */.B, null,\n                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { name: \"name\", id: \"name\", type: \"search\", \"aria-label\": \"filter by connector name\", onChange: (value) => debouncedOnChange({\n                        size: perPage,\n                        page: 1,\n                        name: value,\n                    }), ref: searchInputRef }),\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'control', \"aria-label\": \"search button for search input\" },\n                    index_js_eager_default().createElement(search_icon/* SearchIcon */.W1, null))))));\n    const toolbarItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarToggleGroup/* ToolbarToggleGroup */.R, { toggleIcon: index_js_eager_default().createElement(filter_icon/* FilterIcon */.k1, null), breakpoint: \"xl\" }, toggleGroupItems),\n        index_js_eager_default().createElement(ToolbarGroup/* ToolbarGroup */.k, { variant: \"icon-button-group\" },\n            index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n                index_js_eager_default().createElement(react_router_dom_js_eager_.NavLink, { className: \"pf-c-button pf-m-primary\", to: '/create-connector' }, \"Create Connector\"))),\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, { variant: \"pagination\", alignment: { default: 'alignRight' } },\n            index_js_eager_default().createElement(Pagination_Pagination, { itemCount: itemCount, page: page, perPage: perPage, onChange: onChange, isCompact: true }))));\n    return (index_js_eager_default().createElement(Toolbar/* Toolbar */.o, { id: \"toolbar-group-types\", collapseListedFiltersBreakpoint: \"xl\" },\n        index_js_eager_default().createElement(ToolbarContent/* ToolbarContent */.c, null, toolbarItems)));\n};\n\n;// CONCATENATED MODULE: ./src/CosContext.tsx\n\nconst CosContext = (0,index_js_eager_.createContext)(null);\nconst CosContextProvider = ({ getToken, basePath, children, }) => (index_js_eager_default().createElement(CosContext.Provider, { value: { getToken, basePath } }, children));\nconst useCos = () => {\n    const context = (0,index_js_eager_.useContext)(CosContext);\n    if (!context)\n        throw new Error('useAppContext must be used inside an AppContextProvider');\n    return Object.assign({}, context);\n};\n\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/Trans.js\nvar Trans = __webpack_require__(99189);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js\nvar Modal = __webpack_require__(80236);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js\nvar Stack = __webpack_require__(49739);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js\nvar StackItem = __webpack_require__(83826);\n;// CONCATENATED MODULE: ./src/DialogDeleteConnector.tsx\n\n\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nconst DialogDeleteConnector = ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const [nameValue, setNameValue] = (0,index_js_eager_.useState)('');\n    const canDelete = nameValue === connectorName;\n    const onCancelDelete = () => {\n        setNameValue('');\n        onCancel();\n    };\n    const onConfirmDelete = () => {\n        setNameValue('');\n        onConfirm();\n    };\n    return (index_js_eager_default().createElement(Modal/* Modal */.u, { variant: Modal/* ModalVariant.small */.v.small, title: t('Delete connector'), titleIconVariant: \"warning\", isOpen: showDialog, onClose: onCancel, actions: [\n            index_js_eager_default().createElement(Button/* Button */.zx, { key: \"confirm\", variant: \"danger\", isDisabled: !canDelete, onClick: onConfirmDelete }, t('Delete')),\n            index_js_eager_default().createElement(Button/* Button */.zx, { key: \"cancel\", variant: \"link\", onClick: onCancelDelete }, t('Cancel')),\n        ] },\n        index_js_eager_default().createElement(Stack/* Stack */.K, null,\n            index_js_eager_default().createElement(StackItem/* StackItem */.v, null,\n                index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                    \"Connector \",\n                    index_js_eager_default().createElement(\"strong\", null, { connectorName }),\n                    \" will be deleted.\")),\n            index_js_eager_default().createElement(StackItem/* StackItem */.v, null,\n                index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                    \"Type \",\n                    index_js_eager_default().createElement(\"strong\", null, { connectorName }),\n                    \" to confirm the deletion.\")),\n            index_js_eager_default().createElement(StackItem/* StackItem */.v, null,\n                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { value: nameValue, type: \"text\", onChange: setNameValue, \"aria-label\": \"name input\" })))));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\nvar EmptyState = __webpack_require__(9947);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js\nvar EmptyStateIcon = __webpack_require__(38424);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js\nvar EmptyStateBody = __webpack_require__(75106);\n;// CONCATENATED MODULE: ./src/EmptyStateGenericError.tsx\n\n\n\n\nconst EmptyStateGenericError = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, { variant: EmptyState/* EmptyStateVariant.full */.I.full },\n        index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: exclamation_circle_icon/* ExclamationCircleIcon */.$O }),\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h1', size: Title/* TitleSizes.lg */.H.lg }, t('Something went wrong')),\n        index_js_eager_default().createElement(EmptyStateBody/* EmptyStateBody */.B, null, t('There was a problem processing the request. Please try again.'))));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/js/icons/space-shuttle-icon.js\nvar space_shuttle_icon = __webpack_require__(34558);\n;// CONCATENATED MODULE: ./src/EmptyStateGettingStarted.tsx\n\n\n\n\n\nconst EmptyStateGettingStarted = ({ onHelp, onCreate }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, { variant: EmptyState/* EmptyStateVariant.xl */.I.xl, className: (0,esm/* css */.i)('pf-u-pt-2xl pf-u-pt-3xl-on-md') },\n        index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: space_shuttle_icon/* default */.ZP }),\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h1', size: Title/* TitleSizes.4xl */.H[\"4xl\"] }, t('Welcome to Managed Connectors')),\n        index_js_eager_default().createElement(EmptyStateBody/* EmptyStateBody */.B, null,\n            index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                \"For help getting started, access the\",\n                ' ',\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.link */.Wu.link, isSmall: true, isInline: true, onClick: onHelp }, \"quick start guide.\"))),\n        index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'primary', onClick: onCreate }, t('Create Connector'))));\n};\n\n;// CONCATENATED MODULE: ./src/EmptyStateNoMatchesFound.tsx\n\n\n\n\n\nconst EmptyStateNoMatchesFound = ({ onClear, }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, { variant: EmptyState/* EmptyStateVariant.large */.I.large, className: (0,esm/* css */.i)('pf-u-pt-2xl pf-u-pt-3xl-on-md') },\n        index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: search_icon/* SearchIcon */.W1 }),\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h2', size: Title/* TitleSizes.xl */.H.xl }, t('No results found')),\n        index_js_eager_default().createElement(EmptyStateBody/* EmptyStateBody */.B, null,\n            index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                \"No results match the filter criteria.\",\n                ' ',\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.link */.Wu.link, isSmall: true, isInline: true, onClick: onClear }, t('Clear all filters')),\n                ' ',\n                \"to show results.\"))));\n};\n\n;// CONCATENATED MODULE: ./src/Loading.tsx\n\n\nconst Loading = () => (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, null,\n    index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { variant: \"container\", component: Spinner/* Spinner */.$ }),\n    index_js_eager_default().createElement(Title/* Title */.D, { size: \"lg\", headingLevel: \"h4\" }, \"Loading\")));\n\n;// CONCATENATED MODULE: ./src/ConnectorsPage.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ConnectedConnectorsPage = ({ onCreateConnector }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const alert = (0,esm_index_js_eager_.useAlert)();\n    const { basePath, getToken } = useCos();\n    const onError = (0,index_js_eager_.useCallback)((description) => {\n        alert === null || alert === void 0 ? void 0 : alert.addAlert({\n            id: 'connectors-table-error',\n            variant: esm_index_js_eager_.AlertVariant.danger,\n            title: t('common.something_went_wrong'),\n            description,\n        });\n    }, [alert, t]);\n    return (index_js_eager_default().createElement(ConnectorsPageProvider, { accessToken: getToken, basePath: basePath, onError: onError },\n        index_js_eager_default().createElement(ConnectorsPage, { onCreateConnector: onCreateConnector })));\n};\nconst ConnectorsPage = ({ onCreateConnector, }) => {\n    const isReady = useConnectorsPageIsReady();\n    return isReady ? (index_js_eager_default().createElement(ConnectorsPageBody, { onCreateConnector: onCreateConnector })) : (index_js_eager_default().createElement(Loading, null));\n};\nconst ConnectorsPageBody = ({ onCreateConnector, }) => {\n    const { loading, error, noResults, queryEmpty, firstRequest, request, response, selectedConnector, deselectConnector, query, } = useConnectorsMachine();\n    switch (true) {\n        case firstRequest:\n            return index_js_eager_default().createElement(Loading, null);\n        case queryEmpty:\n            return (index_js_eager_default().createElement(EmptyStateNoMatchesFound, { onClear: () => query({ page: 1, size: 10 }) }));\n        case loading:\n            return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                index_js_eager_default().createElement(PageSection/* PageSection */.NP, { variant: 'light' },\n                    index_js_eager_default().createElement(ConnectorsPageTitle, null)),\n                index_js_eager_default().createElement(PageSection/* PageSection */.NP, { padding: { default: 'noPadding' }, isFilled: true },\n                    index_js_eager_default().createElement(Card/* Card */.Z, null,\n                        index_js_eager_default().createElement(ConnectorsToolbar, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => query({ page, size }) }),\n                        index_js_eager_default().createElement(Loading, null)))));\n        case noResults:\n            return (index_js_eager_default().createElement(EmptyStateGettingStarted, { onCreate: onCreateConnector, onHelp: function () {\n                    throw new Error('Function not implemented.');\n                } }));\n        case error:\n            return index_js_eager_default().createElement(EmptyStateGenericError, null);\n        default:\n            return (index_js_eager_default().createElement(ConnectorDrawer, { connector: selectedConnector, onClose: deselectConnector },\n                index_js_eager_default().createElement(PageSection/* PageSection */.NP, { variant: 'light' },\n                    index_js_eager_default().createElement(ConnectorsPageTitle, null)),\n                index_js_eager_default().createElement(PageSection/* PageSection */.NP, { padding: { default: 'noPadding' }, isFilled: true },\n                    index_js_eager_default().createElement(ConnectedTable, null))));\n    }\n};\nconst ConnectorsPageTitle = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(TextContent/* TextContent */.D, null,\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: \"h1\" }, t('Connectors'))));\n};\nconst ConnectedTable = () => {\n    var _a;\n    const { request, response, selectedConnector, query } = useConnectorsMachine();\n    return (index_js_eager_default().createElement(Card/* Card */.Z, { className: 'pf-u-pb-xl' },\n        index_js_eager_default().createElement(ConnectorsToolbar, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => query({ page, size }) }),\n        index_js_eager_default().createElement(\"div\", { className: 'pf-u-p-md' },\n            index_js_eager_default().createElement(ConnectorsTable, null, (_a = response === null || response === void 0 ? void 0 : response.items) === null || _a === void 0 ? void 0 : _a.map((ref) => (index_js_eager_default().createElement(ConnectedRow, { connectorRef: ref, key: ref.id, selectedConnector: selectedConnector }))))),\n        index_js_eager_default().createElement(Pagination_Pagination, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => query({ page, size }), isCompact: false })));\n};\nconst ConnectedRow = ({ connectorRef, selectedConnector, }) => {\n    var _a;\n    const { connector, canStart, canStop, canDelete, onStart, onStop, onDelete, onSelect, } = useConnector(connectorRef);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] = (0,index_js_eager_.useState)(false);\n    const doCancelDeleteConnector = () => {\n        setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n        setShowDeleteConnectorConfirm(false);\n        onDelete();\n    };\n    return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(DialogDeleteConnector, { connectorName: (_a = connector.metadata) === null || _a === void 0 ? void 0 : _a.name, showDialog: showDeleteConnectorConfirm, onCancel: doCancelDeleteConnector, onConfirm: doDeleteConnector }),\n        index_js_eager_default().createElement(ConnectorsTableRow, { connectorId: connector.id, name: connector.metadata.name, type: connector.connector_type_id, category: 'TODO: MISSING', status: connector.status, isSelected: (selectedConnector === null || selectedConnector === void 0 ? void 0 : selectedConnector.id) === connector.id, canStart: canStart, canStop: canStop, canDelete: canDelete, onStart: onStart, onStop: onStop, onSelect: onSelect, onDelete: () => setShowDeleteConnectorConfirm(true) })));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js\nvar Breadcrumb = __webpack_require__(64029);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js\nvar BreadcrumbItem = __webpack_require__(32835);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js\nvar Level = __webpack_require__(48140);\n;// CONCATENATED MODULE: ./src/CreateConnectorWizard.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/StepClusters.machine.ts\n\n\n\n\n\n\nconst StepClusters_machine_model = (0,lib_model.createModel)({\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n}, {\n    events: Object.assign({ selectCluster: (payload) => (Object.assign({}, payload)), deselectCluster: () => ({}), confirm: () => ({}) }, getPaginatedApiMachineEvents()),\n});\nconst success = StepClusters_machine_model.assign((_context, event) => {\n    const { type } = event, response = (0,tslib_es6.__rest)(event, [\"type\"]);\n    return {\n        response,\n    };\n}, 'api.success');\nconst selectCluster = StepClusters_machine_model.assign({\n    selectedCluster: (context, event) => {\n        var _a, _b;\n        return (_b = (_a = context.response) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.find((i) => i.id === event.selectedCluster);\n    },\n}, 'selectCluster');\nconst StepClusters_machine_reset = StepClusters_machine_model.assign({\n    selectedCluster: undefined,\n}, 'deselectCluster');\nconst clustersMachine = StepClusters_machine_model.createMachine({\n    id: 'clusters',\n    initial: 'root',\n    context: StepClusters_machine_model.initialContext,\n    states: {\n        root: {\n            type: 'parallel',\n            states: {\n                api: {\n                    initial: 'idle',\n                    invoke: {\n                        id: PAGINATED_MACHINE_ID,\n                        src: (context) => makePaginatedApiMachine(fetchClusters(context), (i) => i),\n                    },\n                    states: {\n                        idle: {\n                            entry: (0,es_index_js_.send)('api.query', { to: PAGINATED_MACHINE_ID }),\n                            on: {\n                                'api.ready': 'ready',\n                            },\n                        },\n                        ready: {},\n                    },\n                    on: {\n                        'api.refresh': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.nextPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.prevPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.query': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.success': { actions: success },\n                    },\n                },\n                selection: {\n                    id: 'selection',\n                    initial: 'verify',\n                    states: {\n                        verify: {\n                            always: [\n                                { target: 'selecting', cond: 'noClusterSelected' },\n                                { target: 'valid', cond: 'clusterSelected' },\n                            ],\n                        },\n                        selecting: {\n                            entry: (0,es_index_js_.sendParent)('isInvalid'),\n                            on: {\n                                selectCluster: {\n                                    target: 'valid',\n                                    actions: selectCluster,\n                                },\n                            },\n                        },\n                        valid: {\n                            entry: (0,es_index_js_.sendParent)('isValid'),\n                            on: {\n                                selectCluster: {\n                                    target: 'verify',\n                                    actions: selectCluster,\n                                    cond: (_, event) => event.selectedCluster !== undefined,\n                                },\n                                deselectCluster: {\n                                    target: 'verify',\n                                    actions: StepClusters_machine_reset,\n                                },\n                                confirm: {\n                                    target: '#done',\n                                    cond: 'clusterSelected',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        done: {\n            id: 'done',\n            type: 'final',\n            data: {\n                selectedCluster: (context) => context.selectedCluster,\n            },\n        },\n    },\n}, {\n    guards: {\n        clusterSelected: (context) => context.selectedCluster !== undefined,\n        noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n});\n\n;// CONCATENATED MODULE: ./src/StepConfigurator.machine.ts\n\n\nconst StepConfigurator_machine_model = (0,lib_model.createModel)({\n    connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        json_schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n}, {\n    events: {\n        entry: () => ({}),\n        change: ({ configuration, isValid, }) => ({ configuration, isValid }),\n        next: () => ({}),\n        prev: () => ({}),\n        complete: () => ({}),\n    },\n    actions: {\n        changedStep: () => ({}),\n    },\n});\nconst nextStep = StepConfigurator_machine_model.assign((context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n}), 'next');\nconst prevStep = StepConfigurator_machine_model.assign((context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n}), 'prev');\nconst change = StepConfigurator_machine_model.assign((_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n}), 'change');\nconst configuratorMachine = StepConfigurator_machine_model.createMachine({\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n        connector: {\n            id: 'something',\n            name: 'something',\n            version: '0.1',\n            json_schema: {},\n        },\n        steps: ['one', 'two', 'three'],\n        activeStep: 0,\n        isActiveStepValid: false,\n        configuration: undefined,\n    },\n    states: {\n        configuring: {\n            entry: (0,es_index_js_.sendParent)('isInvalid'),\n            always: [{ target: 'valid', cond: 'activeStepValid' }],\n        },\n        valid: {\n            id: 'valid',\n            initial: 'determineStep',\n            entry: (0,es_index_js_.sendParent)('isValid'),\n            states: {\n                determineStep: {\n                    always: [\n                        { target: '#valid.lastStep', cond: 'isLastStep' },\n                        { target: '#valid.hasNextStep' },\n                    ],\n                },\n                hasNextStep: {\n                    on: {\n                        next: {\n                            target: '#configurator.configuring',\n                            actions: [nextStep, 'changedStep'],\n                        },\n                    },\n                },\n                lastStep: {\n                    on: {\n                        next: '#configurator.configured',\n                    },\n                },\n            },\n        },\n        configured: {\n            type: 'final',\n            data: ({ configuration }) => ({ configuration }),\n        },\n    },\n    on: {\n        change: {\n            target: 'configuring',\n            actions: change,\n        },\n        prev: {\n            target: 'configuring',\n            actions: [prevStep, 'changedStep'],\n        },\n    },\n}, {\n    actions: {\n        changedStep: (0,es_index_js_.sendParent)((context) => ({\n            type: 'changedStep',\n            step: context.activeStep,\n        })),\n    },\n    guards: {\n        isLastStep: (context) => context.activeStep === context.steps.length - 1,\n        activeStepValid: (context) => context.isActiveStepValid,\n    },\n});\n\n;// CONCATENATED MODULE: ./src/StepConfiguratorLoader.machine.ts\n\n\n\nconst configuratorLoaderMachineSchema = {\n    context: (0,es_index_js_.createSchema)(),\n};\nconst configuratorLoaderMachineModel = (0,lib_model.createModel)({\n    connector: { id: 'something', name: 'something', version: '0.1' },\n    Configurator: undefined,\n    steps: undefined,\n    error: undefined,\n});\nconst configuratorLoaderMachine = configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n        loading: {\n            invoke: {\n                id: 'fetchConfigurator',\n                src: 'fetchConfigurator',\n                onDone: {\n                    target: 'success',\n                    actions: (0,es_index_js_.assign)((_context, event) => event.data),\n                },\n                onError: {\n                    target: 'failure',\n                    actions: (0,es_index_js_.assign)({\n                        error: (_context, event) => event.data,\n                    }),\n                },\n            },\n        },\n        failure: {\n            entry: (0,actions.escalate)((context) => ({ message: context.error })),\n        },\n        success: {\n            type: 'final',\n            data: ({ Configurator, steps }) => ({\n                Configurator: Configurator,\n                steps: steps,\n            }),\n        },\n    },\n});\n\n;// CONCATENATED MODULE: ./src/StepConnectorTypes.machine.ts\n\n\n\n\n\n\nconst StepConnectorTypes_machine_model = (0,lib_model.createModel)({\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n}, {\n    events: Object.assign({ selectConnector: (payload) => (Object.assign({}, payload)), deselectConnector: () => ({}), confirm: () => ({}) }, getPaginatedApiMachineEvents()),\n});\nconst StepConnectorTypes_machine_success = StepConnectorTypes_machine_model.assign((_context, event) => {\n    const { type } = event, response = (0,tslib_es6.__rest)(event, [\"type\"]);\n    return {\n        response,\n    };\n}, 'api.success');\nconst selectConnector = StepConnectorTypes_machine_model.assign({\n    selectedConnector: (context, event) => {\n        var _a, _b;\n        return (_b = (_a = context.response) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.find((i) => i.id === event.selectedConnector);\n    },\n}, 'selectConnector');\nconst StepConnectorTypes_machine_reset = StepConnectorTypes_machine_model.assign({\n    selectedConnector: undefined,\n}, 'deselectConnector');\nconst connectorTypesMachine = StepConnectorTypes_machine_model.createMachine({\n    context: StepConnectorTypes_machine_model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n        root: {\n            type: 'parallel',\n            states: {\n                api: {\n                    initial: 'idle',\n                    invoke: {\n                        id: PAGINATED_MACHINE_ID,\n                        src: (context) => makePaginatedApiMachine(fetchConnectorTypes(context), (i) => i),\n                    },\n                    states: {\n                        idle: {\n                            entry: (0,es_index_js_.send)({\n                                type: 'api.query',\n                                query: { categories: ['sink', 'source'] },\n                            }, { to: PAGINATED_MACHINE_ID }),\n                            on: {\n                                'api.ready': 'ready',\n                            },\n                        },\n                        ready: {},\n                    },\n                    on: {\n                        'api.refresh': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.nextPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.prevPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.query': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.success': { actions: StepConnectorTypes_machine_success },\n                    },\n                },\n                selection: {\n                    id: 'selection',\n                    initial: 'verify',\n                    states: {\n                        verify: {\n                            always: [\n                                { target: 'selecting', cond: 'noConnectorSelected' },\n                                { target: 'valid', cond: 'connectorSelected' },\n                            ],\n                        },\n                        selecting: {\n                            entry: (0,es_index_js_.sendParent)('isInvalid'),\n                            on: {\n                                selectConnector: {\n                                    target: 'valid',\n                                    actions: selectConnector,\n                                    cond: (_, event) => event.selectedConnector !== undefined,\n                                },\n                            },\n                        },\n                        valid: {\n                            entry: (0,es_index_js_.sendParent)('isValid'),\n                            on: {\n                                selectConnector: {\n                                    target: 'verify',\n                                    actions: selectConnector,\n                                },\n                                deselectConnector: {\n                                    target: 'verify',\n                                    actions: StepConnectorTypes_machine_reset,\n                                },\n                                confirm: {\n                                    target: '#done',\n                                    cond: 'connectorSelected',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        done: {\n            id: 'done',\n            type: 'final',\n            data: {\n                selectedConnector: (context) => context.selectedConnector,\n            },\n        },\n    },\n}, {\n    guards: {\n        connectorSelected: (context) => context.selectedConnector !== undefined,\n        noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n});\n\n;// CONCATENATED MODULE: ./src/StepKafkas.machine.ts\n\n\n\n\n\n\n\nconst StepKafkas_machine_model = (0,lib_model.createModel)({\n    accessToken: () => Promise.resolve(''),\n    basePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n}, {\n    events: Object.assign({ selectInstance: (payload) => (Object.assign({}, payload)), deselectInstance: () => ({}), confirm: () => ({}) }, getPaginatedApiMachineEvents()),\n});\nconst StepKafkas_machine_success = StepKafkas_machine_model.assign((_context, event) => {\n    const { type } = event, response = (0,tslib_es6.__rest)(event, [\"type\"]);\n    return {\n        response,\n    };\n}, 'api.success');\nconst selectInstance = StepKafkas_machine_model.assign({\n    selectedInstance: (context, event) => {\n        var _a, _b;\n        return (_b = (_a = context.response) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.find((i) => i.id === event.selectedInstance);\n    },\n}, 'selectInstance');\nconst StepKafkas_machine_reset = StepKafkas_machine_model.assign({\n    selectedInstance: undefined,\n}, 'deselectInstance');\nconst kafkasMachine = StepKafkas_machine_model.createMachine({\n    id: 'kafkas',\n    initial: 'root',\n    context: StepKafkas_machine_model.initialContext,\n    states: {\n        root: {\n            type: 'parallel',\n            states: {\n                api: {\n                    initial: 'idle',\n                    invoke: {\n                        id: PAGINATED_MACHINE_ID,\n                        src: (context) => makePaginatedApiMachine(fetchKafkaInstances(context), (i) => i),\n                    },\n                    states: {\n                        idle: {\n                            entry: (0,es_index_js_.send)('api.query', { to: PAGINATED_MACHINE_ID }),\n                            on: {\n                                'api.ready': 'ready',\n                            },\n                        },\n                        ready: {},\n                    },\n                    on: {\n                        'api.refresh': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.nextPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.prevPage': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.query': {\n                            actions: (0,es_index_js_.send)((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n                        },\n                        'api.success': { actions: StepKafkas_machine_success },\n                    },\n                },\n                selection: {\n                    id: 'selection',\n                    initial: 'verify',\n                    states: {\n                        verify: {\n                            always: [\n                                { target: 'selecting', cond: 'noInstanceSelected' },\n                                { target: 'valid', cond: 'instanceSelected' },\n                            ],\n                        },\n                        selecting: {\n                            entry: (0,actions.sendParent)('isInvalid'),\n                            on: {\n                                selectInstance: {\n                                    target: 'valid',\n                                    actions: selectInstance,\n                                },\n                            },\n                        },\n                        valid: {\n                            entry: (0,actions.sendParent)('isValid'),\n                            on: {\n                                selectInstance: {\n                                    target: 'verify',\n                                    actions: selectInstance,\n                                    cond: (_, event) => event.selectedInstance !== undefined,\n                                },\n                                deselectInstance: {\n                                    target: 'verify',\n                                    actions: StepKafkas_machine_reset,\n                                },\n                                confirm: {\n                                    target: '#done',\n                                    cond: 'instanceSelected',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        done: {\n            id: 'done',\n            type: 'final',\n            data: {\n                selectedInstance: (context) => context.selectedInstance,\n            },\n        },\n    },\n}, {\n    guards: {\n        instanceSelected: (context) => context.selectedInstance !== undefined,\n        noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n});\n\n// EXTERNAL MODULE: consume shared module (default) ajv@=8.6.3 (strict) (fallback: ./node_modules/ajv/dist/ajv.js)\nvar ajv_js_ = __webpack_require__(23908);\nvar ajv_js_default = /*#__PURE__*/__webpack_require__.n(ajv_js_);\n// EXTERNAL MODULE: consume shared module (default) uniforms@=3.6.0 (strict) (fallback: ./node_modules/uniforms/esm/index.js)\nvar esm_index_js_ = __webpack_require__(79199);\n// EXTERNAL MODULE: consume shared module (default) uniforms-bridge-json-schema@=3.6.0 (strict) (fallback: ./node_modules/uniforms-bridge-json-schema/esm/index.js)\nvar uniforms_bridge_json_schema_esm_index_js_ = __webpack_require__(80073);\n// EXTERNAL MODULE: consume shared module (default) uniforms-patternfly@=4.7.3 (strict) (fallback: ./node_modules/uniforms-patternfly/dist/esm/index.js)\nvar dist_esm_index_js_ = __webpack_require__(78997);\n;// CONCATENATED MODULE: ./src/JsonSchemaConfigurator.tsx\n\n\n\n\n\nconst ajv = new (ajv_js_default())({\n    allErrors: true,\n    useDefaults: false,\n    strict: 'log',\n    strictSchema: false,\n});\nfunction createValidator(schema) {\n    const validator = ajv.compile(schema);\n    return (model) => {\n        var _a;\n        validator(model);\n        return ((_a = validator.errors) === null || _a === void 0 ? void 0 : _a.length) ? { details: validator.errors } : null;\n    };\n}\nconst JsonSchemaConfigurator = ({ schema, configuration, onChange }) => {\n    schema.type = schema.type || 'object';\n    const schemaValidator = createValidator(schema);\n    const bridge = new uniforms_bridge_json_schema_esm_index_js_.JSONSchemaBridge(schema, schemaValidator);\n    return (index_js_eager_default().createElement(dist_esm_index_js_.AutoForm, { schema: bridge, model: configuration, autosave: true, autosaveDelay: 0 },\n        index_js_eager_default().createElement(dist_esm_index_js_.AutoFields, null),\n        index_js_eager_default().createElement(dist_esm_index_js_.ErrorsField, null),\n        index_js_eager_default().createElement(WizardNext, { onChange: onChange })));\n};\nconst WizardNext = ({ onChange }) => {\n    const { changed, submitted, error, model } = (0,esm_index_js_.useForm)();\n    const isValid = !error;\n    const prevChangeModel = (0,index_js_eager_.useRef)();\n    (0,index_js_eager_.useEffect)(() => {\n        if (prevChangeModel.current !== model && changed && submitted) {\n            prevChangeModel.current = model;\n            onChange(isValid ? model : undefined, isValid);\n        }\n    }, [prevChangeModel, changed, submitted, isValid, model, onChange]);\n    return null;\n};\n\n;// CONCATENATED MODULE: ./src/StepReview.machine.ts\n\n\n\n\nconst StepReview_machine_model = (0,lib_model.createModel)({\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n    validator: createValidator({}),\n}, {\n    events: {\n        setName: (payload) => payload,\n        setServiceAccount: (payload) => payload,\n        updateConfiguration: (payload) => payload,\n        save: () => ({}),\n        success: () => ({}),\n        failure: (payload) => payload,\n    },\n});\nconst initialize = StepReview_machine_model.assign((context) => ({\n    configString: dataToPrettyString(context.initialConfiguration),\n    validator: createValidator(context.connectorType.json_schema),\n}));\nconst setName = StepReview_machine_model.assign({\n    name: (_, event) => event.name,\n}, 'setName');\nconst setServiceAccount = StepReview_machine_model.assign((_, event) => ({\n    userServiceAccount: event.serviceAccount,\n}), 'setServiceAccount');\nconst updateConfiguration = StepReview_machine_model.assign((_, event) => ({\n    configString: event.data,\n}), 'updateConfiguration');\nconst verifyConfigString = StepReview_machine_model.assign((context) => {\n    const { warnings, error } = verifyData(context.configString, context.validator);\n    return { configStringWarnings: warnings, configStringError: error };\n});\nconst setSavingError = StepReview_machine_model.assign((_, event) => ({\n    savingError: event.message,\n}), 'failure');\nconst reviewMachine = StepReview_machine_model.createMachine({\n    id: 'review',\n    initial: 'verify',\n    context: StepReview_machine_model.initialContext,\n    entry: initialize,\n    states: {\n        verify: {\n            entry: verifyConfigString,\n            always: [\n                { target: 'valid', cond: 'isAllConfigured' },\n                { target: 'reviewing' },\n            ],\n        },\n        reviewing: {\n            entry: (0,es_index_js_.sendParent)('isInvalid'),\n            on: {\n                setName: {\n                    target: 'verify',\n                    actions: setName,\n                },\n                setServiceAccount: {\n                    target: 'verify',\n                    actions: setServiceAccount,\n                },\n                updateConfiguration: {\n                    target: 'verify',\n                    actions: updateConfiguration,\n                },\n            },\n        },\n        valid: {\n            id: 'valid',\n            entry: (0,es_index_js_.sendParent)('isValid'),\n            on: {\n                setName: {\n                    target: 'verify',\n                    actions: setName,\n                },\n                setServiceAccount: {\n                    target: 'verify',\n                    actions: setServiceAccount,\n                },\n                updateConfiguration: {\n                    target: 'verify',\n                    actions: updateConfiguration,\n                },\n                save: 'saving',\n            },\n        },\n        saving: {\n            invoke: {\n                src: (context) => saveConnector({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    kafka: context.kafka,\n                    cluster: context.cluster,\n                    connectorType: context.connectorType,\n                    configuration: JSON.parse(context.configString),\n                    name: context.name,\n                    userServiceAccount: context.userServiceAccount,\n                }),\n            },\n            on: {\n                success: 'saved',\n                failure: {\n                    target: 'valid',\n                    actions: setSavingError,\n                },\n            },\n            tags: ['saving'],\n        },\n        saved: {\n            type: 'final',\n        },\n    },\n}, {\n    guards: {\n        isAllConfigured: (context) => context.configString !== undefined &&\n            context.configStringError === undefined &&\n            context.name.length > 0,\n    },\n});\nfunction dataToPrettyString(data) {\n    const dataVal = data instanceof Map ? mapToObject(data) : data;\n    try {\n        return JSON.stringify(dataVal, null, 2);\n    }\n    catch (e) {\n        return '';\n    }\n}\nfunction mapToObject(inputMap) {\n    const obj = {};\n    inputMap.forEach((value, key) => {\n        obj[key] = value;\n    });\n    return obj;\n}\nfunction verifyData(data, validator) {\n    var _a;\n    try {\n        const parsedData = JSON.parse(data);\n        const validationResult = validator(parsedData);\n        return {\n            warnings: validationResult\n                ? validationResult.details.map((d) => `${d.instancePath} ${d.message}`)\n                : undefined,\n            error: undefined,\n        };\n    }\n    catch (e) {\n        const maybeMessage = (_a = e) === null || _a === void 0 ? void 0 : _a.message;\n        return {\n            warnings: undefined,\n            error: `Invalid JSON: ${maybeMessage || JSON.stringify(e)}`,\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/CreateConnectorWizard.machine.ts\n\n\n\n\n\n\n\n\nconst CreateConnectorWizard_machine_model = (0,lib_model.createModel)({}, {\n    events: {\n        isValid: () => ({}),\n        isInvalid: () => ({}),\n        prev: () => ({}),\n        next: () => ({}),\n        changedStep: ({ step }) => ({ step }),\n        jumpToSelectKafka: () => ({}),\n        jumpToSelectCluster: () => ({}),\n        jumpToSelectConnector: () => ({}),\n        jumpToConfigureConnector: ({ subStep }) => ({\n            subStep,\n        }),\n        jumpToReviewConfiguration: () => ({}),\n    },\n    actions: {\n        notifySave: () => ({}),\n    },\n});\nconst creationWizardMachine = CreateConnectorWizard_machine_model.createMachine({\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: CreateConnectorWizard_machine_model.initialContext,\n    states: {\n        selectConnector: {\n            initial: 'selecting',\n            invoke: {\n                id: 'selectConnectorRef',\n                src: connectorTypesMachine,\n                data: (context) => ({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    selectedConnector: context.selectedConnector,\n                }),\n                onDone: {\n                    target: 'selectKafka',\n                    actions: (0,es_index_js_.assign)((_context, event) => ({\n                        selectedConnector: event.data.selectedConnector,\n                        connectorConfiguration: false,\n                        activeConfigurationStep: 0,\n                        isConfigurationValid: false,\n                        configurationSteps: false,\n                    })),\n                },\n                onError: '.error',\n            },\n            states: {\n                error: {},\n                selecting: {\n                    on: {\n                        isValid: 'valid',\n                    },\n                },\n                valid: {\n                    on: {\n                        isInvalid: 'selecting',\n                        next: {\n                            actions: (0,es_index_js_.send)('confirm', { to: 'selectConnectorRef' }),\n                        },\n                    },\n                },\n            },\n        },\n        selectKafka: {\n            initial: 'selecting',\n            invoke: {\n                id: 'selectKafkaInstanceRef',\n                src: kafkasMachine,\n                data: (context) => ({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    selectedInstance: context.selectedKafkaInstance,\n                    request: {\n                        page: 1,\n                        size: 10,\n                    },\n                }),\n                onDone: {\n                    target: 'selectCluster',\n                    actions: (0,es_index_js_.assign)({\n                        selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n                    }),\n                },\n                onError: '.error',\n            },\n            states: {\n                error: {},\n                selecting: {\n                    on: {\n                        isValid: 'valid',\n                    },\n                },\n                valid: {\n                    on: {\n                        isInvalid: 'selecting',\n                        next: {\n                            actions: (0,es_index_js_.send)('confirm', { to: 'selectKafkaInstanceRef' }),\n                        },\n                    },\n                },\n            },\n            on: {\n                prev: 'selectConnector',\n            },\n        },\n        selectCluster: {\n            initial: 'selecting',\n            invoke: {\n                id: 'selectClusterRef',\n                src: clustersMachine,\n                data: (context) => ({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    selectedCluster: context.selectedCluster,\n                }),\n                onDone: {\n                    target: 'configureConnector',\n                    actions: (0,es_index_js_.assign)({\n                        selectedCluster: (_, event) => event.data.selectedCluster,\n                    }),\n                },\n                onError: '.error',\n            },\n            states: {\n                error: {},\n                selecting: {\n                    on: {\n                        isValid: 'valid',\n                    },\n                },\n                valid: {\n                    on: {\n                        isInvalid: 'selecting',\n                        next: {\n                            actions: (0,es_index_js_.send)('confirm', { to: 'selectClusterRef' }),\n                        },\n                    },\n                },\n            },\n            on: {\n                prev: 'selectKafka',\n            },\n        },\n        configureConnector: {\n            initial: 'loadConfigurator',\n            states: {\n                loadConfigurator: {\n                    invoke: {\n                        id: 'configuratorLoader',\n                        src: 'makeConfiguratorLoaderMachine',\n                        data: (context) => ({\n                            connector: context.selectedConnector,\n                        }),\n                        onDone: {\n                            target: 'configure',\n                            actions: (0,es_index_js_.assign)((_context, event) => ({\n                                Configurator: event.data.Configurator,\n                                configurationSteps: event.data.steps,\n                            })),\n                        },\n                        onError: {\n                            actions: (_context, event) => console.error(event.data.message),\n                        },\n                    },\n                },\n                configure: {\n                    id: 'configure',\n                    initial: 'configuring',\n                    invoke: {\n                        id: 'configuratorRef',\n                        src: configuratorMachine,\n                        data: (context) => ({\n                            connector: context.selectedConnector,\n                            configuration: context.connectorConfiguration,\n                            steps: context.configurationSteps || ['single step'],\n                            activeStep: context.activeConfigurationStep || 0,\n                            isActiveStepValid: context.connectorConfiguration !== false,\n                        }),\n                        onDone: {\n                            target: '#creationWizard.reviewConfiguration',\n                            actions: (0,es_index_js_.assign)((_, event) => ({\n                                connectorConfiguration: event.data.configuration || true,\n                            })),\n                        },\n                        onError: {\n                            actions: (_context, event) => console.error(event.data.message),\n                        },\n                    },\n                    states: {\n                        configuring: {\n                            on: {\n                                isValid: 'valid',\n                            },\n                        },\n                        valid: {\n                            on: {\n                                isInvalid: 'configuring',\n                                next: {\n                                    actions: (0,es_index_js_.send)('next', { to: 'configuratorRef' }),\n                                },\n                            },\n                        },\n                    },\n                    on: {\n                        prev: [\n                            {\n                                actions: (0,es_index_js_.send)('prev', { to: 'configuratorRef' }),\n                                cond: 'areThereSubsteps',\n                            },\n                            { target: '#creationWizard.selectCluster' },\n                        ],\n                        changedStep: {\n                            actions: (0,es_index_js_.assign)({\n                                activeConfigurationStep: (_, event) => event.step,\n                            }),\n                        },\n                    },\n                },\n            },\n        },\n        reviewConfiguration: {\n            id: 'review',\n            initial: 'reviewing',\n            invoke: {\n                id: 'reviewRef',\n                src: reviewMachine,\n                data: (context) => ({\n                    accessToken: context.accessToken,\n                    basePath: context.basePath,\n                    kafka: context.selectedKafkaInstance,\n                    cluster: context.selectedCluster,\n                    connectorType: context.selectedConnector,\n                    initialConfiguration: context.connectorConfiguration,\n                    name: '',\n                }),\n                onDone: {\n                    target: '#creationWizard.saved',\n                    actions: [\n                        (0,es_index_js_.assign)((_, event) => ({\n                            connectorConfiguration: event.data,\n                        })),\n                        'notifySave',\n                    ],\n                },\n                onError: {\n                    actions: (_context, event) => console.error(event.data.message),\n                },\n            },\n            states: {\n                reviewing: {\n                    on: {\n                        isValid: 'valid',\n                    },\n                },\n                valid: {\n                    on: {\n                        isInvalid: 'reviewing',\n                        next: {\n                            actions: (0,es_index_js_.send)('save', { to: 'reviewRef' }),\n                        },\n                    },\n                },\n            },\n            on: {\n                prev: 'configureConnector',\n            },\n        },\n        saved: {\n            id: 'saved',\n            type: 'final',\n        },\n    },\n    on: {\n        jumpToSelectConnector: {\n            target: 'selectConnector',\n        },\n        jumpToSelectKafka: {\n            target: 'selectKafka',\n            cond: 'isConnectorSelected',\n        },\n        jumpToSelectCluster: {\n            target: 'selectCluster',\n            cond: 'isKafkaInstanceSelected',\n        },\n        jumpToConfigureConnector: {\n            target: 'configureConnector',\n            cond: 'isClusterSelected',\n            actions: (0,es_index_js_.assign)((_, event) => ({\n                activeConfigurationStep: event.subStep || 0,\n            })),\n        },\n        jumpToReviewConfiguration: {\n            target: 'reviewConfiguration',\n            cond: 'isConnectorConfigured',\n        },\n    },\n}, {\n    guards: {\n        isKafkaInstanceSelected: (context) => context.selectedKafkaInstance !== undefined,\n        isClusterSelected: (context) => context.selectedCluster !== undefined,\n        isConnectorSelected: (context, event) => {\n            const subStep = event.subStep;\n            if (subStep) {\n                return (context.selectedConnector !== undefined &&\n                    (context.connectorConfiguration !== undefined ||\n                        subStep <= context.activeConfigurationStep));\n            }\n            return context.selectedConnector !== undefined;\n        },\n        isConnectorConfigured: (context) => {\n            if (!context.configurationSteps) {\n                return (context.connectorConfiguration !== undefined &&\n                    context.connectorConfiguration !== false);\n            }\n            return ((context.connectorConfiguration !== undefined &&\n                context.connectorConfiguration !== false) ||\n                (context.activeConfigurationStep ===\n                    context.configurationSteps.length - 1 &&\n                    context.isConfigurationValid === true));\n        },\n        areThereSubsteps: (context) => context.activeConfigurationStep > 0,\n    },\n    actions: {\n        notifySave: (context) => {\n            if (context.onSave) {\n                context.onSave();\n            }\n        },\n    },\n    services: {\n        makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n});\n\n;// CONCATENATED MODULE: ./src/CreateConnectorWizardContext.tsx\n\n\n\n\n\n\nconst CreateConnectorWizardMachineService = (0,index_js_eager_.createContext)(null);\nconst CreateConnectorWizardProvider = ({ children, accessToken, basePath, fetchConfigurator, onSave }) => {\n    const makeConfiguratorLoaderMachine = (0,index_js_eager_.useCallback)(() => configuratorLoaderMachine.withConfig({\n        services: {\n            fetchConfigurator: (context) => fetchConfigurator(context.connector),\n        },\n    }), [fetchConfigurator]);\n    const service = (0,index_js_.useInterpret)(creationWizardMachine, {\n        devTools: true,\n        context: {\n            accessToken,\n            basePath,\n            onSave,\n        },\n        services: {\n            makeConfiguratorLoaderMachine,\n        },\n    });\n    return (index_js_eager_default().createElement(CreateConnectorWizardMachineService.Provider, { value: service }, children));\n};\nconst useCreateConnectorWizardService = () => {\n    const service = (0,index_js_eager_.useContext)(CreateConnectorWizardMachineService);\n    if (!service) {\n        throw new Error(`useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`);\n    }\n    return service;\n};\nconst useCreateConnectorWizard = () => {\n    const service = useCreateConnectorWizardService();\n    return (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => ({\n        connectorTypeRef: state.children\n            .selectConnectorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef,\n        clusterRef: state.children.selectClusterRef,\n        reviewRef: state.children.reviewRef,\n    }), []));\n};\nconst useClustersMachineIsReady = () => {\n    const { clusterRef } = useCreateConnectorWizard();\n    return (0,index_js_.useSelector)(clusterRef, (0,index_js_eager_.useCallback)((state) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clusterRef]));\n};\nconst useClustersMachine = () => {\n    var _a;\n    const { clusterRef } = useCreateConnectorWizard();\n    const api = usePagination((_a = clusterRef.getSnapshot()) === null || _a === void 0 ? void 0 : _a.children[PAGINATED_MACHINE_ID]);\n    const { selectedId } = (0,index_js_.useSelector)(clusterRef, (0,index_js_eager_.useCallback)((state) => {\n        var _a;\n        return ({\n            selectedId: (_a = state.context.selectedCluster) === null || _a === void 0 ? void 0 : _a.id,\n        });\n    }, []));\n    const onSelect = (0,index_js_eager_.useCallback)((selectedCluster) => {\n        clusterRef.send({ type: 'selectCluster', selectedCluster });\n    }, [clusterRef]);\n    const onQuery = (0,index_js_eager_.useCallback)((request) => {\n        clusterRef.send(Object.assign({ type: 'api.query' }, request));\n    }, [clusterRef]);\n    return Object.assign(Object.assign({}, api), { selectedId,\n        onSelect,\n        onQuery });\n};\nconst useConnectorTypesMachineIsReady = () => {\n    const { connectorTypeRef } = useCreateConnectorWizard();\n    return (0,index_js_.useSelector)(connectorTypeRef, (0,index_js_eager_.useCallback)((state) => {\n        return state.matches({ root: { api: 'ready' } });\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [connectorTypeRef]));\n};\nconst useConnectorTypesMachine = () => {\n    var _a;\n    const { connectorTypeRef } = useCreateConnectorWizard();\n    const api = usePagination((_a = connectorTypeRef.getSnapshot()) === null || _a === void 0 ? void 0 : _a.children[PAGINATED_MACHINE_ID]);\n    const { selectedId } = (0,index_js_.useSelector)(connectorTypeRef, (0,index_js_eager_.useCallback)((state) => {\n        var _a;\n        return ({\n            selectedId: (_a = state.context.selectedConnector) === null || _a === void 0 ? void 0 : _a.id,\n        });\n    }, []));\n    const onSelect = (0,index_js_eager_.useCallback)((selectedConnector) => {\n        connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    }, [connectorTypeRef]);\n    const onQuery = (0,index_js_eager_.useCallback)((request) => {\n        connectorTypeRef.send(Object.assign({ type: 'api.query' }, request));\n    }, [connectorTypeRef]);\n    return Object.assign(Object.assign({}, api), { selectedId,\n        onSelect,\n        onQuery });\n};\nconst useKafkasMachineIsReady = () => {\n    const { kafkaRef } = useCreateConnectorWizard();\n    return (0,index_js_.useSelector)(kafkaRef, (0,index_js_eager_.useCallback)((state) => {\n        return state.matches({ root: { api: 'ready' } });\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [kafkaRef]));\n};\nconst useKafkasMachine = () => {\n    var _a;\n    const { kafkaRef } = useCreateConnectorWizard();\n    const api = usePagination((_a = kafkaRef.getSnapshot()) === null || _a === void 0 ? void 0 : _a.children[PAGINATED_MACHINE_ID]);\n    const { selectedId } = (0,index_js_.useSelector)(kafkaRef, (0,index_js_eager_.useCallback)((state) => {\n        var _a;\n        return ({\n            selectedId: (_a = state.context.selectedInstance) === null || _a === void 0 ? void 0 : _a.id,\n        });\n    }, []));\n    const onSelect = (0,index_js_eager_.useCallback)((selectedInstance) => {\n        kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    }, [kafkaRef]);\n    const onQuery = (0,index_js_eager_.useCallback)((request) => {\n        kafkaRef.send(Object.assign({ type: 'api.query' }, request));\n    }, [kafkaRef]);\n    return Object.assign(Object.assign({}, api), { selectedId,\n        onSelect,\n        onQuery });\n};\nconst useReviewMachine = () => {\n    const { reviewRef } = useCreateConnectorWizard();\n    const { name, serviceAccount, configString, configStringError, configStringWarnings, isSaving, savingError, } = (0,index_js_.useSelector)(reviewRef, (0,index_js_eager_.useCallback)((state) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n        configString: state.context.configString,\n        configStringError: state.context.configStringError,\n        configStringWarnings: state.context.configStringWarnings,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n    }), []));\n    const onSetName = (0,index_js_eager_.useCallback)((name) => {\n        reviewRef.send({ type: 'setName', name });\n    }, [reviewRef]);\n    const onSetServiceAccount = (0,index_js_eager_.useCallback)((serviceAccount) => {\n        reviewRef.send({ type: 'setServiceAccount', serviceAccount });\n    }, [reviewRef]);\n    const onUpdateConfiguration = (0,index_js_eager_.useCallback)((data) => {\n        reviewRef.send({ type: 'updateConfiguration', data: data || '' });\n    }, [reviewRef]);\n    return {\n        name,\n        serviceAccount,\n        configString,\n        configStringError,\n        configStringWarnings,\n        isSaving,\n        savingError,\n        onSetName,\n        onSetServiceAccount,\n        onUpdateConfiguration,\n    };\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js\nvar Gallery = __webpack_require__(21877);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js\nvar CardHeader = __webpack_require__(70401);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js\nvar CardTitle = __webpack_require__(70);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js\nvar CardBody = __webpack_require__(62394);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js\nvar DescriptionList = __webpack_require__(91921);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup.js\nvar DescriptionListGroup = __webpack_require__(58844);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm.js\nvar DescriptionListTerm = __webpack_require__(10550);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription.js\nvar DescriptionListDescription = __webpack_require__(3025);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/cluster-icon.js\nvar cluster_icon = __webpack_require__(14888);\n;// CONCATENATED MODULE: ./src/EmptyStateNoOSDCluster.tsx\n\n\n\n\n\nconst EmptyStateNoOSDCluster = ({ onHelp }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, { variant: EmptyState/* EmptyStateVariant.xl */.I.xl, className: (0,esm/* css */.i)('pf-u-pt-2xl pf-u-pt-3xl-on-md') },\n        index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: cluster_icon/* ClusterIcon */.nc }),\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h1', size: Title/* TitleSizes.4xl */.H[\"4xl\"] }, t('No OSD Cluster available')),\n        index_js_eager_default().createElement(EmptyStateBody/* EmptyStateBody */.B, null,\n            index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                \"Development preview instances are available for creation. For help getting started, access the\",\n                ' ',\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.link */.Wu.link, isSmall: true, isInline: true, onClick: onHelp }, \"quick start guide.\")))));\n};\n\n;// CONCATENATED MODULE: ./src/StepBodyLayout.tsx\n\n\nconst StepBodyLayout = ({ title, description, children }) => (index_js_eager_default().createElement(\"div\", { className: 'pf-l-stack' },\n    index_js_eager_default().createElement(Level/* Level */.a, { className: 'pf-u-p-md pf-l-stack__item' },\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: \"h2\" }, title),\n        (() => {\n            switch (typeof description) {\n                case 'string':\n                    return index_js_eager_default().createElement(\"p\", null, description);\n                default:\n                    return description;\n            }\n        })()),\n    index_js_eager_default().createElement(\"div\", { className: 'pf-l-stack__item pf-l-stack pf-m-fill' }, children)));\n\n;// CONCATENATED MODULE: ./src/StepClusters.tsx\n\n\n\n\n\n\n\n\n\n\n\nfunction SelectCluster() {\n    const isReady = useClustersMachineIsReady();\n    return isReady ? index_js_eager_default().createElement(ClustersGallery, null) : null;\n}\nconst ClustersGallery = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    // const history = useHistory();\n    const { response, selectedId, loading, error, noResults, \n    // results,\n    queryEmpty, \n    // queryResults,\n    firstRequest, onSelect, onQuery, } = useClustersMachine();\n    return (index_js_eager_default().createElement(StepBodyLayout, { title: t('OSD cluster'), description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos' }, (() => {\n        var _a;\n        switch (true) {\n            case firstRequest:\n                return index_js_eager_default().createElement(Loading, null);\n            case queryEmpty:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ClustersToolbar, null),\n                    index_js_eager_default().createElement(EmptyStateNoMatchesFound, { onClear: () => onQuery({ page: 1, size: 10 }) })));\n            case noResults || error:\n                return (index_js_eager_default().createElement(EmptyStateNoOSDCluster, { onHelp: function () {\n                        throw new Error('Function not implemented.');\n                    } }));\n            case loading:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ClustersToolbar, null),\n                    index_js_eager_default().createElement(Loading, null)));\n            default:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ClustersToolbar, null),\n                    index_js_eager_default().createElement(\"div\", { className: 'pf-l-stack__item pf-m-fill pf-u-p-md' },\n                        index_js_eager_default().createElement(Gallery/* Gallery */.r, { hasGutter: true }, (_a = response === null || response === void 0 ? void 0 : response.items) === null || _a === void 0 ? void 0 : _a.map((i) => {\n                            var _a, _b, _c;\n                            return (index_js_eager_default().createElement(Card/* Card */.Z, { isHoverable: true, key: i.id, isSelectable: true, isSelected: selectedId === i.id, onClick: () => onSelect(i.id) },\n                                index_js_eager_default().createElement(CardHeader/* CardHeader */.O, null,\n                                    index_js_eager_default().createElement(CardTitle/* CardTitle */.l, null, (_a = i.metadata) === null || _a === void 0 ? void 0 : _a.name)),\n                                index_js_eager_default().createElement(CardBody/* CardBody */.e, null,\n                                    index_js_eager_default().createElement(DescriptionList/* DescriptionList */.o, null,\n                                        index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                            index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Owner\"),\n                                            index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, (_b = i.metadata) === null || _b === void 0 ? void 0 : _b.owner)),\n                                        index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                            index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Created\"),\n                                            index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, (_c = i.metadata) === null || _c === void 0 ? void 0 : _c.created_at))))));\n                        })))));\n        }\n    })()));\n};\nconst ClustersToolbar = () => {\n    const { request, onQuery } = useClustersMachine();\n    const searchInputRef = (0,index_js_eager_.useRef)(null);\n    const debouncedOnQuery = useDebounce(onQuery, 1000);\n    // const [statuses, setStatuses] = useState<string[]>([\n    //   'Pending',\n    //   'Created',\n    //   'Cancelled',\n    // ]);\n    // const [statusesToggled, setStatusesToggled] = useState(false);\n    // const clearAllFilters = useCallback(() => {\n    //   setSearchValue('');\n    //   setStatuses([]);\n    // }, []);\n    // const toggleStatuses = useCallback(\n    //   () => setStatusesToggled(prev => !prev),\n    //   []\n    // );\n    // const onSelectStatus = useCallback(\n    //   (_, status) =>\n    //     setStatuses(prev =>\n    //       prev.includes(status)\n    //         ? prev.filter(s => s !== status)\n    //         : [...prev, status]\n    //     ),\n    //   []\n    // );\n    // const statusMenuItems = [\n    //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n    //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n    //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n    // ];\n    // ensure the search input value reflects what's specified in the request object\n    // useEffect(() => {\n    //   if (searchInputRef.current) {\n    //     searchInputRef.current.value = (request.name as string | undefined) || '';\n    //   }\n    // }, [searchInputRef, request]);\n    const toggleGroupItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n            index_js_eager_default().createElement(InputGroup/* InputGroup */.B, null,\n                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { name: \"textInput2\", id: \"textInput2\", type: \"search\", \"aria-label\": \"search input example\", onChange: (value) => debouncedOnQuery({\n                        size: request.size,\n                        page: 1,\n                        name: value,\n                    }), ref: searchInputRef }),\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'control', \"aria-label\": \"search button for search input\" },\n                    index_js_eager_default().createElement(search_icon/* SearchIcon */.W1, null))))));\n    const toolbarItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarToggleGroup/* ToolbarToggleGroup */.R, { toggleIcon: index_js_eager_default().createElement(filter_icon/* FilterIcon */.k1, null), breakpoint: \"xl\" }, toggleGroupItems),\n        index_js_eager_default().createElement(ToolbarGroup/* ToolbarGroup */.k, { variant: \"icon-button-group\" },\n            index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: \"primary\" }, \"Create Clusters Instance\"))),\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, { variant: \"pagination\", alignment: { default: 'alignRight' } },\n            index_js_eager_default().createElement(ClustersPagination, { isCompact: true }))));\n    return (index_js_eager_default().createElement(Toolbar/* Toolbar */.o, { id: \"toolbar-group-types\", collapseListedFiltersBreakpoint: \"xl\" },\n        index_js_eager_default().createElement(ToolbarContent/* ToolbarContent */.c, null, toolbarItems)));\n};\nconst ClustersPagination = ({ isCompact = false, }) => {\n    const { request, response, onQuery } = useClustersMachine();\n    return (index_js_eager_default().createElement(Pagination_Pagination, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => onQuery({ page, size }), isCompact: isCompact }));\n};\n\n;// CONCATENATED MODULE: ./src/StepConfigurator.tsx\n\n\n\n\n\n\n\n\nconst ConnectedCustomConfigurator = ({ actor, Configurator }) => {\n    const { activeStep, configuration, connector } = (0,index_js_.useSelector)(actor, (0,index_js_eager_.useCallback)((state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n    }), [actor]));\n    return (index_js_eager_default().createElement(Configurator, { activeStep: activeStep, configuration: configuration, connector: connector, onChange: (configuration, isValid) => actor.send({ type: 'change', configuration, isValid }) }));\n};\nconst ConnectedJsonSchemaConfigurator = ({ actor }) => {\n    const { configuration, connector } = (0,index_js_.useSelector)(actor, (0,index_js_eager_.useCallback)((state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n    }), [actor]));\n    return (index_js_eager_default().createElement(JsonSchemaConfigurator, { schema: connector.json_schema, configuration: configuration || {}, onChange: (configuration, isValid) => actor.send({ type: 'change', configuration, isValid }) }));\n};\nconst ConfiguratorStep = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const service = useCreateConnectorWizardService();\n    const { isLoading, hasErrors, Configurator, configuratorRef, hasCustomConfigurator, } = (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => {\n        const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator = state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n        return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            configuration: state.context.connectorConfiguration,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n                .configuratorRef,\n        };\n    }, [service]));\n    return (index_js_eager_default().createElement(StepBodyLayout, { title: t('Configurations'), description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos' }, (() => {\n        switch (true) {\n            case isLoading:\n                return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, null,\n                    index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { variant: \"container\", component: Spinner/* Spinner */.$ }),\n                    index_js_eager_default().createElement(Title/* Title */.D, { size: \"lg\", headingLevel: \"h4\" }, t('loading'))));\n            case hasErrors:\n                return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, null,\n                    index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: exclamation_circle_icon/* ExclamationCircleIcon */.$O }),\n                    index_js_eager_default().createElement(Title/* Title */.D, { size: \"lg\", headingLevel: \"h4\" }, \"Error message\")));\n            case hasCustomConfigurator:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Suspense, { fallback: null },\n                    index_js_eager_default().createElement(ConnectedCustomConfigurator, { actor: configuratorRef, Configurator: Configurator })));\n            default:\n                return index_js_eager_default().createElement(ConnectedJsonSchemaConfigurator, { actor: configuratorRef });\n        }\n    })()));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js\nvar SelectOption = __webpack_require__(92694);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarFilter.js\nvar ToolbarFilter = __webpack_require__(35248);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js + 5 modules\nvar Select = __webpack_require__(1211);\n;// CONCATENATED MODULE: ./src/stringToChip.tsx\nconst stringToChip = (value, t) => ({ key: value, node: t(value) });\n\n;// CONCATENATED MODULE: ./src/StepConnectorTypes.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nfunction SelectConnectorType() {\n    const isReady = useConnectorTypesMachineIsReady();\n    return isReady ? index_js_eager_default().createElement(ConnectorTypesGallery, null) : null;\n}\nfunction ConnectorTypesGallery() {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const { response, loading, error, noResults, \n    // results,\n    queryEmpty, \n    // queryResults,\n    firstRequest, selectedId, onSelect, onQuery, } = useConnectorTypesMachine();\n    return (index_js_eager_default().createElement(StepBodyLayout, { title: t('Connector category'), description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos' }, (() => {\n        var _a;\n        switch (true) {\n            case firstRequest:\n                return index_js_eager_default().createElement(Loading, null);\n            case queryEmpty:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ConnectorTypesToolbar, null),\n                    index_js_eager_default().createElement(EmptyStateNoMatchesFound, { onClear: () => onQuery({ page: 1, size: 10 }) })));\n            case noResults || error:\n                return index_js_eager_default().createElement(EmptyStateGenericError, null);\n            case loading:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ConnectorTypesToolbar, null),\n                    index_js_eager_default().createElement(Loading, null)));\n            default:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(ConnectorTypesToolbar, null),\n                    index_js_eager_default().createElement(\"div\", { className: 'pf-l-stack__item pf-m-fill pf-u-p-md' },\n                        index_js_eager_default().createElement(Gallery/* Gallery */.r, { hasGutter: true }, (_a = response === null || response === void 0 ? void 0 : response.items) === null || _a === void 0 ? void 0 : _a.map((c) => (index_js_eager_default().createElement(Card/* Card */.Z, { isHoverable: true, key: c.id, isSelectable: true, isSelected: selectedId === c.id, onClick: () => onSelect(c.id) },\n                            index_js_eager_default().createElement(CardHeader/* CardHeader */.O, null,\n                                index_js_eager_default().createElement(CardTitle/* CardTitle */.l, null, c.name)),\n                            index_js_eager_default().createElement(CardBody/* CardBody */.e, null,\n                                index_js_eager_default().createElement(DescriptionList/* DescriptionList */.o, null,\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, c.description)),\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Version\"),\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, c.version)),\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"ID\"),\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, c.id)))))))))));\n        }\n    })()));\n}\nconst ConnectorTypesToolbar = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const { request, onQuery } = useConnectorTypesMachine();\n    const [categoriesToggled, setCategoriesToggled] = (0,index_js_eager_.useState)(false);\n    const nameInputRef = (0,index_js_eager_.useRef)(null);\n    const debouncedOnQuery = useDebounce(onQuery, 1000);\n    const { name, categories = [] } = request.query || {};\n    const clearAllFilters = (0,index_js_eager_.useCallback)(() => onQuery({ page: 1, size: request.size }), [onQuery, request.size]);\n    const toggleCategories = (0,index_js_eager_.useCallback)(() => setCategoriesToggled((prev) => !prev), []);\n    const onSelectFilter = (category, values, value) => onQuery(Object.assign(Object.assign({}, request), { query: Object.assign(Object.assign({}, (request.query || {})), { [category]: values.includes(value)\n                ? values.filter((s) => s !== value)\n                : [...(values || []), value] }) }));\n    const onSelectCategory = (_category, value) => {\n        onSelectFilter('categories', categories, value.key);\n    };\n    const onDeleteQueryGroup = (category) => onQuery(Object.assign(Object.assign({}, request), { query: Object.assign(Object.assign({}, (request.query || {})), { [category]: undefined }) }));\n    // ensure the search input value reflects what's specified in the request object\n    (0,index_js_eager_.useEffect)(() => {\n        if (nameInputRef.current) {\n            nameInputRef.current.value = name || '';\n        }\n    }, [nameInputRef, name]);\n    const typeMenuItems = [\n        index_js_eager_default().createElement(SelectOption/* SelectOption */.$, { key: \"sink\", value: \"sink\" }, t('sink')),\n        index_js_eager_default().createElement(SelectOption/* SelectOption */.$, { key: \"source\", value: \"source\" }, t('source')),\n    ];\n    const toggleGroupItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n            index_js_eager_default().createElement(InputGroup/* InputGroup */.B, null,\n                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { name: \"name\", id: \"name\", type: \"search\", \"aria-label\": \"filter by connector name\", onChange: (name) => debouncedOnQuery({\n                        size: request.size,\n                        page: 1,\n                        query: Object.assign(Object.assign({}, request.query), { name }),\n                    }), ref: nameInputRef }),\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'control', \"aria-label\": \"search button for search input\" },\n                    index_js_eager_default().createElement(search_icon/* SearchIcon */.W1, null)))),\n        index_js_eager_default().createElement(ToolbarGroup/* ToolbarGroup */.k, { variant: \"filter-group\" },\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: categories.map((v) => stringToChip(v, t)), deleteChip: onSelectCategory, deleteChipGroup: () => onDeleteQueryGroup('categories'), categoryName: \"Connector type\" },\n                index_js_eager_default().createElement(Select/* Select */.P, { variant: 'checkbox', \"aria-label\": \"Connector type\", onToggle: toggleCategories, onSelect: (_, v) => onSelectCategory('', stringToChip(v, t)), selections: categories, isOpen: categoriesToggled, placeholderText: \"Connector type\" }, typeMenuItems)))));\n    const toolbarItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarToggleGroup/* ToolbarToggleGroup */.R, { toggleIcon: index_js_eager_default().createElement(filter_icon/* FilterIcon */.k1, null), breakpoint: \"xl\" }, toggleGroupItems),\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, { variant: \"pagination\", alignment: { default: 'alignRight' } },\n            index_js_eager_default().createElement(ConnectorTypesPagination, { isCompact: true }))));\n    return (index_js_eager_default().createElement(Toolbar/* Toolbar */.o, { id: \"toolbar-group-types\", collapseListedFiltersBreakpoint: \"xl\", clearAllFilters: clearAllFilters },\n        index_js_eager_default().createElement(ToolbarContent/* ToolbarContent */.c, null, toolbarItems)));\n};\nconst ConnectorTypesPagination = ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (index_js_eager_default().createElement(Pagination_Pagination, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => onQuery({ page, size }), isCompact: isCompact }));\n};\n\n// EXTERNAL MODULE: consume shared module (default) react-error-boundary@=3.1.3 (strict) (fallback: ./node_modules/react-error-boundary/dist/react-error-boundary.umd.js)\nvar react_error_boundary_umd_js_ = __webpack_require__(29355);\n;// CONCATENATED MODULE: ./src/StepErrorBoundary.tsx\n\n\nconst ErrorFallback = ({ error }) => {\n    return (index_js_eager_default().createElement(\"div\", { role: \"alert\" },\n        index_js_eager_default().createElement(\"p\", null, \"Something went wrong:\"),\n        index_js_eager_default().createElement(\"pre\", null, error.message)));\n};\nconst StepErrorBoundary = ({ children }) => (index_js_eager_default().createElement(react_error_boundary_umd_js_.ErrorBoundary, { FallbackComponent: ErrorFallback, resetKeys: [Date.now()] }, children));\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem.js\nvar DropdownItem = __webpack_require__(84457);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js\nvar Dropdown = __webpack_require__(56787);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/dropdownConstants.js\nvar dropdownConstants = __webpack_require__(99355);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownToggle.js\nvar DropdownToggle = __webpack_require__(75728);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-icons/dist/esm/icons/space-shuttle-icon.js\nvar icons_space_shuttle_icon = __webpack_require__(65697);\n;// CONCATENATED MODULE: ./src/EmptyStateNoKafkaInstances.tsx\n\n\n\n\n\nconst EmptyStateNoKafkaInstances = ({ onHelp }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    return (index_js_eager_default().createElement(EmptyState/* EmptyState */.u, { variant: EmptyState/* EmptyStateVariant.xl */.I.xl, className: (0,esm/* css */.i)('pf-u-pt-2xl pf-u-pt-3xl-on-md') },\n        index_js_eager_default().createElement(EmptyStateIcon/* EmptyStateIcon */.k, { icon: icons_space_shuttle_icon/* SpaceShuttleIcon */.ae }),\n        index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: 'h1', size: Title/* TitleSizes.4xl */.H[\"4xl\"] }, t('No Kafka instance available')),\n        index_js_eager_default().createElement(EmptyStateBody/* EmptyStateBody */.B, null,\n            index_js_eager_default().createElement(Trans/* Trans */.c, null,\n                \"Development preview instances are available for creation. For help getting started, access the\",\n                ' ',\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.link */.Wu.link, isSmall: true, isInline: true, onClick: onHelp }, \"quick start guide.\")))));\n};\n\n;// CONCATENATED MODULE: ./src/StepKafkas.tsx\n\n\n\n\n\n\n\n\n\n// import { useBasename } from '@rhoas/app-services-ui-shared';\n\n\n\nconst SelectKafkaInstance = () => {\n    const isReady = useKafkasMachineIsReady();\n    return isReady ? index_js_eager_default().createElement(KafkasGallery, null) : null;\n};\nconst KafkasGallery = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    // const basename = useBasename();\n    const { response, loading, error, selectedId, noResults, \n    // results,\n    queryEmpty, \n    // queryResults,\n    firstRequest, onSelect, onQuery, } = useKafkasMachine();\n    return (index_js_eager_default().createElement(StepBodyLayout, { title: t('Kafka instance'), description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos' }, (() => {\n        var _a;\n        switch (true) {\n            case firstRequest:\n                return index_js_eager_default().createElement(Loading, null);\n            case queryEmpty:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(KafkaToolbar, null),\n                    index_js_eager_default().createElement(EmptyStateNoMatchesFound, { onClear: () => onQuery({ page: 1, size: 10 }) })));\n            case noResults || error:\n                return (index_js_eager_default().createElement(EmptyStateNoKafkaInstances, { onHelp: function () {\n                        throw new Error('Function not implemented.');\n                    } }));\n            case loading:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(KafkaToolbar, null),\n                    index_js_eager_default().createElement(Loading, null)));\n            default:\n                return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                    index_js_eager_default().createElement(KafkaToolbar, null),\n                    index_js_eager_default().createElement(\"div\", { className: 'pf-l-stack__item pf-m-fill pf-u-p-md' },\n                        index_js_eager_default().createElement(Gallery/* Gallery */.r, { hasGutter: true }, (_a = response === null || response === void 0 ? void 0 : response.items) === null || _a === void 0 ? void 0 : _a.map((i) => (index_js_eager_default().createElement(Card/* Card */.Z, { isHoverable: true, key: i.id, isSelectable: true, isSelected: selectedId === i.id, onClick: () => onSelect(i.id) },\n                            index_js_eager_default().createElement(CardHeader/* CardHeader */.O, null,\n                                index_js_eager_default().createElement(CardTitle/* CardTitle */.l, null, i.name)),\n                            index_js_eager_default().createElement(CardBody/* CardBody */.e, null,\n                                index_js_eager_default().createElement(DescriptionList/* DescriptionList */.o, null,\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Region\"),\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, i.region)),\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Owner\"),\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, i.owner)),\n                                    index_js_eager_default().createElement(DescriptionListGroup/* DescriptionListGroup */.g, null,\n                                        index_js_eager_default().createElement(DescriptionListTerm/* DescriptionListTerm */.M, null, \"Created\"),\n                                        index_js_eager_default().createElement(DescriptionListDescription/* DescriptionListDescription */.b, null, i.created_at)))))))))));\n        }\n    })()));\n};\nconst KafkaToolbar = () => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const { request, onQuery } = useKafkasMachine();\n    const [statusesToggled, setStatusesToggled] = (0,index_js_eager_.useState)(false);\n    const [cloudProvidersToggled, setCloudProvidersToggled] = (0,index_js_eager_.useState)(false);\n    const [regionsToggled, setRegionsToggled] = (0,index_js_eager_.useState)(false);\n    const [categoryToggled, setCategoryToggled] = (0,index_js_eager_.useState)(false);\n    const [selectedCategory, setSelectedCategory] = (0,index_js_eager_.useState)('Name');\n    const onToggleStatuses = (0,index_js_eager_.useCallback)(() => setStatusesToggled((prev) => !prev), []);\n    const onToggleCloudProviders = (0,index_js_eager_.useCallback)(() => setCloudProvidersToggled((prev) => !prev), []);\n    const onToggleRegions = (0,index_js_eager_.useCallback)(() => setRegionsToggled((prev) => !prev), []);\n    const onFilterCategoryToggle = (0,index_js_eager_.useCallback)(() => setCategoryToggled((prev) => !prev), []);\n    const debouncedOnQuery = useDebounce(onQuery, 1000);\n    const { name, owner, cloudProviders = [], regions = [], statuses = [], } = request.query || {};\n    const clearAllFilters = (0,index_js_eager_.useCallback)(() => onQuery({ page: 1, size: request.size }), [onQuery, request.size]);\n    const nameInputRef = (0,index_js_eager_.useRef)(null);\n    const ownerInputRef = (0,index_js_eager_.useRef)(null);\n    const onSelectFilter = (category, values, value) => onQuery(Object.assign(Object.assign({}, request), { query: Object.assign(Object.assign({}, (request.query || {})), { [category]: values.includes(value)\n                ? values.filter((s) => s !== value)\n                : [...(values || []), value] }) }));\n    const onSelectStatus = (_category, value) => {\n        onSelectFilter('statuses', statuses, value.key);\n    };\n    const onSelectCloudProvider = (_category, value) => {\n        onSelectFilter('cloudProviders', cloudProviders, value.key);\n    };\n    const onSelectRegion = (_category, value) => {\n        onSelectFilter('regions', regions, value.key);\n    };\n    const onDeleteQueryGroup = (category) => onQuery(Object.assign(Object.assign({}, request), { query: Object.assign(Object.assign({}, (request.query || {})), { [category]: undefined }) }));\n    const selectCategory = (0,index_js_eager_.useCallback)((event) => {\n        const eventTarget = event === null || event === void 0 ? void 0 : event.target;\n        const selectedCategory = eventTarget.innerText;\n        setSelectedCategory(selectedCategory);\n        setCategoryToggled((prev) => !prev);\n    }, []);\n    // ensure the search input value reflects what's specified in the request object\n    (0,index_js_eager_.useEffect)(() => {\n        if (nameInputRef.current) {\n            nameInputRef.current.value = name || '';\n        }\n        if (ownerInputRef.current) {\n            ownerInputRef.current.value = owner || '';\n        }\n    }, [nameInputRef, name, owner]);\n    const filterCategoryMenuItems = filterCategoryOptions.map(({ value, label }) => index_js_eager_default().createElement(DropdownItem/* DropdownItem */.h, { key: value }, label));\n    const statusMenuItems = statusOptions\n        .filter((option) => option.value !== 'preparing')\n        .map(({ value, label }) => (index_js_eager_default().createElement(SelectOption/* SelectOption */.$, { key: value, value: value }, label)));\n    const cloudProviderMenuItems = cloudProviderOptions.map(({ value, label }) => (index_js_eager_default().createElement(SelectOption/* SelectOption */.$, { key: value, value: value }, label)));\n    const regionMenuItems = regionOptions.map(({ value, label }) => (index_js_eager_default().createElement(SelectOption/* SelectOption */.$, { key: value, value: value }, label)));\n    const filterCategoryDropdown = (index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n        index_js_eager_default().createElement(Dropdown/* Dropdown */.L, { onSelect: (event) => selectCategory(event), position: dropdownConstants/* DropdownPosition.left */.ir.left, toggle: index_js_eager_default().createElement(DropdownToggle/* DropdownToggle */.Z, { onToggle: onFilterCategoryToggle, style: { width: '100%' } },\n                index_js_eager_default().createElement(filter_icon/* FilterIcon */.k1, { size: \"sm\" }),\n                \" \",\n                selectedCategory), isOpen: categoryToggled, dropdownItems: filterCategoryMenuItems, style: { width: '100%' } })));\n    const toggleGroupItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarGroup/* ToolbarGroup */.k, { variant: \"filter-group\" },\n            filterCategoryDropdown,\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: statuses.map((v) => stringToChip(v, t)), deleteChip: onSelectStatus, deleteChipGroup: () => onDeleteQueryGroup('statuses'), categoryName: t('status'), showToolbarItem: selectedCategory === t('status') },\n                index_js_eager_default().createElement(Select/* Select */.P, { variant: 'checkbox', \"aria-label\": t('status'), onToggle: onToggleStatuses, onSelect: (_, v) => onSelectStatus('', stringToChip(v, t)), selections: statuses, isOpen: statusesToggled, placeholderText: t('Filter by status') }, statusMenuItems)),\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: cloudProviders.map((v) => stringToChip(v, t)), deleteChip: onSelectCloudProvider, deleteChipGroup: () => onDeleteQueryGroup('cloudProviders'), categoryName: t('CloudProvider'), showToolbarItem: selectedCategory === t('CloudProvider') },\n                index_js_eager_default().createElement(Select/* Select */.P, { variant: 'checkbox', \"aria-label\": t('CloudProvider'), onToggle: onToggleCloudProviders, onSelect: (_, v) => onSelectCloudProvider('', stringToChip(v, t)), selections: cloudProviders, isOpen: cloudProvidersToggled, placeholderText: t('Filter by cloud provider') }, cloudProviderMenuItems)),\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: regions.map((v) => stringToChip(v, t)), deleteChip: onSelectRegion, deleteChipGroup: () => onDeleteQueryGroup('regions'), categoryName: t('region'), showToolbarItem: selectedCategory === t('region') },\n                index_js_eager_default().createElement(Select/* Select */.P, { variant: 'checkbox', \"aria-label\": t('region'), onToggle: onToggleRegions, onSelect: (_, v) => onSelectRegion('', stringToChip(v, t)), selections: regions, isOpen: regionsToggled, placeholderText: t('Filter by region') }, regionMenuItems)),\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: name ? [name] : [], deleteChip: () => onDeleteQueryGroup('name'), categoryName: t('name') }, selectedCategory === t('name') && (index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n                index_js_eager_default().createElement(InputGroup/* InputGroup */.B, null,\n                    index_js_eager_default().createElement(TextInput/* TextInput */.oi, { name: t('name'), id: t('name'), type: \"search\", placeholder: t('nameSearchPlaceholder'), \"aria-label\": t('nameSearchPlaceholder'), onChange: (name) => debouncedOnQuery({\n                            size: request.size,\n                            page: 1,\n                            query: Object.assign(Object.assign({}, request.query), { name }),\n                        }), ref: nameInputRef }),\n                    index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'control', \"aria-label\": \"search button for name input\", onClick: () => {\n                            var _a;\n                            return onQuery({\n                                size: request.size,\n                                page: 1,\n                                query: Object.assign(Object.assign({}, request.query), { name: ((_a = nameInputRef.current) === null || _a === void 0 ? void 0 : _a.value) || '' }),\n                            });\n                        } },\n                        index_js_eager_default().createElement(search_icon/* SearchIcon */.W1, null)))))),\n            index_js_eager_default().createElement(ToolbarFilter/* ToolbarFilter */.p, { chips: owner ? [owner] : [], deleteChip: () => onDeleteQueryGroup('owner'), categoryName: t('owner') }, selectedCategory === t('owner') && (index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n                index_js_eager_default().createElement(InputGroup/* InputGroup */.B, null,\n                    index_js_eager_default().createElement(TextInput/* TextInput */.oi, { name: t('owner'), id: t('owner'), type: \"search\", placeholder: t('ownerSearchPlaceholder'), \"aria-label\": t('ownerSearchPlaceholder'), onChange: (owner) => debouncedOnQuery({\n                            size: request.size,\n                            page: 1,\n                            query: Object.assign(Object.assign({}, request.query), { owner }),\n                        }), ref: ownerInputRef }),\n                    index_js_eager_default().createElement(Button/* Button */.zx, { variant: 'control', \"aria-label\": \"search button for owner input\", onClick: () => {\n                            var _a;\n                            return onQuery({\n                                size: request.size,\n                                page: 1,\n                                query: Object.assign(Object.assign({}, request.query), { owner: ((_a = ownerInputRef.current) === null || _a === void 0 ? void 0 : _a.value) || '' }),\n                            });\n                        } },\n                        index_js_eager_default().createElement(search_icon/* SearchIcon */.W1, null)))))))));\n    const toolbarItems = (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(ToolbarToggleGroup/* ToolbarToggleGroup */.R, { toggleIcon: index_js_eager_default().createElement(filter_icon/* FilterIcon */.k1, null), breakpoint: \"xl\" }, toggleGroupItems),\n        index_js_eager_default().createElement(ToolbarGroup/* ToolbarGroup */.k, { variant: \"icon-button-group\" },\n            index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, null,\n                index_js_eager_default().createElement(Button/* Button */.zx, { variant: \"primary\" }, \"Create Kafka Instance\"))),\n        index_js_eager_default().createElement(ToolbarItem/* ToolbarItem */.E, { variant: \"pagination\", alignment: { default: 'alignRight' } },\n            index_js_eager_default().createElement(KafkasPagination, { isCompact: true }))));\n    return (index_js_eager_default().createElement(Toolbar/* Toolbar */.o, { id: \"toolbar-group-types\", collapseListedFiltersBreakpoint: \"xl\", clearAllFilters: clearAllFilters },\n        index_js_eager_default().createElement(ToolbarContent/* ToolbarContent */.c, null, toolbarItems)));\n};\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\nconst filterCategoryOptions = [\n    { value: 'name', label: 'Name' },\n    { value: 'status', label: 'Status' },\n    { value: 'cloudprovider', label: 'Cloud Provider' },\n    { value: 'region', label: 'Region' },\n    { value: 'owner', label: 'Owner' },\n];\nconst cloudProviderOptions = [\n    { value: 'aws', label: 'Amazon Web Services' },\n];\nconst statusOptions = [\n    { value: 'ready', label: 'Ready' },\n    { value: 'failed', label: 'Failed' },\n    { value: 'accepted', label: 'Creation pending' },\n    { value: 'provisioning', label: 'Creation in progress' },\n    { value: 'preparing', label: 'Creation in progress' },\n    { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions = [\n    { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\nconst KafkasPagination = ({ isCompact = false, }) => {\n    const { request, response, onQuery } = useKafkasMachine();\n    return (index_js_eager_default().createElement(Pagination_Pagination, { itemCount: (response === null || response === void 0 ? void 0 : response.total) || 0, page: request.page, perPage: request.size, onChange: (page, size) => onQuery({ page, size }), isCompact: isCompact }));\n};\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js\nvar Form = __webpack_require__(83115);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js\nvar FormAlert = __webpack_require__(40083);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js\nvar Alert = __webpack_require__(88218);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js + 1 modules\nvar FormGroup = __webpack_require__(43627);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js\nvar Radio = __webpack_require__(92504);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js + 1 modules\nvar TextArea = __webpack_require__(23393);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/AlertGroup/AlertGroup.js\nvar AlertGroup = __webpack_require__(91699);\n;// CONCATENATED MODULE: ./src/StepReview.tsx\n\n\n\n\n\nfunction Review() {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const { name, serviceAccount, configString, configStringError, configStringWarnings, isSaving, savingError, onSetName, onSetServiceAccount, onUpdateConfiguration, } = useReviewMachine();\n    return (index_js_eager_default().createElement(StepBodyLayout, { title: t('Review'), description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit error adipisci, ducimus ipsum dicta quo beatae ratione aliquid nostrum animi eos, doloremque laborum quasi sed, vitae ipsa illo delectus! Quos' },\n        index_js_eager_default().createElement(Card/* Card */.Z, null,\n            index_js_eager_default().createElement(CardBody/* CardBody */.e, null,\n                index_js_eager_default().createElement(Form/* Form */.l, null,\n                    savingError && (index_js_eager_default().createElement(FormAlert/* FormAlert */.b, null,\n                        index_js_eager_default().createElement(Alert/* Alert */.b, { variant: \"danger\", title: savingError, \"aria-live\": \"polite\", isInline: true }))),\n                    index_js_eager_default().createElement(FormGroup/* FormGroup */.c, { label: \"Name\", isRequired: true, fieldId: \"name\", helperText: \"Please provide a unique name for the connector\" },\n                        index_js_eager_default().createElement(TextInput/* TextInput */.oi, { isDisabled: isSaving, value: name, onChange: onSetName, id: \"name\" })),\n                    index_js_eager_default().createElement(FormGroup/* FormGroup */.c, { label: \"Service Account\", isRequired: true, fieldId: \"service-account\" },\n                        index_js_eager_default().createElement(Radio/* Radio */.Y, { isDisabled: isSaving, isChecked: serviceAccount === undefined, name: \"service-account\", onChange: () => onSetServiceAccount(undefined), label: \"Automatically create a Service Account for this connector\", id: \"service-account-automatic\", value: \"automatic\" }),\n                        index_js_eager_default().createElement(Radio/* Radio */.Y, { isDisabled: isSaving, isChecked: serviceAccount !== undefined, name: \"service-account\", onChange: () => onSetServiceAccount({ clientId: '', clientSecret: '' }), label: \"Provide the credentials manually\", id: \"service-account-user\", value: \"user\" }),\n                        serviceAccount !== undefined && (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n                            index_js_eager_default().createElement(FormGroup/* FormGroup */.c, { label: \"Client ID\", isRequired: true, fieldId: \"clientId\" },\n                                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { isDisabled: isSaving, value: serviceAccount.clientId, onChange: (clientId) => onSetServiceAccount(Object.assign(Object.assign({}, serviceAccount), { clientId })), id: \"clientId\" })),\n                            index_js_eager_default().createElement(FormGroup/* FormGroup */.c, { label: \"Client Secret\", isRequired: true, fieldId: \"clientSecret\" },\n                                index_js_eager_default().createElement(TextInput/* TextInput */.oi, { isDisabled: isSaving, value: serviceAccount.clientSecret, onChange: (clientSecret) => onSetServiceAccount(Object.assign(Object.assign({}, serviceAccount), { clientSecret })), id: \"clientSecret\" }))))),\n                    index_js_eager_default().createElement(FormGroup/* FormGroup */.c, { label: \"Configuration\", isRequired: true, fieldId: \"configuration\", helperText: \"Please review the configuration data.\", helperTextInvalid: configStringError, validated: configStringError !== undefined\n                            ? 'error'\n                            : configStringWarnings !== undefined\n                                ? 'warning'\n                                : 'default' },\n                        index_js_eager_default().createElement(TextArea/* TextArea */.Kx, { value: configString, onChange: onUpdateConfiguration, autoResize: true }),\n                        index_js_eager_default().createElement(AlertGroup/* AlertGroup */.y, null, configStringWarnings === null || configStringWarnings === void 0 ? void 0 : configStringWarnings.map((w, idx) => (index_js_eager_default().createElement(Alert/* Alert */.b, { key: idx, title: w, variant: \"warning\", isInline: true }))))))))));\n}\n\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/helpers/constants.js\nvar constants = __webpack_require__(64190);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNav.js\nvar WizardNav = __webpack_require__(78666);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js\nvar WizardNavItem = __webpack_require__(19294);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js\nvar WizardContext = __webpack_require__(87422);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardHeader.js\nvar WizardHeader = __webpack_require__(56695);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js\nvar WizardToggle = __webpack_require__(77388);\n// EXTERNAL MODULE: ./node_modules/@patternfly/react-styles/css/components/Wizard/wizard.js\nvar Wizard_wizard = __webpack_require__(64616);\n;// CONCATENATED MODULE: ./src/UncontrolledWizard.tsx\n\n\n\n\n\nfunction getFlattenedSteps(steps) {\n    const flattenedSteps = [];\n    for (const step of steps) {\n        if (step.steps) {\n            for (const childStep of step.steps) {\n                flattenedSteps.push(childStep);\n            }\n        }\n        else {\n            flattenedSteps.push(step);\n        }\n    }\n    return flattenedSteps;\n}\nclass UncontrolledWizard extends index_js_eager_.Component {\n    constructor(props) {\n        super(props);\n        this.handleKeyClicks = (event) => {\n            if (event.keyCode === constants/* KEY_CODES.ESCAPE_KEY */.nx.ESCAPE_KEY) {\n                if (this.state.isNavOpen) {\n                    this.setState({ isNavOpen: !this.state.isNavOpen });\n                }\n                else if (this.props.isOpen && this.props.onClose) {\n                    this.props.onClose();\n                }\n            }\n        };\n        // private goToStep = (step: number): void => {\n        //   const { onGoToStep } = this.props;\n        //   const { currentStep } = this.state;\n        //   const flattenedSteps = this.getFlattenedSteps();\n        //   const maxSteps = flattenedSteps.length;\n        //   if (step < 1) {\n        //     step = 1;\n        //   } else if (step > maxSteps) {\n        //     step = maxSteps;\n        //   }\n        //   this.setState({ currentStep: step, isNavOpen: false });\n        //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n        //   const { id, name } = flattenedSteps[step - 1];\n        //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n        // };\n        // private goToStepById = (stepId: number | string): void => {\n        //   const flattenedSteps = this.getFlattenedSteps();\n        //   let step;\n        //   for (let i = 0; i < flattenedSteps.length; i++) {\n        //     if (flattenedSteps[i].id === stepId) {\n        //       step = i + 1;\n        //       break;\n        //     }\n        //   }\n        //   if (step) {\n        //     this.setState({ currentStep: step });\n        //   }\n        // };\n        // private goToStepByName = (stepName: string): void => {\n        //   const flattenedSteps = this.getFlattenedSteps();\n        //   let step;\n        //   for (let i = 0; i < flattenedSteps.length; i++) {\n        //     if (flattenedSteps[i].name === stepName) {\n        //       step = i + 1;\n        //       break;\n        //     }\n        //   }\n        //   if (step) {\n        //     this.setState({ currentStep: step });\n        //   }\n        // };\n        this.getFlattenedSteps = () => {\n            const { steps } = this.props;\n            return getFlattenedSteps(steps);\n        };\n        this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].name === stepName) {\n                    return i + 1;\n                }\n            }\n            return 0;\n        };\n        this.initSteps = (steps) => {\n            // Set default Step values\n            for (let i = 0; i < steps.length; i++) {\n                if (steps[i].steps) {\n                    for (let j = 0; j < steps[i].steps.length; j++) {\n                        steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n                    }\n                }\n                steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n            }\n            return steps;\n        };\n        this.getElement = (appendTo) => {\n            if (typeof appendTo === 'function') {\n                return appendTo();\n            }\n            return appendTo || document.body;\n        };\n        const newId = UncontrolledWizard.currentId++;\n        this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n        this.descriptionId =\n            props.descriptionId || `pf-wizard-description-${newId}`;\n        this.state = {\n            isNavOpen: false,\n        };\n    }\n    componentDidMount() {\n        const target = typeof document !== 'undefined' ? document.body : null;\n        if (target) {\n            target.addEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    componentWillUnmount() {\n        const target = (typeof document !== 'undefined' && document.body) || null;\n        if (target) {\n            target.removeEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    render() {\n        const _a = this.props, { \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        width, height, title, description, onClose, onSave, onBack, onNext, onGoToStep, goToStep, goToStepById, goToStepByName, className, steps, currentStep, nextButtonText = 'Next', backButtonText = 'Back', cancelButtonText = 'Cancel', hideClose, closeButtonAriaLabel = 'Close', navAriaLabel, navAriaLabelledBy, mainAriaLabel, mainAriaLabelledBy, hasNoBodyPadding, footer, appendTo, isOpen, titleId, descriptionId } = _a, rest = (0,tslib_es6.__rest)(_a, [\"width\", \"height\", \"title\", \"description\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"goToStep\", \"goToStepById\", \"goToStepByName\", \"className\", \"steps\", \"currentStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\"])\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        ;\n        const flattenedSteps = this.getFlattenedSteps();\n        const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n        const activeStep = flattenedSteps[adjustedStep - 1];\n        const computedSteps = this.initSteps(steps);\n        const firstStep = activeStep === flattenedSteps[0];\n        const isValid = activeStep && activeStep.enableNext !== undefined\n            ? activeStep.enableNext\n            : true;\n        const nav = (isWizardNavOpen) => {\n            const wizNavAProps = {\n                isOpen: isWizardNavOpen,\n                'aria-label': navAriaLabel,\n                'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n            };\n            return (index_js_eager_default().createElement(WizardNav/* WizardNav */.x, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n                if (step.isFinishedStep) {\n                    // Don't show finished step in the side nav\n                    return null;\n                }\n                let enabled;\n                let navItemStep;\n                if (step.steps) {\n                    let hasActiveChild = false;\n                    let canJumpToParent = false;\n                    for (const subStep of step.steps) {\n                        if (activeStep.name === subStep.name) {\n                            // one of the children matches\n                            hasActiveChild = true;\n                        }\n                        if (subStep.canJumpTo) {\n                            canJumpToParent = true;\n                        }\n                    }\n                    navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n                    return (index_js_eager_default().createElement(WizardNavItem/* WizardNavItem */.Y, { key: index, content: step.name, isCurrent: hasActiveChild, isDisabled: !canJumpToParent, step: navItemStep, onNavItemClick: goToStep },\n                        index_js_eager_default().createElement(WizardNav/* WizardNav */.x, Object.assign({}, wizNavAProps, { returnList: true }), step.steps.map((childStep, indexChild) => {\n                            if (childStep.isFinishedStep) {\n                                // Don't show finished step in the side nav\n                                return null;\n                            }\n                            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                            enabled = childStep.canJumpTo;\n                            return (index_js_eager_default().createElement(WizardNavItem/* WizardNavItem */.Y, { key: `child_${indexChild}`, content: childStep.name, isCurrent: activeStep.name === childStep.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: goToStep }));\n                        }))));\n                }\n                navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n                enabled = step.canJumpTo;\n                return (index_js_eager_default().createElement(WizardNavItem/* WizardNavItem */.Y, Object.assign({}, step.stepNavItemProps, { key: index, content: step.name, isCurrent: activeStep.name === step.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: goToStep })));\n            })));\n        };\n        const context = {\n            goToStepById,\n            goToStepByName,\n            onNext,\n            onBack,\n            onClose,\n            activeStep,\n        };\n        const divStyles = Object.assign(Object.assign({}, (height ? { height } : {})), (width ? { width } : {}));\n        const wizard = (index_js_eager_default().createElement(WizardContext/* WizardContextProvider */.Ls, { value: context },\n            index_js_eager_default().createElement(\"div\", Object.assign({}, rest, { className: (0,esm/* css */.i)(Wizard_wizard/* default.wizard */.Z.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className), style: Object.keys(divStyles).length ? divStyles : undefined }),\n                title && (index_js_eager_default().createElement(WizardHeader/* WizardHeader */.C, { titleId: this.titleId, descriptionId: this.descriptionId, onClose: onClose, title: title, description: description, closeButtonAriaLabel: closeButtonAriaLabel, hideClose: hideClose })),\n                index_js_eager_default().createElement(WizardToggle/* WizardToggle */.E, { mainAriaLabel: mainAriaLabel, isInPage: isOpen === undefined, mainAriaLabelledBy: (title || mainAriaLabelledBy) &&\n                        (mainAriaLabelledBy || this.titleId), isNavOpen: this.state.isNavOpen, onNavToggle: (isNavOpen) => this.setState({ isNavOpen }), nav: nav, steps: steps, activeStep: activeStep, hasNoBodyPadding: hasNoBodyPadding }, footer || (index_js_eager_default().createElement(\"footer\", { className: (0,esm/* css */.i)(Wizard_wizard/* default.wizardFooter */.Z.wizardFooter) },\n                    index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.primary */.Wu.primary, type: \"submit\", onClick: onNext, isDisabled: !isValid }, (activeStep && activeStep.nextButtonText) || nextButtonText),\n                    !activeStep.hideBackButton && (index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.secondary */.Wu.secondary, onClick: onBack, className: (0,esm/* css */.i)(firstStep && 'pf-m-disabled') }, backButtonText)),\n                    !activeStep.hideCancelButton && (index_js_eager_default().createElement(\"div\", { className: Wizard_wizard/* default.wizardFooterCancel */.Z.wizardFooterCancel },\n                        index_js_eager_default().createElement(Button/* Button */.zx, { variant: Button/* ButtonVariant.link */.Wu.link, onClick: onClose }, cancelButtonText))))\n                // <WizardFooterInternal\n                //   onNext={this.onNext}\n                //   onBack={this.onBack}\n                //   onClose={onClose}\n                //   isValid={isValid}\n                //   firstStep={firstStep}\n                //   activeStep={activeStep}\n                //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n                //   backButtonText={backButtonText}\n                //   cancelButtonText={cancelButtonText}\n                // />\n                )))));\n        if (isOpen !== undefined) {\n            return (index_js_eager_default().createElement(Modal/* Modal */.u, { width: width !== null ? width : undefined, isOpen: isOpen, variant: Modal/* ModalVariant.large */.v.large, \"aria-labelledby\": this.titleId, \"aria-describedby\": this.descriptionId, showClose: false, hasNoBodyWrapper: true }, wizard));\n        }\n        return wizard;\n    }\n}\nUncontrolledWizard.displayName = 'Wizard';\nUncontrolledWizard.currentId = 0;\nUncontrolledWizard.defaultProps = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n};\n\n;// CONCATENATED MODULE: ./src/CreateConnectorWizard.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction useKafkaInstanceStep() {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const service = useCreateConnectorWizardService();\n    const { isActive, canJumpTo, enableNext } = (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo: creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n    }), [service]));\n    return {\n        name: t('Kafka instance'),\n        isActive,\n        component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n            index_js_eager_default().createElement(SelectKafkaInstance, null))),\n        canJumpTo,\n        enableNext,\n    };\n}\nfunction useConfigurationStep() {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const service = useCreateConnectorWizardService();\n    const { isActive, activeStep, canJumpTo, canJumpToStep, enableNext, steps } = (0,index_js_.useSelector)(service, (0,index_js_eager_.useCallback)((state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo: creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        steps: state.context.configurationSteps,\n        activeStep: state.context.activeConfigurationStep,\n        canJumpToStep: (idx) => creationWizardMachine.transition(state, {\n            type: 'jumpToConfigureConnector',\n            subStep: idx,\n        }).changed,\n    }), [service]));\n    return {\n        name: t('Configurations'),\n        isActive,\n        canJumpTo,\n        steps: steps\n            ? steps.map((step, idx) => ({\n                name: step,\n                isActive: isActive && activeStep === idx,\n                canJumpTo: canJumpToStep(idx),\n                enableNext,\n                component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n                    index_js_eager_default().createElement(ConfiguratorStep, null))),\n            }))\n            : undefined,\n        enableNext,\n        component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n            index_js_eager_default().createElement(ConfiguratorStep, null))),\n    };\n}\nconst CreateConnectorWizard = ({ onClose }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = (0,index_js_.useActor)(service);\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const configurationStep = useConfigurationStep();\n    if (state.value === 'saved')\n        return null;\n    const steps = [\n        {\n            name: t('Connector category'),\n            isActive: state.matches('selectConnector'),\n            component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n                index_js_eager_default().createElement(SelectConnectorType, null))),\n            canJumpTo: creationWizardMachine.transition(state, 'jumpToSelectConnector')\n                .changed || state.matches('selectConnector'),\n            enableNext: creationWizardMachine.transition(state, 'next').changed,\n        },\n        kafkaInstanceStep,\n        {\n            name: t('OSD cluster'),\n            isActive: state.matches('selectCluster'),\n            component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n                index_js_eager_default().createElement(SelectCluster, null))),\n            canJumpTo: creationWizardMachine.transition(state, 'jumpToSelectCluster')\n                .changed || state.matches('selectCluster'),\n            enableNext: creationWizardMachine.transition(state, 'next').changed,\n        },\n        configurationStep,\n        {\n            name: t('Review'),\n            isActive: state.matches('reviewConfiguration'),\n            component: (index_js_eager_default().createElement(StepErrorBoundary, null,\n                index_js_eager_default().createElement(Review, null))),\n            canJumpTo: creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n                .changed || state.matches('reviewConfiguration'),\n            enableNext: creationWizardMachine.transition(state, 'next').changed,\n            nextButtonText: 'Create connector',\n        },\n    ];\n    const flattenedSteps = getFlattenedSteps(steps);\n    const currentStep = flattenedSteps.reduceRight((idx, s, currentIdx) => s.isActive && currentIdx > idx ? currentIdx : idx, -1) + 1;\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex) => {\n        switch (stepIndex) {\n            case 1:\n                send('jumpToSelectConnector');\n                break;\n            case 2:\n                send('jumpToSelectKafka');\n                break;\n            case 3:\n                send('jumpToSelectCluster');\n                break;\n            // case 4:\n            //   send('jumpToConfigureConnector');\n            //   break;\n            case flattenedSteps.length:\n                send('jumpToReviewConfiguration');\n                break;\n            default:\n                if (stepIndex < flattenedSteps.length) {\n                    send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 4 });\n                }\n        }\n    };\n    const goToStepById = (...args) => console.log('goToStepById', args);\n    const goToStepByName = (...args) => console.log('goToStepByName', args);\n    return (index_js_eager_default().createElement(UncontrolledWizard, { className: \"cos\", steps: steps, currentStep: currentStep, onNext: onNext, onBack: onBack, onClose: onClose, onSave: () => false, goToStep: goToStep, goToStepById: goToStepById, goToStepByName: goToStepByName, hasNoBodyPadding: true }));\n};\n\n;// CONCATENATED MODULE: ./src/loadFederatedConfigurator.ts\n/* eslint-disable camelcase */\n\nconst fetchConfigurator = (connector, config) => (0,tslib_es6.__awaiter)(void 0, void 0, void 0, function* () {\n    const defaultConfig = Promise.resolve({\n        steps: false,\n        Configurator: false,\n    });\n    return new Promise((resolve) => (0,tslib_es6.__awaiter)(void 0, void 0, void 0, function* () {\n        try {\n            const federatedConfigurator = yield maybeGetFederatedConfiguratorForConnector(config, connector);\n            yield injectFederatedModuleScript(federatedConfigurator.remoteEntry);\n            resolve(loadFederatedConfigurator(federatedConfigurator.scope, federatedConfigurator.module));\n        }\n        catch (e) {\n            resolve(defaultConfig);\n        }\n    }));\n});\nconst isValidConf = (maybeConf) => maybeConf &&\n    maybeConf.remoteEntry &&\n    typeof maybeConf.remoteEntry === 'string' &&\n    maybeConf.scope &&\n    typeof maybeConf.scope === 'string' &&\n    maybeConf.module &&\n    typeof maybeConf.module === 'string';\nconst maybeGetFederatedConfiguratorForConnector = (config, connector) => (0,tslib_es6.__awaiter)(void 0, void 0, void 0, function* () {\n    console.log('Fetched federated configurator remotes configuration', config);\n    const maybeConfiguration = config[connector.id];\n    console.log(`Candidate configuration for \"${connector.id}\"`, maybeConfiguration);\n    if (!maybeConfiguration) {\n        console.log(\"Couldn't find any configuration for the requested connector\");\n        return Promise.reject();\n    }\n    if (isValidConf(maybeConfiguration)) {\n        console.log('Found a generic configuration for the connector', maybeConfiguration);\n        return maybeConfiguration;\n    }\n    console.log(\"Couldn't find a valid configuration for the requested connector\");\n    return Promise.reject();\n});\nconst injectFederatedModuleScript = (url) => (0,tslib_es6.__awaiter)(void 0, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n        const element = document.createElement('script');\n        element.src = url;\n        element.type = 'text/javascript';\n        element.async = true;\n        element.onload = () => {\n            console.log(`Dynamic federated module loaded: ${url}`);\n            document.head.removeChild(element);\n            resolve();\n        };\n        element.onerror = () => {\n            console.error(`Dynamic federated module Error: ${url}`);\n            console.log(`Dynamic federated module Removed: ${url}`);\n            document.head.removeChild(element);\n            reject();\n        };\n        document.head.appendChild(element);\n    });\n});\nfunction loadFederatedConfigurator(scope, module) {\n    return (0,tslib_es6.__awaiter)(this, void 0, void 0, function* () {\n        // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n        yield __webpack_require__.I('default');\n        const container = window[scope]; // or get the container somewhere else\n        // Initialize the container, it may provide shared modules\n        yield container.init(__webpack_require__.S.default);\n        const factory = yield window[scope].get(module);\n        const federatedConfigurationConfig = factory();\n        console.log(`loaded federated configurator configuration from ${scope}`, federatedConfigurationConfig);\n        return federatedConfigurationConfig.default;\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CreateConnectorPage.tsx\n\n\n\n\n\n\n\n\nconst CreateConnectorPage = ({ onSave, onClose }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const config = (0,esm_index_js_eager_.useConfig)();\n    const basename = (0,esm_index_js_eager_.useBasename)();\n    const { basePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = (0,index_js_eager_.useState)(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (index_js_eager_default().createElement((index_js_eager_default()).Fragment, null,\n        index_js_eager_default().createElement(PageSection/* PageSection */.NP, { variant: 'light', hasShadowBottom: true },\n            index_js_eager_default().createElement(Breadcrumb/* Breadcrumb */.a, null,\n                index_js_eager_default().createElement(BreadcrumbItem/* BreadcrumbItem */.g, { to: basename === null || basename === void 0 ? void 0 : basename.getBasename() }, t('Connectors')),\n                index_js_eager_default().createElement(BreadcrumbItem/* BreadcrumbItem */.g, { isActive: true }, t('Create connector'))),\n            index_js_eager_default().createElement(Level/* Level */.a, { className: 'pf-u-pt-md pf-u-pb-md' },\n                index_js_eager_default().createElement(Title/* Title */.D, { headingLevel: \"h1\" }, t('Create connector')))),\n        index_js_eager_default().createElement(PageSection/* PageSection */.NP, { padding: { default: 'noPadding' }, style: { zIndex: 0 }, type: 'wizard' },\n            index_js_eager_default().createElement(CreateConnectorWizardProvider, { accessToken: getToken, basePath: basePath, fetchConfigurator: (connector) => fetchConfigurator(connector, (config === null || config === void 0 ? void 0 : config.cos.configurators) || {}), onSave: onSave },\n                index_js_eager_default().createElement(CreateConnectorWizard, { onClose: openLeaveConfirm }),\n                index_js_eager_default().createElement(Modal/* Modal */.u, { title: t('Leave page?'), variant: 'small', isOpen: askForLeaveConfirm, onClose: closeLeaveConfirm, actions: [\n                        index_js_eager_default().createElement(Button/* Button */.zx, { key: \"confirm\", variant: \"primary\", onClick: onClose }, \"Confirm\"),\n                        index_js_eager_default().createElement(Button/* Button */.zx, { key: \"cancel\", variant: \"link\", onClick: closeLeaveConfirm }, \"Cancel\"),\n                    ] }, t('Changes you have made will be lost and no connector will be created.'))))));\n};\n\n;// CONCATENATED MODULE: ./src/CosRoutes.tsx\n\n\n\n\n\n\n\nconst CosRoutes = ({ getToken, apiBasepath, }) => {\n    const { t } = (0,useTranslation/* useTranslation */.$)();\n    const alert = (0,esm_index_js_eager_.useAlert)();\n    const history = (0,react_router_dom_js_eager_.useHistory)();\n    const goToConnectorsList = (0,index_js_eager_.useCallback)(() => history.push('/'), [history]);\n    const goToCreateConnector = (0,index_js_eager_.useCallback)(() => history.push('/create-connector'), [history]);\n    const onConnectorSave = (0,index_js_eager_.useCallback)(() => {\n        alert === null || alert === void 0 ? void 0 : alert.addAlert({\n            id: 'connector-created',\n            variant: esm_index_js_eager_.AlertVariant.success,\n            title: t('wizard.creation-success'),\n        });\n        goToConnectorsList();\n    }, [alert, goToConnectorsList, t]);\n    return (index_js_eager_default().createElement(CosContextProvider, { getToken: getToken, basePath: apiBasepath },\n        index_js_eager_default().createElement(react_router_dom_js_eager_.Switch, null,\n            index_js_eager_default().createElement(react_router_dom_js_eager_.Route, { path: '/', exact: true },\n                index_js_eager_default().createElement(ConnectedConnectorsPage, { onCreateConnector: goToCreateConnector })),\n            index_js_eager_default().createElement(react_router_dom_js_eager_.Route, { path: '/create-connector' },\n                index_js_eager_default().createElement(CreateConnectorPage, { onSave: onConnectorSave, onClose: goToConnectorsList })))));\n};\n\n// EXTERNAL MODULE: consume shared module (default) date-fns@=2.25.0 (strict) (fallback: ./node_modules/date-fns/esm/index.js)\nvar date_fns_esm_index_js_ = __webpack_require__(72633);\n// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/index.js + 9 modules\nvar en_US = __webpack_require__(4958);\n// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js\nvar i18next = __webpack_require__(78001);\n// EXTERNAL MODULE: ./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js\nvar i18nextBrowserLanguageDetector = __webpack_require__(26071);\n// EXTERNAL MODULE: ./node_modules/i18next-http-backend/esm/index.js\nvar i18next_http_backend_esm = __webpack_require__(44176);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/context.js\nvar context = __webpack_require__(68718);\n;// CONCATENATED MODULE: ./src/i18n.ts\n\n\n\n\n\n\n// import all locales we need\nconst locales = {\n    en: en_US/* default */.Z,\n}; // used to look up the required locale\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\ni18next/* default.use */.Z.use(i18next_http_backend_esm/* default */.Z)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(i18nextBrowserLanguageDetector/* default */.Z)\n    // pass the i18n instance to react-i18next.\n    .use(context/* initReactI18next */.Db)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n        loadPath: `${__webpack_require__.p}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n    interpolation: {\n        defaultVariables: undefined,\n        escapeValue: false,\n        format: (value, format, lng) => {\n            if ((0,date_fns_esm_index_js_.isDate)(value) && format) {\n                const locale = lng ? locales[lng] : en_US/* default */.Z;\n                if (format === 'short')\n                    return (0,date_fns_esm_index_js_.format)(value, 'P', { locale });\n                if (format === 'long')\n                    return (0,date_fns_esm_index_js_.format)(value, 'PPPP', { locale });\n                if (format === 'relative')\n                    return (0,date_fns_esm_index_js_.formatRelative)(value, new Date(), { locale });\n                if (format === 'ago')\n                    return (0,date_fns_esm_index_js_.formatDistance)(value, new Date(), {\n                        locale,\n                        addSuffix: true,\n                    });\n                return (0,date_fns_esm_index_js_.format)(value, format, { locale });\n            }\n            return value;\n        },\n    },\n});\n/* harmony default export */ const i18n = (i18next/* default */.Z);\n\n;// CONCATENATED MODULE: ./src/AppFederated.tsx\n\n\n\n\n\n\n\n\n/**\n * Initializes the COS UI without any chrome. This is meant to be used in\n * production, or locally when consuming this component as a federated module\n * served by the [`application-services-ui`](https://gitlab.cee.redhat.com/mk-ci-cd/application-services-u)\n * app.\n *\n * The auth token and the API basePath will come from the relative context set\n * up in the `application-services-ui` app.\n */\nconst AppFederated = () => {\n    const config = (0,esm_index_js_eager_.useConfig)();\n    const auth = (0,esm_index_js_eager_.useAuth)();\n    const basename = (0,esm_index_js_eager_.useBasename)();\n    return (index_js_eager_default().createElement(I18nextProvider/* I18nextProvider */.a, { i18n: i18n },\n        index_js_eager_default().createElement((index_js_eager_default()).Suspense, { fallback: index_js_eager_default().createElement(Loading, null) },\n            index_js_eager_default().createElement(react_router_dom_js_eager_.BrowserRouter, { basename: basename === null || basename === void 0 ? void 0 : basename.getBasename() },\n                index_js_eager_default().createElement(CosRoutes, { getToken: () => (0,tslib_es6.__awaiter)(void 0, void 0, void 0, function* () { return (yield (auth === null || auth === void 0 ? void 0 : auth.kas.getToken())) || ''; }), apiBasepath: (config === null || config === void 0 ? void 0 : config.cos.apiBasePath) || '' })))));\n};\n/* harmony default export */ const src_AppFederated = (AppFederated);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25375\n")}}]);