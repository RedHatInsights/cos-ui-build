(self.webpackChunk_cos_ui_apps_cos_ui=self.webpackChunk_cos_ui_apps_cos_ui||[]).push([[85],{34192:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Fg": () => (/* binding */ CopyIconConfig),\n/* harmony export */   "TI": () => (/* binding */ CopyIcon),\n/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _createIcon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75020);\n\n\nconst CopyIconConfig = {\n  name: \'CopyIcon\',\n  height: 512,\n  width: 448,\n  svgPath: \'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z\',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nconst CopyIcon = (0,_createIcon__WEBPACK_IMPORTED_MODULE_0__/* .createIcon */ .IU)(CopyIconConfig);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CopyIcon);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQxOTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQUEyQzs7Y0FFcEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Y0FFTyxpQkFBaUIsaUVBQVU7O0FBRWxDLGlFQUFlLFFBQVEsRSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb3MtdWktYXBwcy9jb3MtdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BwYXR0ZXJuZmx5L3JlYWN0LWljb25zL2Rpc3QvZXNtL2ljb25zL2NvcHktaWNvbi5qcz83MGJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUljb24gfSBmcm9tICcuLi9jcmVhdGVJY29uJztcblxuZXhwb3J0IGNvbnN0IENvcHlJY29uQ29uZmlnID0ge1xuICBuYW1lOiAnQ29weUljb24nLFxuICBoZWlnaHQ6IDUxMixcbiAgd2lkdGg6IDQ0OCxcbiAgc3ZnUGF0aDogJ00zMjAgNDQ4djQwYzAgMTMuMjU1LTEwLjc0NSAyNC0yNCAyNEgyNGMtMTMuMjU1IDAtMjQtMTAuNzQ1LTI0LTI0VjEyMGMwLTEzLjI1NSAxMC43NDUtMjQgMjQtMjRoNzJ2Mjk2YzAgMzAuODc5IDI1LjEyMSA1NiA1NiA1NmgxNjh6bTAtMzQ0VjBIMTUyYy0xMy4yNTUgMC0yNCAxMC43NDUtMjQgMjR2MzY4YzAgMTMuMjU1IDEwLjc0NSAyNCAyNCAyNGgyNzJjMTMuMjU1IDAgMjQtMTAuNzQ1IDI0LTI0VjEyOEgzNDRjLTEzLjIgMC0yNC0xMC44LTI0LTI0em0xMjAuOTcxLTMxLjAyOUwzNzUuMDI5IDcuMDI5QTI0IDI0IDAgMCAwIDM1OC4wNTkgMEgzNTJ2OTZoOTZ2LTYuMDU5YTI0IDI0IDAgMCAwLTcuMDI5LTE2Ljk3eicsXG4gIHlPZmZzZXQ6IDAsXG4gIHhPZmZzZXQ6IDAsXG59O1xuXG5leHBvcnQgY29uc3QgQ29weUljb24gPSBjcmVhdGVJY29uKENvcHlJY29uQ29uZmlnKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29weUljb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34192\n')},6379:module=>{eval('module.exports=function(t){function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var r={};return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:e})},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=13)}([function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n){var r=t.exports={version:"2.5.0"};"number"==typeof __e&&(__e=r)},function(t,n,r){t.exports=!r(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(32)("wks"),o=r(9),i=r(0).Symbol,u="function"==typeof i;(t.exports=function(t){return e[t]||(e[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=e},function(t,n,r){var e=r(0),o=r(2),i=r(8),u=r(22),c=r(10),f=function(t,n,r){var a,s,p,l,v=t&f.F,y=t&f.G,h=t&f.S,d=t&f.P,x=t&f.B,g=y?e:h?e[n]||(e[n]={}):(e[n]||{}).prototype,m=y?o:o[n]||(o[n]={}),b=m.prototype||(m.prototype={});y&&(r=n);for(a in r)s=!v&&g&&void 0!==g[a],p=(s?g:r)[a],l=x&&s?c(p,e):d&&"function"==typeof p?c(Function.call,p):p,g&&u(g,a,p,t&f.U),m[a]!=p&&i(m,a,l),d&&b[a]!=p&&(b[a]=p)};e.core=o,f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},function(t,n,r){var e=r(16),o=r(21);t.exports=r(3)?function(t,n,r){return e.f(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n,r){var e=r(24);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can\'t call method on  "+t);return t}},function(t,n,r){var e=r(28),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n,r){"use strict";n.__esModule=!0,n.default=function(t,n){if(t&&n){var r=Array.isArray(n)?n:n.split(","),e=t.name||"",o=t.type||"",i=o.replace(/\\/.*$/,"");return r.some(function(t){var n=t.trim();return"."===n.charAt(0)?e.toLowerCase().endsWith(n.toLowerCase()):n.endsWith("/*")?i===n.replace(/\\/.*$/,""):o===n})}return!0},r(14),r(34)},function(t,n,r){r(15),t.exports=r(2).Array.some},function(t,n,r){"use strict";var e=r(7),o=r(25)(3);e(e.P+e.F*!r(33)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,r){var e=r(17),o=r(18),i=r(20),u=Object.defineProperty;n.f=r(3)?Object.defineProperty:function(t,n,r){if(e(t),n=i(n,!0),e(r),o)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(1);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n,r){t.exports=!r(3)&&!r(4)(function(){return 7!=Object.defineProperty(r(19)("div"),"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(1),o=r(0).document,i=e(o)&&e(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,r){var e=r(1);t.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,r){var e=r(0),o=r(8),i=r(23),u=r(9)("src"),c=Function.toString,f=(""+c).split("toString");r(2).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,c){var a="function"==typeof r;a&&(i(r,"name")||o(r,"name",n)),t[n]!==r&&(a&&(i(r,u)||o(r,u,t[n]?""+t[n]:f.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:o(t,n,r):(delete t[n],o(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,r){var e=r(10),o=r(26),i=r(27),u=r(12),c=r(29);t.exports=function(t,n){var r=1==t,f=2==t,a=3==t,s=4==t,p=6==t,l=5==t||p,v=n||c;return function(n,c,y){for(var h,d,x=i(n),g=o(x),m=e(c,y,3),b=u(g.length),_=0,w=r?v(n,b):f?v(n,0):void 0;b>_;_++)if((l||_ in g)&&(h=g[_],d=m(h,_,x),t))if(r)w[_]=d;else if(d)switch(t){case 3:return!0;case 5:return h;case 6:return _;case 2:w.push(h)}else if(s)return!1;return p?-1:a||s?s:w}}},function(t,n,r){var e=r(5);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n,r){var e=r(11);t.exports=function(t){return Object(e(t))}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(30);t.exports=function(t,n){return new(e(t))(n)}},function(t,n,r){var e=r(1),o=r(31),i=r(6)("species");t.exports=function(t){var n;return o(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!o(n.prototype)||(n=void 0),e(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,r){var e=r(5);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e=r(0),o=e["__core-js_shared__"]||(e["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,n,r){"use strict";var e=r(4);t.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,r){r(35),t.exports=r(2).String.endsWith},function(t,n,r){"use strict";var e=r(7),o=r(12),i=r(36),u="".endsWith;e(e.P+e.F*r(38)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=o(n.length),c=void 0===r?e:Math.min(o(r),e),f=String(t);return u?u.call(n,f,c):n.slice(c-f.length,c)===f}})},function(t,n,r){var e=r(37),o=r(11);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn\'t accept regex!");return String(o(t))}},function(t,n,r){var e=r(1),o=r(5),i=r(6)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,r){var e=r(6)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6379\n')},64123:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ es)\n});\n\n// EXTERNAL MODULE: consume shared module (default) react@=17.0.1 (singleton) (fallback: ../../node_modules/react/index.js) (eager)\nvar index_js_eager_ = __webpack_require__(10791);\nvar index_js_eager_default = /*#__PURE__*/__webpack_require__.n(index_js_eager_);\n;// CONCATENATED MODULE: ../../node_modules/file-selector/node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n;// CONCATENATED MODULE: ../../node_modules/file-selector/dist/es5/file.js\nvar COMMON_MIME_TYPES = new Map([\n    ['avi', 'video/avi'],\n    ['gif', 'image/gif'],\n    ['ico', 'image/x-icon'],\n    ['jpeg', 'image/jpeg'],\n    ['jpg', 'image/jpeg'],\n    ['mkv', 'video/x-matroska'],\n    ['mov', 'video/quicktime'],\n    ['mp4', 'video/mp4'],\n    ['pdf', 'application/pdf'],\n    ['png', 'image/png'],\n    ['zip', 'application/zip'],\n    ['doc', 'application/msword'],\n    ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']\n]);\nfunction toFileWithPath(file, path) {\n    var f = withMimeType(file);\n    if (typeof f.path !== 'string') { // on electron, path is already set to the absolute path\n        var webkitRelativePath = file.webkitRelativePath;\n        Object.defineProperty(f, 'path', {\n            value: typeof path === 'string'\n                ? path\n                // If <input webkitdirectory> is set,\n                // the File will have a {webkitRelativePath} property\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\n                : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0\n                    ? webkitRelativePath\n                    : file.name,\n            writable: false,\n            configurable: false,\n            enumerable: true\n        });\n    }\n    return f;\n}\nfunction withMimeType(file) {\n    var name = file.name;\n    var hasExtension = name && name.lastIndexOf('.') !== -1;\n    if (hasExtension && !file.type) {\n        var ext = name.split('.')\n            .pop().toLowerCase();\n        var type = COMMON_MIME_TYPES.get(ext);\n        if (type) {\n            Object.defineProperty(file, 'type', {\n                value: type,\n                writable: false,\n                configurable: false,\n                enumerable: true\n            });\n        }\n    }\n    return file;\n}\n//# sourceMappingURL=file.js.map\n;// CONCATENATED MODULE: ../../node_modules/file-selector/dist/es5/file-selector.js\n\n\nvar FILES_TO_IGNORE = [\n    // Thumbnail cache files for macOS and Windows\n    '.DS_Store',\n    'Thumbs.db' // Windows\n];\n/**\n * Convert a DragEvent's DataTrasfer object to a list of File objects\n * NOTE: If some of the items are folders,\n * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.\n * @param evt\n */\nfunction fromEvent(evt) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, isDragEvt(evt) && evt.dataTransfer\n                    ? getDataTransferFiles(evt.dataTransfer, evt.type)\n                    : getInputFiles(evt)];\n        });\n    });\n}\nfunction isDragEvt(value) {\n    return !!value.dataTransfer;\n}\nfunction getInputFiles(evt) {\n    var files = isInput(evt.target)\n        ? evt.target.files\n            ? fromList(evt.target.files)\n            : []\n        : [];\n    return files.map(function (file) { return toFileWithPath(file); });\n}\nfunction isInput(value) {\n    return value !== null;\n}\nfunction getDataTransferFiles(dt, type) {\n    return __awaiter(this, void 0, void 0, function () {\n        var items, files;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!dt.items) return [3 /*break*/, 2];\n                    items = fromList(dt.items)\n                        .filter(function (item) { return item.kind === 'file'; });\n                    // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,\n                    // only 'dragstart' and 'drop' has access to the data (source node)\n                    if (type !== 'drop') {\n                        return [2 /*return*/, items];\n                    }\n                    return [4 /*yield*/, Promise.all(items.map(toFilePromises))];\n                case 1:\n                    files = _a.sent();\n                    return [2 /*return*/, noIgnoredFiles(flatten(files))];\n                case 2: return [2 /*return*/, noIgnoredFiles(fromList(dt.files)\n                        .map(function (file) { return toFileWithPath(file); }))];\n            }\n        });\n    });\n}\nfunction noIgnoredFiles(files) {\n    return files.filter(function (file) { return FILES_TO_IGNORE.indexOf(file.name) === -1; });\n}\n// IE11 does not support Array.from()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility\n// https://developer.mozilla.org/en-US/docs/Web/API/FileList\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList\nfunction fromList(items) {\n    var files = [];\n    // tslint:disable: prefer-for-of\n    for (var i = 0; i < items.length; i++) {\n        var file = items[i];\n        files.push(file);\n    }\n    return files;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem\nfunction toFilePromises(item) {\n    if (typeof item.webkitGetAsEntry !== 'function') {\n        return fromDataTransferItem(item);\n    }\n    var entry = item.webkitGetAsEntry();\n    // Safari supports dropping an image node from a different window and can be retrieved using\n    // the DataTransferItem.getAsFile() API\n    // NOTE: FileSystemEntry.file() throws if trying to get the file\n    if (entry && entry.isDirectory) {\n        return fromDirEntry(entry);\n    }\n    return fromDataTransferItem(item);\n}\nfunction flatten(items) {\n    return items.reduce(function (acc, files) { return __spread(acc, (Array.isArray(files) ? flatten(files) : [files])); }, []);\n}\nfunction fromDataTransferItem(item) {\n    var file = item.getAsFile();\n    if (!file) {\n        return Promise.reject(item + \" is not a File\");\n    }\n    var fwp = toFileWithPath(file);\n    return Promise.resolve(fwp);\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry\nfunction fromEntry(entry) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];\n        });\n    });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry\nfunction fromDirEntry(entry) {\n    var reader = entry.createReader();\n    return new Promise(function (resolve, reject) {\n        var entries = [];\n        function readEntries() {\n            var _this = this;\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries\n            reader.readEntries(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                var files, err_1, items;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!!batch.length) return [3 /*break*/, 5];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, Promise.all(entries)];\n                        case 2:\n                            files = _a.sent();\n                            resolve(files);\n                            return [3 /*break*/, 4];\n                        case 3:\n                            err_1 = _a.sent();\n                            reject(err_1);\n                            return [3 /*break*/, 4];\n                        case 4: return [3 /*break*/, 6];\n                        case 5:\n                            items = Promise.all(batch.map(fromEntry));\n                            entries.push(items);\n                            // Continue reading\n                            readEntries();\n                            _a.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); }, function (err) {\n                reject(err);\n            });\n        }\n        readEntries();\n    });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry\nfunction fromFileEntry(entry) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n                    entry.file(function (file) {\n                        var fwp = toFileWithPath(file, entry.fullPath);\n                        resolve(fwp);\n                    }, function (err) {\n                        reject(err);\n                    });\n                })];\n        });\n    });\n}\n//# sourceMappingURL=file-selector.js.map\n;// CONCATENATED MODULE: ../../node_modules/file-selector/dist/es5/index.js\n\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ../../node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(13980);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n// EXTERNAL MODULE: ../../node_modules/attr-accept/dist/index.js\nvar dist = __webpack_require__(6379);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n;// CONCATENATED MODULE: ../../node_modules/react-dropzone/dist/es/utils/index.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\n\nvar supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;\n\n// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n// that MIME type will always be accepted\nfunction fileAccepted(file, accept) {\n  return file.type === 'application/x-moz-file' || dist_default()(file, accept);\n}\n\nfunction fileMatchSize(file, maxSize, minSize) {\n  return file.size <= maxSize && file.size >= minSize;\n}\n\nfunction allFilesAccepted(files, accept) {\n  return files.every(function (file) {\n    return fileAccepted(file, accept);\n  });\n}\n\n// React's synthetic events has evt.isPropagationStopped,\n// but to remain compatibility with other libs (Preact) fall back\n// to check evt.cancelBubble\nfunction isPropagationStopped(evt) {\n  if (typeof evt.isPropagationStopped === 'function') {\n    return evt.isPropagationStopped();\n  } else if (typeof evt.cancelBubble !== 'undefined') {\n    return evt.cancelBubble;\n  }\n  return false;\n}\n\n// React's synthetic events has evt.isDefaultPrevented,\n// but to remain compatibility with other libs (Preact) first\n// check evt.defaultPrevented\nfunction isDefaultPrevented(evt) {\n  if (typeof evt.defaultPrevented !== 'undefined') {\n    return evt.defaultPrevented;\n  } else if (typeof evt.isDefaultPrevented === 'function') {\n    return evt.isDefaultPrevented();\n  }\n  return false;\n}\n\nfunction isDragDataWithFiles(evt) {\n  if (!evt.dataTransfer) {\n    return true;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\n  // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file\n  return Array.prototype.some.call(evt.dataTransfer.types, function (type) {\n    return type === 'Files' || type === 'application/x-moz-file';\n  });\n}\n\nfunction isKindFile(item) {\n  return (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item !== null && item.kind === 'file';\n}\n\n// allow the entire document to be a drag target\nfunction onDocumentDragOver(evt) {\n  evt.preventDefault();\n}\n\nfunction isIe(userAgent) {\n  return userAgent.indexOf('MSIE') !== -1 || userAgent.indexOf('Trident/') !== -1;\n}\n\nfunction isEdge(userAgent) {\n  return userAgent.indexOf('Edge/') !== -1;\n}\n\nfunction isIeOrEdge() {\n  var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;\n\n  return isIe(userAgent) || isEdge(userAgent);\n}\n\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls `event.preventDefault()`.\n * Not sure this is the best way to do this, but it seems legit.\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\nfunction composeEventHandlers() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (event) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return fns.some(function (fn) {\n      fn && fn.apply(undefined, [event].concat(args));\n      return event.defaultPrevented;\n    });\n  };\n}\n;// CONCATENATED MODULE: ../../node_modules/react-dropzone/dist/es/index.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* eslint prefer-template: 0 */\n\n\n\n\n\n\nvar Dropzone = function (_React$Component) {\n  _inherits(Dropzone, _React$Component);\n\n  function Dropzone() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Dropzone);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      draggedFiles: [],\n      acceptedFiles: [],\n      rejectedFiles: []\n    }, _this.isFileDialogActive = false, _this.onDocumentDrop = function (evt) {\n      if (_this.node && _this.node.contains(evt.target)) {\n        // if we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n        return;\n      }\n      evt.preventDefault();\n      _this.dragTargets = [];\n    }, _this.onDragStart = function (evt) {\n      evt.persist();\n      if (_this.props.onDragStart && isDragDataWithFiles(evt)) {\n        _this.props.onDragStart.call(_this, evt);\n      }\n    }, _this.onDragEnter = function (evt) {\n      evt.preventDefault();\n\n      // Count the dropzone and any children that are entered.\n      if (_this.dragTargets.indexOf(evt.target) === -1) {\n        _this.dragTargets.push(evt.target);\n      }\n\n      evt.persist();\n\n      if (isDragDataWithFiles(evt)) {\n        Promise.resolve(_this.props.getDataTransferItems(evt)).then(function (draggedFiles) {\n          if (isPropagationStopped(evt)) {\n            return;\n          }\n\n          _this.setState({\n            draggedFiles: draggedFiles,\n            // Do not rely on files for the drag state. It doesn't work in Safari.\n            isDragActive: true\n          });\n        });\n\n        if (_this.props.onDragEnter) {\n          _this.props.onDragEnter.call(_this, evt);\n        }\n      }\n    }, _this.onDragOver = function (evt) {\n      // eslint-disable-line class-methods-use-this\n      evt.preventDefault();\n      evt.persist();\n\n      if (evt.dataTransfer) {\n        evt.dataTransfer.dropEffect = 'copy';\n      }\n\n      if (_this.props.onDragOver && isDragDataWithFiles(evt)) {\n        _this.props.onDragOver.call(_this, evt);\n      }\n\n      return false;\n    }, _this.onDragLeave = function (evt) {\n      evt.preventDefault();\n      evt.persist();\n\n      // Only deactivate once the dropzone and all children have been left.\n      _this.dragTargets = _this.dragTargets.filter(function (el) {\n        return el !== evt.target && _this.node.contains(el);\n      });\n      if (_this.dragTargets.length > 0) {\n        return;\n      }\n\n      // Clear dragging files state\n      _this.setState({\n        isDragActive: false,\n        draggedFiles: []\n      });\n\n      if (_this.props.onDragLeave && isDragDataWithFiles(evt)) {\n        _this.props.onDragLeave.call(_this, evt);\n      }\n    }, _this.onDrop = function (evt) {\n      var _this$props = _this.props,\n          onDrop = _this$props.onDrop,\n          onDropAccepted = _this$props.onDropAccepted,\n          onDropRejected = _this$props.onDropRejected,\n          multiple = _this$props.multiple,\n          accept = _this$props.accept,\n          getDataTransferItems = _this$props.getDataTransferItems;\n\n      // Stop default browser behavior\n\n      evt.preventDefault();\n\n      // Persist event for later usage\n      evt.persist();\n\n      // Reset the counter along with the drag on a drop.\n      _this.dragTargets = [];\n      _this.isFileDialogActive = false;\n\n      // Clear files value\n      _this.draggedFiles = null;\n\n      // Reset drag state\n      _this.setState({\n        isDragActive: false,\n        draggedFiles: []\n      });\n\n      if (isDragDataWithFiles(evt)) {\n        Promise.resolve(getDataTransferItems(evt)).then(function (fileList) {\n          var acceptedFiles = [];\n          var rejectedFiles = [];\n\n          if (isPropagationStopped(evt)) {\n            return;\n          }\n\n          fileList.forEach(function (file) {\n            if (fileAccepted(file, accept) && fileMatchSize(file, _this.props.maxSize, _this.props.minSize)) {\n              acceptedFiles.push(file);\n            } else {\n              rejectedFiles.push(file);\n            }\n          });\n\n          if (!multiple && acceptedFiles.length > 1) {\n            // if not in multi mode add any extra accepted files to rejected.\n            // This will allow end users to easily ignore a multi file drop in \"single\" mode.\n            rejectedFiles.push.apply(rejectedFiles, _toConsumableArray(acceptedFiles.splice(0)));\n          }\n\n          // Update `acceptedFiles` and `rejectedFiles` state\n          // This will make children render functions receive the appropriate\n          // values\n          _this.setState({ acceptedFiles: acceptedFiles, rejectedFiles: rejectedFiles }, function () {\n            if (onDrop) {\n              onDrop.call(_this, acceptedFiles, rejectedFiles, evt);\n            }\n\n            if (rejectedFiles.length > 0 && onDropRejected) {\n              onDropRejected.call(_this, rejectedFiles, evt);\n            }\n\n            if (acceptedFiles.length > 0 && onDropAccepted) {\n              onDropAccepted.call(_this, acceptedFiles, evt);\n            }\n          });\n        });\n      }\n    }, _this.onClick = function (evt) {\n      var onClick = _this.props.onClick;\n\n      // if onClick prop is given, run it first\n\n      if (onClick) {\n        onClick.call(_this, evt);\n      }\n\n      // If the event hasn't been default prevented from within\n      // the onClick listener, open the file dialog\n      if (!isDefaultPrevented(evt)) {\n        evt.stopPropagation();\n\n        // in IE11/Edge the file-browser dialog is blocking, ensure this is behind setTimeout\n        // this is so react can handle state changes in the onClick prop above above\n        // see: https://github.com/react-dropzone/react-dropzone/issues/450\n        if (isIeOrEdge()) {\n          setTimeout(_this.open, 0);\n        } else {\n          _this.open();\n        }\n      }\n    }, _this.onInputElementClick = function (evt) {\n      evt.stopPropagation();\n    }, _this.onFileDialogCancel = function () {\n      // timeout will not recognize context of this method\n      var onFileDialogCancel = _this.props.onFileDialogCancel;\n      // execute the timeout only if the FileDialog is opened in the browser\n\n      if (_this.isFileDialogActive) {\n        setTimeout(function () {\n          if (_this.input != null) {\n            // Returns an object as FileList\n            var files = _this.input.files;\n\n\n            if (!files.length) {\n              _this.isFileDialogActive = false;\n\n              if (typeof onFileDialogCancel === 'function') {\n                onFileDialogCancel();\n              }\n            }\n          }\n        }, 300);\n      }\n    }, _this.onFocus = function (evt) {\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus.call(_this, evt);\n      }\n      if (!isDefaultPrevented(evt)) {\n        _this.setState({ isFocused: true });\n      }\n    }, _this.onBlur = function (evt) {\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur.call(_this, evt);\n      }\n      if (!isDefaultPrevented(evt)) {\n        _this.setState({ isFocused: false });\n      }\n    }, _this.onKeyDown = function (evt) {\n      var onKeyDown = _this.props.onKeyDown;\n\n      if (!_this.node.isEqualNode(evt.target)) {\n        return;\n      }\n\n      if (onKeyDown) {\n        onKeyDown.call(_this, evt);\n      }\n\n      if (!isDefaultPrevented(evt) && (evt.keyCode === 32 || evt.keyCode === 13)) {\n        evt.preventDefault();\n        _this.open();\n      }\n    }, _this.composeHandler = function (handler) {\n      if (_this.props.disabled) {\n        return null;\n      }\n      return handler;\n    }, _this.getRootProps = function () {\n      var _extends2;\n\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _ref2$refKey = _ref2.refKey,\n          refKey = _ref2$refKey === undefined ? 'ref' : _ref2$refKey,\n          onKeyDown = _ref2.onKeyDown,\n          onFocus = _ref2.onFocus,\n          onBlur = _ref2.onBlur,\n          onClick = _ref2.onClick,\n          onDragStart = _ref2.onDragStart,\n          onDragEnter = _ref2.onDragEnter,\n          onDragOver = _ref2.onDragOver,\n          onDragLeave = _ref2.onDragLeave,\n          onDrop = _ref2.onDrop,\n          rest = _objectWithoutProperties(_ref2, ['refKey', 'onKeyDown', 'onFocus', 'onBlur', 'onClick', 'onDragStart', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop']);\n\n      return _extends((_extends2 = {\n        onKeyDown: _this.composeHandler(onKeyDown ? composeEventHandlers(onKeyDown, _this.onKeyDown) : _this.onKeyDown),\n        onFocus: _this.composeHandler(onFocus ? composeEventHandlers(onFocus, _this.onFocus) : _this.onFocus),\n        onBlur: _this.composeHandler(onBlur ? composeEventHandlers(onBlur, _this.onBlur) : _this.onBlur),\n        onClick: _this.composeHandler(onClick ? composeEventHandlers(onClick, _this.onClick) : _this.onClick),\n        onDragStart: _this.composeHandler(onDragStart ? composeEventHandlers(onDragStart, _this.onDragStart) : _this.onDragStart),\n        onDragEnter: _this.composeHandler(onDragEnter ? composeEventHandlers(onDragEnter, _this.onDragEnter) : _this.onDragEnter),\n        onDragOver: _this.composeHandler(onDragOver ? composeEventHandlers(onDragOver, _this.onDragOver) : _this.onDragOver),\n        onDragLeave: _this.composeHandler(onDragLeave ? composeEventHandlers(onDragLeave, _this.onDragLeave) : _this.onDragLeave),\n        onDrop: _this.composeHandler(onDrop ? composeEventHandlers(onDrop, _this.onDrop) : _this.onDrop)\n      }, _defineProperty(_extends2, refKey, _this.setNodeRef), _defineProperty(_extends2, 'tabIndex', _this.props.disabled ? -1 : 0), _extends2), rest);\n    }, _this.getInputProps = function () {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _ref3$refKey = _ref3.refKey,\n          refKey = _ref3$refKey === undefined ? 'ref' : _ref3$refKey,\n          onChange = _ref3.onChange,\n          onClick = _ref3.onClick,\n          rest = _objectWithoutProperties(_ref3, ['refKey', 'onChange', 'onClick']);\n\n      var _this$props2 = _this.props,\n          accept = _this$props2.accept,\n          multiple = _this$props2.multiple,\n          name = _this$props2.name;\n\n      var inputProps = _defineProperty({\n        accept: accept,\n        type: 'file',\n        style: { display: 'none' },\n        multiple: supportMultiple && multiple,\n        onChange: composeEventHandlers(onChange, _this.onDrop),\n        onClick: composeEventHandlers(onClick, _this.onInputElementClick),\n        autoComplete: 'off',\n        tabIndex: -1\n      }, refKey, _this.setInputRef);\n      if (name && name.length) {\n        inputProps.name = name;\n      }\n      return _extends({}, inputProps, rest);\n    }, _this.setNodeRef = function (node) {\n      _this.node = node;\n    }, _this.setInputRef = function (input) {\n      _this.input = input;\n    }, _this.open = function () {\n      _this.isFileDialogActive = true;\n      if (_this.input) {\n        _this.input.value = null;\n        _this.input.click();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Dropzone, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var preventDropOnDocument = this.props.preventDropOnDocument;\n\n      this.dragTargets = [];\n\n      if (preventDropOnDocument) {\n        document.addEventListener('dragover', onDocumentDragOver, false);\n        document.addEventListener('drop', this.onDocumentDrop, false);\n      }\n\n      window.addEventListener('focus', this.onFileDialogCancel, false);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var preventDropOnDocument = this.props.preventDropOnDocument;\n\n      if (preventDropOnDocument) {\n        document.removeEventListener('dragover', onDocumentDragOver);\n        document.removeEventListener('drop', this.onDocumentDrop);\n      }\n\n      window.removeEventListener('focus', this.onFileDialogCancel, false);\n    }\n\n    /**\n     * Open system file upload dialog.\n     *\n     * @public\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          multiple = _props.multiple,\n          disabled = _props.disabled;\n      var _state = this.state,\n          isDragActive = _state.isDragActive,\n          isFocused = _state.isFocused,\n          draggedFiles = _state.draggedFiles,\n          acceptedFiles = _state.acceptedFiles,\n          rejectedFiles = _state.rejectedFiles;\n\n\n      var filesCount = draggedFiles.length;\n      var isMultipleAllowed = multiple || filesCount <= 1;\n      var isDragAccept = filesCount > 0 && allFilesAccepted(draggedFiles, this.props.accept);\n      var isDragReject = filesCount > 0 && (!isDragAccept || !isMultipleAllowed);\n\n      return children({\n        isDragActive: isDragActive,\n        isDragAccept: isDragAccept,\n        isDragReject: isDragReject,\n        draggedFiles: draggedFiles,\n        acceptedFiles: acceptedFiles,\n        rejectedFiles: rejectedFiles,\n        isFocused: isFocused && !disabled,\n        getRootProps: this.getRootProps,\n        getInputProps: this.getInputProps,\n        open: this.open\n      });\n    }\n  }]);\n\n  return Dropzone;\n}((index_js_eager_default()).Component);\n\n/* harmony default export */ const es = (Dropzone);\n\nDropzone.propTypes = {\n  /**\n   * Allow specific types of files. See https://github.com/okonet/attr-accept for more information.\n   * Keep in mind that mime type determination is not reliable across platforms. CSV files,\n   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under\n   * Windows. In some cases there might not be a mime type set at all.\n   * See: https://github.com/react-dropzone/react-dropzone/issues/276\n   */\n  accept: prop_types_default().oneOfType([(prop_types_default()).string, prop_types_default().arrayOf((prop_types_default()).string)]),\n\n  /**\n   * Render function that renders the actual component\n   *\n   * @param {Object} props\n   * @param {Function} props.getRootProps Returns the props you should apply to the root drop container you render\n   * @param {Function} props.getInputProps Returns the props you should apply to hidden file input you render\n   * @param {Function} props.open Open the native file selection dialog\n   * @param {Boolean} props.isFocused Dropzone area is in focus\n   * @param {Boolean} props.isDragActive Active drag is in progress\n   * @param {Boolean} props.isDragAccept Dragged files are accepted\n   * @param {Boolean} props.isDragReject Some dragged files are rejected\n   * @param {Array} props.draggedFiles Files in active drag\n   * @param {Array} props.acceptedFiles Accepted files\n   * @param {Array} props.rejectedFiles Rejected files\n   */\n  children: (prop_types_default()).func,\n\n  /**\n   * Enable/disable the dropzone entirely\n   */\n  disabled: (prop_types_default()).bool,\n\n  /**\n   * If false, allow dropped items to take over the current browser window\n   */\n  preventDropOnDocument: (prop_types_default()).bool,\n\n  /**\n   * Allow dropping multiple files\n   */\n  multiple: (prop_types_default()).bool,\n\n  /**\n   * `name` attribute for the input tag\n   */\n  name: (prop_types_default()).string,\n\n  /**\n   * Maximum file size (in bytes)\n   */\n  maxSize: (prop_types_default()).number,\n\n  /**\n   * Minimum file size (in bytes)\n   */\n  minSize: (prop_types_default()).number,\n\n  /**\n   * getDataTransferItems handler\n   * @param {Event} event\n   * @returns {Array} array of File objects\n   */\n  getDataTransferItems: (prop_types_default()).func,\n\n  /**\n   * onClick callback\n   * @param {Event} event\n   */\n  onClick: (prop_types_default()).func,\n\n  /**\n   * onFocus callback\n   */\n  onFocus: (prop_types_default()).func,\n\n  /**\n   * onBlur callback\n   */\n  onBlur: (prop_types_default()).func,\n\n  /**\n   * onKeyDown callback\n   */\n  onKeyDown: (prop_types_default()).func,\n\n  /**\n   * The `onDrop` method that accepts two arguments.\n   * The first argument represents the accepted files and the second argument the rejected files.\n   *\n   * ```javascript\n   * function onDrop(acceptedFiles, rejectedFiles) {\n   *   // do stuff with files...\n   * }\n   * ```\n   *\n   * Files are accepted or rejected based on the `accept` prop.\n   * This must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.\n   *\n   * Note that the `onDrop` callback will always be called regardless if the dropped files were accepted or rejected.\n   * You can use the `onDropAccepted`/`onDropRejected` props if you'd like to react to a specific event instead of the `onDrop` prop.\n   *\n   * The `onDrop` callback will provide you with an array of [Files](https://developer.mozilla.org/en-US/docs/Web/API/File) which you can then process and send to a server.\n   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\n   *\n   * ```javascript\n   * function onDrop(acceptedFiles) {\n   *   const req = request.post('/upload')\n   *   acceptedFiles.forEach(file => {\n   *     req.attach(file.name, file)\n   *   })\n   *   req.end(callback)\n   * }\n   * ```\n   */\n  onDrop: (prop_types_default()).func,\n\n  /**\n   * onDropAccepted callback\n   */\n  onDropAccepted: (prop_types_default()).func,\n\n  /**\n   * onDropRejected callback\n   */\n  onDropRejected: (prop_types_default()).func,\n\n  /**\n   * onDragStart callback\n   */\n  onDragStart: (prop_types_default()).func,\n\n  /**\n   * onDragEnter callback\n   */\n  onDragEnter: (prop_types_default()).func,\n\n  /**\n   * onDragOver callback\n   */\n  onDragOver: (prop_types_default()).func,\n\n  /**\n   * onDragLeave callback\n   */\n  onDragLeave: (prop_types_default()).func,\n\n  /**\n   * Provide a callback on clicking the cancel button of the file dialog\n   */\n  onFileDialogCancel: (prop_types_default()).func\n};\n\nDropzone.defaultProps = {\n  preventDropOnDocument: true,\n  disabled: false,\n  multiple: true,\n  maxSize: Infinity,\n  minSize: 0,\n  getDataTransferItems: fromEvent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64123\n")}}]);