(self.webpackChunk_cos_ui_apps_cos_ui=self.webpackChunk_cos_ui_apps_cos_ui||[]).push([[921,5163,7608,5535,4248],{47677:module=>{"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (false) {}\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29zLXVpLWFwcHMvY29zLXVpLy4uLy4uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcz8yM2Q4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0sS0FBcUMsRUFBRSxFQUkxQzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx5QkFBeUIsRUFBRTtBQUNyRTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI0NzY3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47677\n")},5163:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "__extends": () => (/* binding */ __extends),\n/* harmony export */   "__assign": () => (/* binding */ __assign),\n/* harmony export */   "__rest": () => (/* binding */ __rest),\n/* harmony export */   "__decorate": () => (/* binding */ __decorate),\n/* harmony export */   "__param": () => (/* binding */ __param),\n/* harmony export */   "__metadata": () => (/* binding */ __metadata),\n/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),\n/* harmony export */   "__generator": () => (/* binding */ __generator),\n/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),\n/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),\n/* harmony export */   "__values": () => (/* binding */ __values),\n/* harmony export */   "__read": () => (/* binding */ __read),\n/* harmony export */   "__spread": () => (/* binding */ __spread),\n/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),\n/* harmony export */   "__await": () => (/* binding */ __await),\n/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),\n/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),\n/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),\n/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   "__importStar": () => (/* binding */ __importStar),\n/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),\n/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to get private field on non-instance");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to set private field on non-instance");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5163\n')},40921:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Auto\": () => (/* reexport */ Auto),\n  \"AutoForm\": () => (/* reexport */ AutoForm),\n  \"BaseForm\": () => (/* reexport */ BaseForm),\n  \"Bridge\": () => (/* reexport */ Bridge),\n  \"Quick\": () => (/* reexport */ Quick),\n  \"QuickForm\": () => (/* reexport */ QuickForm),\n  \"Validated\": () => (/* reexport */ Validated),\n  \"ValidatedForm\": () => (/* reexport */ ValidatedForm),\n  \"ValidatedQuickForm\": () => (/* reexport */ ValidatedQuickForm),\n  \"changedKeys\": () => (/* reexport */ changedKeys),\n  \"connectField\": () => (/* reexport */ connectField),\n  \"context\": () => (/* reexport */ context_context),\n  \"createAutoField\": () => (/* reexport */ createAutoField),\n  \"filterDOMProps\": () => (/* reexport */ filterDOMProps),\n  \"joinName\": () => (/* reexport */ joinName),\n  \"randomIds\": () => (/* reexport */ randomIds),\n  \"useField\": () => (/* reexport */ useField),\n  \"useForm\": () => (/* reexport */ useForm)\n});\n\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/clone.js\nvar clone = __webpack_require__(54624);\nvar clone_default = /*#__PURE__*/__webpack_require__.n(clone);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/isEqual.js\nvar isEqual = __webpack_require__(62119);\nvar isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/omit.js\nvar omit = __webpack_require__(34864);\nvar omit_default = /*#__PURE__*/__webpack_require__.n(omit);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/setWith.js\nvar setWith = __webpack_require__(61420);\nvar setWith_default = /*#__PURE__*/__webpack_require__.n(setWith);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/get.js\nvar get = __webpack_require__(24546);\nvar get_default = /*#__PURE__*/__webpack_require__.n(get);\n// EXTERNAL MODULE: consume shared module (default) react@^16.13.1 (singleton) (fallback: ../../node_modules/react/index.js) (eager)\nvar index_js_eager_ = __webpack_require__(28596);\nvar index_js_eager_default = /*#__PURE__*/__webpack_require__.n(index_js_eager_);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/xorWith.js\nvar xorWith = __webpack_require__(37339);\nvar xorWith_default = /*#__PURE__*/__webpack_require__.n(xorWith);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/joinName.js\nfunction joinName(...parts) {\n    const name = [];\n    for (let index = 0; index !== parts.length; ++index) {\n        const part = parts[index];\n        if (part || part === 0) {\n            if (typeof part === 'string') {\n                if (part.indexOf('.') !== -1) {\n                    name.push(...part.split('.'));\n                }\n                else {\n                    name.push(part);\n                }\n            }\n            else if (Array.isArray(part)) {\n                parts.splice(index--, 1, ...part);\n            }\n            else {\n                name.push('' + part);\n            }\n        }\n    }\n    return parts[0] === null ? name : name.join('.');\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/changedKeys.js\n\n\n\nfunction changedKeys(root, valueA, valueB) {\n    if (!valueA || valueA !== Object(valueA) || valueA instanceof Date) {\n        return isEqual_default()(valueA, valueB) ? [] : [root];\n    }\n    if (!valueB) {\n        return [root, ...Object.keys(valueA).map(key => joinName(root, key))];\n    }\n    const changed = xorWith_default()(Object.entries(valueA), Object.entries(valueB), (isEqual_default())).map(pair => joinName(root, pair[0]));\n    if (changed.length) {\n        changed.unshift(root);\n    }\n    return changed;\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/context.js\n\nconst context_context = (0,index_js_eager_.createContext)(null);\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/randomIds.js\n// Workaround for SSR\n// https://github.com/vazco/uniforms/issues/40\n// https://github.com/facebook/react/issues/4000\nfunction randomIdsGenerator(prefix) {\n    let counter = 0;\n    return () => `${prefix}-${('000' + (counter++).toString(36)).slice(-4)}`;\n}\nconst randomIdPrefix = randomIdsGenerator('uniforms');\nfunction randomIds(prefix = randomIdPrefix()) {\n    return randomIdsGenerator(prefix);\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/BaseForm.js\n\n\n\n\n\n\n\n\nclass BaseForm extends index_js_eager_.Component {\n    constructor(props) {\n        super(props);\n        // @ts-expect-error: State may be bigger, but it'll be covered by the subclasses.\n        this.state = {\n            changed: false,\n            changedMap: Object.create(null),\n            resetCount: 0,\n            submitted: false,\n            submitting: false,\n        };\n        this.mounted = false;\n        this.randomId = randomIds(this.props.id);\n        this.onReset = this.reset = this.onReset.bind(this);\n        this.onChange = this.change = this.onChange.bind(this);\n        this.onSubmit = this.submit = this.onSubmit.bind(this);\n        // TODO: It shouldn't be here\n        const getModel = this.getModel.bind(this);\n        this.getModel = (mode, model = getModel(mode)) => mode !== undefined && this.props.modelTransform\n            ? this.props.modelTransform(mode, model)\n            : model;\n    }\n    componentDidMount() {\n        this.mounted = true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    componentDidUpdate(prevProps, prevState, snapshot) { }\n    componentWillUnmount() {\n        this.mounted = false;\n        if (this.delayId) {\n            clearTimeout(this.delayId);\n        }\n    }\n    getContext() {\n        return {\n            changed: this.state.changed,\n            changedMap: this.state.changedMap,\n            error: this.getContextError(),\n            model: this.getContextModel(),\n            name: this.getContextName(),\n            onChange: this.getContextOnChange(),\n            onSubmit: this.getContextOnSubmit(),\n            randomId: this.randomId,\n            schema: this.getContextSchema(),\n            state: this.getContextState(),\n            submitting: this.state.submitting,\n            validating: false,\n            submitted: this.state.submitted,\n        };\n    }\n    getContextName() {\n        return [];\n    }\n    getContextError() {\n        return this.props.error;\n    }\n    getContextModel() {\n        return this.getModel('form');\n    }\n    getContextState() {\n        return {\n            disabled: !!this.props.disabled,\n            label: !!this.props.label,\n            placeholder: !!this.props.placeholder,\n            readOnly: !!this.props.readOnly,\n            showInlineError: !!this.props.showInlineError,\n        };\n    }\n    getContextSchema() {\n        return this.props.schema;\n    }\n    getContextOnChange() {\n        // It's bound in constructor.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return this.onChange;\n    }\n    getContextOnSubmit() {\n        // It's bound in constructor.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return this.onSubmit;\n    }\n    getModel(mode, model = this.props.model) {\n        return model;\n    }\n    getNativeFormProps() {\n        const props = omit_default()(this.props, [\n            'autosave',\n            'autosaveDelay',\n            'disabled',\n            'error',\n            'label',\n            'model',\n            'modelTransform',\n            'onChange',\n            'onSubmit',\n            'placeholder',\n            'readOnly',\n            'schema',\n            'showInlineError',\n        ]);\n        return Object.assign(Object.assign({}, props), { \n            // It's bound in constructor.\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            onSubmit: this.onSubmit, key: `reset-${this.state.resetCount}` });\n    }\n    onChange(key, value) {\n        // Do not set `changed` before componentDidMount\n        if (this.mounted) {\n            const keys = changedKeys(key, value, get_default()(this.getModel(), key));\n            if (keys.length !== 0) {\n                this.setState(state => \n                // If all are already marked, we can skip the update completely.\n                state.changed && keys.every(key => !!get_default()(state.changedMap, key))\n                    ? null\n                    : {\n                        changed: true,\n                        changedMap: keys.reduce((changedMap, key) => setWith_default()(changedMap, key, {}, (clone_default())), clone_default()(state.changedMap)),\n                    });\n            }\n        }\n        if (this.props.onChange) {\n            this.props.onChange(key, value);\n        }\n        // Do not call `onSubmit` before componentDidMount\n        if (this.mounted && this.props.autosave) {\n            if (this.delayId) {\n                this.delayId = clearTimeout(this.delayId);\n            }\n            // Delay autosave by `autosaveDelay` milliseconds...\n            this.delayId = setTimeout(() => {\n                // ...and wait for all scheduled `setState`s to commit. This is required\n                // for AutoForm to validate correct model, waiting in `onChange`.\n                this.setState(() => null, () => {\n                    this.onSubmit();\n                });\n            }, this.props.autosaveDelay);\n        }\n    }\n    __reset(state) {\n        return {\n            changed: false,\n            changedMap: Object.create(null),\n            resetCount: state.resetCount + 1,\n            submitted: false,\n            submitting: false,\n        };\n    }\n    onReset() {\n        // @ts-expect-error\n        // It's bound in constructor.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.setState(this.__reset);\n    }\n    onSubmit(event) {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.setState(state => (state.submitted ? null : { submitted: true }));\n        const result = this.props.onSubmit(this.getModel('submit'));\n        if (!(result instanceof Promise)) {\n            return Promise.resolve();\n        }\n        this.setState({ submitting: true });\n        return result.finally(() => {\n            this.setState({ submitting: false });\n        });\n    }\n    render() {\n        return (index_js_eager_default().createElement(context_context.Provider, { value: this.getContext() },\n            index_js_eager_default().createElement(\"form\", Object.assign({}, this.getNativeFormProps()))));\n    }\n}\nBaseForm.displayName = 'Form';\nBaseForm.defaultProps = {\n    autosave: false,\n    autosaveDelay: 0,\n    error: null,\n    label: true,\n    model: Object.create(null),\n    noValidate: true,\n    onSubmit() { },\n};\n\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/QuickForm.js\n\n\n\nfunction Quick(Base) {\n    // @ts-expect-error: Mixin class problem.\n    class QuickForm extends Base {\n        getNativeFormProps() {\n            const _a = super.getNativeFormProps(), { autoField: AutoField = this.getAutoField(), errorsField: ErrorsField = this.getErrorsField(), submitField: SubmitField = this.getSubmitField() } = _a, props = (0,tslib_es6.__rest)(_a, [\"autoField\", \"errorsField\", \"submitField\"]);\n            if (!props.children) {\n                props.children = this.getContextSchema()\n                    .getSubfields()\n                    .map(key => index_js_eager_default().createElement(AutoField, { key: key, name: key }))\n                    .concat([\n                    index_js_eager_default().createElement(ErrorsField, { key: \"$ErrorsField\" }),\n                    index_js_eager_default().createElement(SubmitField, { key: \"$SubmitField\" }),\n                ]);\n            }\n            return props;\n        }\n        getAutoField() {\n            return () => null;\n        }\n        getErrorsField() {\n            return () => null;\n        }\n        getSubmitField() {\n            return () => null;\n        }\n    }\n    QuickForm.Quick = Quick;\n    QuickForm.displayName = `Quick${Base.displayName}`;\n    return QuickForm;\n}\nconst QuickForm = Quick(BaseForm);\n\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/cloneDeep.js\nvar cloneDeep = __webpack_require__(79506);\nvar cloneDeep_default = /*#__PURE__*/__webpack_require__.n(cloneDeep);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/noop.js\nvar noop = __webpack_require__(75637);\nvar noop_default = /*#__PURE__*/__webpack_require__.n(noop);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/ValidatedForm.js\n\n\n\n\n\n\n\nfunction Validated(Base) {\n    // @ts-expect-error: Mixin class problem.\n    class ValidatedForm extends Base {\n        constructor(props) {\n            super(props);\n            this.state = Object.assign(Object.assign({}, this.state), { error: null, validate: false, validating: false, validator: this.getContextSchema().getValidator(props.validator) });\n            this.onValidate = this.validate = this.onValidate.bind(this);\n            this.onValidateModel = this.validateModel = this.onValidateModel.bind(this);\n        }\n        getContextError() {\n            var _a;\n            return (_a = super.getContextError()) !== null && _a !== void 0 ? _a : this.state.error;\n        }\n        getContext() {\n            return Object.assign(Object.assign({}, super.getContext()), { validating: this.state.validating });\n        }\n        getNativeFormProps() {\n            return omit_default()(super.getNativeFormProps(), [\n                'onValidate',\n                'validate',\n                'validator',\n            ]);\n        }\n        componentDidUpdate(prevProps, prevState, snapshot) {\n            super.componentDidUpdate(prevProps, prevState, snapshot);\n            const { model, schema, validate, validator } = this.props;\n            if (schema !== prevProps.schema || validator !== prevProps.validator) {\n                this.setState({ validator: schema.getValidator(validator) }, () => {\n                    if (shouldRevalidate(validate, this.state.validate)) {\n                        this.onValidate();\n                    }\n                });\n            }\n            else if (!isEqual_default()(model, prevProps.model) &&\n                shouldRevalidate(validate, this.state.validate)) {\n                this.onValidateModel(model);\n            }\n        }\n        onChange(key, value) {\n            if (shouldRevalidate(this.props.validate, this.state.validate)) {\n                this.onValidate(key, value);\n            }\n            super.onChange(key, value);\n        }\n        __reset(state) {\n            return Object.assign(Object.assign({}, super.__reset(state)), { error: null, validate: false, validating: false });\n        }\n        onSubmit(event) {\n            if (event) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            this.setState({ submitted: true, validate: true });\n            const result = this.onValidate().then(error => {\n                if (error !== null) {\n                    return Promise.reject(error);\n                }\n                // Validation failed (i.e. returned an error), so no error is present\n                // both in the props nor the state.\n                return super.onSubmit().catch(error => {\n                    this.setState({ error });\n                    throw error;\n                });\n            });\n            result.catch((noop_default()));\n            return result;\n        }\n        onValidate(key, value) {\n            let model = this.getContextModel();\n            if (model && key) {\n                model = setWith_default()(clone_default()(model), key, cloneDeep_default()(value), (clone_default()));\n            }\n            return this.onValidateModel(model);\n        }\n        onValidateModel(originalModel) {\n            const model = this.getModel('validate', originalModel);\n            // Using `then` allows using the same code for both synchronous and\n            // asynchronous cases. We could use `await` here, but it would make all\n            // calls asynchronous, unnecessary delaying synchronous validation.\n            const then = makeThen(() => {\n                this.setState({ validating: true });\n            });\n            return then(this.state.validator(model), (error = null) => then(this.props.onValidate(model, error), (error = null) => {\n                var _a;\n                // Do not copy the error from props to the state.\n                error = this.props.error === error ? null : error;\n                // If the whole operation was synchronous and resulted in the same\n                // error, we can skip the re-render.\n                this.setState(state => state.error === error && !state.validating\n                    ? null\n                    : { error, validating: false });\n                // A predefined error takes precedence over the validation one.\n                return Promise.resolve((_a = this.props.error) !== null && _a !== void 0 ? _a : error);\n            }));\n        }\n    }\n    ValidatedForm.Validated = Validated;\n    ValidatedForm.displayName = `Validated${Base.displayName}`;\n    ValidatedForm.defaultProps = Object.assign(Object.assign({}, Base.defaultProps), { onValidate(model, error) {\n            return error;\n        }, validate: 'onChangeAfterSubmit' });\n    return ValidatedForm;\n}\nfunction makeThen(callIfAsync) {\n    function then(value, fn) {\n        if (value instanceof Promise) {\n            callIfAsync();\n            return value.then(fn);\n        }\n        return fn(value);\n    }\n    return then;\n}\nfunction shouldRevalidate(inProps, inState) {\n    return (inProps === 'onChange' || (inProps === 'onChangeAfterSubmit' && inState));\n}\nconst ValidatedForm = Validated(BaseForm);\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/ValidatedQuickForm.js\n\n\n\nconst ValidatedQuickForm = Validated(Quick(BaseForm));\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/AutoForm.js\n\n\n\n\n\nfunction Auto(Base) {\n    // @ts-expect-error: Mixin class problem.\n    class AutoForm extends Base {\n        constructor(props) {\n            super(props);\n            this.state = Object.assign(Object.assign({}, this.state), { model: props.model });\n        }\n        componentDidUpdate(prevProps, prevState, snapshot) {\n            const { model } = this.props;\n            if (!isEqual_default()(model, prevProps.model)) {\n                this.setState({ model });\n            }\n            super.componentDidUpdate(prevProps, prevState, snapshot);\n        }\n        getNativeFormProps() {\n            return omit_default()(super.getNativeFormProps(), ['onChangeModel']);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        getModel(mode) {\n            return this.state.model;\n        }\n        onChange(key, value) {\n            super.onChange(key, value);\n            this.setState(state => ({ model: setWith_default()(clone_default()(state.model), key, value, (clone_default())) }), () => {\n                if (this.props.onChangeModel) {\n                    this.props.onChangeModel(this.state.model);\n                }\n            });\n        }\n        __reset(state) {\n            return Object.assign(Object.assign({}, super.__reset(state)), { model: this.props.model });\n        }\n    }\n    AutoForm.Auto = Auto;\n    AutoForm.displayName = `Auto${Base.displayName}`;\n    return AutoForm;\n}\nconst AutoForm = Auto(ValidatedQuickForm);\n\n// EXTERNAL MODULE: ../../node_modules/invariant/browser.js\nvar browser = __webpack_require__(47677);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/Bridge.js\n\nclass Bridge {\n    // Each bridge can have a different set of parameters.\n    constructor(...args) {\n        browser_default()(this.constructor !== Bridge, 'Bridge cannot be instantiated (args=%o).', { args });\n    }\n    // Get an error for field `name` out of `error`. There is no standarized\n    // format, but fields treat truthy values as a sign of being invalid. Fields\n    // receive this as a `error` guaranteed prop.\n    getError(name, error) {\n        return browser_default()(false, '%s have not implemented `getError` method (args=%o).', this.constructor.name, { name, error });\n    }\n    // Get an error message for field `name` out of `error`. If there is no error,\n    // return an empty string. Fields receive this as a `errorMessage` guaranteed\n    // prop.\n    getErrorMessage(name, error) {\n        return browser_default()(false, '%s have not implemented `getErrorMessage` method (args=%o).', this.constructor.name, { name, error });\n    }\n    // Get all error messages from `error`. Only `ErrorsField` make use of that\n    // (in builtin themes).\n    getErrorMessages(error) {\n        return browser_default()(false, '%s have not implemented `getErrorMessages` method (args=%o).', this.constructor.name, { error });\n    }\n    // Get internal field definition for field `name`. Fields receive this as a\n    // `field` guaranteed prop.\n    getField(name) {\n        return browser_default()(false, '%s have not implemented `getField` method (args=%o).', this.constructor.name, { name });\n    }\n    // Get initial value of field `name`. It is used as a default when no value is\n    // set (e.g. the form is rendered with an empty `model`). Additionally,\n    // `props` are this field instance props. If a field is rendered multiple\n    // times, this function will be called multiple times, possibly with different\n    // `props`.\n    getInitialValue(name, props) {\n        return browser_default()(false, '%s have not implemented `getInitialValue` method (args=%o).', this.constructor.name, { name, props });\n    }\n    // Get props defined in schema for a field `name`. There are no required nor\n    // banned fields, however properties like `required` are often available.\n    // Additionally, `props` are this field instance props. If a field is rendered\n    // multiple times, this function will be called multiple times, possibly with\n    // different `props`.\n    getProps(name, props) {\n        return browser_default()(false, '%s have not implemented `getProps` method (args=%o).', this.constructor.name, { name, props });\n    }\n    // Get a list of subfields of field `name` or top-level fields, if no `name`\n    // is passed.\n    getSubfields(name) {\n        return browser_default()(false, '%s have not implemented `getSubfields` method (args=%o).', this.constructor.name, { name });\n    }\n    // Get a type of field `name`. See `FieldTypeType` for details.\n    getType(name) {\n        return browser_default()(false, '%s have not implemented `getType` method (args=%o).', this.constructor.name, { name });\n    }\n    // Get a validator function. The `options` here are from the `validator` prop\n    // of the form. A validator function receives a model and returns an error or\n    // a promise that will resolve (not reject!) with an error. If there is no\n    // error, return (or resolve with) a `null` value instead.\n    // eslint-disable-next-line prettier/prettier\n    getValidator(options) {\n        return browser_default()(false, '%s have not implemented `getValidator` method (args=%o).', this.constructor.name, { options });\n    }\n}\n\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/mapValues.js\nvar mapValues = __webpack_require__(78179);\nvar mapValues_default = /*#__PURE__*/__webpack_require__.n(mapValues);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/some.js\nvar some = __webpack_require__(1000);\nvar some_default = /*#__PURE__*/__webpack_require__.n(some);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/useForm.js\n\n\n\nfunction useForm() {\n    const context = (0,index_js_eager_.useContext)(context_context);\n    browser_default()(context !== null, 'useForm must be used within a form.');\n    return context;\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/useField.js\n\n\n\n\n\nfunction propagate(prop, schema, state, fallback) {\n    const forcedFallbackInProp = prop === true || prop === undefined;\n    const forcedFallbackInSchema = schema === true || schema === undefined;\n    const schemaValue = forcedFallbackInSchema ? fallback : schema;\n    const value = prop === '' ||\n        prop === false ||\n        (forcedFallbackInProp && (forcedFallbackInSchema || !state))\n        ? ''\n        : forcedFallbackInProp\n            ? schemaValue\n            : prop;\n    return [value, schemaValue];\n}\nfunction useField(fieldName, props, options) {\n    var _a;\n    const context = useForm();\n    const name = joinName((options === null || options === void 0 ? void 0 : options.absoluteName) ? '' : context.name, fieldName);\n    const state = mapValues_default()(context.state, (prev, key) => {\n        const next = props[key];\n        return next === null || next === undefined ? prev : !!next;\n    });\n    const changed = !!get_default()(context.changedMap, name);\n    const error = context.schema.getError(name, context.error);\n    const errorMessage = context.schema.getErrorMessage(name, context.error);\n    const field = context.schema.getField(name);\n    const fieldType = context.schema.getType(name);\n    const fields = context.schema.getSubfields(name);\n    const schemaProps = context.schema.getProps(name, Object.assign(Object.assign({}, state), props));\n    const [label, labelFallback] = propagate(props.label, schemaProps.label, state.label, '');\n    const [placeholder] = propagate(props.placeholder, schemaProps.placeholder, state.placeholder, label || labelFallback);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const id = (0,index_js_eager_.useMemo)(() => context.randomId(), []);\n    const onChange = (0,index_js_eager_.useCallback)((value, key = name) => {\n        context.onChange(key, value);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [context.onChange, name]);\n    const valueFromModel = get_default()(context.model, name);\n    let initialValue;\n    let value = (_a = props.value) !== null && _a !== void 0 ? _a : valueFromModel;\n    if (value === undefined) {\n        value = context.schema.getInitialValue(name, props);\n        initialValue = value;\n    }\n    else if (props.value !== undefined && props.value !== valueFromModel) {\n        initialValue = props.value;\n    }\n    if ((options === null || options === void 0 ? void 0 : options.initialValue) !== false) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,index_js_eager_.useEffect)(() => {\n            var _a;\n            const required = (_a = props.required) !== null && _a !== void 0 ? _a : schemaProps.required;\n            if (required && initialValue !== undefined) {\n                onChange(initialValue);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n    }\n    const fieldProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id }, state), { changed,\n        error,\n        errorMessage,\n        field,\n        fieldType,\n        fields,\n        onChange,\n        value }), schemaProps), props), { label,\n        name, \n        // TODO: Should we assert `typeof placeholder === 'string'`?\n        placeholder: placeholder });\n    return [fieldProps, context];\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/connectField.js\n\n\n\n\n\nfunction connectField(Component, options) {\n    function Field(props) {\n        const [fieldProps, context] = useField(props.name, props, options);\n        const hasChainName = props.name !== '';\n        const anyFlowingPropertySet = some_default()(context.state, \n        // @ts-expect-error: `props` has no index signature.\n        (_, key) => props[key] !== null && props[key] !== undefined);\n        if (!anyFlowingPropertySet && !hasChainName) {\n            return index_js_eager_default().createElement(Component, Object.assign({}, props, fieldProps));\n        }\n        const nextContext = Object.assign({}, context);\n        if (anyFlowingPropertySet) {\n            nextContext.state = mapValues_default()(nextContext.state, (value, key) => \n            // @ts-expect-error: `props` has no index signature.\n            props[key] !== null && props[key] !== undefined ? !!props[key] : value);\n        }\n        if (hasChainName) {\n            nextContext.name = nextContext.name.concat(props.name);\n        }\n        return (index_js_eager_default().createElement(context_context.Provider, { value: nextContext },\n            index_js_eager_default().createElement(Component, Object.assign({}, props, fieldProps))));\n    }\n    Field.displayName = `${Component.displayName || Component.name}Field`;\n    return Object.assign(Field, {\n        Component,\n        options,\n    });\n}\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/createAutoField.js\n\n\n\nfunction createAutoField(defaultComponentDetector) {\n    const context = (0,index_js_eager_.createContext)(defaultComponentDetector);\n    function AutoField(rawProps) {\n        var _a, _b;\n        const [props, uniforms] = useField(rawProps.name, rawProps);\n        const componentDetector = (0,index_js_eager_.useContext)(context);\n        const component = (_a = props.component) !== null && _a !== void 0 ? _a : componentDetector(props, uniforms);\n        browser_default()(component, 'AutoField received no component for: %s', props.name);\n        return 'options' in component && ((_b = component.options) === null || _b === void 0 ? void 0 : _b.kind) === 'leaf'\n            ? (0,index_js_eager_.createElement)(component.Component, props)\n            : (0,index_js_eager_.createElement)(component, rawProps);\n    }\n    AutoField.componentDetectorContext = context;\n    AutoField.defaultComponentDetector = defaultComponentDetector;\n    return AutoField;\n}\n\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/pickBy.js\nvar pickBy = __webpack_require__(30552);\nvar pickBy_default = /*#__PURE__*/__webpack_require__.n(pickBy);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/sortedIndex.js\nvar sortedIndex = __webpack_require__(69573);\nvar sortedIndex_default = /*#__PURE__*/__webpack_require__.n(sortedIndex);\n// EXTERNAL MODULE: ../../node_modules/uniforms/node_modules/lodash/sortedIndexOf.js\nvar sortedIndexOf = __webpack_require__(69219);\nvar sortedIndexOf_default = /*#__PURE__*/__webpack_require__.n(sortedIndexOf);\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/filterDOMProps.js\n\n\n\nconst registered = [];\nfunction filter(props) {\n    return pickBy_default()(props, filterOne);\n}\nfunction filterOne(value, prop) {\n    return sortedIndexOf_default()(registered, prop) === -1;\n}\nfunction register(...props) {\n    props.forEach(prop => {\n        if (sortedIndexOf_default()(registered, prop) === -1) {\n            registered.splice(sortedIndex_default()(registered, prop), 0, prop);\n        }\n    });\n}\nconst filterDOMProps = Object.assign(filter, {\n    register,\n    registered: registered,\n});\nregister(\n// These props are provided by useField directly.\n'changed', 'error', 'errorMessage', 'field', 'fieldType', 'fields', 'initialCount', 'name', 'onChange', 'transform', 'value', \n// These props are provided by useField through context.state.\n'disabled', 'label', 'placeholder', 'showInlineError', \n// This is used by AutoField.\n'component', \n// These is used by AutoField and bridges.\n'allowedValues');\n\n;// CONCATENATED MODULE: ../../node_modules/uniforms/es6/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40921\n")}}]);