{"version":3,"file":"191.6b6d231d.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n          annotations: [\n            {\n              key: 'connector_mgmt.api.openshift.com/profile',\n              value: 'default-profile',\n            },\n          ],\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorNamespace, {}> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function useConnectorStatusLabel(status: string) {\n  return typeof status !== undefined ? capitalize(status) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n\nexport const clearSecretEmptyValue = (obj: any) => {\n  return Object.keys(obj).map((key) => {\n    if (_.isEmpty((obj as { [key: string]: any })[key])) {\n      (obj as { [key: string]: any })[key] = '';\n    }\n  });\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('serviceAccount')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('clientId')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { Translation } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Translation>\n      {(t) => (\n        <Popover bodyContent={content}>\n          <button\n            type=\"button\"\n            aria-label={t('moreConnectorInfo', { name })}\n            onClick={(e) => e.preventDefault()}\n            aria-describedby=\"form-group-label-info\"\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      )}\n    </Translation>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  constructor(schema: any, validator: any) {\n    super(schema, validator);\n  }\n\n  getField(name: string): Record<string, any> {\n    const field = super.getField(name);\n    const { description, example, title, ...props } = field;\n    return {\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(title, description),\n      title,\n      ...props,\n    };\n  }\n}\n","import { Resolver } from '@stoplight/json-ref-resolver';\nimport { createValidator } from '@utils/createValidator';\nimport { clearSecretEmptyValue } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n  editCase?: boolean;\n  duplicateMode?: boolean;\n};\nconst resolver = new Resolver();\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange, editCase, duplicateMode }) => {\n    schema.type = schema.type || 'object';\n    // Suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(schema, schemaValidator);\n    const { required } = bridge.schema;\n\n    async function getDataShape(): Promise<any> {\n      const copiedBridge = JSON.parse(JSON.stringify(bridge));\n      let obj: any = [];\n      for (const [key] of Object.entries(\n        copiedBridge.schema.properties.data_shape?.properties\n      )) {\n        const dataShapeReolved = await resolver.resolve(copiedBridge.schema, {\n          jsonPointer: `#/$defs/data_shape/${key}`,\n        });\n        const result = await dataShapeReolved.result;\n        obj = { ...obj, [key]: result };\n      }\n      return obj;\n    }\n\n    const onChangeWizard = async (model: any, isValid: boolean) => {\n      const copiedModel = JSON.parse(JSON.stringify(model));\n      let dataShapePointer: any = [];\n      if (copiedModel.data_shape !== undefined) {\n        dataShapePointer = await getDataShape();\n        const { data_shape } = copiedModel;\n        Object.keys(data_shape).map((key) => {\n          const defaultValue =\n            dataShapePointer[key].properties?.format?.default;\n          if (_.isEmpty(data_shape[key])) {\n            copiedModel.data_shape[key] = { format: defaultValue };\n          }\n        });\n      }\n\n      const requiredEntries = {};\n      for (const [key, value] of Object.entries(copiedModel)) {\n        for (const r in required) {\n          if (key === required[r] && value !== undefined) {\n            const obj = { [key]: value };\n            Object.assign(requiredEntries, obj);\n          }\n        }\n      }\n      const compareRequiredEntriesKeys = (\n        requiredEntries: any,\n        required: any\n      ) => {\n        const aKeys = Object.keys(requiredEntries).sort();\n        const bKeys = required.slice().sort();\n        return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n      };\n      isValid =\n        copiedModel.data_shape === undefined\n          ? compareRequiredEntriesKeys(requiredEntries, required)\n          : compareRequiredEntriesKeys(requiredEntries, required);\n\n      if (isValid) {\n        onChange(copiedModel, isValid);\n      } else {\n        onChange(copiedModel, false);\n      }\n    };\n    React.useEffect(() => {\n      if (duplicateMode) {\n        clearSecretEmptyValue(configuration);\n        onChange(configuration, true);\n      }\n    }, [configuration]);\n\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={configuration}\n          onChangeModel={(model: any) => onChangeWizard(model, false)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(bridge.schema.properties).map((key) => {\n            if (!['processors', 'error_handler'].includes(key)) {\n              return (\n                <AutoField\n                  key={key}\n                  name={key}\n                  disabled={\n                    (editCase || duplicateMode) &&\n                    _.find(bridge.schema.properties[key].oneOf, {\n                      format: 'password',\n                    })\n                  }\n                />\n              );\n            }\n            return false;\n          })}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { clearSecretEmptyValue } from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = JSON.parse(JSON.stringify(configuration));\n  clearSecretEmptyValue(formConfiguration);\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration || {}}\n          onChange={onChange}\n          editCase={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {key === 'data_shape' ? (\n                  <DataShape data={formConfiguration[key]} />\n                ) : (\n                  <Text component={TextVariants.p}>\n                    {_.isObject(formConfiguration[key])\n                      ? JSON.stringify(formConfiguration[key])\n                      : formConfiguration[key]}\n                  </Text>\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(Object.keys(configuration)[0]);\n    if (\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport { ConnectorConfiguratorComponent } from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearSecretEmptyValue, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = JSON.parse(JSON.stringify(configuration));\n    clearSecretEmptyValue(formConfiguration);\n  }\n\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      isViewMode={!isEditMode}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport React, { FC } from 'react';\n\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={connectorData?.kafka?.id}\n        namespaceId={connectorData?.namespace_id!}\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n  const basename = useBasename();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'} hasShadowBottom>\n      <Breadcrumb>\n        <BreadcrumbItem to={basename?.getBasename()}>\n          {t('connectorsInstances')}\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              name={connectorData?.name!}\n              status={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    modifiedAt,\n    status,\n    error,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={kafkaId}\n                  namespaceId={namespaceId}\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={modifiedAt}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicateConnector'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const toolbarItems = (\n    <>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('clearAllFilters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  isViewMode?: boolean;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        {},\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst reset = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  {},\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid: context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedNamespace !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedNamespace !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorNamespace, {}, ConnectorNamespace>(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorNamespace, {}, ConnectorNamespace>\n  );\n  const { selectedId } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onRefresh,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n              >\n                {t('create')}\n              </Button>,\n              <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { clearSecretEmptyValue, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector, connectorData } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n        connectorData: state.context.connectorData,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    clearSecretEmptyValue(configuration);\n    const defaultEntries = JSON.parse(JSON.stringify(connectorData?.connector));\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = _.merge(\n        {},\n        defaultEntries,\n        mapToObject(configuration)\n      );\n    } else {\n      combineConfiguration = _.merge({}, defaultEntries, configuration);\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      isViewMode={duplicateMode && false}\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) clearSecretEmptyValue(configuration);\n\n  return (\n    <JsonSchemaConfigurator\n      schema={(connector as ConnectorTypeAllOf).schema!}\n      configuration={configuration || {}}\n      duplicateMode={duplicateMode}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={t('configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title=\"Kafka instances and namespaces both expire after 48 hours. When duplicating a Connectors instance, select a new Kafka instance and namespace. \"\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          <CardHeader>\n                            <CardTitle>\n                              {\n                                (connectorTypeDetails as ConnectorTypeAllOf)\n                                  .name\n                              }\n                            </CardTitle>\n                          </CardHeader>\n                          <CardBody>\n                            <DescriptionList>\n                              <DescriptionListGroup>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  Version\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>ID</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {(connectorTypeDetails as ObjectReference).id}\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            <CardHeader>\n                              <CardTitle>\n                                {(c as ConnectorTypeAllOf).name}\n                              </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                              <DescriptionList>\n                                <DescriptionListGroup>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    Version\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>ID</DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ObjectReference).id}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(page, size) =>\n              onQuery({ page, size, query: request.query || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (page: number, size: number) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={onChange}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('createKafkaInstance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  ExternalLinkSquareAltIcon,\n  PlusCircleIcon,\n} from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Button variant=\"primary\" onClick={onModalToggle}>\n            {t('createPreviewNamespace')}\n          </Button>\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" icon={<ExternalLinkSquareAltIcon />}>\n              {t('osdInstallationGuide')}\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`eval-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'eval-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'eval-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nconst getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return ` ${hourDiff} hours ${minuteDiff} minute.`;\n};\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst warningType = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  if (hourDiff >= 24) {\n    return 'info';\n  } else if (hourDiff >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onRefresh,\n    onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {t('evalNamespaceExpire')}\n                          {getPendingTime(new Date(evalInstance.expiration!))}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <ConnectorStatus\n                                    name={''}\n                                    status={i.status.state}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('accessKey') ||\n                      _.startCase(el) === t('secretKey') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('databasePassword') ||\n                      _.startCase(el) === t('password') ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('connectorsInstances')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useBasename,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const [duplicateMode, setDuplicateMode] = useState<boolean | undefined>();\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorType>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorType);\n    }, []);\n\n    useEffect(() => {\n      if (connectorId !== undefined) {\n        setDuplicateMode(true);\n      }\n    }, [connectorId]);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('connectorsInstances')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={duplicateMode}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('Leave page?')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","ConnectorStatus","name","status","label","undefined","capitalize","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","fetchConfigurator","connector","config","defaultConfig","Promise","resolve","steps","Configurator","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","id","split","maybeConf","reject","url","element","document","createElement","src","type","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","clearSecretEmptyValue","Object","keys","map","StepBodyLayout","title","description","component","className","Level","LevelItem","Title","headingLevel","CommonStep","editMode","configuration","changeIsValid","onUpdateConfiguration","t","useTranslation","Form","FormGroup","isRequired","fieldId","labelIcon","Popover","bodyContent","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","service_account","client_id","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","schema","validator","compile","model","errors","length","details","getLabelIcon","content","Translation","CustomJsonSchemaBridge","constructor","super","getField","field","example","props","helperText","exampleText","resolver","Resolver","JsonSchemaConfigurator","editCase","duplicateMode","properties","schemaValidator","bridge","required","onChangeWizard","isValid","copiedModel","JSON","parse","stringify","dataShapePointer","data_shape","copiedBridge","entries","dataShapeReolved","jsonPointer","result","getDataShape","defaultValue","format","requiredEntries","r","assign","compareRequiredEntriesKeys","aKeys","sort","bKeys","slice","Grid","hasGutter","KameletForm","onChangeModel","includes","AutoField","disabled","oneOf","Auto","parent","_","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","filter","replace","DataShape","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","clearSelection","useEffect","dead_letter_queue","JSONSchemaBridge","error_handler","dropdownItems","item","SelectOption","Select","variant","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","push","diff","reduce","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","Button","hasShadowTop","connectorUpdate","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","actions","activeStep","isViewMode","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceId","createdAt","modifiedAt","textListItem","TextListItem","TextListItemVariants","TextContent","TextList","TextListVariants","date","dateTime","toISOString","OverviewPage","kafka","namespace_id","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","basename","useBasename","hasShadowBottom","Breadcrumb","BreadcrumbItem","to","getBasename","isActive","state","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","openDetail","onDuplicateConnector","isSeparator","event","target","Td","dataLabel","isVisitedLink","items","Pagination","itemCount","page","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","toolbarItems","ToolbarGroup","ToolbarItem","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","Stack","StackItem","Trans","i18nKey","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","SearchIcon","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","_context","connectorMachine","createMachine","initial","initialContext","states","verify","always","cond","ready","on","stopped","deleted","startingConnector","invoke","desired_state","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","makePaginatedApiMachine","service","dataTransformer","options","request","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","send","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","ConnectedConnectorsPage","onCreateConnector","onConnectorDetail","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","ConnectorsPageTitle","isFilled","Card","ConnectedTable","ref","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientId","clientSecret","setName","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","version","isActiveStepValid","change","next","prev","complete","changedStep","nextStep","min","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","configuratorLoaderMachine","onDone","failure","escalate","find","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","s","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","namespacesAPI","ConnectorNamespacesApi","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","client_secret","createConnector","saveConnector","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isNamespaceSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onQuery","onRefresh","useConnectorTypesMachine","useKafkasMachine","onDeselect","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","validated","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroup","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","headerContent","helperTextInvalid","test","StepCommon","onSetName","useBasicMachine","setIsOpen","defaultEntries","combineConfiguration","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Alert","Gallery","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListDescription","DescriptionListTerm","isHoverable","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","toggleGroupItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","showToolbarItem","placeholder","KafkasPagination","EmptyStateNoNamespace","onModalToggle","EmptyStateSecondaryActions","ExternalLinkSquareAltIcon","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","annotations","registerEvalNamespace","isPlain","getPendingTime","expireTime","getTime","hourDiff","floor","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","warningType","setIsModalOpen","evalInstance","setEvalInstance","tenant","ClustersToolbar","isEvalPresent","expiration","cluster_id","searchInputRef","Tooltip","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","href","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","DuplicateConnectorPage","substring","setDuplicateMode","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}