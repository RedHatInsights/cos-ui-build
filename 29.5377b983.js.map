{"version":3,"file":"29.5377b983.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/CommonStep.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationTab.tsx","webpack://cos-ui/./src/app/components/ConnectorInfoTextList/ConnectorInfoTextList.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewTab.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/components/ConnectorActions/ConnectorActionsMenu.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepCommon.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepNamespace.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/CreateServiceAccount/CreateServiceAccount.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepCommon.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoNamespace/EmptyStateNoNamespace.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/ModalAlerts.tsx","webpack://cos-ui/./src/app/components/RegisterEvalNamespace/RegisterEvalNamespace.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepNamespace.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/DuplicateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorDesiredState,\n  ConnectorNamespace,\n  ConnectorNamespacesApi,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypesApi,\n  ObjectReference,\n  ServiceAccount,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\nimport { PlaceholderOrderBy } from './../app/machines/PaginatedResponse.machine';\n\nexport enum SortOrderValue {\n  asc = 'asc',\n  desc = 'desc',\n}\n\nexport type SortOrder = keyof typeof SortOrderValue;\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype EvalNamespaceApiProps = {\n  evalName: string;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string | undefined;\n  updatedServiceAccount?: ServiceAccount | undefined;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorNamespaceProps = {\n  namespaceId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorsOrderBy = {\n  name?: SortOrder;\n};\n\nexport type ConnectorsSearch = {\n  name?: string;\n  description?: string;\n  version?: string;\n  label?: string[];\n  channel?: string;\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  Connector,\n  ConnectorsOrderBy,\n  ConnectorsSearch\n> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const searchString: string = [nameSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, '', searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const registerEvalNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  evalName,\n}: EvalNamespaceApiProps): FetchCallbacks<string> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .createEvaluationNamespace(\n        {\n          name: evalName,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data.name || '');\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getNamespace = ({\n  accessToken,\n  connectorsApiBasePath,\n  namespaceId,\n}: ConnectorNamespaceProps): FetchCallbacks<ConnectorNamespace> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    namespacesAPI\n      .getConnectorNamespace(namespaceId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorNamespaceSearch = {\n  name?: string;\n};\n\nexport const fetchConnectorNamespaces = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  ConnectorNamespace,\n  PlaceholderOrderBy,\n  ConnectorNamespaceSearch\n> => {\n  const namespacesAPI = new ConnectorNamespacesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const searchString: string = [nameSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    namespacesAPI\n      .listConnectorNamespaces(`${page}`, `${size}`, undefined, searchString)\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesSearch = {\n  name?: string;\n  categories?: string[];\n\n  description?: string;\n  version?: string;\n  label?: string[];\n  channel?: string;\n};\n\nexport type ConnectorTypesOrderBy = {\n  name?: SortOrder;\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<\n  ConnectorType,\n  PlaceholderOrderBy,\n  ConnectorTypesSearch\n> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name, categories = [] } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name like '%${name}%'` : undefined;\n    const labelSearch =\n      categories && categories.length > 0\n        ? categories.map((s) => `label = ${s}`).join(' OR ')\n        : undefined;\n    const searchString: string = [nameSearch, labelSearch]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getConnectorTypes(`${page}`, `${size}`, undefined, searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\ntype KafkaInstanceDetailProps = {\n  KafkaInstanceId: string;\n} & KafkaManagementApiProps;\n\nexport type KafkasSearch = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<\n  KafkaRequest,\n  PlaceholderOrderBy,\n  KafkasSearch\n> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, search } = request;\n    const { name, statuses, owner, cloudProviders, regions } = search || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE '%${name}%'` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE '%${owner}%'` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const searchString = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(`${page}`, `${size}`, undefined, searchString, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getKafkaInstanceById = ({\n  accessToken,\n  kafkaManagementBasePath,\n  KafkaInstanceId,\n}: KafkaInstanceDetailProps): FetchCallbacks<KafkaInstance> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getKafkaById(KafkaInstanceId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error msg:' + error.response);\n          onError(error.response);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type createNewServiceAccountProps = {\n  accessToken: () => Promise<string>;\n  sortDesc: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const createServiceAccount = ({\n  accessToken,\n  kafkaManagementApiBasePath,\n  sortDesc,\n}: createNewServiceAccountProps): FetchCallbacks<ServiceAccount> => {\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    securityAPI\n      .createServiceAccount(\n        {\n          name: `connector-${sortDesc}`,\n        },\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess(response.data as ServiceAccount);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafka,\n  namespace,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n\n    let connectorConfiguration = {};\n    if (userErrorHandler) {\n      connectorConfiguration = {\n        ...configuration,\n        ...{\n          error_handler: {\n            [userErrorHandler]: topic ? { topic: topic } : {},\n          },\n        },\n      };\n    } else {\n      connectorConfiguration = configuration;\n    }\n    const connector: Connector = {\n      kind: 'Connector',\n      name: name,\n      channel: Channel.Stable,\n      namespace_id: namespace.id!,\n      desired_state: ConnectorDesiredState.Ready,\n      connector_type_id: (connectorType as ObjectReference).id!,\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n      connector: connectorConfiguration,\n    };\n    connectorsAPI\n      .createConnector(async, connector, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({ type: 'success' });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'failure',\n            message: error.response.data.reason,\n          });\n        }\n      });\n\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n  updatedServiceAccount,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n          ...(updatedServiceAccount && {\n            service_account: updatedServiceAccount,\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import { capitalize } from 'lodash';\nimport React, { FC, ReactNode } from 'react';\n\nimport {\n  Split,\n  SplitItem,\n  Spinner,\n  Stack,\n  StackItem,\n  Button,\n  Popover,\n  PopoverPosition,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  OutlinedPauseCircleIcon,\n  OutlinedTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport * as tokens from '@patternfly/react-tokens';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  desiredState: string;\n  name: string;\n  state: string;\n  clickable?: boolean;\n  popoverBody?: ReactNode;\n  popoverHeader?: ReactNode;\n};\n\nexport const ConnectorStatus: FC<ConnectorStatusProps> = ({\n  desiredState,\n  name,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => (\n  <Split className={'connector-status__split'} hasGutter>\n    <SplitItem>\n      <ConnectorStatusIcon name={name} state={state} />\n    </SplitItem>\n    <SplitItem isFilled>\n      <ConnectorStatusLabel\n        desiredState={desiredState}\n        state={state}\n        clickable={clickable}\n        popoverBody={popoverBody}\n        popoverHeader={popoverHeader}\n      />\n    </SplitItem>\n  </Split>\n);\n\ntype ConnectorStatusLabelProps = {\n  desiredState: string;\n  state: string;\n  clickable: boolean | undefined;\n  popoverBody: ReactNode;\n  popoverHeader: ReactNode;\n};\n\nexport const ConnectorStatusLabel: FC<ConnectorStatusLabelProps> = ({\n  desiredState,\n  state,\n  clickable,\n  popoverBody,\n  popoverHeader,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n    case 'failed':\n    case 'stopped':\n    case 'deleted':\n    case '':\n      return (\n        <>\n          {clickable ? (\n            <Popover\n              aria-label=\"connector status popover\"\n              position={PopoverPosition.auto}\n              hideOnOutsideClick={true}\n              headerContent={popoverHeader}\n              bodyContent={popoverBody}\n            >\n              <Button variant=\"link\" isInline>\n                {convertToLabel(state)}\n              </Button>\n            </Popover>\n          ) : (\n            convertToLabel(state)\n          )}\n        </>\n      );\n    default:\n      return (\n        <Stack className={'connector-status-label__stack'}>\n          <StackItem className={'connector-status-label__state-label'}>\n            {convertToLabel(state)}\n          </StackItem>\n          <StackItem className={'connector-status-label__desired-state-label'}>\n            Transitioning to <b>{convertToLabel(desiredState)}</b>\n          </StackItem>\n        </Stack>\n      );\n  }\n};\n\ntype ConnectorStatusIconProps = {\n  name: string;\n  state: string;\n};\n\nexport const ConnectorStatusIcon: FC<ConnectorStatusIconProps> = ({\n  name,\n  state,\n}) => {\n  switch (state?.toLowerCase()) {\n    case 'ready':\n      return <CheckCircleIcon color={tokens.global_success_color_100.value} />;\n    case 'failed':\n      return (\n        <ExclamationCircleIcon color={tokens.global_danger_color_100.value} />\n      );\n    case 'stopped':\n      return <OutlinedPauseCircleIcon />;\n    case 'deleted':\n      return <OutlinedTimesCircleIcon />;\n    default:\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Please wait, tasks are in progress\"\n        />\n      );\n  }\n};\n\nexport function convertToLabel(state: string) {\n  return typeof state !== undefined ? capitalize(state) : 'Undefined';\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong: </p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport enum ConfigurationMode {\n  CREATE = 'create',\n  VIEW = 'view',\n  EDIT = 'edit',\n  DUPLICATE = 'duplicate',\n}\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  uiPath: ConfigurationMode;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n  duplicateMode?: boolean | undefined;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n  duplicateMode?: boolean | undefined;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n  duplicateMode: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","import _ from 'lodash';\n\nexport const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\nexport const dataToPrettyString = (data: unknown) => {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const getPasswordType = (schema: Record<string, any>) => {\n  let dataToHide: string[] = [];\n  const keys = Object.keys(schema.properties);\n  keys.map((key) => {\n    const oneOf = schema.properties[key].oneOf;\n    if (typeof oneOf !== 'undefined') {\n      const [def] = oneOf;\n      if (def.format === 'password') {\n        dataToHide.push(key);\n      }\n    }\n  });\n  return dataToHide;\n};\n\n/**\n * Calculate the time remaining before expiry\n * @param expireTime\n * @returns\n */\nexport const getPendingTime = (expireTime: Date) => {\n  let diff = expireTime.getTime() - new Date().getTime();\n  diff = diff / 1000;\n  let hourDiff = Math.floor(diff / 3600);\n  diff -= hourDiff * 3600;\n  let minuteDiff = Math.floor(diff / 60);\n  return { hours: hourDiff, min: minuteDiff };\n};\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\n/**\n * Calculate the time remaining before expiry and return the alert type based on that\n * @param expireTime\n * @returns\n * \"info\" if time remaining > 24 hr\n * \"warning\" if time remaining >= 3 hr\n * \"danger\" if time remaining < 3hr\n */\nexport const warningType = (expireTime: Date): AlertType => {\n  let { hours } = getPendingTime(expireTime);\n  if (hours >= 24) {\n    return 'info';\n  } else if (hours >= 3) {\n    return 'warning';\n  }\n  return 'danger';\n};\n\n/**\n * Simple reference resolver that works with references contained in the\n * same schema object\n * @param ref\n * @param schema\n * @returns\n */\nexport const resolveReference = (ref: string, schema: Record<string, any>) => {\n  const [_, ...pathArray] = ref.split('/');\n  return pathArray.reduce((prev, key) => prev && prev[key], schema);\n};\n\n/**\n * Get whatever the default value is for a given property in the given\n * schema recursively\n * @param propertyName\n * @param schema\n * @returns\n */\nexport const createDefaultFromSchema = (\n  propertyName: string,\n  schema: Record<string, any>\n) => {\n  const prop = schema.properties[propertyName];\n  if (typeof prop === 'undefined') {\n    return undefined;\n  }\n  const definition = prop.$ref\n    ? resolveReference(prop.$ref, schema)\n    : schema.properties[propertyName];\n  if (!definition.properties) {\n    return definition.default;\n  }\n  const answer: any = {};\n  Object.keys(definition.properties).map((key) => {\n    const value = createDefaultFromSchema(key, {\n      $defs: schema.$defs,\n      ...(definition || {}),\n    });\n    if (typeof value !== 'undefined') {\n      answer[key] = value;\n    }\n  });\n  return answer;\n};\n\n/**\n * Returns a new object that does not contain empty objects as values\n * and leaves the passed in value untouched.\n * @param obj\n * @returns\n */\nexport const clearEmptyObjectValues = (obj: any): any => {\n  const answer: any = { ...obj };\n  Object.keys(answer).map((key) => {\n    const value = answer[key];\n    if (typeof value === 'object' && Object.keys(value).length === 0) {\n      answer[key] = '';\n    }\n  });\n  return answer;\n};\n\n/**\n * Applies client-side workarounds to possible discrepencies in the configuration.\n *\n * Applies a default datashape value from the schema if the configuration object doesn't have one.\n *\n * @param schema\n * @param configuration\n * @returns\n */\nexport const patchConfigurationObject = (\n  schema: Record<string, any>,\n  configuration: { data_shape: any; [key: string]: any }\n) => {\n  const { data_shape: dataShape, ...rest } = configuration;\n  if (typeof dataShape === 'undefined') {\n    const dataShape = createDefaultFromSchema('data_shape', schema);\n    return { ...rest, ...(dataShape && { data_shape: dataShape }) };\n  }\n  return configuration;\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  InputGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ExclamationCircleIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  HelpIcon,\n} from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport type SecretPlaceholderProp = {\n  SAPlaceholder: string;\n  onSAPlaceholderChange: (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => void;\n};\nexport const SecretPlaceholder: FC<SecretPlaceholderProp> = ({\n  SAPlaceholder,\n  onSAPlaceholderChange,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <FormGroup\n      label={t('clientSecret')}\n      helperText={t('credentialEditFieldHelpText')}\n      fieldId=\"clientSecretPlaceholder\"\n    >\n      <InputGroup>\n        <TextInput\n          value={SAPlaceholder}\n          type=\"password\"\n          onChange={onSAPlaceholderChange}\n          id=\"connector-sa-secret-placeholder\"\n        />\n      </InputGroup>\n    </FormGroup>\n  );\n};\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const [isSAUpdate, setIsSAUpdate] = React.useState(false);\n  const [passwordHidden, setPasswordHidden] = React.useState<boolean>(true);\n  const [SAPlaceholder, setSAPlaceholder] = React.useState<string>('*****');\n  const configurationCopy = Object.assign({}, configuration);\n  const { service_account } = configurationCopy;\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n  const onSAPlaceholderChange = (placeholder: string) => {\n    setSAPlaceholder(placeholder);\n    if (placeholder === '') changeIsValid(false);\n  };\n  const onSAChange = (clientId: string) => {\n    onUpdateConfiguration('common', {\n      ...configurationCopy,\n      service_account: {\n        client_id: clientId,\n        client_secret: service_account.client_secret,\n      },\n    });\n    !isSAUpdate &&\n      setIsSAUpdate((prev) => {\n        if (!prev) {\n          changeIsValid(false);\n        }\n        return true;\n      });\n\n    if (service_account.client_secret === '' || clientId === '') {\n      changeIsValid(false);\n    } else {\n      changeIsValid(true);\n    }\n  };\n\n  const onSASecretChange = (secret: string) => {\n    onUpdateConfiguration('common', {\n      ...configurationCopy,\n      service_account: {\n        client_id: service_account.client_id,\n        client_secret: secret,\n      },\n    });\n    if (\n      service_account.client_secret === '' ||\n      secret === '' ||\n      service_account.client_id === ''\n    ) {\n      changeIsValid(false);\n    } else {\n      changeIsValid(true);\n    }\n  };\n  return (\n    <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n      <Form>\n        <FormGroup\n          label={t('connectorName')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('connectorNamePopoverBody')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"connector-name-helper\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('serviceAccount')}\n          isRequired\n          fieldId=\"service-account\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('serviceAccountDescText')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"service-account-helper\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          <Text component={TextVariants.p}>\n            {t('serviceAccountEditDescription')}\n          </Text>\n        </FormGroup>\n        <FormGroup\n          label={t('clientId')}\n          isRequired\n          validated={service_account?.client_id ? 'default' : 'error'}\n          helperTextInvalid={t('clientIdRequired')}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          fieldId=\"clientId\"\n        >\n          {editMode ? (\n            <TextInput\n              value={service_account?.client_id}\n              validated={service_account?.client_id ? 'default' : 'error'}\n              onChange={onSAChange}\n              id=\"connector-sa-id\"\n            />\n          ) : (\n            <ClipboardCopy isReadOnly hoverTip=\"copy\" clickTip=\"Copied\">\n              {service_account?.client_id}\n            </ClipboardCopy>\n          )}\n        </FormGroup>\n        {editMode &&\n          service_account?.client_secret === '' &&\n          SAPlaceholder !== '' && (\n            <SecretPlaceholder\n              SAPlaceholder={SAPlaceholder}\n              onSAPlaceholderChange={onSAPlaceholderChange}\n            />\n          )}\n\n        {editMode && SAPlaceholder === '' && (\n          <FormGroup\n            label={t('clientSecret')}\n            isRequired\n            validated={service_account?.client_secret ? 'default' : 'error'}\n            helperText={t('credentialEditFieldHelpText')}\n            helperTextInvalid={t('clientSecretRequired')}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            fieldId=\"clientSecret\"\n          >\n            <InputGroup>\n              <TextInput\n                value={service_account?.client_secret}\n                type={passwordHidden ? 'password' : 'text'}\n                validated={service_account?.client_secret ? 'default' : 'error'}\n                onChange={onSASecretChange}\n                id=\"connector-sa-secret\"\n              />\n\n              <Button\n                variant=\"control\"\n                onClick={() => setPasswordHidden(!passwordHidden)}\n                aria-label={passwordHidden ? 'Show password' : 'Hide password'}\n              >\n                {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import React from 'react';\nimport { TFunction } from 'react-i18next';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\n\nimport { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText\n * @returns\n */\nconst getExampleText = (exampleText: string) =>\n  typeof exampleText !== 'undefined' ? `Example: ${exampleText}` : undefined;\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name\n * @param content\n * @returns\n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof content !== 'undefined' ? (\n    <Popover bodyContent={content}>\n      <button\n        type=\"button\"\n        aria-label={`More info for ${name}`}\n        onClick={(e) => e.preventDefault()}\n        aria-describedby=\"form-group-label-info\"\n        className=\"pf-c-form__group-label-help\"\n      >\n        <HelpIcon noVerticalAlign />\n      </button>\n    </Popover>\n  ) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n  showCredentialHelpText: boolean;\n  duplicateMode: boolean;\n  t: TFunction<'translation', undefined>;\n\n  constructor(\n    schema: any,\n    validator: any,\n    t: TFunction<'translation', undefined>,\n    showCredentialHelpText: boolean,\n    duplicateMode: boolean\n  ) {\n    super(schema, validator);\n    this.t = t;\n    this.showCredentialHelpText = showCredentialHelpText;\n    this.duplicateMode = duplicateMode;\n  }\n\n  /**\n   * Returns the element properties for the named field.  Properties\n   * that should be excluded from DOM properties should be added to\n   * FilterDOMProps\n   * @param name\n   * @returns\n   */\n  getProps(name: string): any {\n    const { description, example, label, ...props } = super.getProps(name);\n    const { isSecret } = this.getField(name);\n    if (isSecret) {\n      return {\n        ...props,\n        ...(this.showCredentialHelpText && {\n          helperText: this.duplicateMode\n            ? this.t('credentialDuplicateFieldHelpText')\n            : this.t('credentialEditFieldHelpText'),\n        }),\n        labelIcon: getLabelIcon(label || name, description),\n        name,\n        label,\n        type: 'password',\n      };\n    }\n    return {\n      ...props,\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(label || name, description),\n      name,\n      label,\n    };\n  }\n\n  getField(name: string): Record<string, any> {\n    const { enum: enumValues, oneOf, ...field } = super.getField(name);\n    // use this to look at field information\n    /*\n    console.log(\n      'Complex type, name: ',\n      name,\n      ' oneOf: ',\n      oneOf,\n      ' field: ',\n      field\n    );\n    */\n    // uniforms will show the first enum value even if the underlying\n    // model object doesn't have this set or if there's no default value\n    let newEnumValues = undefined;\n    if (\n      typeof field.type !== 'undefined' &&\n      field.type === 'string' &&\n      typeof enumValues !== 'undefined'\n    ) {\n      if (enumValues[0] !== '') {\n        newEnumValues = ['', ...enumValues];\n      }\n    }\n    // Due to:\n    // https://uniforms.tools/docs/api-bridges/#note-on-allofanyofoneof\n    // we need to pick the appropriate type for the form, let's use the\n    // schema to guide these choices.\n    if (typeof oneOf !== 'undefined') {\n      // credentials are either a string field or an opaque object, for\n      // forms let's pick the string field and override it to a password\n      // We are assuming that the schema is consistent here\n      const [asString] = oneOf;\n      return {\n        ...asString,\n        name,\n        required: field.required,\n        type: asString.format,\n        isSecret: asString.format === 'password',\n      };\n    } else {\n      return {\n        name,\n        ...field,\n        ...(typeof newEnumValues !== undefined && { enum: newEnumValues }),\n      };\n    }\n  }\n}\n","import { createValidator } from '@utils/createValidator';\nimport { clearEmptyObjectValues } from '@utils/shared';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  duplicateMode?: boolean;\n  editMode?: boolean;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n};\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, duplicateMode, editMode, onChange }) => {\n    const { t } = useTranslation();\n    schema.type = schema.type || 'object';\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(\n      schema,\n      schemaValidator,\n      t,\n      duplicateMode || editMode || false,\n      duplicateMode || false\n    );\n\n    const onChangeModel = async (model: any) => {\n      // schemaValidator returns null when there's no errors in the form\n      const errors = schemaValidator(model);\n      // handy for seeing form validation problems\n      // console.log(\"onChangeModel, form validation errors: \", errors);\n      onChange(model, errors === null);\n    };\n\n    // no need to create form elements for error_handler, processors or steps\n    const { error_handler, processors, steps, ...properties } =\n      bridge.schema.properties;\n    // this is great for diagnosing form rendering problems\n    // console.log('properties: ', properties, ' configuration: ', configuration);\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={clearEmptyObjectValues(configuration)}\n          onChangeModel={(model: any) => onChangeModel(model)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(properties).map((key) => (\n            <AutoField key={key} name={key} />\n          ))}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport {\n  clearEmptyObjectValues,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport './ConfigurationStep.css';\n\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = patchConfigurationObject(\n    schema,\n    clearEmptyObjectValues(JSON.parse(JSON.stringify(configuration)))\n  );\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  const getFieldViewComponent = (\n    propertyKey: string,\n    propertyDefinition: {\n      title?: string;\n      type?: string;\n      oneOf?: Array<{ format: string }>;\n    },\n    value: any\n  ): React.ReactNode => {\n    const { title, type, oneOf } = propertyDefinition;\n    // a good place to start troubleshooting problems in the detail view\n    /*\n    console.log(\n      'getViewComponent, propertyName: ',\n      propertyName,\n      ' propertyDefinition: ',\n      propertyDefinition,\n      ' value: ',\n      value\n    );\n    */\n    const propertyNameFallback = _.capitalize(propertyKey.replace('_', ' '));\n    const noPropertySet = (name: string) => (\n      <Text className={'connector-detail__field_view_no_value'}>\n        {t('propertyNotConfigured', { name })}\n      </Text>\n    );\n    // Use the schema to determine the best way to\n    // represent the data\n    switch (type) {\n      case 'object':\n        if (propertyKey === 'data_shape') {\n          return <DataShape data={value} />;\n        }\n        if (value) {\n          return (\n            <Text component={TextVariants.pre}>{JSON.stringify(value)}</Text>\n          );\n        }\n        return noPropertySet(title || propertyNameFallback);\n      case 'boolean':\n        if (typeof value !== 'undefined') {\n          return <Text>{JSON.stringify(value)}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n      default:\n        if (typeof oneOf !== 'undefined') {\n          // we are assuming the schema is consistent here\n          const [def] = oneOf;\n          if (def.format === 'password') {\n            return <Text>**************************</Text>;\n          }\n        }\n        if (typeof value !== 'undefined') {\n          return <Text>{value}</Text>;\n        }\n        return noPropertySet(title || propertyNameFallback);\n    }\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('connectorSpecific')}\n      description={t('configurationStepDescription')}\n    >\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration}\n          onChange={onChange}\n          editMode={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape' && formConfiguration[key]) {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                {getFieldViewComponent(\n                  key,\n                  schema.properties[key],\n                  formConfiguration[key]\n                )}\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </StepBodyLayout>\n  );\n};\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <FormGroup key={key} label={_.upperFirst(key)} fieldId={key}>\n            <Text component={TextVariants.p}>{data[key].format}</Text>\n          </FormGroup>\n        );\n      })}\n    </>\n  );\n};\n","import { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler | undefined;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(\n      configuration\n        ? Object.keys(configuration)[0]\n        : Object.keys(error_handler.default)[0]\n    );\n    if (\n      configuration &&\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Form>\n        <FormGroup\n          label={t('errorHandler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { clearEmptyObjectValues, mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport './ConfigurationTab.css';\nimport { CommonStep } from './ConfigurationTab/CommonStep';\nimport { ConfigurationStep } from './ConfigurationTab/ConfigurationStep';\nimport {\n  ErrorHandler,\n  ErrorHandlerStep,\n} from './ConfigurationTab/ErrorHandlerStep';\n\nexport type ConfigurationTabProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationTab: FC<ConfigurationTabProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-update-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-update-success',\n      variant: AlertVariant.success,\n      title: t('editAlertSuccessTitle'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n      ...(commonConfiguration.service_account !==\n        connectorData.service_account && {\n        updatedServiceAccount: commonConfiguration.service_account,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('core')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('connectorSpecific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('errorHandling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('editProperties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('leaveEditConnectorConfirmModalTitle')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {t('leaveEditConnectorConfirmModalDescription')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = clearEmptyObjectValues(\n      JSON.parse(JSON.stringify(configuration))\n    );\n  }\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      uiPath={isEditMode ? ConfigurationMode.EDIT : ConfigurationMode.VIEW}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\n\nimport './ConnectorInfoTextList.css';\n\ntype AlertType = 'info' | 'warning' | 'danger' | undefined;\n\nexport type ConnectorInfoTextListProps = {\n  name: string;\n  id: string;\n  type?: string;\n  bootstrapServer: string;\n  kafkaId: string | KafkaInstance | ReactNode;\n  owner: string;\n  namespaceId: string | ReactNode;\n  namespaceMsg?: string | undefined;\n  namespaceMsgVariant: AlertType;\n  createdAt: Date;\n  modifiedAt: Date;\n  error?: string;\n};\n\nexport const ConnectorInfoTextList: FunctionComponent<ConnectorInfoTextListProps> =\n  ({\n    name,\n    id,\n    type,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    namespaceMsg,\n    namespaceMsgVariant,\n    createdAt,\n    modifiedAt,\n    error,\n  }) => {\n    const { t } = useTranslation();\n    const [failureReasonExpand, setFailureReasonExpand] = React.useState(false);\n    const getFailureReason = (value: string): ReactNode => {\n      if ((value as string).length > 200) {\n        return (\n          <>\n            {!failureReasonExpand && (value as string).length > 200\n              ? (value as string).substring(0, 200) + '... '\n              : value}\n\n            <Button\n              onClick={() => setFailureReasonExpand(!failureReasonExpand)}\n              variant={'link'}\n            >\n              {failureReasonExpand ? t('viewLess') : t('viewMore')}\n            </Button>\n          </>\n        );\n      }\n      return value;\n    };\n    const textListItem = (\n      title: string,\n      value?: string | KafkaInstance | ReactNode\n    ) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {(() => {\n                switch (title) {\n                  case t('failureReason'):\n                    return getFailureReason(value as string);\n                  case t('kafkaInstance'):\n                    return (value as KafkaInstance)?.name ? (\n                      <Button\n                        className=\"Kafka-link-button\"\n                        variant=\"link\"\n                        onClick={() => {\n                          window.open(\n                            'https://console.redhat.com/application-services/streams/kafkas/' +\n                              (value as KafkaInstance).id,\n                            '_blank'\n                          );\n                        }}\n                      >\n                        {(value as KafkaInstance).name}\n                      </Button>\n                    ) : typeof value === 'string' ? (\n                      <Text\n                        component={TextVariants.p}\n                        className=\"pf-u-color-400\"\n                      >\n                        {value}\n                      </Text>\n                    ) : (\n                      value\n                    );\n                  default:\n                    return value;\n                }\n              })()}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n    return (\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem(t('connector'), name)}\n          {textListItem(t('connectorId'), id)}\n          {textListItem(t('connectorType'), type)}\n          {textListItem(t('bootstrapServer'), bootstrapServer)}\n          {textListItem(t('kafkaInstance'), kafkaId)}\n          {textListItem(t('namespace'), namespaceId)}\n          {namespaceMsg &&\n            textListItem(\n              t(''),\n              <Alert\n                customIcon={<OutlinedClockIcon />}\n                className=\"my-class\"\n                variant={namespaceMsgVariant}\n                isInline\n                isPlain\n                title={namespaceMsg}\n              />\n            )}\n          {textListItem(t('owner'), owner)}\n          {textListItem(\n            t('timeCreated'),\n            <time\n              title={t('{{date}}', { date: createdAt })}\n              dateTime={createdAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: createdAt })}\n            </time>\n          )}\n          {textListItem(\n            t('timeUpdated'),\n            <time\n              title={t('{{date}}', { date: modifiedAt })}\n              dateTime={modifiedAt.toISOString()}\n            >\n              {t('{{ date, ago }}', { date: modifiedAt })}\n            </time>\n          )}\n          {textListItem(t('failureReason'), error)}\n        </TextList>\n      </TextContent>\n    );\n  };\n","import { getKafkaInstanceById, getNamespace } from '@apis/api';\nimport { ConnectorInfoTextList } from '@app/components/ConnectorInfoTextList/ConnectorInfoTextList';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Hint,\n  HintBody,\n  PageSection,\n  PageSectionVariants,\n  Spinner,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { KafkaInstance, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewTabProps {\n  connectorData: Connector;\n}\n\nexport const OverviewTab: FC<OverviewTabProps> = ({ connectorData }) => {\n  const [namespaceData, setNamespaceData] = useState<ConnectorNamespace>();\n  const [KIData, setKIData] = useState<KafkaInstance | string>();\n\n  const { connectorsApiBasePath, kafkaManagementApiBasePath, getToken } =\n    useCos();\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const getNamespaceData = useCallback((data) => {\n    setNamespaceData(data as ConnectorNamespace);\n  }, []);\n\n  const getKIData = useCallback((data) => {\n    setKIData(data as KafkaInstance);\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-overview-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onKIError = useCallback(\n    (response: any) => {\n      if (response.status === 404) {\n        setKIData(t('KafkaInstanceExpired'));\n      } else {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description: response.data.reason,\n        });\n      }\n    },\n    [alert, t]\n  );\n\n  const getConnectorExpireAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredMsg');\n    }\n    return t('connectorExpire', { hours, min });\n  };\n\n  const getConnectorExpireInlineAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('connectorExpiredInline');\n    }\n    return t('connectorExpireInline', { hours, min });\n  };\n\n  useEffect(() => {\n    getNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      namespaceId: connectorData?.namespace_id!,\n    })(getNamespaceData, onError);\n    getKafkaInstanceById({\n      accessToken: getToken,\n      kafkaManagementBasePath: kafkaManagementApiBasePath,\n      KafkaInstanceId: connectorData?.kafka?.id,\n    })(getKIData, onKIError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      {namespaceData?.expiration && (\n        <Alert\n          customIcon={<ClockIcon />}\n          className=\"pf-u-mb-md\"\n          variant={warningType(new Date(namespaceData?.expiration!))}\n          isInline\n          title={getConnectorExpireAlert(namespaceData?.expiration!)}\n        />\n      )}\n      {connectorData?.status?.state === 'failed' && (\n        <Hint className=\"pf-u-mb-md\">\n          <HintBody>\n            <p>{t('previewModeMsg')}</p>\n            <Trans i18nKey={'supportEmailMsg'}>\n              You can still get help by emailing us at\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                rhosak-eval-support@redhat.com\n              </ClipboardCopy>\n              . This mailing list is monitored by the Red Hat OpenShift\n              Application Services team.\n            </Trans>\n          </HintBody>\n        </Hint>\n      )}\n\n      <ConnectorInfoTextList\n        name={connectorData?.name}\n        id={connectorData?.id!}\n        type={connectorData?.connector_type_id}\n        bootstrapServer={connectorData?.kafka?.url}\n        kafkaId={KIData ? KIData! : <Spinner size=\"md\" />}\n        namespaceId={namespaceData ? namespaceData.name : <Spinner size=\"md\" />}\n        namespaceMsg={\n          namespaceData?.expiration &&\n          getConnectorExpireInlineAlert(namespaceData?.expiration!)\n        }\n        namespaceMsgVariant={\n          namespaceData?.expiration\n            ? warningType(new Date(namespaceData?.expiration!))\n            : undefined\n        }\n        owner={connectorData?.owner!}\n        createdAt={new Date(connectorData?.created_at!)}\n        modifiedAt={new Date(connectorData?.modified_at!)}\n        error={connectorData?.status?.error}\n      />\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationTab } from './ConfigurationTab';\nimport { OverviewTab } from './OverviewTab';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substring(1, hash.indexOf('&'))\n    : hash.substring(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-details-page',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('overview')}</TabTitleText>}\n              >\n                <OverviewTab connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationTab\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'}>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={'/'}>{t('connectorsInstances')}</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              desiredState={connectorData?.desired_state!}\n              name={connectorData?.name!}\n              state={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('deleteConnectorModalTitle')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalDescription'}>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans i18nKey={'deleteConnectorModalConfirmationPrompt'}>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport const DEFAULT_PAGE_SIZE = 10;\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, OrderBy, Search> = (\n  request: PaginatedApiRequest<OrderBy, Search>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\nexport type PlaceholderOrderBy = object;\nexport type PlaceholderSearch = object;\nexport type PaginatedApiRequest<OrderBy, Search> = {\n  page: number;\n  size: number;\n  orderBy?: OrderBy;\n  search?: Search;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, OrderBy, Search, DataType> = {\n  request: PaginatedApiRequest<OrderBy, Search>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\nexport type PaginatedMachineOptions<DataType> = {\n  initialPageSize?: number;\n  pollingEnabled?: boolean;\n  onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n};\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  OrderBy,\n  Search,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<OrderBy, Search>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<OrderBy, Search>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, OrderBy, Search, DataType>(\n  service: ApiCallback<RawDataType, OrderBy, Search>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: PaginatedMachineOptions<DataType>\n) {\n  const { pollingEnabled, initialPageSize, onBeforeSetResponse } =\n    options || {};\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: initialPageSize || DEFAULT_PAGE_SIZE,\n      },\n      response: undefined,\n      pollingEnabled: pollingEnabled || false,\n      onBeforeSetResponse: onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, OrderBy, Search, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<\n          RawDataType,\n          OrderBy,\n          Search,\n          DataType\n        >(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, search: query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        search: query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (\n      context: PaginatedMachineContext<RawDataType, OrderBy, Search, DataType>\n    ) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.search !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.search !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, OrderBy, Search, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, OrderBy, Search>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, OrderBy, Search, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, OrderBy, Search, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, OrderBy, Search, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<OrderBy, Search, DataType> = {\n  request: PaginatedApiRequest<OrderBy, Search>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, OrderBy, Search, DataType>(\n  actor: PaginatedApiActorType<RawDataType, OrderBy, Search, DataType>\n): usePaginationReturnValue<OrderBy, Search, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<OrderBy, Search, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import {\n  ConnectorsOrderBy,\n  ConnectorsSearch,\n  fetchConnectors,\n} from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        ConnectorsOrderBy,\n        ConnectorsSearch,\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  ConnectorsOrderBy,\n                  ConnectorsSearch,\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorsOrderBy, ConnectorsSearch } from '@apis/api';\nimport { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  ConnectorsOrderBy,\n  ConnectorsSearch,\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  runQuery: (\n    props: PaginatedApiRequest<ConnectorsOrderBy, ConnectorsSearch>\n  ) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<\n    Connector,\n    ConnectorsOrderBy,\n    ConnectorsSearch,\n    ConnectorMachineActorRef\n  >(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      ConnectorsOrderBy,\n      ConnectorsSearch,\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const runQuery = useCallback(\n    (props: PaginatedApiRequest<ConnectorsOrderBy, ConnectorsSearch>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    runQuery,\n  };\n};\n","import { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useConnectorsMachine } from '@app/pages/ConnectorsPage/ConnectorsPageContext';\nimport React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownSeparator,\n} from '@patternfly/react-core';\n\ntype connectorActionsMenuProps = {\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorActionsMenu: FunctionComponent<connectorActionsMenuProps> =\n  ({ onConnectorDetail, onDuplicateConnector }) => {\n    const { response, selectedConnector } = useConnectorsMachine();\n\n    const currentConnectorRef = response?.items?.filter((ref: any) => {\n      return ref.id == `connector-${selectedConnector?.id}`;\n    })[0];\n\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n      useState(false);\n\n    const {\n      connector,\n      canStart,\n      canStop,\n      canDelete,\n      onStart,\n      onStop,\n      onDelete,\n    } = useConnector(currentConnectorRef as ConnectorMachineActorRef);\n\n    const onToggle = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n    };\n    const onSelect = (\n      _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n    ) => {\n      setIsOpen(!isOpen);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById('connector-action');\n      element?.focus();\n    };\n    const doCancelDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n    };\n    const doDeleteConnector = () => {\n      setShowDeleteConnectorConfirm(false);\n      onDelete();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key=\"start action\"\n        component=\"button\"\n        onClick={onStart}\n        isDisabled={!canStart}\n      >\n        {t('Start')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"stop action\"\n        component=\"button\"\n        onClick={onStop}\n        isDisabled={!canStop}\n      >\n        {t('Stop')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"edit action\"\n        component=\"button\"\n        onClick={() => onConnectorDetail(connector.id!, 'configuration')}\n      >\n        {t('Edit')}\n      </DropdownItem>,\n      <DropdownItem\n        key=\"Duplicate action\"\n        component=\"button\"\n        onClick={() => onDuplicateConnector(connector.id!)}\n      >\n        {t('Duplicate')}\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem\n        key=\"delete action\"\n        component=\"button\"\n        onClick={() => setShowDeleteConnectorConfirm(true)}\n        isDisabled={!canDelete}\n      >\n        {t('Delete')}\n      </DropdownItem>,\n    ];\n    return (\n      <>\n        <DialogDeleteConnector\n          connectorName={connector.name}\n          showDialog={showDeleteConnectorConfirm}\n          onCancel={doCancelDeleteConnector}\n          onConfirm={doDeleteConnector}\n        />\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </>\n    );\n  };\n","import { getKafkaInstanceById, getNamespace } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  AlertVariant,\n  ClipboardCopy,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Hint,\n  HintBody,\n  Spinner,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClockIcon } from '@patternfly/react-icons';\n\nimport { KafkaInstance, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport { ConnectorActionsMenu } from '../ConnectorActions/ConnectorActionsMenu';\nimport { ConnectorInfoTextList } from '../ConnectorInfoTextList/ConnectorInfoTextList';\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  currentConnectorRef,\n  children,\n  connector,\n  onClose,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              namespaceId={connector.namespace_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              error={connector.status?.error}\n              onClose={onClose}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n              currentConnectorRef={currentConnectorRef}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  currentConnectorRef: ConnectorMachineActorRef;\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  namespaceId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  error?: string;\n  onClose: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    currentConnectorRef,\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    namespaceId,\n    createdAt,\n    status,\n    error,\n    onClose,\n    onConnectorDetail,\n    onDuplicateConnector,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const [namespaceData, setNamespaceData] =\n      useState<ConnectorNamespace | null>();\n    const [KIData, setKIData] = useState<KafkaInstance | string>();\n\n    const { connectorsApiBasePath, kafkaManagementApiBasePath, getToken } =\n      useCos();\n\n    const alert = useAlert();\n\n    const getNamespaceData = useCallback((data) => {\n      setNamespaceData(data as ConnectorNamespace);\n    }, []);\n\n    const getKIData = useCallback((data) => {\n      setKIData(data as KafkaInstance);\n    }, []);\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-drawer',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const onKIError = useCallback(\n      (response: any) => {\n        if (response.status === 404) {\n          setKIData(t('KafkaInstanceExpired'));\n        } else {\n          alert?.addAlert({\n            id: 'connector-drawer',\n            variant: AlertVariant.danger,\n            title: t('somethingWentWrong'),\n            description: response?.data?.reason,\n          });\n        }\n      },\n      [alert, t]\n    );\n\n    useEffect(() => {\n      setNamespaceData(null);\n      getNamespace({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        namespaceId: namespaceId,\n      })(getNamespaceData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [namespaceId]);\n\n    useEffect(() => {\n      setKIData('');\n      getKafkaInstanceById({\n        accessToken: getToken,\n        kafkaManagementBasePath: kafkaManagementApiBasePath,\n        KafkaInstanceId: kafkaId,\n      })(getKIData, onKIError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [kafkaId]);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const { connector } = useConnector(\n      currentConnectorRef as ConnectorMachineActorRef\n    );\n\n    React.useEffect(() => {\n      if (connector.status?.state == 'deleted') {\n        onClose();\n      }\n    }, [connector, onClose]);\n\n    const getConnectorExpireAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredMsg');\n      }\n      return t('connectorExpire', { hours, min });\n    };\n\n    const getConnectorExpireInlineAlert = (expiration: string): string => {\n      const { hours, min } = getPendingTime(new Date(expiration));\n      if (hours < 0 || min < 0) {\n        return t('connectorExpiredInline');\n      }\n      return t('connectorExpireInline', { hours, min });\n    };\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              {t('connectorName')}\n            </Text>\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus\n                  desiredState={connector.desired_state!}\n                  name={name}\n                  state={connector.status?.state!}\n                />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n\n          <DrawerActions>\n            <ConnectorActionsMenu\n              onDuplicateConnector={onDuplicateConnector}\n              onConnectorDetail={onConnectorDetail}\n              onClose={onClose}\n            />\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        {status === 'failed' && (\n          <Hint className=\"pf-u-mr-lg pf-u-ml-lg pf-u-p-md\">\n            <HintBody>\n              <p>{t('previewModeMsg')}</p>\n              <Trans i18nKey={'supportEmailMsg'}>\n                You can still get help by emailing us at\n                <ClipboardCopy\n                  hoverTip=\"Copy\"\n                  clickTip=\"Copied\"\n                  variant=\"inline-compact\"\n                >\n                  rhosak-eval-support@redhat.com\n                </ClipboardCopy>\n                . This mailing list is monitored by the Red Hat OpenShift\n                Application Services team.\n              </Trans>\n            </HintBody>\n          </Hint>\n        )}\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('details')}</TabTitleText>}\n            >\n              {namespaceData?.expiration && (\n                <Alert\n                  customIcon={<ClockIcon />}\n                  className=\"pf-u-mt-md\"\n                  variant={warningType(new Date(namespaceData?.expiration!))}\n                  isInline\n                  title={getConnectorExpireAlert(namespaceData?.expiration!)}\n                />\n              )}\n\n              <div className=\"connector-drawer__tab-content\">\n                <ConnectorInfoTextList\n                  name={name}\n                  id={id}\n                  bootstrapServer={bootstrapServer}\n                  kafkaId={KIData ? KIData! : <Spinner size=\"md\" />}\n                  namespaceId={\n                    namespaceData ? namespaceData.name : <Spinner size=\"md\" />\n                  }\n                  namespaceMsg={\n                    namespaceData?.expiration &&\n                    getConnectorExpireInlineAlert(namespaceData?.expiration!)\n                  }\n                  namespaceMsgVariant={\n                    namespaceData?.expiration\n                      ? warningType(new Date(namespaceData?.expiration!))\n                      : undefined\n                  }\n                  owner={owner}\n                  createdAt={createdAt}\n                  modifiedAt={new Date(connector.modified_at!)}\n                  error={error}\n                />\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { ClipboardCopy, Text, TextVariants } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('name')}</Th>\n          <Th>{t('connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  desiredState: string;\n  name: string;\n  type: string;\n  category: string;\n  state: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDuplicateConnector: (id: string) => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  desiredState,\n  name,\n  type,\n  state,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n  onDuplicateConnector,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: t('start'),\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: t('stop'),\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: t('details'),\n      onClick: onSelect,\n    },\n    {\n      title: t('edit'),\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      title: t('duplicate'),\n      onClick: () => onDuplicateConnector(connectorId),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: t('delete'),\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('status')}>\n        {state?.toLowerCase() === 'failed' ? (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n            clickable={true}\n            popoverBody={\n              <div>\n                <p>{t('previewModeMsg')}</p>\n                <Trans i18nKey={'supportEmailMsg'}>\n                  You can still get help by emailing us at\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"inline-compact\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    rhosak-eval-support@redhat.com\n                  </ClipboardCopy>\n                  . This mailing list is monitored by the Red Hat OpenShift\n                  Application Services team.\n                </Trans>\n              </div>\n            }\n            popoverHeader={\n              <h1 className=\"connectors-failed_pop_over\">\n                <ExclamationCircleIcon /> {t('failed')}\n              </h1>\n            }\n          />\n        ) : (\n          <ConnectorStatus\n            desiredState={desiredState}\n            name={name}\n            state={state}\n          />\n        )}\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nimport './Pagination.css';\n\nexport type PaginationEvent<OrderBy, Search> = {\n  page: number;\n  size: number;\n  orderBy?: OrderBy;\n  search?: Search;\n};\n\nexport type PaginationProps<OrderBy, Search> = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (event: PaginationEvent<OrderBy, Search>) => void;\n  orderBy?: OrderBy;\n  search?: Search;\n};\nexport const Pagination: FunctionComponent<PaginationProps<object, object>> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n    {\n      title: '20',\n      value: 20,\n    },\n    {\n      title: '50',\n      value: 50,\n    },\n  ];\n  return (\n    <PFPagination\n      className={'cos-ui-pagination'}\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange({ page, size: perPage })}\n      onPerPageSelect={(_, perPage) => onChange({ page: 1, size: perPage })}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { ConnectorsOrderBy, ConnectorsSearch } from '@apis/api';\nimport {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\ntype ConnectorsToolbarProps = {} & PaginationProps<\n  ConnectorsOrderBy,\n  ConnectorsSearch\n>;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n  orderBy,\n  search,\n}) => {\n  const { t } = useTranslation();\n  // this is until we add a search field selector for other fields\n  const initialName = search ? search.name || '' : '';\n  const [name, setName] = useState<string>(initialName);\n  const runQuery = () => {\n    onChange({\n      page: 1,\n      size: perPage,\n      orderBy,\n      search: {\n        name,\n      },\n    });\n  };\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            value={`${name}`}\n            ouiaId={'search-field'}\n            onChange={setName}\n            onKeyUp={(event) => {\n              if (event.key === 'Enter') {\n                runQuery();\n              }\n            }}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            onClick={runQuery}\n            ouiaId={'button-search'}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n    </>\n  );\n\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n            data-ouia-component-id={'button-create'}\n          >\n            {t('createConnectorsInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={(event) =>\n            onChange({\n              ...event,\n              orderBy: orderBy,\n              search: search,\n            })\n          }\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('somethingWentWrong')}\n      </Title>\n      <EmptyStateBody>{t('genericErrorBody')}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noConnectorInstances')}\n        </Title>\n        <EmptyStateBody>\n          <Trans i18nKey={'gettingStartedBody'}>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n              ouiaId={'link-QuickStart'}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate} ouiaId={'button-create'}>\n          {t('createAConnectorsInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('noResultsFound')}\n      </Title>\n      <EmptyStateBody>\n        <Trans i18nKey={'noFilterResultsFound'}>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            Clear all filters\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail, onDuplicateConnector }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n      onDuplicateConnector={onDuplicateConnector}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}: ConnectorsPageBodyProps) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    runQuery,\n  } = useConnectorsMachine();\n\n  const currentConnectorRef = response?.items?.filter((ref) => {\n    return ref.id == `connector-${selectedConnector?.id}`;\n  })[0];\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => runQuery({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={runQuery}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart(t('connectors-getting-started'))\n          }\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          currentConnectorRef={currentConnectorRef as ConnectorMachineActorRef}\n          connector={selectedConnector}\n          onConnectorDetail={onConnectorDetail}\n          onDuplicateConnector={onDuplicateConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('connectorsInstances')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const { request, response, selectedConnector, runQuery } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        search={request.search}\n        orderBy={request.orderBy}\n        onChange={runQuery}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n              onDuplicateConnector={onDuplicateConnector}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(event) =>\n          runQuery({\n            ...event,\n            orderBy: request.orderBy,\n            search: request.search,\n          })\n        }\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n  onDuplicateConnector: (id: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n  onDuplicateConnector,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        desiredState={connector.desired_state!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        state={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDuplicateConnector={onDuplicateConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nfunction toOUIAId(victim: string): string {\n  return victim.toLocaleLowerCase().replaceAll(' ', '-');\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                  ouiaId={toOUIAId(\n                    `button-${\n                      (activeStep && activeStep.nextButtonText) ||\n                      nextButtonText\n                    }`\n                  )}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                    ouiaId={toOUIAId(`button-${backButtonText}`)}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button\n                      variant={ButtonVariant.link}\n                      onClick={onClose}\n                      ouiaId={toOUIAId(`button-${cancelButtonText}`)}\n                    >\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n\n  sACreated: boolean;\n  userServiceAccount?: UserProvidedServiceAccount;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    name: '',\n    sACreated: false,\n    userServiceAccount: { clientId: '', clientSecret: '' },\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setSaCreated: (payload: { sACreated: boolean }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\n\nconst setSaCreated = model.assign(\n  {\n    sACreated: (_, event) => event.sACreated,\n  },\n  'setSaCreated'\n);\n\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setSaCreated: {\n            target: 'verify',\n            actions: setSaCreated,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          sACreated: (context: Context) => context.sACreated,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType, Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n  connectorData?: Connector;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import {\n  ConnectorTypesOrderBy,\n  ConnectorTypesSearch,\n  fetchConnectorTypes,\n} from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\nexport const DEFAULT_CONNECTOR_TYPES_PAGE_SIZE = 20;\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n  connectorTypeDetails: ConnectorType;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesOrderBy,\n        ConnectorTypesSearch,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesOrderBy,\n                  ConnectorTypesSearch,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i, {\n                  initialPageSize: DEFAULT_CONNECTOR_TYPES_PAGE_SIZE,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n          duplicateMode: (context: Context) => context.duplicateMode,\n          connectorTypeDetails: (context: Context) =>\n            context.connectorTypeDetails,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasSearch, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n  PlaceholderOrderBy,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n  connectorData?: Connector;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        PlaceholderOrderBy,\n        KafkasSearch,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst deselectInstance = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  PlaceholderOrderBy,\n                  KafkasSearch,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: deselectInstance,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { fetchConnectorNamespaces } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PlaceholderOrderBy,\n  PlaceholderSearch,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorNamespace>;\n  selectedNamespace?: ConnectorNamespace;\n  error?: Object;\n  duplicateMode?: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedNamespace: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectNamespace: (payload: { selectedNamespace: string }) => ({\n        ...payload,\n      }),\n      deselectNamespace: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorNamespace,\n        PlaceholderOrderBy,\n        PlaceholderSearch,\n        ConnectorNamespace\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectNamespace = model.assign(\n  {\n    selectedNamespace: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedNamespace\n      );\n    },\n  },\n  'selectNamespace'\n);\nconst deselectNamespace = model.assign(\n  {\n    selectedNamespace: undefined,\n  },\n  'deselectNamespace'\n);\n\nexport const namespacesMachine = model.createMachine(\n  {\n    id: 'namespaces',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorNamespace,\n                  PlaceholderOrderBy,\n                  PlaceholderSearch,\n                  ConnectorNamespace\n                >(fetchConnectorNamespaces(context), (i) => i, {\n                  pollingEnabled: true,\n                }),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noNamespaceSelected' },\n                  { target: 'valid', cond: 'namespaceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectNamespace: {\n                    target: 'valid',\n                    actions: selectNamespace,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectNamespace: {\n                    target: 'verify',\n                    actions: selectNamespace,\n                    cond: (_, event) => event.selectedNamespace !== undefined,\n                  },\n                  deselectNamespace: {\n                    target: 'verify',\n                    actions: deselectNamespace,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'namespaceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedNamespace: (context: Context) => context.selectedNamespace,\n          duplicateMode: (context: Context) => context.duplicateMode,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      namespaceSelected: (context) => context.selectedNamespace !== undefined,\n      noNamespaceSelected: (context) => context.selectedNamespace === undefined,\n    },\n  }\n);\n\nexport type NamespaceMachineActorRef = ActorRefFrom<typeof namespacesMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { dataToPrettyString } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n\n  kafka: KafkaRequest;\n  namespace: ConnectorNamespace;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n  duplicateMode: boolean | undefined;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  namespace: context.namespace,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafka: context.kafka,\n              namespace: context.namespace,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepCommon.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { namespacesMachine } from '@app/machines/StepNamespace.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype ErrorHandler = {\n  [key: string]: any;\n};\n\ntype connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedNamespace?: ConnectorNamespace;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  sACreated: boolean;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: (name: string) => void;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectNamespace: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : context.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((context, event) => ({\n              selectedConnector: context.duplicateMode\n                ? context.connectorTypeDetails\n                : event.data.selectedConnector,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              selectedInstance: context.duplicateMode\n                ? context.connectorData?.kafka\n                : context.selectedKafkaInstance,\n              connectorData: context.connectorData,\n              connectorTypeDetails: context.connectorTypeDetails,\n              duplicateMode: context.duplicateMode,\n              request: {\n                page: 1,\n                size: 10,\n              },\n            };\n          },\n          onDone: {\n            target: 'selectNamespace',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectNamespace: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectNamespaceRef',\n          src: namespacesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedNamespace: context.duplicateMode\n              ? {\n                  id: context.connectorData?.namespace_id,\n                }\n              : context.selectedNamespace,\n            connectorData: context.connectorData,\n            connectorTypeDetails: context.connectorTypeDetails,\n            duplicateMode: context.duplicateMode,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedNamespace: (_, event) => event.data.selectedNamespace,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectNamespaceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.duplicateMode\n                ? context.connectorData?.name\n                : context.name,\n              userServiceAccount: context.duplicateMode\n                ? {\n                    clientId: context.connectorData?.service_account.client_id,\n                    clientSecret: '',\n                  }\n                : context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n              sACreated: context.sACreated,\n            };\n          },\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((context, event) => ({\n                name: event.data.name,\n                sACreated: event.data.sACreated,\n                userServiceAccount: event.data.userServiceAccount,\n                duplicateMode: context.duplicateMode,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectNamespace',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  duplicateMode: context.duplicateMode,\n                };\n              },\n              onDone: {\n                target: 'configure',\n                actions: assign((context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                  duplicateMode: context.duplicateMode,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => {\n                return {\n                  connector: context.duplicateMode\n                    ? context.connectorTypeDetails\n                    : context.selectedConnector,\n                  configuration: context.duplicateMode\n                    ? context.connectorData?.connector\n                    : context.connectorConfiguration,\n                  name: context.name,\n                  steps: context.configurationSteps || ['single step'],\n                  activeStep: context.activeConfigurationStep || 0,\n                  isActiveStepValid:\n                    context.duplicateMode ||\n                    context.connectorConfiguration !== false,\n                  duplicateMode: context.duplicateMode,\n                  connectorData: context.connectorData,\n                };\n              },\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((context, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                    duplicateMode: context.duplicateMode,\n                    connectorData: context.connectorData,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connector: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              topic: context.topic,\n              name: context.name,\n              duplicateMode: context.duplicateMode,\n              userErrorHandler: context.duplicateMode\n                ? (context.connectorData?.connector as connector)?.error_handler\n                : context.userErrorHandler,\n            };\n          },\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((context, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n                duplicateMode: context.duplicateMode,\n                name: context.name,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => {\n            return {\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.selectedKafkaInstance,\n              namespace: context.selectedNamespace,\n              connectorType: context.selectedConnector,\n              configuration: context.connectorConfiguration,\n              initialConfiguration: context.connectorConfiguration,\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n              duplicateMode: context.duplicateMode,\n            };\n          },\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((context, event) => ({\n                connectorConfiguration: event.data,\n                duplicateMode: context.duplicateMode,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectNamespace: {\n        target: 'selectNamespace',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isNamespaceSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isNamespaceSelected: (context) => context.selectedNamespace !== undefined,\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) => {\n        return (\n          context.name !== undefined &&\n          context.name.length > 0 &&\n          context.userServiceAccount !== undefined &&\n          context.userServiceAccount.clientId.length > 0 &&\n          context.userServiceAccount.clientSecret.length > 0\n        );\n      },\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave(context.name);\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesOrderBy,\n  ConnectorTypesSearch,\n  KafkasSearch,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n  PlaceholderOrderBy,\n  PlaceholderSearch,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepCommon.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { NamespaceMachineActorRef } from '@app/machines/StepNamespace.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  Connector,\n  ConnectorNamespace,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  connectorData?: Connector;\n  connectorTypeDetails?: ConnectorType;\n  connectorId?: string;\n  duplicateMode?: boolean;\n  onSave: (name: string) => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n    connectorData,\n    connectorTypeDetails,\n    connectorId,\n    duplicateMode,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n        connectorId,\n        connectorData,\n        connectorTypeDetails,\n        duplicateMode,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  namespaceRef: NamespaceMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        namespaceRef: state.children\n          .selectNamespaceRef as NamespaceMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useNamespaceMachineIsReady = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  return useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [namespaceRef]\n    )\n  );\n};\n\nexport const useNamespaceMachine = () => {\n  const { namespaceRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    ConnectorNamespace,\n    PlaceholderOrderBy,\n    PlaceholderSearch,\n    ConnectorNamespace\n  >(\n    namespaceRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorNamespace,\n      PlaceholderOrderBy,\n      PlaceholderSearch,\n      ConnectorNamespace\n    >\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    namespaceRef,\n    useCallback(\n      (state: EmittedFrom<typeof namespaceRef>) => ({\n        selectedId: state.context.selectedNamespace?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedNamespace: string) => {\n      namespaceRef.send({ type: 'selectNamespace', selectedNamespace });\n    },\n    [namespaceRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    namespaceRef.send({ type: 'deselectNamespace' });\n  }, [namespaceRef]);\n\n  const runQuery = useCallback(\n    (request: PaginatedApiRequest<PlaceholderOrderBy, PlaceholderSearch>) => {\n      namespaceRef.send({ type: 'api.query', ...request });\n    },\n    [namespaceRef]\n  );\n\n  const onRefresh = useCallback(() => {\n    namespaceRef.send({ type: 'api.refresh' });\n  }, [namespaceRef]);\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    runQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    ConnectorType,\n    ConnectorTypesOrderBy,\n    ConnectorTypesSearch,\n    ConnectorType\n  >(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesOrderBy,\n      ConnectorTypesSearch,\n      ConnectorType\n    >\n  );\n  const { selectedId, connectorTypeDetails, duplicateMode } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n        duplicateMode: state.context.duplicateMode,\n        connectorTypeDetails: state.context.connectorTypeDetails,\n      }),\n      []\n    )\n  );\n\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const runQuery = useCallback(\n    (\n      request: PaginatedApiRequest<ConnectorTypesOrderBy, ConnectorTypesSearch>\n    ) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    runQuery,\n    connectorTypeDetails,\n    duplicateMode,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<\n    KafkaRequest,\n    PlaceholderOrderBy,\n    KafkasSearch,\n    KafkaRequest\n  >(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      KafkaRequest,\n      PlaceholderOrderBy,\n      KafkasSearch,\n      KafkaRequest\n    >\n  );\n  const { selectedId, duplicateMode } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n\n  const onDeselect = useCallback(() => {\n    kafkaRef.send({ type: 'deselectInstance' });\n  }, [kafkaRef]);\n\n  const runQuery = useCallback(\n    (request: PaginatedApiRequest<PlaceholderOrderBy, KafkasSearch>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    duplicateMode,\n    onSelect,\n    onDeselect,\n    runQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, sACreated, serviceAccount, duplicateMode } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        sACreated: state.context.sACreated,\n        serviceAccount: state.context.userServiceAccount,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetSaCreated = useCallback(\n    (sACreated: boolean) => {\n      basicRef.send({ type: 'setSaCreated', sACreated });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        namespace: state.context.namespace,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    namespace,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n    duplicateMode,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler, duplicateMode } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n        duplicateMode: state.context.duplicateMode,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n    duplicateMode,\n  };\n};\n","import { createServiceAccount, UserProvidedServiceAccount } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport { t } from 'i18next';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { FC } from 'react';\n\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  InputGroup,\n  InputGroupText,\n  ClipboardCopy,\n  Bullseye,\n  Checkbox,\n  Form,\n  FormGroup,\n  Popover,\n  TextInput,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { KeyIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport { ServiceAccount, useAlert } from '@rhoas/app-services-ui-shared';\n\ntype CreateServiceAccountProps = {\n  isOpen: boolean;\n  sACreated: boolean;\n  handleModalToggle: () => void;\n  serviceAccount: UserProvidedServiceAccount;\n  onSetServiceAccount: (data: UserProvidedServiceAccount) => void;\n  onSetSaCreated: (val: boolean) => void;\n};\ntype Validate = 'error' | 'success' | 'default' | 'warning' | undefined;\n\nexport const CreateServiceAccount: FC<CreateServiceAccountProps> = ({\n  isOpen,\n  sACreated,\n  handleModalToggle,\n  serviceAccount,\n  onSetServiceAccount,\n  onSetSaCreated,\n}) => {\n  const [copied, setCopied] = useState<boolean>(false);\n  const [sortDesc, setSortDesc] = useState<string>('');\n  const [validated, setValidated] = useState<Validate>('default');\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { kafkaManagementApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  const handleDescChange = (\n    value: string,\n    _event: FormEvent<HTMLInputElement>\n  ) => {\n    setValidated(\n      /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value) ? 'success' : 'error'\n    );\n    setSortDesc(value);\n  };\n\n  const onSuccess = useCallback(\n    (data?: ServiceAccount) => {\n      onSetSaCreated(true);\n      setLoading(false);\n      const SA = data\n        ? { clientId: data.client_id!, clientSecret: data.client_secret! }\n        : { clientId: '', clientSecret: '' };\n      onSetServiceAccount(SA);\n    },\n    [onSetSaCreated, setLoading, onSetServiceAccount]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connector-service-account',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n      setLoading(false);\n    },\n    [alert]\n  );\n\n  const createSA = async () => {\n    if (validated === 'default' && sortDesc.length === 0) {\n      setValidated('error');\n    } else {\n      setLoading(true);\n      createServiceAccount({\n        accessToken: getToken,\n        kafkaManagementApiBasePath: kafkaManagementApiBasePath,\n        sortDesc: sortDesc,\n      })(onSuccess, onError);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={sACreated ? '' : t('createServiceAccount')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={\n        sACreated\n          ? []\n          : [\n              <Button\n                key=\"Create\"\n                variant=\"primary\"\n                spinnerAriaValueText={loading ? t('loading') : undefined}\n                isLoading={loading}\n                isDisabled={validated === 'error' || loading}\n                onClick={createSA}\n                ouiaId={'button-create'}\n              >\n                {t('create')}\n              </Button>,\n              <Button\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={handleModalToggle}\n                ouiaId={'button-cancel'}\n              >\n                {t('cancel')}\n              </Button>,\n            ]\n      }\n      ouiaId={\n        sACreated ? 'modal-CredentialsGenerated' : 'modal-CreateServiceAcct'\n      }\n    >\n      {sACreated ? (\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={KeyIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {t('credentialsGenerated')}\n          </Title>\n\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('connectKafkaWithSA')}\n            </Text>\n          </TextContent>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-id-value\"\n            >\n              {t('clientId')}\n            </InputGroupText>\n            <ClipboardCopy\n              isReadOnly\n              className=\"pf-u-w-100\"\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientId}\n            </ClipboardCopy>\n          </InputGroup>\n          <InputGroup className={'pf-u-mt-lg'}>\n            <InputGroupText\n              style={{ whiteSpace: 'nowrap' }}\n              id=\"Client-secret-value\"\n            >\n              {t('clientSecret')}\n            </InputGroupText>\n            <ClipboardCopy\n              className=\"pf-u-w-100\"\n              isReadOnly\n              hoverTip={t('copy')}\n              clickTip={t('copied')}\n            >\n              {serviceAccount.clientSecret}\n            </ClipboardCopy>\n          </InputGroup>\n          <TextContent className={'pf-u-mt-lg'}>\n            <Text component={TextVariants.small}>\n              {t('serviceAccountAlertMsg')}\n            </Text>\n          </TextContent>\n          <Bullseye className=\"pf-u-mt-lg\">\n            <Checkbox\n              id=\"copied\"\n              label={t('copiedClientidSecret')}\n              aria-label={t('copiedClientidSecret')}\n              onChange={() => setCopied(!copied)}\n              isChecked={copied}\n            />\n          </Bullseye>\n\n          <Button\n            variant=\"primary\"\n            isDisabled={!copied}\n            onClick={handleModalToggle}\n            ouiaId={'button-close'}\n          >\n            {t('close')}\n          </Button>\n        </EmptyState>\n      ) : (\n        <Form>\n          <FormGroup\n            label={t('shortDescription')}\n            labelIcon={\n              <Popover\n                headerContent={<div>{t('shortDescription')}</div>}\n                bodyContent={<div>{t('shortDescriptionHelpText')}</div>}\n              >\n                <button\n                  type=\"button\"\n                  aria-label={t('shortDescriptionTooltip')}\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"short-description\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n            isRequired\n            fieldId=\"short-description-01\"\n            helperText={t('shortDescriptionExampleText')}\n            helperTextInvalid={\n              sortDesc.length > 0\n                ? t('shortDescriptionExampleText')\n                : t('required')\n            }\n            validated={validated}\n          >\n            <TextInput\n              isRequired\n              validated={validated}\n              type=\"text\"\n              id=\"short-description-01\"\n              name=\"short-description-01\"\n              aria-describedby=\"short-description\"\n              value={sortDesc}\n              onChange={handleDescChange}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { CreateServiceAccount } from '@app/components/CreateServiceAccount/CreateServiceAccount';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Button,\n} from '@patternfly/react-core';\n\nimport './StepCommon.css';\n\nexport const StepCommon: FC = () => {\n  const { t } = useTranslation();\n\n  const {\n    name,\n    serviceAccount,\n    sACreated,\n    onSetSaCreated,\n    onSetName,\n    onSetServiceAccount,\n    duplicateMode,\n  } = useBasicMachine();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    serviceAccount ?? onSetServiceAccount({ clientId: '', clientSecret: '' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <StepBodyLayout title={t('core')} description={t('basicStepDescription')}>\n        <Grid hasGutter>\n          <Form className=\"pf-m-9-col-on-lg\">\n            <FormGroup\n              label={t('connectorsInstanceName')}\n              isRequired\n              fieldId=\"name\"\n              helperText={t('connectorsInstanceHelper')}\n              className=\"pf-u-mb-0\"\n            >\n              <TextInput value={name} onChange={onSetName} id=\"name\" />\n            </FormGroup>\n            <FormGroup\n              label={t('serviceAccount')}\n              fieldId=\"service-account\"\n              className=\"pf-u-mb-0\"\n            >\n              <TextContent>\n                <span className=\"step-common_service_account-desc\">\n                  {t('serviceAccountDescText')}\n                </span>\n              </TextContent>\n              <Button\n                variant=\"secondary\"\n                onClick={handleModalToggle}\n                className=\"pf-u-mt-md\"\n                isDisabled={sACreated}\n                ouiaId={'button-create-service-acct'}\n              >\n                {t('createServiceAccount')}\n              </Button>\n            </FormGroup>\n\n            {serviceAccount && (\n              <>\n                <FormGroup\n                  label={t('clientId')}\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t('clientSecret')}\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                  helperText={\n                    duplicateMode ? t('credentialDuplicateFieldHelpText') : ''\n                  }\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    type={'password'}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </Form>\n        </Grid>\n      </StepBodyLayout>\n      <CreateServiceAccount\n        isOpen={isOpen}\n        handleModalToggle={handleModalToggle}\n        serviceAccount={serviceAccount!}\n        onSetServiceAccount={onSetServiceAccount}\n        onSetSaCreated={onSetSaCreated}\n        sACreated={sACreated}\n      />\n    </>\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConfigurationMode,\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport {\n  clearEmptyObjectValues,\n  mapToObject,\n  patchConfigurationObject,\n} from '@utils/shared';\nimport _ from 'lodash';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, Configurator, duplicateMode }) => {\n  let { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  if (duplicateMode) {\n    let combineConfiguration = {};\n    if (configuration instanceof Map) {\n      combineConfiguration = {\n        ...clearEmptyObjectValues(mapToObject(configuration)),\n      };\n    } else {\n      combineConfiguration = {\n        ...clearEmptyObjectValues(configuration),\n      };\n    }\n    configuration = new Map(Object.entries(combineConfiguration));\n  }\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      uiPath={\n        duplicateMode ? ConfigurationMode.DUPLICATE : ConfigurationMode.CREATE\n      }\n      onChange={(configuration, isValid) => {\n        actor.send({ type: 'change', configuration, isValid });\n      }}\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n  duplicateMode: boolean | undefined;\n}> = ({ actor, duplicateMode }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n  const schema = (connector as ConnectorTypeAllOf).schema!;\n  const initialConfiguration = patchConfigurationObject(schema, {} as any);\n  return (\n    <JsonSchemaConfigurator\n      schema={schema}\n      configuration={\n        configuration\n          ? patchConfigurationObject(schema, configuration as any)\n          : initialConfiguration\n      }\n      duplicateMode={duplicateMode || false}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n    duplicateMode,\n    configurationSteps,\n    activeConfigurationStep,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          duplicateMode: state.context.duplicateMode,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n          configurationSteps: state.context.configurationSteps,\n          activeConfigurationStep: state.context.activeConfigurationStep,\n        };\n      },\n      [service]\n    )\n  );\n  return (\n    <StepBodyLayout\n      title={\n        typeof configurationSteps === 'object' &&\n        activeConfigurationStep !== undefined\n          ? t(configurationSteps[activeConfigurationStep])\n          : t('connectorSpecific')\n      }\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                  duplicateMode={duplicateMode}\n                />\n              </React.Suspense>\n            );\n          default:\n            return (\n              <ConnectedJsonSchemaConfigurator\n                actor={configuratorRef}\n                duplicateMode={duplicateMode}\n              />\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import { ConnectorTypesOrderBy, ConnectorTypesSearch } from '@apis/api';\nimport {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport {\n  Pagination,\n  PaginationEvent,\n} from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { DEFAULT_CONNECTOR_TYPES_PAGE_SIZE } from '@app/machines/StepConnectorTypes.machine';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Label,\n  Popover,\n} from '@patternfly/react-core';\nimport {\n  FilterIcon,\n  BuildIcon,\n  BuilderImageIcon,\n  SearchIcon,\n  OutlinedQuestionCircleIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport './StepConnectorTypes.css';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    duplicateMode,\n    connectorTypeDetails,\n    firstRequest,\n    selectedId,\n    onSelect,\n    runQuery,\n  } = useConnectorTypesMachine();\n  return (\n    <StepBodyLayout\n      title={t('connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <EmptyStateNoMatchesFound\n                  onClear={() =>\n                    runQuery({\n                      page: 1,\n                      size: DEFAULT_CONNECTOR_TYPES_PAGE_SIZE,\n                      search: undefined,\n                    })\n                  }\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar duplicateMode={duplicateMode} />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode ? (\n                    <>\n                      <Alert\n                        variant=\"info\"\n                        className=\"pf-u-mb-md\"\n                        isInline\n                        title={t('duplicateAlertConnectorType')}\n                      />\n                      <Gallery hasGutter>\n                        <Card\n                          key={(connectorTypeDetails as ObjectReference).id}\n                          isSelectable\n                          isSelected={\n                            selectedId ===\n                            (connectorTypeDetails as ObjectReference).id\n                          }\n                        >\n                          {(\n                            connectorTypeDetails as ConnectorTypeAllOf\n                          ).labels?.includes('source') && (\n                            <CardHeader>\n                              <BuildIcon color=\"lightGrey\" size=\"lg\" />\n                              <CardActions>\n                                <Label color=\"blue\">{t('source')}</Label>\n                              </CardActions>\n                            </CardHeader>\n                          )}\n                          {(\n                            connectorTypeDetails as ConnectorTypeAllOf\n                          ).labels?.includes('sink') && (\n                            <CardHeader>\n                              <BuilderImageIcon color=\"lightGrey\" size=\"lg\" />\n                              <CardActions>\n                                <Label color=\"green\">{t('sink')}</Label>\n                              </CardActions>\n                            </CardHeader>\n                          )}\n                          <CardTitle>\n                            {(connectorTypeDetails as ConnectorTypeAllOf).name}{' '}\n                            <Popover\n                              position=\"right\"\n                              aria-label={t('ConnectorHelpAndGuidances')}\n                              headerContent={t('ConnectorHelpAndGuidances')}\n                              bodyContent={\n                                <div>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .description\n                                  }\n                                </div>\n                              }\n                            >\n                              <OutlinedQuestionCircleIcon color=\"grey\" />\n                            </Popover>\n                          </CardTitle>\n                          <CardBody>\n                            <DescriptionList isHorizontal isFluid>\n                              <DescriptionListGroup>\n                                <DescriptionListTerm>\n                                  {t('version')}:\n                                </DescriptionListTerm>\n                                <DescriptionListDescription>\n                                  {\n                                    (connectorTypeDetails as ConnectorTypeAllOf)\n                                      .version\n                                  }\n                                </DescriptionListDescription>\n                              </DescriptionListGroup>\n                            </DescriptionList>\n                          </CardBody>\n                        </Card>\n                      </Gallery>\n                    </>\n                  ) : (\n                    <Gallery hasGutter>\n                      {response?.items?.map((c) => {\n                        return (\n                          <Card\n                            isHoverable\n                            key={(c as ObjectReference).id}\n                            isSelectable\n                            isSelected={\n                              selectedId === (c as ObjectReference).id\n                            }\n                            onClick={() => onSelect((c as ObjectReference).id!)}\n                          >\n                            {(c as ConnectorTypeAllOf).labels?.includes(\n                              'source'\n                            ) && (\n                              <CardHeader>\n                                <BuildIcon color=\"lightGrey\" size=\"lg\" />\n                                <CardActions>\n                                  <Label color=\"blue\">{t('source')}</Label>\n                                </CardActions>\n                              </CardHeader>\n                            )}\n                            {(c as ConnectorTypeAllOf).labels?.includes(\n                              'sink'\n                            ) && (\n                              <CardHeader>\n                                <BuilderImageIcon color=\"lightGrey\" size=\"lg\" />\n                                <CardActions>\n                                  <Label color=\"green\">{t('sink')}</Label>\n                                </CardActions>\n                              </CardHeader>\n                            )}\n                            <CardTitle>\n                              {(c as ConnectorTypeAllOf).name}{' '}\n                              <Popover\n                                position=\"right\"\n                                aria-label={t('ConnectorHelpAndGuidances')}\n                                headerContent={t('ConnectorHelpAndGuidances')}\n                                bodyContent={\n                                  <div>\n                                    {(c as ConnectorTypeAllOf).description}\n                                  </div>\n                                }\n                              >\n                                <OutlinedQuestionCircleIcon color=\"grey\" />\n                              </Popover>\n                            </CardTitle>\n                            <CardBody>\n                              <DescriptionList isHorizontal isFluid>\n                                <DescriptionListGroup>\n                                  <DescriptionListTerm>\n                                    {t('version')}:\n                                  </DescriptionListTerm>\n                                  <DescriptionListDescription>\n                                    {(c as ConnectorTypeAllOf).version}\n                                  </DescriptionListDescription>\n                                </DescriptionListGroup>\n                              </DescriptionList>\n                            </CardBody>\n                          </Card>\n                        );\n                      })}\n                    </Gallery>\n                  )}\n                  <ConnectorTypesPagination onChange={runQuery} />\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\ntype ConnectorTypesToolbarProps = {\n  duplicateMode?: boolean | undefined;\n};\nconst ConnectorTypesToolbar: FunctionComponent<ConnectorTypesToolbarProps> = ({\n  duplicateMode,\n}) => {\n  const { t } = useTranslation();\n  const { request, runQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  const { name, categories = [] } = request.search || {};\n\n  const clearAllFilters = useCallback(\n    () => runQuery({ page: 1, size: request.size, search: undefined }),\n    [runQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption\n      key=\"sink\"\n      value=\"sink\"\n      description={t('shortDescriptionSink')}\n    >\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption\n      key=\"source\"\n      value=\"source\"\n      description={t('shortDescriptionSource')}\n    >\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            isDisabled={duplicateMode}\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                search: {\n                  ...request.search,\n                  name,\n                },\n              })\n            }\n            ouiaId={'search-field'}\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n            isDisabled={duplicateMode}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={duplicateMode ? [] : categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={duplicateMode ? '' : categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n            isDisabled={duplicateMode}\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {!duplicateMode && (\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <ConnectorTypesPagination\n            isCompact\n            onChange={(event) =>\n              runQuery({ ...event, search: request.search || {} })\n            }\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n  onChange: (\n    event: PaginationEvent<ConnectorTypesOrderBy, ConnectorTypesSearch>\n  ) => void;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false, onChange }) => {\n    const { request, response } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(event) => {\n          onChange({\n            ...event,\n            orderBy: request.orderBy,\n            search: request.search,\n          });\n        }}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const {\n    connector,\n    topic,\n    errorHandler,\n    onSetTopic,\n    onSetErrorHandler,\n    duplicateMode,\n  } = useErrorHandlingMachine();\n\n  if (duplicateMode && typeof errorHandler === 'object') {\n    const unkownKey = Object.keys(errorHandler);\n    onSetErrorHandler(unkownKey[0]);\n    errorHandler[unkownKey[0]] === undefined\n      ? onSetTopic('')\n      : onSetTopic(errorHandler[unkownKey[0]].topic);\n  }\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  useEffect(() => {\n    errorHandler ?? onSetErrorHandler(Object.keys(error_handler['default'])[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StepBodyLayout\n      title={t('errorHandling')}\n      description={t('errorHandlingStepDescription')}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('errorHandlingMethod')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label={t('deadLetterTopicName')}\n              isRequired\n              fieldId=\"topic\"\n              helperText={t('deadLetterTopicHelper')}\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onCreate: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.large}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n          {t('noKafkaInstanceAvailable')}\n        </Title>\n        <EmptyStateBody>{t('noKafkaInstanceAvailableBody')}</EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('createKafkaInstance')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [kafkaExpired, setKafkaExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    onDeselect,\n    duplicateMode,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    runQuery,\n  } = useKafkasMachine();\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setKafkaExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('kafkaInstance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => runQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onCreate={() => {\n                  window.open(\n                    'https://console.redhat.com/application-services/streams/kafkas',\n                    '_blank'\n                  );\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && kafkaExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertKafka')}\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, runQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.search || {};\n\n  const clearAllFilters = useCallback(\n    () => runQuery({ page: 1, size: request.size }),\n    [runQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    runQuery({\n      ...request,\n      search: {\n        ...(request.search || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('filterByStatus')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('cloudProvider')}\n          showToolbarItem={selectedCategory === t('cloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('cloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('filterByCloudProvider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('filterByRegion')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    runQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    runQuery({\n                      size: request.size,\n                      page: 1,\n                      orderBy: request.orderBy,\n                      search: {\n                        ...request.search,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button\n            variant=\"primary\"\n            component=\"a\"\n            href=\"https://console.redhat.com/application-services/streams/kafkas\"\n            target=\"_blank\"\n          >\n            {t('createKafkaInstance')}\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, runQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(event) =>\n        runQuery({ ...event, orderBy: request.orderBy, search: request.search })\n      }\n      isCompact={isCompact}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\ntype EmptyStateNoNamespaceProps = {\n  onModalToggle: () => void;\n};\n\nexport const EmptyStateNoNamespace: FunctionComponent<EmptyStateNoNamespaceProps> =\n  ({ onModalToggle }) => {\n    const { t } = useTranslation();\n    return (\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel={'h1'} size={TitleSizes['xl']}>\n            {t('noNamespaceAvailable')}\n          </Title>\n          <EmptyStateBody>{t('namespaceEmptyMsg')}</EmptyStateBody>\n          <Tooltip content={<div>{t('namespaceEnabledTooltip')}</div>}>\n            <Button variant=\"primary\" onClick={onModalToggle}>\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </EmptyState>\n      </Bullseye>\n    );\n  };\n","import React, { VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Alert, AlertVariant } from '@patternfly/react-core';\n\nexport const ModalAlerts: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant={AlertVariant.info}\n      isInline\n      title={t('namespaceExpireAlert')}\n    />\n  );\n};\n","import { registerEvalNamespace } from '@apis/api';\nimport { useCos } from '@context/CosContext';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Modal,\n  Button,\n  ModalVariant,\n  Form,\n  Text,\n  FormGroup,\n  TextVariants,\n  Alert,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { ModalAlerts } from './ModalAlerts';\n\nconst short = require('short-uuid');\n\ntype RegisterEvalNamespaceProps = {\n  isModalOpen: boolean;\n  onModalToggle: () => void;\n  refreshResponse: () => void;\n};\n\nexport const RegisterEvalNamespace: React.FC<RegisterEvalNamespaceProps> = ({\n  isModalOpen,\n  onModalToggle,\n  refreshResponse,\n}) => {\n  const { t } = useTranslation();\n  const [evalNamespace, setEvalNamespace] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { connectorsApiBasePath, getToken } = useCos();\n  const alert = useAlert();\n\n  useEffect(() => {\n    setEvalNamespace(`preview-namespace-${short.generate()}`);\n  }, []);\n\n  const onSuccess = useCallback((name: string | undefined) => {\n    refreshResponse();\n    setIsLoading(false);\n    onModalToggle();\n    alert?.addAlert({\n      id: 'preview-namespace-register-success',\n      variant: AlertVariant.success,\n      title: t(`namespaceReady`),\n      description: t('creationSuccessAlertDescription', { name }),\n    });\n  }, []);\n\n  const onError = useCallback(\n    (description: string) => {\n      setIsLoading(false);\n      alert?.addAlert({\n        id: 'preview-namespace-register-error',\n        variant: AlertVariant.danger,\n        title: t('somethingWentWrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onRegister = () => {\n    setIsLoading(true);\n    registerEvalNamespace({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      evalName: evalNamespace,\n    })(onSuccess, onError);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t('createPreviewNamespace')}\n      isOpen={isModalOpen}\n      onClose={onModalToggle}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          isLoading={isLoading}\n          spinnerAriaValueText={isLoading ? t('Loading') : undefined}\n          isDisabled={isLoading}\n          onClick={onRegister}\n        >\n          {t('create')}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          isDisabled={isLoading}\n          onClick={onModalToggle}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <ModalAlerts />\n      <Text\n        component={TextVariants.h3}\n        className=\"pf-c-title pf-m-lg pf-u-pt-lg\"\n      >\n        {t('namespaceInformation')}\n      </Text>\n      <Form className=\"pf-u-mt-lg pf-u-mb-lg\">\n        <FormGroup label={t('name')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>{evalNamespace}</Text>\n        </FormGroup>\n        <FormGroup label={t('duration')} isRequired fieldId=\"name\">\n          <Text component={TextVariants.p}>48 hours</Text>\n        </FormGroup>\n      </Form>\n      <Alert variant=\"info\" isInline isPlain title={t('namespaceModelAlert')} />\n    </Modal>\n  );\n};\n","import {\n  useNamespaceMachineIsReady,\n  useNamespaceMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoNamespace } from '@app/components/EmptyStateNoNamespace/EmptyStateNoNamespace';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { RegisterEvalNamespace } from '@app/components/RegisterEvalNamespace/RegisterEvalNamespace';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { getPendingTime, warningType } from '@utils/shared';\nimport { useDebounce } from '@utils/useDebounce';\nimport { t } from 'i18next';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Spinner,\n  Stack,\n  StackItem,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ClockIcon, FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { ConnectorNamespace } from '@rhoas/connector-management-sdk';\n\nimport './StepNamespace.css';\n\nexport function SelectNamespace() {\n  const isReady = useNamespaceMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [evalInstance, setEvalInstance] = useState<\n    ConnectorNamespace | undefined\n  >();\n  const [namespaceExpired, setNamespaceExpired] = useState<boolean>(false);\n\n  const {\n    response,\n    selectedId,\n    duplicateMode,\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    onSelect,\n    onDeselect,\n    onRefresh,\n    runQuery: onQuery,\n  } = useNamespaceMachine();\n  const onModalToggle = useCallback(() => {\n    setIsModalOpen((prev) => !prev);\n  }, []);\n\n  const refreshResponse = () => {\n    onRefresh();\n  };\n\n  const getEvalNamespaceAlert = (expiration: string): string => {\n    const { hours, min } = getPendingTime(new Date(expiration));\n    if (hours < 0 || min < 0) {\n      return t('evalNamespaceExpiredMsg');\n    }\n    return t('evalNamespaceExpire', { hours, min });\n  };\n\n  const onNamespaceSelection = (namespace: ConnectorNamespace) => {\n    namespace.status.state === 'ready' && onSelect(namespace.id!);\n  };\n\n  useEffect(() => {\n    const id = response?.items?.find(\n      (namespace) =>\n        namespace.tenant.kind === 'user' && _.has(namespace, 'expiration')\n    );\n    id ? setEvalInstance(id) : setEvalInstance(undefined);\n  }, [response]);\n\n  useEffect(() => {\n    if (duplicateMode && response) {\n      if (response?.items?.find((i) => i.id === selectedId)) {\n        onSelect(selectedId!);\n      } else {\n        setNamespaceExpired(true);\n        onDeselect();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [duplicateMode, response, onDeselect]);\n\n  return (\n    <StepBodyLayout\n      title={t('namespace')}\n      description={t('namespaceStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <EmptyStateNoNamespace onModalToggle={onModalToggle} />\n              </>\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar\n                  onModalToggle={onModalToggle}\n                  isEvalPresent={!!evalInstance}\n                />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  {duplicateMode && namespaceExpired && (\n                    <Alert\n                      variant=\"info\"\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={t('duplicateAlertNamespace')}\n                    />\n                  )}\n\n                  {!!evalInstance && evalInstance?.id === selectedId && (\n                    <Alert\n                      customIcon={<ClockIcon />}\n                      variant={warningType(new Date(evalInstance.expiration!))}\n                      className=\"pf-u-mb-md\"\n                      isInline\n                      title={\n                        <span>\n                          {getEvalNamespaceAlert(evalInstance.expiration!)}\n                        </span>\n                      }\n                    />\n                  )}\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable={i.status.state === 'ready'}\n                        key={i.id}\n                        isSelectable={i.status.state === 'ready'}\n                        isSelected={selectedId === i.id}\n                        onClick={() => onNamespaceSelection(i)}\n                        className={\n                          i.status.state === 'deleting'\n                            ? 'pf-u-background-color-disabled-color-200'\n                            : ''\n                        }\n                      >\n                        <CardHeader>\n                          <Stack>\n                            <StackItem>\n                              {' '}\n                              <CardTitle>{i.name}</CardTitle>\n                            </StackItem>\n                            <StackItem>\n                              {i.status.state === 'disconnected' && (\n                                <div className=\"pf-u-pt-md status\">\n                                  <Alert\n                                    variant=\"info\"\n                                    customIcon={\n                                      <Spinner\n                                        size=\"md\"\n                                        aria-label={t('Provisioning')}\n                                        aria-valuetext=\"Please wait...\"\n                                      />\n                                    }\n                                    isInline\n                                    isPlain\n                                    title={t('Provisioning')}\n                                  />\n                                </div>\n                              )}\n                              {i.status.state === 'deleting' && (\n                                <div className=\"pf-u-pt-md\">\n                                  <Alert\n                                    variant=\"danger\"\n                                    isInline\n                                    isPlain\n                                    title={t('namespaceDeleting')}\n                                  />\n                                </div>\n                              )}\n                            </StackItem>\n                          </Stack>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('owner')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('clusterId')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.cluster_id!}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>\n                                {t('created')}\n                              </DescriptionListTerm>\n                              <DescriptionListDescription>\n                                <time\n                                  title={t('{{date}}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                  dateTime={new Date(\n                                    i.created_at!\n                                  ).toISOString()}\n                                >\n                                  {t('{{ date, ago }}', {\n                                    date: new Date(i.created_at!),\n                                  })}\n                                </time>\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n      <RegisterEvalNamespace\n        isModalOpen={isModalOpen}\n        onModalToggle={onModalToggle}\n        refreshResponse={refreshResponse}\n      />\n    </StepBodyLayout>\n  );\n};\n\ntype ClustersToolbarProps = {\n  onModalToggle: () => void;\n  isEvalPresent: boolean;\n};\nconst ClustersToolbar: FunctionComponent<ClustersToolbarProps> = ({\n  onModalToggle,\n  isEvalPresent,\n}) => {\n  // const { t } = useTranslation();\n  const { request, runQuery } = useNamespaceMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(runQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                search: {\n                  name: value,\n                },\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Tooltip\n            content={\n              <div>\n                {isEvalPresent\n                  ? t('namespaceDisabledTooltip')\n                  : t('namespaceEnabledTooltip')}\n              </div>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              isDisabled={isEvalPresent}\n              onClick={onModalToggle}\n              ouiaId={'button-create'}\n            >\n              {t('createPreviewNamespace')}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, runQuery } = useNamespaceMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(event) =>\n        runQuery({ ...event, orderBy: request.orderBy, search: request.search })\n      }\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { dataToPrettyString, getPasswordType } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  ConnectorDesiredState,\n  ObjectReference,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const {\n    name,\n    userServiceAccount,\n    configString,\n    kafka,\n    namespace,\n    connectorType,\n  } = useReviewMachine();\n\n  const schema: Record<string, any> = (connectorType as ConnectorTypeAllOf)\n    .schema!;\n  const connectorTypeConfig = connectorType as ConnectorTypeAllOf;\n  const combinedConfig = Object.assign(\n    { name: name },\n    { kind: 'ConnectorType' },\n    { channels: connectorTypeConfig.channels },\n    { connector_type_id: (connectorType as ObjectReference).id! },\n    { desired_state: ConnectorDesiredState.Ready },\n    {\n      kafka: {\n        id: kafka.id!,\n        url: kafka.bootstrap_server_host || 'demo',\n      },\n    },\n    { namespace_id: namespace.id },\n    {\n      service_account: {\n        client_id: userServiceAccount.clientId,\n        client_secret: userServiceAccount.clientSecret,\n      },\n    },\n    { connector: JSON.parse(configString) }\n  );\n\n  const configPrettyString = dataToPrettyString(combinedConfig);\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = getPasswordType(schema).concat('clientSecret');\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) =>\n            onClick(e, getJson(configPrettyString, showServiceAccount))\n          }\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configPrettyString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configPrettyString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport { getPasswordType } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { useState, useCallback, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    namespace,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n  const schema: Record<string, any> = (connectorType as ConnectorTypeAllOf)\n    .schema!;\n  const dataToHide = getPasswordType(schema);\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n  try {\n    delete modifiedObject['error_handler'];\n  } catch (e) {}\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n  return (\n    <StepBodyLayout\n      title={t('review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('viewJSONFormat')}\n          labelOff={t('viewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n          ouiaId={'toggle'}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorCategory')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('kafkaInstance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('namespace')}</strong>\n              </GridItem>\n              <GridItem span={8}>{namespace.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('connectorName')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientId')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('clientSecret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('connectorSpecific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {dataToHide.includes(el) ? (\n                        <Flex>\n                          <FlexItem>{maskValue(connector[el])}</FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {dataToHide.includes(el) ? (\n                        maskValue(modifiedObject[el])\n                      ) : typeof modifiedObject[el] === 'object' ? (\n                        el === 'data_shape' ? (\n                          <DataShape data={modifiedObject[el]} />\n                        ) : (\n                          JSON.stringify(modifiedObject[el])\n                        )\n                      ) : (\n                        modifiedObject[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('errorHandling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('errorHandling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{t('topic')}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n\ntype DataShape = {\n  data: any;\n};\nexport const DataShape: FC<DataShape> = ({ data }) => {\n  return (\n    <>\n      {Object.keys(data).map((key) => {\n        return (\n          <Grid key={key}>\n            <GridItem span={2}>\n              <strong>{_.startCase(key)}:</strong>\n            </GridItem>\n            <GridItem span={10}>\n              {typeof data[key] === 'string' ? data[key] : data[key].format}\n            </GridItem>\n          </Grid>\n        );\n      })}\n    </>\n  );\n};\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { StepCommon } from '@app/pages/CreateConnectorPage/StepCommon';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { SelectNamespace } from '@app/pages/CreateConnectorPage/StepNamespace';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('kafkaInstance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('core'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepCommon />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('connectorSpecific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('errorHandling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('namespace'),\n        isActive: state.matches('selectNamespace'),\n        component: (\n          <StepErrorBoundary>\n            <SelectNamespace />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectNamespace')\n            .changed || state.matches('selectNamespace'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('configuration'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: t('createConnector'),\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectNamespace');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              {t('createAConnectorsInstance')}\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('createAConnectorsInstance')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t('leaveCreateConnectorConfirmModalDescription')}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport _ from 'lodash';\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  TextContent,\n  Modal,\n  PageSection,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport {\n  AlertVariant,\n  useAlert,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\ntype DuplicateConnectorPageProps = {\n  onSave: (name: string) => void;\n  onClose: () => void;\n};\nexport const DuplicateConnectorPage: FunctionComponent<DuplicateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const config = useConfig();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n    const [connectorData, setConnectorData] = useState<Connector>();\n    const { hash } = useLocation();\n    const connectorId = hash.split('&')[0].substring(1);\n    const getConnectorData = useCallback((data) => {\n      setConnectorData(data as Connector);\n    }, []);\n\n    const [connectorTypeDetails, setConnectorTypeDetails] =\n      useState<ConnectorTypeAllOf>();\n\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connector-duplicate-error',\n          variant: AlertVariant.danger,\n          title: t('somethingWentWrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    const getConnectorTypeInfo = useCallback((data) => {\n      setConnectorTypeDetails(data as ConnectorTypeAllOf);\n    }, []);\n\n    useEffect(() => {\n      getConnector({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorId: connectorId,\n      })(getConnectorData, onError);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorId]);\n\n    useEffect(() => {\n      if (connectorData?.connector_type_id) {\n        getConnectorTypeDetail({\n          accessToken: getToken,\n          connectorsApiBasePath: connectorsApiBasePath,\n          connectorTypeId: connectorData?.connector_type_id,\n        })(getConnectorTypeInfo);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [connectorData]);\n\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={'/'}>{t('connectorsInstances')}</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('duplicateConnector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <TextContent className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('duplicateConnector')}</Title>\n            {connectorData && connectorTypeDetails ? (\n              <Text>\n                <strong>{t('Connector')}: </strong>\n                {connectorTypeDetails.name}\n              </Text>\n            ) : null}\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          {connectorData && connectorTypeDetails ? (\n            <CreateConnectorWizardProvider\n              accessToken={getToken}\n              connectorsApiBasePath={connectorsApiBasePath}\n              fetchConfigurator={(connector) =>\n                fetchConfigurator(connector, config?.cos.configurators || {})\n              }\n              connectorId={connectorId}\n              connectorData={connectorData}\n              connectorTypeDetails={connectorTypeDetails}\n              duplicateMode={true}\n              onSave={onSave}\n            >\n              <CreateConnectorWizard onClose={openLeaveConfirm} />\n              <Modal\n                title={t('leaveDuplicateConnectorConfirmModalTitle')}\n                variant={'small'}\n                isOpen={askForLeaveConfirm}\n                onClose={closeLeaveConfirm}\n                actions={[\n                  <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                    Confirm\n                  </Button>,\n                  <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={closeLeaveConfirm}\n                  >\n                    Cancel\n                  </Button>,\n                ]}\n              >\n                {t('leaveDuplicateConnectorConfirmModalDescription')}\n              </Modal>\n            </CreateConnectorWizardProvider>\n          ) : (\n            <Loading />\n          )}\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport { DuplicateConnectorPage } from '@app/pages/CreateConnectorPage/DuplicateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n  const goToDuplicateConnector = useCallback(\n    (id: string) =>\n      history.push({\n        pathname: `/duplicate-connector`,\n        hash: `#${id}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(\n    (name: string) => {\n      alert?.addAlert({\n        id: 'connector-created',\n        variant: AlertVariant.success,\n        title: t('creationSuccessAlertTitle'),\n        description: t('creationSuccessAlertDescription', { name }),\n      });\n      goToConnectorsList();\n    },\n    [alert, goToConnectorsList, t]\n  );\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n            onDuplicateConnector={goToDuplicateConnector}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/duplicate-connector'}>\n          <DuplicateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["SortOrderValue","getConnector","accessToken","connectorsApiBasePath","connectorId","connectorsAPI","ConnectorsApi","Configuration","basePath","onSuccess","onError","source","cancelToken","token","then","response","data","catch","error","reason","cancel","getConnectorTypeDetail","connectorTypeId","ConnectorTypesApi","callback","getConnectorTypeByID","console","log","getNamespace","namespaceId","namespacesAPI","ConnectorNamespacesApi","getConnectorNamespace","getKafkaInstanceById","kafkaManagementBasePath","KafkaInstanceId","DefaultApi","getKafkaById","ConnectorStatus","desiredState","name","state","clickable","popoverBody","popoverHeader","Split","className","hasGutter","SplitItem","ConnectorStatusIcon","isFilled","ConnectorStatusLabel","toLowerCase","Popover","position","PopoverPosition","hideOnOutsideClick","headerContent","bodyContent","Button","variant","isInline","convertToLabel","Stack","StackItem","CheckCircleIcon","color","ExclamationCircleIcon","OutlinedPauseCircleIcon","OutlinedTimesCircleIcon","Spinner","size","undefined","capitalize","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","kafkaManagementApiBasePath","children","Provider","value","useCos","context","useContext","Error","ErrorFallback","role","message","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","Date","now","ConfigurationMode","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","createModel","connector","id","version","Configurator","steps","duplicateMode","configuratorLoaderMachine","createMachine","schema","initial","initialContext","states","loading","invoke","src","onDone","target","actions","assign","_context","event","failure","entry","escalate","success","type","fetchConfigurator","config","defaultConfig","Promise","resolve","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","default","federatedConfigurationConfig","get","loadFederatedConfigurator","e","maybeConfiguration","split","maybeConf","reject","url","element","document","createElement","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","dataToPrettyString","dataVal","Map","JSON","stringify","getPasswordType","dataToHide","Object","keys","properties","map","oneOf","def","format","push","getPendingTime","expireTime","diff","getTime","hourDiff","Math","floor","hours","min","warningType","createDefaultFromSchema","propertyName","prop","definition","$ref","ref","_","pathArray","reduce","prev","resolveReference","answer","$defs","clearEmptyObjectValues","length","patchConfigurationObject","configuration","data_shape","dataShape","rest","StepBodyLayout","title","description","component","Level","LevelItem","Title","headingLevel","SecretPlaceholder","SAPlaceholder","onSAPlaceholderChange","t","useTranslation","FormGroup","label","helperText","fieldId","InputGroup","TextInput","onChange","CommonStep","editMode","changeIsValid","onUpdateConfiguration","isSAUpdate","setIsSAUpdate","passwordHidden","setPasswordHidden","setSAPlaceholder","configurationCopy","service_account","Form","isRequired","labelIcon","onClick","preventDefault","HelpIcon","noVerticalAlign","val","onNameChange","Text","TextVariants","validated","client_id","helperTextInvalid","helperTextInvalidIcon","clientId","client_secret","ClipboardCopy","isReadOnly","hoverTip","clickTip","placeholder","secret","EyeIcon","EyeSlashIcon","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","validator","compile","model","errors","details","getLabelIcon","content","CustomJsonSchemaBridge","constructor","showCredentialHelpText","super","this","getProps","example","props","isSecret","getField","exampleText","enum","enumValues","field","newEnumValues","asString","required","JsonSchemaConfigurator","schemaValidator","bridge","error_handler","processors","Grid","KameletForm","onChangeModel","AutoField","Auto","parent","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","parse","isValid","entries","filter","includes","replace","propertyKey","propertyDefinition","propertyNameFallback","noPropertySet","DataShape","getFieldViewComponent","ErrorHandlerStep","isOpen","setOpen","useState","topic","setTopic","errorHandler","setErrorHandler","JSONSchemaBridge","clearSelection","useEffect","dead_letter_queue","dropdownItems","item","SelectOption","Select","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","r","acc","ConfigurationTab","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","connectorConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","addAlert","AlertVariant","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","connector_type_id","step","index","TitleSizes","fallback","Loading","ConnectedCustomConfigurator","isEditMode","hasShadowTop","connectorUpdate","updatedName","updatedServiceAccount","patchConnector","headers","updateConnector","isDisabled","Modal","onClose","activeStep","uiPath","EDIT","VIEW","ConnectorInfoTextList","bootstrapServer","kafkaId","owner","namespaceMsg","namespaceMsgVariant","createdAt","modifiedAt","failureReasonExpand","setFailureReasonExpand","textListItem","TextListItem","TextListItemVariants","substring","getFailureReason","open","TextContent","TextList","TextListVariants","Alert","customIcon","OutlinedClockIcon","isPlain","date","dateTime","toISOString","OverviewTab","namespaceData","setNamespaceData","KIData","setKIData","getNamespaceData","getKIData","onKIError","status","namespace_id","kafka","expiration","ClockIcon","getConnectorExpireAlert","Hint","HintBody","Trans","i18nKey","getConnectorExpireInlineAlert","created_at","modified_at","getTab","hash","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","ConnectorDetailsHeader","padding","zIndex","Overview","Breadcrumb","BreadcrumbItem","Link","to","isActive","desired_state","events","payload","notifySuccess","notifyError","notifySelect","updateState","connectorMachine","verify","always","cond","ready","on","stopped","deleted","startingConnector","ConnectorDesiredState","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","useConnector","canStart","canStop","canDelete","useSelector","transition","changed","onStart","send","onStop","onDelete","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","makePaginatedApiMachine","service","dataTransformer","options","pollingEnabled","initialPageSize","onBeforeSetResponse","request","page","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","items","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","search","api","idle","queryEmpty","tags","queryResults","empty","results","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","searchString","Boolean","s","join","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","runQuery","ConnectorActionsMenu","onConnectorDetail","onDuplicateConnector","currentConnectorRef","setIsOpen","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","onFocus","getElementById","focus","DropdownItem","DropdownSeparator","Dropdown","toggle","KebabToggle","DropdownPosition","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","DrawerPanelContent","widths","DrawerHead","Flex","FlexItem","spacer","DrawerActions","DrawerCloseButton","DrawerPanelBody","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","openDetail","isSeparator","Td","dataLabel","isVisitedLink","stopPropagation","Pagination","itemCount","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","ConnectorsToolbar","orderBy","initialName","setName","toggleGroupItems","ToolbarItem","ouiaId","onKeyUp","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","PlusCircleIcon","ButtonVariant","isSmall","EmptyStateNoMatchesFound","onClear","ConnectedConnectorsPage","onCreateConnector","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","qsContext","QuickStartContext","ConnectorsPageTitle","Card","setActiveQuickStart","ConnectedTable","ConnectedRow","connectorRef","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","toOUIAId","victim","toLocaleLowerCase","replaceAll","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","sACreated","userServiceAccount","clientSecret","setSaCreated","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","isActiveStepValid","change","next","complete","changedStep","nextStep","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","find","connectorTypesMachine","categories","getConnectorTypes","fetchConnectorTypes","selecting","connectorSelected","noConnectorSelected","userErrorHandler","errorHandlingMachine","isErrorHandlerConfigured","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","statuses","cloudProviders","regions","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","selectedNamespace","selectNamespace","deselectNamespace","namespacesMachine","listConnectorNamespaces","fetchConnectorNamespaces","namespaceSelected","noNamespaceSelected","initialConfiguration","configString","save","namespace","connectorType","setSavingError","savingError","reviewMachine","saving","kind","channel","Channel","bootstrap_server_host","createConnector","saveConnector","saved","isAllConfigured","isInvalid","jumpToSelectKafka","jumpToSelectNamespace","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","basicConfiguration","submittable","invalid","configureConnector","loadConfigurator","configure","errorConfiguration","reviewConfiguration","reviewing","isConnectorSelected","isKafkaInstanceSelected","isNamespaceSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","namespaceRef","selectNamespaceRef","basicRef","errorRef","reviewRef","useNamespaceMachine","getSnapshot","selectedId","onDeselect","onRefresh","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","CreateServiceAccount","handleModalToggle","onSetServiceAccount","onSetSaCreated","copied","setCopied","sortDesc","setSortDesc","setValidated","setLoading","SA","spinnerAriaValueText","isLoading","securityAPI","SecurityApi","createServiceAccount","KeyIcon","InputGroupText","whiteSpace","Bullseye","Checkbox","isChecked","test","StepCommon","onSetName","useBasicMachine","combineConfiguration","DUPLICATE","CREATE","ConnectedJsonSchemaConfigurator","ConfiguratorStep","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","Gallery","isSelectable","labels","CardHeader","BuildIcon","CardActions","Label","BuilderImageIcon","CardTitle","OutlinedQuestionCircleIcon","CardBody","DescriptionList","isHorizontal","isFluid","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","c","isHoverable","ConnectorTypesPagination","categoriesToggled","setCategoriesToggled","nameInputRef","useRef","debouncedOnQuery","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","unkownKey","EmptyStateNoKafkaInstances","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","kafkaExpired","setKafkaExpired","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","statusMenuItems","statusOptions","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","DropdownToggle","showToolbarItem","href","KafkasPagination","EmptyStateNoNamespace","onModalToggle","Tooltip","ModalAlerts","RegisterEvalNamespace","isModalOpen","refreshResponse","evalNamespace","setEvalNamespace","setIsLoading","generate","evalName","createEvaluationNamespace","registerEvalNamespace","SelectNamespace","useNamespaceMachineIsReady","ClustersGallery","setIsModalOpen","evalInstance","setEvalInstance","namespaceExpired","setNamespaceExpired","onQuery","getEvalNamespaceAlert","tenant","ClustersToolbar","isEvalPresent","cluster_id","searchInputRef","ClustersPagination","ViewJSONFormat","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","connectorTypeConfig","combinedConfig","channels","configPrettyString","getJson","showHiddenFields","inputObj","concat","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","hasShadowBottom","DuplicateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","goToDuplicateConnector","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}