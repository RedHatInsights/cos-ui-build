{"version":3,"file":"8762.52d1cd50.js","mappings":"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","sources":["webpack://cos-ui/./src/apis/api.ts","webpack://cos-ui/./src/app/components/ConnectorStatus/ConnectorStatus.tsx","webpack://cos-ui/./src/constants/constants.tsx","webpack://cos-ui/./src/context/CosContext.tsx","webpack://cos-ui/./src/app/components/StepErrorBoundary/StepErrorBoundary.tsx","webpack://cos-ui/./src/utils/loadFederatedConfigurator.ts","webpack://cos-ui/./src/utils/shared.ts","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/CommonStep.tsx","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/CustomJsonSchemaBridge.tsx","webpack://cos-ui/./src/utils/createValidator.ts","webpack://cos-ui/./src/app/components/JsonSchemaConfigurator/JsonSchemaConfigurator.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ErrorHandlerStep.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConfigurationPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/OverviewPage.tsx","webpack://cos-ui/./src/app/pages/ConnectorDetailsPage/ConnectorDetailsPage.tsx","webpack://cos-ui/./src/app/components/ConnectorDrawer/ConnectorDrawer.tsx","webpack://cos-ui/./src/app/components/ConnectorsTable/ConnectorsTable.tsx","webpack://cos-ui/./src/app/components/Pagination/Pagination.tsx","webpack://cos-ui/./src/utils/useDebounce.ts","webpack://cos-ui/./src/app/components/ConnectorsToolbar/ConnectorsToolbar.tsx","webpack://cos-ui/./src/app/components/DialogDeleteConnector/DialogDeleteConnector.tsx","webpack://cos-ui/./src/app/components/EmptyStateGenericError/EmptyStateGenericError.tsx","webpack://cos-ui/./src/app/components/EmptyStateGettingStarted/EmptyStateGettingStarted.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound.tsx","webpack://cos-ui/./src/app/machines/Connector.machine.ts","webpack://cos-ui/./src/app/machines/PaginatedResponse.machine.ts","webpack://cos-ui/./src/app/machines/ConnectorsPage.machine.ts","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPageContext.tsx","webpack://cos-ui/./src/app/pages/ConnectorsPage/ConnectorsPage.tsx","webpack://cos-ui/./src/app/components/UncontrolledWizard/UncontrolledWizard.tsx","webpack://cos-ui/./src/app/machines/StepBasic.machine.ts","webpack://cos-ui/./src/app/machines/StepClusters.machine.ts","webpack://cos-ui/./src/app/machines/StepConfigurator.machine.ts","webpack://cos-ui/./src/app/machines/StepConfiguratorLoader.machine.ts","webpack://cos-ui/./src/app/machines/StepConnectorTypes.machine.ts","webpack://cos-ui/./src/app/machines/StepErrorHandling.machine.ts","webpack://cos-ui/./src/app/machines/StepKafkas.machine.ts","webpack://cos-ui/./src/app/machines/StepReview.machine.ts","webpack://cos-ui/./src/app/machines/CreateConnectorWizard.machine.ts","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizardContext.tsx","webpack://cos-ui/./src/app/components/StepBodyLayout/StepBodyLayout.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepBasic.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepClusters.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConfigurator.tsx","webpack://cos-ui/./src/utils/stringToChip.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepConnectorTypes.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepErrorHandling.tsx","webpack://cos-ui/./src/app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepKafkas.tsx","webpack://cos-ui/./src/app/components/ViewJSONFormat/ViewJSONFormat.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/StepReview.tsx","webpack://cos-ui/./src/app/components/CreateConnectorWizard/CreateConnectorWizard.tsx","webpack://cos-ui/./src/app/pages/CreateConnectorPage/CreateConnectorPage.tsx","webpack://cos-ui/./src/CosRoutes.tsx","webpack://cos-ui/./src/app/components/Loading/Loading.tsx","webpack://cos-ui/./src/i18n/i18n.ts"],"sourcesContent":["import { ApiCallback } from '@app/machines/PaginatedResponse.machine';\nimport axios, { CancelTokenSource } from 'axios';\nimport _ from 'lodash';\n\nimport { Sender } from 'xstate';\n\nimport {\n  Channel,\n  Configuration,\n  Connector,\n  ConnectorCluster,\n  ConnectorClustersApi,\n  ConnectorDesiredState,\n  ConnectorsApi,\n  ConnectorType,\n  ConnectorTypeAllOf,\n  ConnectorTypesApi,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport {\n  KafkaRequest,\n  DefaultApi,\n  SecurityApi,\n} from '@rhoas/kafka-management-sdk';\n\ntype CommonApiProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n};\n\ntype ConnectorApiProps = {\n  connector: Connector;\n} & CommonApiProps;\n\ntype ConnectorEditProps = {\n  connectorUpdate: { [key: string]: any };\n  connectorId: string;\n  updatedName?: string;\n} & CommonApiProps;\n\ntype ConnectorDetailProps = {\n  connectorId: string;\n} & CommonApiProps;\n\ntype ConnectorTypeProps = {\n  connectorTypeId: string;\n} & CommonApiProps;\n\nexport type FetchCallbacks<RawDataType> = (\n  onSuccess: (payload?: RawDataType) => void,\n  onError: (errorMsg: string) => void\n) => () => void;\n\nexport const startConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Ready,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const stopConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connector.id!,\n        {\n          desired_state: ConnectorDesiredState.Stopped,\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then((response) => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: response.data,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const deleteConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connector,\n}: ConnectorApiProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .deleteConnector(connector.id!, {\n        cancelToken: source.token,\n      })\n      .then(() => {\n        callback({\n          type: 'connector.actionSuccess',\n          connector: {\n            ...connector,\n            status: 'deleting',\n            desired_state: 'deleted',\n          },\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({\n            type: 'connector.actionError',\n            error: error.response.data.reason,\n          });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorId,\n}: ConnectorDetailProps): FetchCallbacks<Connector> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnector(connectorId!, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const getConnectorTypeDetail = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorTypeId,\n}: ConnectorTypeProps) => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (callback: any) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .getConnectorTypeByID(connectorTypeId, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        callback(response.data);\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          console.log('Error:', error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchConnectors = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<Connector, {}> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size /*, name = '' */ } = request;\n    // const query = name.length > 0 ? `name LIKE ${name}` : undefined;\n    connectorsAPI\n      .listConnectors(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const fetchClusters = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorCluster, {}> => {\n  const connectorsAPI = new ConnectorClustersApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size } = request;\n    connectorsAPI\n      .listConnectorClusters(`${page}`, `${size}`, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type ConnectorTypesQuery = {\n  name?: string;\n  categories?: string[];\n};\n\nexport const fetchConnectorTypes = ({\n  accessToken,\n  connectorsApiBasePath,\n}: CommonApiProps): ApiCallback<ConnectorType, ConnectorTypesQuery> => {\n  const connectorsAPI = new ConnectorTypesApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, categories = [] } = query || {};\n    connectorsAPI\n      .getConnectorTypes('1', '1000', undefined, undefined, {\n        cancelToken: source.token,\n      })\n      .then((response) => {\n        const lcName = name ? name.toLowerCase() : undefined;\n        const rawItems = response.data.items || [];\n        let filteredItems = lcName\n          ? rawItems?.filter((c) =>\n              (c as ConnectorTypeAllOf).name?.toLowerCase().includes(lcName)\n            )\n          : rawItems;\n        filteredItems =\n          categories.length > 0\n            ? filteredItems?.filter(\n                (c) =>\n                  (\n                    (c as ConnectorTypeAllOf).labels?.filter((l) =>\n                      categories.includes(l)\n                    ) || []\n                  ).length > 0\n              )\n            : filteredItems;\n        const total = filteredItems.length;\n        const offset = (page - 1) * size;\n        const items = filteredItems.slice(offset, offset + size);\n        onSuccess({\n          items,\n          total,\n          page,\n          size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\ntype KafkaManagementApiProps = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n};\n\nexport type KafkasQuery = {\n  name?: string;\n  owner?: string;\n  statuses?: string[];\n  cloudProviders?: string[];\n  regions?: string[];\n};\n\nexport const fetchKafkaInstances = ({\n  accessToken,\n  kafkaManagementBasePath,\n}: KafkaManagementApiProps): ApiCallback<KafkaRequest, KafkasQuery> => {\n  const connectorsAPI = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementBasePath,\n    })\n  );\n  return (request, onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const { page, size, query } = request;\n    const { name, statuses, owner, cloudProviders, regions } = query || {};\n    const nameSearch =\n      name && name.length > 0 ? ` name LIKE ${name}` : undefined;\n    const ownerSearch =\n      owner && owner.length > 0 ? ` owner LIKE ${owner}` : undefined;\n    const statusSearch =\n      statuses && statuses.length > 0\n        ? statuses.map((s) => `status = ${s}`).join(' OR ')\n        : undefined;\n    const cloudProviderSearch =\n      cloudProviders && cloudProviders.length > 0\n        ? cloudProviders.map((s) => `cloud_provider = ${s}`).join(' OR ')\n        : undefined;\n    const regionSearch =\n      regions && regions.length > 0\n        ? regions.map((s) => `region = ${s}`).join(' OR ')\n        : undefined;\n    const search = [\n      nameSearch,\n      ownerSearch,\n      statusSearch,\n      cloudProviderSearch,\n      regionSearch,\n    ]\n      .filter(Boolean)\n      .map((s) => `(${s})`)\n      .join(' AND ');\n    connectorsAPI\n      .getKafkas(\n        `${page}`,\n        `${size}`,\n        undefined,\n        search as string | undefined,\n        {\n          cancelToken: source.token,\n        }\n      )\n      .then((response) => {\n        onSuccess({\n          items: response.data.items || [],\n          total: response.data.total,\n          page: response.data.page,\n          size: response.data.size,\n        });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError({ error: error.message, page: request.page });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport type UserProvidedServiceAccount = {\n  clientId: string;\n  clientSecret: string;\n};\n\nexport type SaveConnectorProps = {\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  configuration: object;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic?: string;\n  userErrorHandler?: string;\n\n  kafkaManagementApiBasePath: string;\n} & CommonApiProps;\n\nexport const saveConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  kafka,\n  cluster,\n  connectorType,\n  configuration,\n  name,\n  userServiceAccount,\n  userErrorHandler,\n  topic,\n}: SaveConnectorProps) => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  const securityAPI = new SecurityApi(\n    new Configuration({\n      accessToken,\n      basePath: kafkaManagementApiBasePath,\n    })\n  );\n\n  const getOrCreateServiceAccount = async (source: CancelTokenSource) => {\n    if (userServiceAccount) return Promise.resolve(userServiceAccount);\n\n    // the passed service account info is undefined, we have to create a new SA\n    // automatically on behalf of the user\n    const response = await securityAPI.createServiceAccount(\n      {\n        name: `connector-${(connectorType as ObjectReference).id?.replaceAll(\n          /[_\\.]/g,\n          '-'\n        )}-${Date.now()}`,\n      },\n      {\n        cancelToken: source.token,\n      }\n    );\n    return {\n      clientId: response.data.client_id!,\n      clientSecret: response.data.client_secret!,\n    };\n  };\n\n  return (callback: Sender<any>) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    const async = true;\n    getOrCreateServiceAccount(source)\n      .then(({ clientId, clientSecret }) => {\n        let connectorConfiguration = {};\n        if (userErrorHandler) {\n          connectorConfiguration = {\n            ...configuration,\n            ...{\n              error_handler: {\n                [userErrorHandler]: topic ? { topic: topic } : {},\n              },\n            },\n          };\n        } else {\n          connectorConfiguration = configuration;\n        }\n        const connector: Connector = {\n          kind: 'Connector',\n          name: name,\n          channel: Channel.Stable,\n          deployment_location: {\n            kind: 'addon',\n            cluster_id: cluster.id,\n          },\n          desired_state: ConnectorDesiredState.Ready,\n          connector_type_id: (connectorType as ObjectReference).id!,\n          kafka: {\n            id: kafka.id!,\n            url: kafka.bootstrap_server_host || 'demo',\n          },\n          service_account: {\n            client_id: clientId,\n            client_secret: clientSecret,\n          },\n          connector: connectorConfiguration,\n        };\n        connectorsAPI\n          .createConnector(async, connector, {\n            cancelToken: source.token,\n          })\n          .then(() => {\n            callback({ type: 'success' });\n          })\n          .catch((error) => {\n            if (!axios.isCancel(error)) {\n              callback({\n                type: 'failure',\n                message: error.response.data.reason,\n              });\n            }\n          });\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          callback({ type: 'failure', message: error.response.data.reason });\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n\nexport const updateConnector = ({\n  accessToken,\n  connectorsApiBasePath,\n  connectorUpdate,\n  connectorId,\n  updatedName,\n}: ConnectorEditProps): FetchCallbacks<undefined> => {\n  const connectorsAPI = new ConnectorsApi(\n    new Configuration({\n      accessToken,\n      basePath: connectorsApiBasePath,\n    })\n  );\n  return (onSuccess, onError) => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n    connectorsAPI\n      .patchConnector(\n        connectorId,\n        {\n          ...(updatedName && { name: updatedName }),\n          ...(!_.isEmpty(connectorUpdate) && {\n            connector: {\n              ...connectorUpdate,\n            },\n          }),\n        },\n        {\n          cancelToken: source.token,\n          headers: {\n            'Content-type': 'application/merge-patch+json',\n          },\n        }\n      )\n      .then(() => {\n        onSuccess();\n      })\n      .catch((error) => {\n        if (!axios.isCancel(error)) {\n          onError(error.response.data.reason);\n        }\n      });\n    return () => {\n      source.cancel('Operation canceled by the user.');\n    };\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\n\nimport './ConnectorStatus.css';\n\ntype ConnectorStatusProps = {\n  name: string;\n  status: string;\n};\n\nexport const ConnectorStatus: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  const label = useConnectorStatusLabel(status);\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <ConnectorStatusIcon name={name} status={status} />\n      </FlexItem>\n      <FlexItem>{label}</FlexItem>\n    </Flex>\n  );\n};\n\nexport const ConnectorStatusIcon: FunctionComponent<ConnectorStatusProps> = ({\n  name,\n  status,\n}) => {\n  switch (status?.toLowerCase()) {\n    case 'ready':\n      return (\n        <CheckCircleIcon className=\"cos--connectors__table--icon--completed\" />\n      );\n    case 'failed':\n      return (\n        <ExclamationCircleIcon className=\"cos--connectors__table--icon--failed\" />\n      );\n    case 'accepted':\n      return <PendingIcon />;\n    case 'provisioning':\n    case 'preparing':\n      return (\n        <Spinner\n          size=\"md\"\n          aria-label={name}\n          aria-valuetext=\"Creation in progress\"\n        />\n      );\n    case 'deprovision':\n    case 'deleted':\n      return null;\n  }\n  return <PendingIcon />;\n};\n\nexport enum ConnectorStatuses {\n  Ready = 'ready',\n  Failed = 'failed',\n  Assigning = 'assigning',\n  Assigned = 'assigned',\n  Updating = 'updating',\n  Provisioning = 'provisioning',\n  Deleting = 'deleting',\n  Deleted = 'deleted',\n}\n\nexport function useConnectorStatusLabel(status: string) {\n  const { t } = useTranslation();\n\n  const statusOptions = [\n    { value: ConnectorStatuses.Ready, label: t('Running') },\n    { value: ConnectorStatuses.Failed, label: t('Failed') },\n    { value: ConnectorStatuses.Assigning, label: t('Creation pending') },\n    { value: ConnectorStatuses.Assigned, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Updating, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Provisioning, label: t('Creation in progress') },\n    { value: ConnectorStatuses.Deleting, label: t('Deleting') },\n    { value: ConnectorStatuses.Deleted, label: t('Deleted') },\n  ];\n\n  return statusOptions.find((s) => s.value === status)?.label || status;\n}\n","export const PAGINATED_MACHINE_ID = 'paginatedApi';\nexport const FETCH_MACHINE_ID = 'fetchApi';\n\nexport enum CONNECTOR_DETAILS_TABS {\n  Overview = 'overview',\n  Configuration = 'configuration',\n}\n\nexport const defaultPerPageOptions = [\n  {\n    title: '1',\n    value: 1,\n  },\n  {\n    title: '5',\n    value: 5,\n  },\n  {\n    title: '10',\n    value: 10,\n  },\n];\n","import React, { createContext, FunctionComponent, useContext } from 'react';\n\ntype AppContextType = {\n  /**\n   * Gets the JWT needed by all the API calls. The token comes from Keycloak\n   * when running the app in development mode. In production, it will come from\n   * the `@rhoas/app-services-ui-shared` package.\n   */\n  getToken: () => Promise<string>;\n  /**\n   * The base path that gets prepended to all API urls.\n   * Eg. A `connectorsApiBasePath` of `http://my.api.com/something` for an API `/my-api` will\n   * generate an URL like `http://my.api.com/something/my-api`\n   */\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\nconst CosContext = createContext<AppContextType | null>(null);\n\nexport const CosContextProvider: FunctionComponent<AppContextType> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n  children,\n}) => (\n  <CosContext.Provider\n    value={{\n      getToken,\n      connectorsApiBasePath,\n      kafkaManagementApiBasePath,\n    }}\n  >\n    {children}\n  </CosContext.Provider>\n);\n\nexport const useCos = () => {\n  const context = useContext(CosContext);\n  if (!context)\n    throw new Error('useAppContext must be used inside an AppContextProvider');\n\n  return {\n    ...context,\n  };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nconst ErrorFallback: FunctionComponent<{ error: Error }> = ({ error }) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n};\n\nexport const StepErrorBoundary: FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","/* eslint-disable camelcase */\n\n/* eslint-disable no-undef */\nimport { ConnectorConfiguratorResponse } from '@app/machines/StepConfiguratorLoader.machine';\nimport { ComponentType, LazyExoticComponent } from 'react';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\ntype FederatedModuleConfigurationType = {\n  remoteEntry: string;\n  scope: string;\n  module: string;\n};\n\nexport type FederatedConfiguratorConfig = {\n  steps: string[];\n  Configurator: LazyExoticComponent<ComponentType<any>>;\n};\ntype FederatedConfigurationConfigModule = {\n  default: FederatedConfiguratorConfig;\n};\n\nexport const fetchConfigurator = async (\n  connector: ConnectorType,\n  config: Record<string, unknown>\n): Promise<ConnectorConfiguratorResponse> => {\n  const defaultConfig = Promise.resolve<ConnectorConfiguratorResponse>({\n    steps: false,\n    Configurator: false,\n  });\n  return new Promise(async (resolve) => {\n    try {\n      const federatedConfigurator =\n        await maybeGetFederatedConfiguratorForConnector(config, connector);\n      await injectFederatedModuleScript(\n        federatedConfigurator.remoteEntry as string\n      );\n      resolve(\n        loadFederatedConfigurator(\n          federatedConfigurator.scope,\n          federatedConfigurator.module\n        )\n      );\n    } catch (e) {\n      resolve(defaultConfig);\n    }\n  });\n};\n\nconst isValidConf = (maybeConf?: any) =>\n  maybeConf &&\n  maybeConf.remoteEntry &&\n  typeof maybeConf.remoteEntry === 'string' &&\n  maybeConf.scope &&\n  typeof maybeConf.scope === 'string' &&\n  maybeConf.module &&\n  typeof maybeConf.module === 'string';\n\nconst maybeGetFederatedConfiguratorForConnector = async (\n  config: Record<string, unknown>,\n  connector: ConnectorType\n): Promise<FederatedModuleConfigurationType> => {\n  console.log('Fetched federated configurator remotes configuration', config);\n  const maybeConfiguration =\n    config[(connector as ObjectReference).id!] ||\n    config[(connector as ObjectReference).id!.split('-')[0]];\n  console.log(\n    `Candidate configuration for \"${(connector as ObjectReference).id}\"`,\n    maybeConfiguration\n  );\n  if (!maybeConfiguration) {\n    console.log(\"Couldn't find any configuration for the requested connector\");\n    return Promise.reject();\n  }\n  if (isValidConf(maybeConfiguration)) {\n    console.log(\n      'Found a generic configuration for the connector',\n      maybeConfiguration\n    );\n    return maybeConfiguration as FederatedModuleConfigurationType;\n  }\n  console.log(\n    \"Couldn't find a valid configuration for the requested connector\"\n  );\n  return Promise.reject();\n};\n\nexport const injectFederatedModuleScript = async (url: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    element.onload = () => {\n      console.log(`Dynamic federated module loaded: ${url}`);\n      document.head.removeChild(element);\n      resolve();\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n      reject();\n    };\n\n    document.head.appendChild(element);\n  });\n};\n\nexport async function loadFederatedConfigurator(\n  scope: string,\n  module: string\n): Promise<FederatedConfiguratorConfig> {\n  // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n  await __webpack_init_sharing__('default');\n  const container = (window as any)[scope]; // or get the container somewhere else\n  // Initialize the container, it may provide shared modules\n  await container.init(__webpack_share_scopes__.default);\n  const factory = await (window as any)[scope].get(module);\n  const federatedConfigurationConfig =\n    factory() as FederatedConfigurationConfigModule;\n  console.log(\n    `loaded federated configurator configuration from ${scope}`,\n    federatedConfigurationConfig\n  );\n  return federatedConfigurationConfig.default;\n}\n","export const mapToObject = (inputMap: Map<string, unknown>): object => {\n  const obj = {} as { [key: string]: unknown };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n};\n","import React, { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type CommonStepProp = {\n  editMode: boolean;\n  configuration: any;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\n\nexport const CommonStep: FC<CommonStepProp> = ({\n  editMode,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const onNameChange = (val: any) => {\n    onUpdateConfiguration('common', { ...configuration, name: val });\n    val === '' ? changeIsValid(false) : changeIsValid(true);\n  };\n\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        {t('Common')}\n      </Title>\n      <Form>\n        <FormGroup\n          label={t('Connector name')}\n          isRequired\n          fieldId=\"connector-name\"\n          labelIcon={\n            <Popover bodyContent={<p>{t('Unique name for the connector.')}</p>}>\n              <button\n                type=\"button\"\n                aria-label=\"More info for name field.\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"simple-form-name-01\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {editMode ? (\n            <TextInput\n              value={configuration.name}\n              onChange={(val) => onNameChange(val)}\n              id=\"connector-name\"\n            />\n          ) : (\n            <Text component={TextVariants.p}>{configuration.name}</Text>\n          )}\n        </FormGroup>\n        <FormGroup label={t('Service account')} fieldId=\"service-account\">\n          {true !== undefined && (\n            <>\n              <FormGroup label={t('Client ID')} isRequired fieldId=\"clientId\">\n                <ClipboardCopy isReadOnly hoverTip=\"Copy\" clickTip=\"Copied\">\n                  {configuration?.service_account?.client_id}\n                </ClipboardCopy>\n              </FormGroup>\n            </>\n          )}\n        </FormGroup>\n      </Form>\n    </>\n  );\n};\n","import { Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport JSONSchemaBridge from 'uniforms-bridge-json-schema';\nimport { Translation } from 'react-i18next';\nimport React from 'react';\n\n/**\n * Returns an example string formatted (not localized) for the form or undefined if the field has no example text\n * @param exampleText \n * @returns \n */\nconst getExampleText = (exampleText: string) => (typeof (exampleText) !== 'undefined' ? (\n  `Example: ${exampleText}`\n) : undefined)\n\n/**\n * Returns a label tooltip element for the form or undefined if the field has no description\n * @param name \n * @param content \n * @returns \n */\nconst getLabelIcon = (name: string, content: string) =>\n  typeof (content) !== 'undefined' ?\n    (<Translation>\n      {t => <Popover bodyContent={content}>\n        <button\n          type=\"button\"\n          aria-label={t('More info for {{name}}', { name })}\n          onClick={e => e.preventDefault()}\n          aria-describedby=\"form-group-label-info\"\n          className=\"pf-c-form__group-label-help\"\n        ><HelpIcon noVerticalAlign /></button>\n      </Popover>}\n    </Translation>) : undefined;\n\n/**\n * CustomJsonSchemaBridge generates the appropriate attributes for uniforms-patternfly\n * based on the incoming model data\n */\nexport class CustomJsonSchemaBridge extends JSONSchemaBridge {\n\n  constructor(schema: any, validator: any) {\n    super(schema, validator);\n  }\n\n  getField(name: string): Record<string, any> {\n    const field = super.getField(name);\n    const { description, example, title, ...props } = field;\n    return {\n      helperText: getExampleText(example),\n      labelIcon: getLabelIcon(title, description),\n      title,\n      ...props\n    };\n  }\n}\n","import Ajv from 'ajv';\n\nconst ajv = new Ajv({\n  allErrors: true,\n  useDefaults: false,\n  strict: 'log',\n  strictSchema: false,\n});\nexport function createValidator(schema: object) {\n  const validator = ajv.compile(schema);\n\n  return (model: object) => {\n    validator(model);\n    return validator.errors?.length ? { details: validator.errors } : null;\n  };\n}\n","import { CustomJsonSchemaBridge } from './CustomJsonSchemaBridge';\nimport { Resolver } from '@stoplight/json-ref-resolver';\nimport { createValidator } from '@utils/createValidator';\nimport { ValidateFunction } from 'ajv';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { AutoForm, ValidatedQuickForm } from 'uniforms';\nimport { AutoField } from 'uniforms-patternfly';\n\nimport { Grid } from '@patternfly/react-core';\n\nimport './JsonSchemaConfigurator.css';\n\nexport type CreateValidatorType = ReturnType<typeof createValidator>;\nexport type ValidatorResultType = ValidateFunction<unknown>['errors'];\n\ntype JsonSchemaConfiguratorProps = {\n  schema: Record<string, any>;\n  configuration: unknown;\n  onChange: (configuration: unknown, isValid: boolean) => void;\n  editCase?: boolean;\n};\nconst resolver = new Resolver();\n\nexport const JsonSchemaConfigurator: FunctionComponent<JsonSchemaConfiguratorProps> =\n  ({ schema, configuration, onChange, editCase }) => {\n    schema.type = schema.type || 'object';\n    // Suppress the experimental steps from the UI for the moment\n    try {\n      delete schema.properties.steps;\n    } catch (e) {}\n\n    const schemaValidator = createValidator(schema);\n    const bridge = new CustomJsonSchemaBridge(schema, schemaValidator);\n    const { required } = bridge.schema;\n\n    async function getDataShape(): Promise<any> {\n      const copiedBridge = JSON.parse(JSON.stringify(bridge));\n      let obj: any = [];\n      for (const [key] of Object.entries(\n        copiedBridge.schema.properties.data_shape?.properties\n      )) {\n        const dataShapeReolved = await resolver.resolve(copiedBridge.schema, {\n          jsonPointer: `#/$defs/data_shape/${key}`,\n        });\n        const result = await dataShapeReolved.result;\n        obj = { ...obj, [key]: result };\n      }\n      return obj;\n    }\n\n    const onChangeWizard = async (model: any, isValid: boolean) => {\n      const copiedModel = JSON.parse(JSON.stringify(model));\n      let dataShapePointer: any = [];\n      if (copiedModel.data_shape !== undefined) {\n        dataShapePointer = await getDataShape();\n        const { data_shape } = copiedModel;\n        Object.keys(data_shape).map((key) => {\n          const defaultValue =\n            dataShapePointer[key].properties?.format?.default;\n          if (_.isEmpty(data_shape[key])) {\n            copiedModel.data_shape[key] = { format: defaultValue };\n          }\n        });\n      }\n\n      const requiredEntries = {};\n      for (const [key, value] of Object.entries(copiedModel)) {\n        for (const r in required) {\n          if (key === required[r] && value !== undefined) {\n            const obj = { [key]: value };\n            Object.assign(requiredEntries, obj);\n          }\n        }\n      }\n      const compareRequiredEntriesKeys = (\n        requiredEntries: any,\n        required: any\n      ) => {\n        const aKeys = Object.keys(requiredEntries).sort();\n        const bKeys = required.slice().sort();\n        return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n      };\n      isValid =\n        copiedModel.data_shape === undefined\n          ? compareRequiredEntriesKeys(requiredEntries, required)\n          : compareRequiredEntriesKeys(requiredEntries, required);\n\n      if (isValid) {\n        onChange(copiedModel, isValid);\n      } else {\n        onChange(copiedModel, false);\n      }\n    };\n\n    return (\n      <Grid hasGutter>\n        <KameletForm\n          schema={bridge}\n          model={configuration}\n          onChangeModel={(model: any) => onChangeWizard(model, false)}\n          className=\"connector-specific pf-c-form pf-m-9-col-on-lg\"\n        >\n          {Object.keys(bridge.schema.properties).map((key) => {\n            if (!['processors', 'error_handler'].includes(key)) {\n              return (\n                <AutoField\n                  key={key}\n                  name={key}\n                  disabled={\n                    editCase &&\n                    _.find(bridge.schema.properties[key].oneOf, {\n                      format: 'password',\n                    })\n                  }\n                />\n              );\n            }\n            return false;\n          })}\n        </KameletForm>\n      </Grid>\n    );\n  };\nfunction Auto(parent: any): any {\n  class _ extends AutoForm.Auto(parent) {\n    static Auto = Auto;\n    onChange(key: string, value: unknown) {\n      if (value === '') return super.onChange(key, undefined);\n      super.onChange(key, value);\n    }\n  }\n  return _;\n}\n\nconst KameletForm = Auto(ValidatedQuickForm);\n","import { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport _ from 'lodash';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ConfigurationType = {\n  [key: string]: any;\n};\nexport type ConfigurationStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: unknown;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ConfigurationStep: FC<ConfigurationStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const { t } = useTranslation();\n\n  const formConfiguration = JSON.parse(JSON.stringify(configuration));\n  Object.keys(formConfiguration as object).map((key) => {\n    if (_.isEmpty((formConfiguration as { [key: string]: any })[key])) {\n      (formConfiguration as { [key: string]: any })[key] = '';\n    }\n  });\n\n  const onChange = (config: unknown, isValid: boolean) => {\n    onUpdateConfiguration('connector', config);\n    changeIsValid(isValid);\n  };\n\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        {t('Connector specific')}\n      </Title>\n      {editMode ? (\n        <JsonSchemaConfigurator\n          schema={schema}\n          configuration={formConfiguration || {}}\n          onChange={onChange}\n          editCase={true}\n        />\n      ) : (\n        <Form>\n          {Object.entries(schema.properties)\n            .filter(([key, value]: [string, any]) => {\n              if (['object', 'array'].includes(value.type)) {\n                if (key === 'data_shape') {\n                  return true;\n                }\n                return false;\n              }\n              return true;\n            })\n            .map(([key, value]: [string, any]) => (\n              <FormGroup\n                key={key}\n                label={value.title || _.capitalize(key.replace('_', ' '))}\n                fieldId={key}\n                isRequired={schema.required.includes(key)}\n                labelIcon={\n                  <Popover\n                    bodyContent={\n                      <p>\n                        {value.description\n                          ? value.description\n                          : _.capitalize(key.replace('_', ' '))}\n                      </p>\n                    }\n                  >\n                    <button\n                      type=\"button\"\n                      aria-label=\"More info for name field\"\n                      onClick={(e) => e.preventDefault()}\n                      aria-describedby=\"simple-form-name-01\"\n                      className=\"pf-c-form__group-label-help\"\n                    >\n                      <HelpIcon noVerticalAlign />\n                    </button>\n                  </Popover>\n                }\n              >\n                <Text component={TextVariants.p}>\n                  {_.isObject((formConfiguration as ConfigurationType)[key])\n                    ? JSON.stringify(\n                        (formConfiguration as ConfigurationType)[key]\n                      )\n                    : (formConfiguration as ConfigurationType)[key]}\n                </Text>\n              </FormGroup>\n            ))}\n        </Form>\n      )}\n    </>\n  );\n};\n","import { createValidator } from '@utils/createValidator';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextInput,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nexport type ErrorHandler = {\n  [key: string]: any;\n};\n\nexport type ErrorHandlerStepProps = {\n  editMode: boolean;\n  schema: Record<string, any>;\n  configuration: ErrorHandler;\n  changeIsValid: (isValid: boolean) => void;\n  onUpdateConfiguration: (type: string, update: any) => void;\n};\nexport const ErrorHandlerStep: FC<ErrorHandlerStepProps> = ({\n  editMode,\n  schema,\n  configuration,\n  changeIsValid,\n  onUpdateConfiguration,\n}) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [topic, setTopic] = useState<string>();\n  const [errorHandler, setErrorHandler] = useState<any>();\n  const { t } = useTranslation();\n\n  const onToggle = () => setOpen((isOpen) => !isOpen);\n\n  const checkValidity = (value: string) => {\n    if (value !== 'dead_letter_queue') {\n      changeIsValid(true);\n    } else if (topic) {\n      changeIsValid(true);\n    } else {\n      changeIsValid(false);\n    }\n  };\n\n  const onSelect = (_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      setTopic('');\n      setErrorHandler(selection);\n      checkValidity(selection);\n      onUpdateConfiguration('error', { [selection]: {} });\n    }\n  };\n\n  const clearSelection = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    setErrorHandler(Object.keys(configuration)[0]);\n    if (\n      Object.keys(configuration)[0] === 'dead_letter_queue' &&\n      !_.isEmpty(configuration.dead_letter_queue)\n    ) {\n      setTopic(\n        configuration.dead_letter_queue[\n          Object.keys(configuration.dead_letter_queue)[0]\n        ]\n      );\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configuration]);\n\n  const updateTopic = (val: string) => {\n    setTopic(val);\n    val ? changeIsValid(true) : changeIsValid(false);\n    onUpdateConfiguration('error', { dead_letter_queue: { topic: val } });\n  };\n\n  const schemaValidator = createValidator(schema);\n  const bridge = new JSONSchemaBridge(schema, schemaValidator);\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n  return (\n    <>\n      <Title\n        headingLevel=\"h3\"\n        size={TitleSizes['2xl']}\n        className={'pf-u-pr-md pf-u-pb-md'}\n      >\n        Error handling\n      </Title>\n      <Form>\n        <FormGroup\n          label={t('Error handler')}\n          fieldId=\"error-handler_strategy\"\n          className=\"error-handler_strategy\"\n        >\n          {editMode ? (\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          ) : (\n            <Text component={TextVariants.p}>{errorHandler}</Text>\n          )}\n        </FormGroup>\n        {errorHandler === 'dead_letter_queue' && (\n          <FormGroup\n            label=\"Dead Letter Topic Name\"\n            isRequired\n            fieldId=\"topic\"\n            labelIcon={\n              <Popover\n                bodyContent={\n                  <p>The name of the Kafka topic used as dead letter queue</p>\n                }\n              >\n                <button\n                  type=\"button\"\n                  aria-label=\"More info for name field\"\n                  onClick={(e) => e.preventDefault()}\n                  aria-describedby=\"simple-form-name-01\"\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            }\n          >\n            {editMode ? (\n              <TextInput value={topic} onChange={updateTopic} id=\"topic\" />\n            ) : (\n              <Text component={TextVariants.p}>{topic}</Text>\n            )}\n          </FormGroup>\n        )}\n      </Form>\n    </>\n  );\n};\n","import { updateConnector } from '@apis/api';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport { ConnectorConfiguratorComponent } from '@app/machines/StepConfiguratorLoader.machine';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport { mapToObject } from '@utils/shared';\nimport _ from 'lodash';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  AlertVariant,\n  Button,\n  Grid,\n  GridItem,\n  Modal,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { useAlert, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  Connector,\n  ConnectorType,\n  ConnectorTypeAllOf,\n} from '@rhoas/connector-management-sdk';\n\nimport { CommonStep } from './CommonStep';\nimport './ConfigurationPage.css';\nimport { ConfigurationStep } from './ConfigurationStep';\nimport { ErrorHandler, ErrorHandlerStep } from './ErrorHandlerStep';\n\nexport type ConfigurationPageProps = {\n  onSave: () => void;\n  editMode: boolean;\n  updateEditMode: (editEnable: boolean) => void;\n  connectorData: Connector;\n  connectorTypeDetails: ConnectorType;\n};\nexport type connector = {\n  data_shape: object;\n  error_handler: ErrorHandler;\n  processors: object;\n};\n\nconst diff = (newConfig: any, oldConfig: any) => {\n  let r: string[] = [];\n  _.each(newConfig, (val, key) => {\n    if (oldConfig === undefined || oldConfig[key] === val) return;\n    if (oldConfig[key] === {} || val === '') return;\n    r.push(key);\n  });\n  return r;\n};\n\nconst getEditPayload = (newConfiguration: any, oldConfiguration: any) => {\n  const diffKeys = diff(newConfiguration, oldConfiguration);\n  return diffKeys.reduce((acc, key) => {\n    return { ...acc, [key]: newConfiguration[key] };\n  }, {});\n};\n\nexport const ConfigurationPage: FC<ConfigurationPageProps> = ({\n  onSave,\n  editMode,\n  updateEditMode,\n  connectorData,\n  connectorTypeDetails,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const config = useConfig();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n  const [commonConfiguration, setCommonConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n  const [connectorConfiguration, setConnectorConfiguration] =\n    useState<unknown>();\n  const [errHandlerConfiguration, setErrHandlerConfiguration] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [configurator, setConfigurator] = useState<any>();\n  const [isEditValid, setIsEditValid] = useState<boolean>(true);\n\n  const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n  const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n\n  const changeEditMode = () => {\n    updateEditMode(!editMode);\n  };\n\n  const onUpdateConfiguration = useCallback(\n    (type, update) => {\n      setUserTouched(true);\n      switch (type) {\n        case 'common':\n          setCommonConfiguration(update);\n          break;\n        case 'connector':\n          setConnectorConfiguration(update);\n          break;\n        case 'error':\n          setErrHandlerConfiguration(update);\n      }\n    },\n    [\n      setCommonConfiguration,\n      setConnectorConfiguration,\n      setErrHandlerConfiguration,\n    ]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('something_went_wrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  const onSuccess = useCallback(() => {\n    updateEditMode(false);\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('edit.edit-success'),\n    });\n    onSave();\n  }, [alert, t, updateEditMode, onSave]);\n\n  const onConnectorEditSave = () => {\n    updateConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorUpdate: {\n        ...getEditPayload(\n          {\n            ...(connectorConfiguration instanceof Map\n              ? mapToObject(connectorConfiguration)\n              : (connectorConfiguration as object)),\n            error_handler: errHandlerConfiguration,\n          },\n          connectorData.connector\n        ),\n      },\n      connectorId: connectorData.id!,\n      ...(commonConfiguration.name !== connectorData.name && {\n        updatedName: commonConfiguration.name,\n      }),\n    })(onSuccess, onError);\n  };\n\n  const initialize = () => {\n    const { name, service_account } = connectorData;\n    setCommonConfiguration({ name: name, service_account: service_account });\n    setConnectorConfiguration(connectorData?.connector);\n    setErrHandlerConfiguration(\n      (connectorData?.connector as connector)?.error_handler\n    );\n  };\n\n  const onCancelEdit = () => {\n    initialize();\n    updateEditMode(false);\n    closeLeaveConfirm();\n  };\n\n  const updateFedConfiguration = useCallback(\n    (config, isValid) => {\n      setConnectorConfiguration(config);\n      setIsEditValid(isValid);\n    },\n    [setConnectorConfiguration, setIsEditValid]\n  );\n\n  let response: any;\n  const getConfigurator = async () => {\n    try {\n      response = await fetchConfigurator(\n        connectorTypeDetails,\n        config?.cos.configurators || {}\n      );\n      setConfigurator(response);\n    } catch (err) {\n      console.log('No configurator provided.', err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    getConfigurator();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n  };\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Grid style={{ paddingBottom: '50px' }}>\n          <GridItem span={3}>\n            <div>\n              <Tabs\n                activeKey={activeTabKey}\n                onSelect={handleTabClick}\n                isVertical\n              >\n                <Tab\n                  eventKey={0}\n                  title={<TabTitleText>{t('Common')}</TabTitleText>}\n                ></Tab>\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator &&\n                  configurator.steps &&\n                  configurator.steps.map((step: string, index: number) => {\n                    return (\n                      <Tab\n                        key={step}\n                        eventKey={index + 1}\n                        title={<TabTitleText>{step}</TabTitleText>}\n                      ></Tab>\n                    );\n                  })}\n                {!connectorData.connector_type_id.includes('debezium') && (\n                  <>\n                    <Tab\n                      eventKey={1}\n                      title={\n                        <TabTitleText>{t('Connector specific')}</TabTitleText>\n                      }\n                    ></Tab>\n                    <Tab\n                      eventKey={2}\n                      title={<TabTitleText>{t('Error handling')}</TabTitleText>}\n                    ></Tab>\n                  </>\n                )}\n              </Tabs>\n            </div>\n          </GridItem>\n          <GridItem span={9}>\n            <Grid>\n              <GridItem span={10}>\n                {activeTabKey === 0 && (\n                  <StepErrorBoundary>\n                    {!_.isEmpty(commonConfiguration) && (\n                      <CommonStep\n                        editMode={editMode}\n                        configuration={commonConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    )}\n                  </StepErrorBoundary>\n                )}\n                {connectorData.connector_type_id.includes('debezium') &&\n                  configurator?.Configurator && (\n                    <StepErrorBoundary>\n                      <>\n                        <Title\n                          headingLevel=\"h3\"\n                          size={TitleSizes['2xl']}\n                          className={'pf-u-pr-md pf-u-pb-md'}\n                        >\n                          {configurator?.steps[(activeTabKey as number) - 1]}\n                        </Title>\n                        <React.Suspense fallback={Loading}>\n                          <ConnectedCustomConfigurator\n                            Configurator={\n                              configurator?.Configurator as ConnectorConfiguratorComponent\n                            }\n                            isEditMode={editMode}\n                            configuration={connectorConfiguration}\n                            updateFedConfiguration={updateFedConfiguration}\n                            connector={connectorTypeDetails}\n                            step={activeTabKey as number}\n                          />\n                        </React.Suspense>\n                      </>\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 1 && (\n                    <StepErrorBoundary>\n                      <ConfigurationStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={connectorConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n                {!connectorData.connector_type_id.includes('debezium') &&\n                  activeTabKey === 2 && (\n                    <StepErrorBoundary>\n                      <ErrorHandlerStep\n                        editMode={editMode}\n                        schema={\n                          (connectorTypeDetails as ConnectorTypeAllOf)?.schema!\n                        }\n                        configuration={errHandlerConfiguration}\n                        changeIsValid={setIsEditValid}\n                        onUpdateConfiguration={onUpdateConfiguration}\n                      />\n                    </StepErrorBoundary>\n                  )}\n              </GridItem>\n              <GridItem span={2} className=\"pf-u-pl-md\">\n                {!editMode && (\n                  <Button variant=\"primary\" onClick={changeEditMode}>\n                    {t('Edit Properties')}\n                  </Button>\n                )}\n              </GridItem>\n            </Grid>\n          </GridItem>\n        </Grid>\n      </PageSection>\n      {editMode && (\n        <PageSection\n          className=\"pf-u-p-md pf-u-box-shadow-md-top configuration-page_footer\"\n          hasShadowTop\n          variant=\"light\"\n        >\n          <Button\n            variant=\"primary\"\n            className=\"pf-u-mr-md pf-u-mb-sm\"\n            onClick={onConnectorEditSave}\n            isDisabled={!isEditValid}\n          >\n            {t('Save')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={userTouched ? openLeaveConfirm : onCancelEdit}\n          >\n            {t('Cancel')}\n          </Button>\n        </PageSection>\n      )}\n\n      <Modal\n        title={t('Leave page?')}\n        variant={'small'}\n        isOpen={askForLeaveConfirm}\n        onClose={closeLeaveConfirm}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={onCancelEdit}>\n            {t('Leave')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        {t('Changes you made to the connector properties will not be saved.')}\n      </Modal>\n    </>\n  );\n};\n\nconst ConnectedCustomConfigurator: FC<{\n  Configurator: ConnectorConfiguratorComponent;\n  configuration: unknown;\n  connector: ConnectorType;\n  updateFedConfiguration: (\n    configuration: Map<string, unknown>,\n    isValid: boolean\n  ) => void;\n  isEditMode: boolean;\n  step: number;\n}> = ({\n  Configurator,\n  connector,\n  configuration,\n  updateFedConfiguration,\n  isEditMode,\n  step,\n}) => {\n  let formConfiguration: unknown;\n\n  if (configuration instanceof Map) {\n    formConfiguration = new Map(configuration);\n  } else {\n    formConfiguration = JSON.parse(JSON.stringify(configuration));\n    Object.keys(formConfiguration as object).map((key) => {\n      if (_.isEmpty((formConfiguration as { [key: string]: any })[key])) {\n        (formConfiguration as { [key: string]: any })[key] = '';\n      }\n    });\n  }\n\n  return (\n    <Configurator\n      activeStep={step - 1}\n      connector={connector}\n      isViewMode={!isEditMode}\n      configuration={\n        formConfiguration instanceof Map\n          ? formConfiguration\n          : new Map(Object.entries(formConfiguration as object))\n      }\n      onChange={updateFedConfiguration}\n    />\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nexport interface OverviewPageProps {\n  connectorData: Connector;\n}\n\nconst textListItem = (title: string, value?: ReactNode) => (\n  <>\n    {value && (\n      <>\n        <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      </>\n    )}\n  </>\n);\n\nexport const OverviewPage: FC<OverviewPageProps> = ({ connectorData }) => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {textListItem('Connector id', connectorData?.id!)}\n          {textListItem('Connector type', connectorData?.connector_type_id)}\n          {textListItem('Kafka_instance', connectorData?.kafka?.id)}\n          {textListItem('Bootstrap server', connectorData?.kafka?.url)}\n          {textListItem(\n            'Targeted OSD Cluster',\n            connectorData?.deployment_location?.cluster_id\n          )}\n          {textListItem('Owner', connectorData?.owner)}\n          {textListItem('Time created', connectorData?.created_at)}\n          {textListItem('Time updated', connectorData?.modified_at)}\n        </TextList>\n      </TextContent>\n    </PageSection>\n  );\n};\n","import { getConnector, getConnectorTypeDetail } from '@apis/api';\nimport { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { CONNECTOR_DETAILS_TABS } from '@constants/constants';\nimport { useCos } from '@context/CosContext';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n\nimport {\n  PageSection,\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  Tab,\n  Tabs,\n  TabTitleText,\n  LevelItem,\n  Title,\n  PageSectionVariants,\n  AlertVariant,\n} from '@patternfly/react-core';\n\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport { Connector, ConnectorType } from '@rhoas/connector-management-sdk';\n\nimport { ConfigurationPage } from './ConfigurationPage';\nimport { OverviewPage } from './OverviewPage';\n\nexport interface ParamTypes {\n  id: string;\n}\nconst getTab = (hash: string): string => {\n  return hash.includes('&')\n    ? hash.substr(1, hash.indexOf('&') - 1)\n    : hash.substr(1);\n};\n\ntype ConnectorDetailsPageProps = {\n  onSave: () => void;\n};\n\nexport const ConnectorDetailsPage: FC<ConnectorDetailsPageProps> = ({\n  onSave,\n}) => {\n  let { id } = useParams<ParamTypes>();\n  let { hash } = useLocation();\n  const history = useHistory();\n\n  const alert = useAlert();\n  const { t } = useTranslation();\n\n  const { connectorsApiBasePath, getToken } = useCos();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(\n    getTab(hash)\n  );\n  const [editMode, setEditMode] = useState<boolean>();\n\n  const [connectorData, setConnectorData] = useState<Connector>();\n  const [connectorTypeDetails, setConnectorTypeDetails] =\n    useState<ConnectorType>();\n\n  const getConnectorData = useCallback((data) => {\n    setConnectorData(data as Connector);\n  }, []);\n\n  const getConnectorTypeInfo = useCallback((data) => {\n    setConnectorTypeDetails(data as ConnectorType);\n  }, []);\n\n  const updateEditMode = useCallback(\n    (editEnable: boolean) => {\n      setEditMode(editEnable);\n    },\n    [setEditMode]\n  );\n\n  const onError = useCallback(\n    (description: string) => {\n      alert?.addAlert({\n        id: 'connectors-table-error',\n        variant: AlertVariant.danger,\n        title: t('something_went_wrong'),\n        description,\n      });\n    },\n    [alert, t]\n  );\n\n  useEffect(() => {\n    if (hash.includes(CONNECTOR_DETAILS_TABS.Configuration)) {\n      setEditMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getConnector({\n      accessToken: getToken,\n      connectorsApiBasePath: connectorsApiBasePath,\n      connectorId: id,\n    })(getConnectorData, onError);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    setActiveTabKey(getTab(hash));\n  }, [hash]);\n\n  useEffect(() => {\n    if (connectorData?.connector_type_id) {\n      getConnectorTypeDetail({\n        accessToken: getToken,\n        connectorsApiBasePath: connectorsApiBasePath,\n        connectorTypeId: connectorData?.connector_type_id,\n      })(getConnectorTypeInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connectorData]);\n\n  // Toggle currently active tab\n  const handleTabClick = (\n    _event: React.MouseEvent<HTMLElement, MouseEvent>,\n    tabIndex: string | number\n  ) => {\n    setActiveTabKey(tabIndex);\n    history.push(`#${tabIndex}`);\n  };\n\n  return (\n    <>\n      {!connectorData && <Loading />}\n      {connectorData && (\n        <>\n          <ConnectorDetailsHeader connectorData={connectorData} />\n          <PageSection\n            padding={{ default: 'noPadding' }}\n            style={{ zIndex: 0 }}\n            variant={PageSectionVariants.light}\n          >\n            <Tabs\n              activeKey={activeTabKey}\n              onSelect={handleTabClick}\n              className=\"connector_detail-tabs\"\n            >\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Overview}\n                title={<TabTitleText>{t('Overview')}</TabTitleText>}\n              >\n                <OverviewPage connectorData={connectorData} />\n              </Tab>\n              <Tab\n                eventKey={CONNECTOR_DETAILS_TABS.Configuration}\n                title={<TabTitleText>{t('Configuration')}</TabTitleText>}\n              >\n                {connectorTypeDetails ? (\n                  <ConfigurationPage\n                    onSave={onSave}\n                    editMode={editMode || false}\n                    updateEditMode={updateEditMode}\n                    connectorData={connectorData}\n                    connectorTypeDetails={connectorTypeDetails}\n                  />\n                ) : (\n                  <Loading />\n                )}\n              </Tab>\n            </Tabs>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport type ConnectorDetailsHeaderProps = {\n  connectorData: Connector;\n};\n\nexport const ConnectorDetailsHeader: FC<ConnectorDetailsHeaderProps> = ({\n  connectorData,\n}) => {\n  const { t } = useTranslation();\n  const basename = useBasename();\n\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // const onToggle = (isOpen: boolean) => {\n  //   setIsOpen(isOpen);\n  // };\n  // const onSelect = (\n  //   _event?: SyntheticEvent<HTMLDivElement, Event> | undefined\n  // ) => {\n  //   setIsOpen(!isOpen);\n  //   onFocus();\n  // };\n  // const onFocus = () => {\n  //   const element = document.getElementById('connector-action');\n  //   element?.focus();\n  // };\n\n  // const dropdownItems = [\n  //   <DropdownItem key=\"start action\" component=\"button\" onClick={() => {}}>\n  //     {t('Start')}\n  //   </DropdownItem>,\n  //   <DropdownItem key=\"stop action\" component=\"button\" onClick={() => {}}>\n  //     {t('Stop')}\n  //   </DropdownItem>,\n  //   <DropdownItem\n  //     key=\"delete action\"\n  //     component=\"button\"\n  //     isDisabled\n  //     onClick={() => {}}\n  //   >\n  //     {t('Delete')}\n  //   </DropdownItem>,\n  // ];\n\n  return (\n    <PageSection variant={'light'} hasShadowBottom>\n      <Breadcrumb>\n        <BreadcrumbItem to={basename?.getBasename()}>\n          {t('Connectors')}\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{connectorData?.name}</BreadcrumbItem>\n      </Breadcrumb>\n      <Level className={'pf-u-pt-md pf-u-pb-md'}>\n        <LevelItem>\n          <Level>\n            <Title headingLevel=\"h1\" className={'pf-u-pr-md'}>\n              {connectorData?.name}\n            </Title>\n            <ConnectorStatus\n              name={connectorData?.name!}\n              status={connectorData?.status?.state!}\n            />\n          </Level>\n        </LevelItem>\n        <LevelItem>\n          {/* \n          @TODO: This will be brought back \n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"connector-action\" />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          /> */}\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, {\n  FunctionComponent,\n  ReactNode,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport './ConnectorDrawer.css';\n\nexport type ConnectorDrawerProps = {\n  children: ReactNode;\n  connector?: Connector;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawer: FunctionComponent<ConnectorDrawerProps> = ({\n  children,\n  connector,\n  onClose,\n}) => {\n  return (\n    <Drawer isExpanded={connector !== undefined}>\n      <DrawerContent\n        panelContent={\n          connector ? (\n            <ConnectorDrawerPanelContent\n              name={connector.name}\n              id={connector.id!}\n              bootstrapServer={connector.kafka!.url!}\n              kafkaId={connector.kafka.id}\n              owner={connector.owner!}\n              cluster={connector.deployment_location.cluster_id!}\n              createdAt={new Date(connector.created_at!)}\n              modifiedAt={new Date(connector.modified_at!)}\n              status={connector.status?.state!}\n              onClose={onClose}\n            />\n          ) : undefined\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type ConnectorDrawerPanelContentProps = {\n  name: string;\n  id: string;\n  bootstrapServer: string;\n  kafkaId: string;\n  owner: string;\n  cluster: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  status: string;\n  onClose: () => void;\n};\n\nexport const ConnectorDrawerPanelContent: FunctionComponent<ConnectorDrawerPanelContentProps> =\n  ({\n    name,\n    id,\n    bootstrapServer,\n    kafkaId,\n    owner,\n    cluster,\n    createdAt,\n    modifiedAt,\n    status,\n    onClose,\n  }) => {\n    const { t } = useTranslation();\n    const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n\n    const selectActiveKey = (_: MouseEvent, eventKey: string | number) => {\n      setActiveTabKey(eventKey);\n    };\n\n    const textListItem = (title: string, value?: ReactNode) => (\n      <>\n        {value && (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </>\n        )}\n      </>\n    );\n\n    return (\n      <DrawerPanelContent widths={{ default: 'width_50' }}>\n        <DrawerHead>\n          <TextContent>\n            <Text\n              component={TextVariants.small}\n              className=\"connector-drawer__header-text\"\n            >\n              Connector name\n            </Text>\n\n            <Flex>\n              <FlexItem>\n                <Title\n                  headingLevel={'h2'}\n                  size={TitleSizes['xl']}\n                  className=\"connector-drawer__header-title\"\n                >\n                  {name}\n                </Title>\n              </FlexItem>\n              <FlexItem spacer={{ default: 'spacerSm' }}>\n                <ConnectorStatus name={name} status={status} />\n              </FlexItem>\n            </Flex>\n          </TextContent>\n          <DrawerActions>\n            <DrawerCloseButton onClick={onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Tabs activeKey={activeTabKey} onSelect={selectActiveKey}>\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('Details')}</TabTitleText>}\n            >\n              <div className=\"connector-drawer__tab-content\">\n                <TextContent>\n                  <TextList component={TextListVariants.dl}>\n                    {textListItem('Connector', name)}\n                    {textListItem('Connector Id', id)}\n                    {textListItem('Bootstrap server', bootstrapServer)}\n                    {textListItem('Kafka_instance', kafkaId)}\n                    {textListItem('Targeted OSD Cluster', cluster)}\n                    {textListItem('Owner', owner)}\n                    {textListItem(\n                      'Time created',\n                      <time\n                        title={t('{{date}}', { date: createdAt })}\n                        dateTime={createdAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: createdAt })}\n                      </time>\n                    )}\n                    {textListItem(\n                      'Time updated',\n                      <time\n                        title={t('{{date}}', { date: modifiedAt })}\n                        dateTime={modifiedAt.toISOString()}\n                      >\n                        {t('{{ date, ago }}', { date: modifiedAt })}\n                      </time>\n                    )}\n                  </TextList>\n                </TextContent>\n              </div>\n            </Tab>\n            {/* <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('configurations')}</TabTitleText>}\n            >\n              Configuration\n            </Tab> */}\n          </Tabs>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n  };\n","import { ConnectorStatus } from '@app/components/ConnectorStatus/ConnectorStatus';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport {\n  IActions,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport './ConnectorsTable.css';\n\nexport const ConnectorsTable: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <TableComposable\n      aria-label=\"Sortable Table\"\n      className={css('connectors-table-view__table')}\n    >\n      <Thead>\n        <Tr>\n          <Th>{t('Name')}</Th>\n          <Th>{t('Connector')}</Th>\n          {/* <Th>{t('Category')}</Th> */}\n          <Th>{t('Status')}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>{children}</Tbody>\n    </TableComposable>\n  );\n};\n\ntype ConnectorsTableRowProps = {\n  connectorId: string;\n  name: string;\n  type: string;\n  category: string;\n  status: string;\n  isSelected: boolean;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  openDetail: (target: string) => void;\n  onSelect: () => void;\n};\nexport const ConnectorsTableRow: FunctionComponent<ConnectorsTableRowProps> = ({\n  connectorId,\n  name,\n  type,\n  status,\n  isSelected,\n  canStart,\n  canStop,\n  canDelete,\n  onStart,\n  onStop,\n  onDelete,\n  openDetail,\n  onSelect,\n}) => {\n  const { t } = useTranslation();\n\n  const actions: IActions = [\n    {\n      title: 'Start',\n      onClick: onStart,\n      isDisabled: !canStart,\n    },\n    {\n      title: 'Stop',\n      onClick: onStop,\n      isDisabled: !canStop,\n    },\n    {\n      title: 'Delete',\n      onClick: onDelete,\n      isDisabled: !canDelete,\n    },\n    {\n      title: 'Edit',\n      onClick: () => openDetail('configuration'),\n      isDisabled: false,\n    },\n    {\n      isSeparator: true,\n    },\n    {\n      title: 'Details',\n      onClick: onSelect,\n    },\n  ];\n\n  return (\n    <Tr\n      onClick={(event) => {\n        // send the event only if the click didn't happen on the actions button\n        if ((event.target as any | undefined)?.type !== 'button') {\n          onSelect();\n        }\n      }}\n      className={css(\n        'pf-c-table-row__item',\n        'pf-m-selectable',\n        isSelected && 'pf-m-selected'\n      )}\n    >\n      <Td dataLabel={t('Name')}>\n        <Text\n          component={TextVariants.a}\n          isVisitedLink\n          onClick={() => openDetail('overview')}\n        >\n          {name}\n        </Text>\n      </Td>\n      <Td dataLabel={t('Type')}>{type}</Td>\n      {/* <Td dataLabel={t('Category')}>{category}</Td> */}\n      <Td dataLabel={t('Status')}>\n        <ConnectorStatus name={name} status={status} />\n      </Td>\n      <Td\n        actions={{ items: actions }}\n        data-testid={`actions-for-${connectorId}`}\n      />\n    </Tr>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  itemCount: number;\n  page: number;\n  perPage: number;\n  isCompact?: boolean;\n  onChange: (page: number, perPage: number) => void;\n};\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  page,\n  perPage,\n  isCompact = false,\n  onChange,\n}) => {\n  const defaultPerPageOptions = [\n    {\n      title: '1',\n      value: 1,\n    },\n    {\n      title: '5',\n      value: 5,\n    },\n    {\n      title: '10',\n      value: 10,\n    },\n  ];\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      page={page}\n      perPage={perPage}\n      perPageOptions={defaultPerPageOptions}\n      onSetPage={(_, page) => onChange(page, perPage)}\n      onPerPageSelect={(_, perPage) => onChange(page, perPage)}\n      variant={isCompact ? 'top' : 'bottom'}\n      isCompact={isCompact}\n    />\n  );\n};\n","import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\nexport const useDebounce = (\n  fnToDebounce: (...args: any) => any,\n  durationInMs = 200\n) => {\n  if (isNaN(durationInMs)) {\n    throw new TypeError('durationInMs for debounce should be a number');\n  }\n\n  if (typeof fnToDebounce !== 'function') {\n    throw new TypeError('fnToDebounce should be a function');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(debounce(fnToDebounce, durationInMs), [\n    fnToDebounce,\n    durationInMs,\n  ]);\n};\n","import {\n  Pagination,\n  PaginationProps,\n} from '@app/components/Pagination/Pagination';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\ntype ConnectorsToolbarProps = {} & PaginationProps;\nexport const ConnectorsToolbar: FunctionComponent<ConnectorsToolbarProps> = ({\n  itemCount,\n  page,\n  perPage,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnChange = useDebounce(onChange, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(value) =>\n              debouncedOnChange({\n                size: perPage,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n              <ToolbarFilter\n                chips={statuses}\n                deleteChip={onSelectStatus}\n                deleteChipGroup={() => setStatuses([])}\n                categoryName=\"Status\"\n              >\n                <Select\n                  variant={'checkbox'}\n                  aria-label=\"Status\"\n                  onToggle={toggleStatuses}\n                  onSelect={onSelectStatus}\n                  selections={statuses}\n                  isOpen={statusesToggled}\n                  placeholderText=\"Status\"\n                >\n                  {statusMenuItems}\n                </Select>\n              </ToolbarFilter>\n            </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <NavLink\n            className=\"pf-c-button pf-m-primary\"\n            to={'/create-connector'}\n          >\n            {t('createConnectorInstance')}\n          </NavLink>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <Pagination\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          onChange={onChange}\n          isCompact={true}\n        />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      className={'pf-u-p-md'}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport interface DialogDeleteConnectorProps {\n  connectorName: string | undefined;\n  onCancel: () => void;\n  onConfirm: () => void;\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display confirmation for connector deletion.\n */\nexport const DialogDeleteConnector: React.FunctionComponent<DialogDeleteConnectorProps> =\n  ({ connectorName, onCancel, onConfirm, showDialog }) => {\n    const { t } = useTranslation();\n    const [nameValue, setNameValue] = useState('');\n    const canDelete = nameValue === connectorName;\n\n    const onCancelDelete = () => {\n      setNameValue('');\n      onCancel();\n    };\n\n    const onConfirmDelete = () => {\n      setNameValue('');\n      onConfirm();\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        title={t('Delete connector')}\n        titleIconVariant=\"warning\"\n        isOpen={showDialog}\n        onClose={onCancel}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"danger\"\n            isDisabled={!canDelete}\n            onClick={onConfirmDelete}\n          >\n            {t('Delete')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={onCancelDelete}>\n            {t('Cancel')}\n          </Button>,\n        ]}\n      >\n        <Stack>\n          <StackItem>\n            <Trans>\n              Connector <strong>{{ connectorName }}</strong> will be deleted.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <Trans>\n              Type <strong>{{ connectorName }}</strong> to confirm the deletion.\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <TextInput\n              value={nameValue}\n              type=\"text\"\n              onChange={setNameValue}\n              aria-label=\"name input\"\n            />\n          </StackItem>\n        </Stack>\n      </Modal>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const EmptyStateGenericError: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} />\n      <Title headingLevel={'h1'} size={TitleSizes['lg']}>\n        {t('Something went wrong')}\n      </Title>\n      <EmptyStateBody>\n        {t('There was a problem processing the request. Please try again.')}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport SpaceShuttleIcon from '@patternfly/react-icons/dist/js/icons/space-shuttle-icon';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateGettingStartedProps = {\n  onHelp: () => void;\n  onCreate: () => void;\n};\n\nexport const EmptyStateGettingStarted: FunctionComponent<EmptyStateGettingStartedProps> =\n  ({ onHelp, onCreate }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('Welcome to Managed Connectors')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            For help getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n        <Button variant={'primary'} onClick={onCreate}>\n          {t('Create Connector')}\n        </Button>\n      </EmptyState>\n    );\n  };\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  TitleSizes,\n  EmptyStateBody,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype NoMatchFoundProps = {\n  onClear: () => void;\n};\nexport const EmptyStateNoMatchesFound: FunctionComponent<NoMatchFoundProps> = ({\n  onClear,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel={'h2'} size={TitleSizes['xl']}>\n        {t('No results found')}\n      </Title>\n      <EmptyStateBody>\n        <Trans>\n          No results match the filter criteria.{' '}\n          <Button\n            variant={ButtonVariant.link}\n            isSmall\n            isInline\n            onClick={onClear}\n          >\n            {t('Clear all filters')}\n          </Button>{' '}\n          to show results.\n        </Trans>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { deleteConnector, startConnector, stopConnector } from '@apis/api';\nimport { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRefFrom } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  connector: Connector;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    connector: {},\n  } as Context,\n  {\n    events: {\n      'connector.start': () => ({}),\n      'connector.stop': () => ({}),\n      'connector.remove': () => ({}),\n      'connector.select': () => ({}),\n      'connector.actionSuccess': (payload: { connector: Connector }) => payload,\n      'connector.actionError': (payload: { error: string }) => payload,\n    },\n    actions: {\n      notifySuccess: () => ({}),\n      notifyError: () => ({}),\n      notifySelect: ({ connector }: { connector: Connector }) => ({\n        connector,\n      }),\n    },\n  }\n);\n\nconst updateState = model.assign(\n  (_context, event) => ({\n    connector: event.connector,\n  }),\n  'connector.actionSuccess'\n);\n\nexport const connectorMachine = model.createMachine(\n  {\n    id: 'connector',\n    initial: 'verify',\n    context: model.initialContext,\n    states: {\n      verify: {\n        always: [\n          { target: 'ready', cond: 'isReady' },\n          { target: 'stopped', cond: 'isStopped' },\n          { target: 'deleted', cond: 'isDeleted' },\n        ],\n      },\n      ready: {\n        on: {\n          'connector.stop': 'stoppingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      stopped: {\n        on: {\n          'connector.start': 'startingConnector',\n          'connector.remove': 'deletingConnector',\n        },\n      },\n      deleted: {},\n\n      startingConnector: {\n        invoke: {\n          id: 'startingConnectorCb',\n          src: (context) =>\n            startConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: [updateState, 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      stoppingConnector: {\n        invoke: {\n          id: 'stoppingConnectorCb',\n          src: (context) =>\n            stopConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'verify',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n      deletingConnector: {\n        invoke: {\n          id: 'deletingConnectorCb',\n          src: (context) =>\n            deleteConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              connector: context.connector,\n            }),\n        },\n        on: {\n          'connector.actionSuccess': {\n            target: 'deleted',\n            actions: ['updateState', 'notifySuccess'],\n          },\n          'connector.actionError': {\n            target: 'verify',\n            actions: 'notifyError',\n          },\n        },\n      },\n    },\n    on: {\n      'connector.select': {\n        actions: 'notifySelect',\n      },\n    },\n  },\n  {\n    guards: {\n      isReady: (context) => context.connector.desired_state === 'ready',\n      isStopped: (context) => context.connector.desired_state === 'stopped',\n      isDeleted: (context) => context.connector.desired_state === 'deleted',\n    },\n    actions: {\n      notifySuccess: sendParent('actionSuccess'),\n      notifyError: sendParent('actionFailure'),\n      notifySelect: sendParent(({ connector }) => ({\n        type: 'selectConnector',\n        connector,\n      })),\n    },\n  }\n);\n\nexport const makeConnectorMachine = (context: Context) =>\n  connectorMachine.withContext(context);\n\nexport type ConnectorMachineActorRef = ActorRefFrom<typeof connectorMachine>;\n\nexport type useConnectorReturnType = {\n  connector: Connector;\n  canStart: boolean;\n  canStop: boolean;\n  canDelete: boolean;\n  onStart: () => void;\n  onStop: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n};\nexport const useConnector = (\n  ref: ConnectorMachineActorRef\n): useConnectorReturnType => {\n  const { connector, canStart, canStop, canDelete } = useSelector(\n    ref,\n    useCallback(\n      (state: typeof ref.state) => ({\n        connector: state.context.connector,\n        canStart:\n          connectorMachine.transition(state, 'connector.start').changed ===\n          true,\n        canStop:\n          connectorMachine.transition(state, 'connector.stop').changed === true,\n        canDelete:\n          connectorMachine.transition(state, 'connector.remove').changed ===\n          true,\n      }),\n      [ref]\n    )\n  );\n  const onStart = useCallback(\n    () => ref.send({ type: 'connector.start' }),\n    [ref]\n  );\n  const onStop = useCallback(() => ref.send({ type: 'connector.stop' }), [ref]);\n  const onDelete = useCallback(\n    () => ref.send({ type: 'connector.remove' }),\n    [ref]\n  );\n  const onSelect = useCallback(\n    () => ref.send({ type: 'connector.select' }),\n    [ref]\n  );\n  return {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  };\n};\n","import { useCallback } from 'react';\n\nimport { useSelector } from '@xstate/react';\nimport { ActorRef, ActorRefFrom, Sender, spawn } from 'xstate';\nimport { pure, sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nexport type ApiErrorResponse = { page: number; error: string };\nexport type ApiSuccessResponse<RawDataType> = {\n  items: Array<RawDataType>;\n  page: number;\n  size: number;\n  total: number;\n};\nexport type ApiCallback<RawDataType, QueryType> = (\n  request: PaginatedApiRequest<QueryType>,\n  onSuccess: (payload: ApiSuccessResponse<RawDataType>) => void,\n  onError: (payload: ApiErrorResponse) => void\n) => () => void;\n\nexport type PaginatedApiRequest<QueryType> = {\n  page: number;\n  size: number;\n  query?: QueryType;\n};\nexport type PaginatedApiResponse<DataType> = {\n  total: number;\n  items?: Array<DataType>;\n  error?: string;\n};\nexport type PaginatedMachineContext<RawDataType, QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  pollingEnabled: boolean;\n  actor?: ActorRef<any>;\n  dataTransformer: (response: RawDataType) => DataType;\n  onBeforeSetResponse?: (previousData: DataType[] | undefined) => void;\n};\n\nexport const getPaginatedApiMachineEvents = <\n  RawDataType,\n  QueryType,\n  DataType\n>() => ({\n  'api.refresh': () => ({}),\n  'api.nextPage': () => ({}),\n  'api.prevPage': () => ({}),\n  'api.query': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.setResponse': (payload: ApiSuccessResponse<RawDataType>) => payload,\n  'api.setError': (payload: ApiErrorResponse) => payload,\n\n  // notifyParent\n  'api.ready': () => ({}),\n  'api.loading': (payload: PaginatedApiRequest<QueryType>) => payload,\n  'api.success': (payload: ApiSuccessResponse<DataType>) => payload,\n  'api.error': (payload: { error: string }) => payload,\n});\n\nexport function makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n  service: ApiCallback<RawDataType, QueryType>,\n  dataTransformer: (response: RawDataType) => DataType,\n  options?: {\n    pollingEnabled?: boolean;\n    onBeforeSetResponse?: (previousResponse: DataType[] | undefined) => void;\n  }\n) {\n  const model = createModel(\n    {\n      request: {\n        page: 1,\n        size: 10,\n      },\n      response: undefined,\n      pollingEnabled: options?.pollingEnabled || false,\n      onBeforeSetResponse: options?.onBeforeSetResponse,\n      dataTransformer,\n    } as PaginatedMachineContext<RawDataType, QueryType, DataType>,\n    {\n      events: {\n        ...getPaginatedApiMachineEvents<RawDataType, QueryType, DataType>(),\n      },\n      actions: {\n        notifyReady: () => ({}),\n        notifyLoading: () => ({}),\n        notifySuccess: () => ({}),\n        notifyError: () => ({}),\n        forwardUnknownEventsToParent: () => ({}),\n      },\n    }\n  );\n\n  const setResponse = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    if (context.onBeforeSetResponse) {\n      context.onBeforeSetResponse(context.response?.items);\n    }\n    return {\n      response: {\n        items: e.items?.map((i) => context.dataTransformer(i)),\n        total: e.total,\n        error: undefined,\n      },\n    };\n  }, 'api.setResponse');\n\n  const fetch = model.assign((context) => {\n    if (context.actor && context.actor.stop) {\n      context.actor.stop();\n    }\n    // eslint-disable-next-line xstate/spawn-usage\n    const actor = spawn(callApi(context));\n    return { actor };\n  });\n  const setError = model.assign((context, e) => {\n    if (e.page !== context.request.page) return {};\n    return {\n      response: {\n        items: context.response?.items || [],\n        total: context.response?.total || 0,\n        error: e.error,\n      },\n    };\n  }, 'api.setError');\n  const increasePage = model.assign((context) => {\n    return {\n      request: {\n        ...context.request,\n        page: context.request.page + 1,\n      },\n    };\n  }, 'api.nextPage');\n  const decreasePage = model.assign((context) => {\n    return {\n      request: { ...context.request, page: context.request.page - 1 },\n    };\n  }, 'api.prevPage');\n  const query = model.assign((context, event) => {\n    const { page, size, query } = event;\n    return {\n      request: {\n        page: page || context.request.page,\n        size: size || context.request.size,\n        query,\n      },\n    };\n  }, 'api.query');\n\n  const callApi =\n    (context: PaginatedMachineContext<RawDataType, QueryType, DataType>) =>\n    (callback: Sender<any>) => {\n      return service(\n        context.request!,\n        (payload: ApiSuccessResponse<RawDataType>) =>\n          callback(model.events['api.setResponse'](payload)),\n        (payload: ApiErrorResponse) =>\n          callback(model.events['api.setError'](payload))\n      );\n    };\n\n  return model.createMachine(\n    {\n      id: 'paginatedApiMachine',\n      context: model.initialContext,\n      type: 'parallel',\n      states: {\n        api: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: model.actions.notifyReady(),\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n              },\n            },\n            success: {\n              always: [\n                { target: 'queryEmpty', cond: 'isQueryEmpty' },\n                { target: 'queryResults', cond: 'isQuerySuccesful' },\n                { target: 'empty', cond: 'isTotalZero' },\n                { target: 'results' },\n              ],\n            },\n            queryEmpty: {\n              tags: 'queryEmpty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            queryResults: {\n              tags: 'queryResults',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            empty: {\n              tags: 'empty',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            results: {\n              tags: 'results',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.nextPage': {\n                  target: 'loading',\n                  actions: increasePage,\n                  cond: 'isNotLastPage',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n              },\n            },\n            error: {\n              tags: 'error',\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.refresh': {\n                  target: 'loading',\n                },\n                'api.prevPage': {\n                  target: 'loading',\n                  actions: decreasePage,\n                  cond: 'isNotFirstPage',\n                },\n              },\n            },\n            loading: {\n              tags: ['loading'],\n              entry: [model.actions.notifyLoading(), fetch],\n              on: {\n                'api.query': {\n                  target: 'loading',\n                  actions: query,\n                },\n                'api.setResponse': {\n                  target: 'success',\n                  actions: [setResponse, model.actions.notifySuccess()],\n                },\n                'api.setError': {\n                  target: 'error',\n                  actions: [setError, model.actions.notifyError()],\n                },\n              },\n            },\n          },\n          on: {\n            '*': {\n              actions: 'forwardUnknownEventsToParent',\n            },\n          },\n        },\n        polling: {\n          entry: fetch,\n          on: {\n            'api.setResponse': {\n              actions: setResponse,\n            },\n          },\n          after: {\n            INTERVAL: {\n              cond: 'isPollingEnabled',\n              target: 'polling',\n            },\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        INTERVAL: 5000,\n      },\n      actions: {\n        notifyReady: sendParent({\n          type: 'api.ready',\n        }),\n        notifySuccess: sendParent((context) => ({\n          type: 'api.success',\n          ...context.response,\n        })),\n        notifyError: sendParent((context) => ({\n          type: 'api.error',\n          error: context.response?.error,\n        })),\n        notifyLoading: sendParent((context) => ({\n          type: 'api.loading',\n          ...context.request,\n        })),\n        forwardUnknownEventsToParent: pure((_context, event) => {\n          if (Object.keys(model.events).includes(event.type) === false) {\n            return sendParent((_context, _event, meta) => {\n              return meta._event.data;\n            });\n          }\n          return [];\n        }),\n      },\n      guards: {\n        isNotFirstPage: (context) =>\n          context.response !== undefined && context.request.page > 1,\n        isNotLastPage: (context) =>\n          context.response !== undefined &&\n          context.request.size > 0 &&\n          context.request.page <\n            Math.ceil(context.response.total / context.request.size),\n        isTotalZero: (context) => context.response?.total === 0,\n        isQuerySuccesful: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total > 0,\n        isQueryEmpty: (context) =>\n          context.request.query !== undefined &&\n          context.response !== undefined &&\n          context.response?.total === 0,\n        isPollingEnabled: (context) => context.pollingEnabled,\n      },\n    }\n  );\n}\n\n// https://stackoverflow.com/questions/50321419/typescript-returntype-of-generic-function/64919133#64919133\nclass Wrapper<RawDataType, QueryType, DataType> {\n  wrapped(\n    service: ApiCallback<RawDataType, QueryType>,\n    dataTransformer: (response: RawDataType) => DataType\n  ) {\n    return makePaginatedApiMachine<RawDataType, QueryType, DataType>(\n      service,\n      dataTransformer\n    );\n  }\n}\n\nexport type PaginatedApiActorType<RawDataType, QueryType, DataType> =\n  ActorRefFrom<\n    ReturnType<Wrapper<RawDataType, QueryType, DataType>['wrapped']>\n  >;\n\n// These are not _writable_ booleans, they are derived from the machine state!\n// https://discord.com/channels/795785288994652170/799416943324823592/847466843290730527\nexport type usePaginationReturnValue<QueryType, DataType> = {\n  request: PaginatedApiRequest<QueryType>;\n  response?: PaginatedApiResponse<DataType>;\n  loading: boolean;\n  queryEmpty: boolean;\n  queryResults: boolean;\n  noResults: boolean;\n  results: boolean;\n  error: boolean;\n  firstRequest: boolean;\n};\nexport const usePagination = <RawDataType, QueryType, DataType>(\n  actor: PaginatedApiActorType<RawDataType, QueryType, DataType>\n): usePaginationReturnValue<QueryType, DataType> => {\n  return useSelector(\n    actor,\n    useCallback(\n      (\n        state: typeof actor.state\n      ): usePaginationReturnValue<QueryType, DataType> => {\n        return {\n          request: state.context.request,\n          response: state.context.response,\n          loading: state.hasTag('loading'),\n          queryEmpty: state.hasTag('queryEmpty'),\n          queryResults: state.hasTag('queryResults'),\n          noResults: state.hasTag('empty'),\n          results: state.hasTag('results'),\n          error: state.hasTag('error'),\n          firstRequest: state.context.response === undefined,\n        };\n      },\n      [actor]\n    )\n  );\n};\n","import { fetchConnectors } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { InterpreterFrom, send, spawn } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorMachineActorRef,\n  makeConnectorMachine,\n} from './Connector.machine';\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  selectedConnector?: Connector;\n  onError?: (error: string) => void;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    selectedConnector: undefined,\n  } as Context,\n  {\n    events: {\n      ...getPaginatedApiMachineEvents<\n        Connector,\n        {},\n        ConnectorMachineActorRef\n      >(),\n      selectConnector: (payload: { connector: Connector }) => payload,\n      deselectConnector: () => ({}),\n    },\n    actions: {\n      notifyError: () => ({}),\n    },\n  }\n);\n\nconst setSelectedConnector = model.assign(\n  (_context, event) => ({\n    selectedConnector: event.connector,\n  }),\n  'selectConnector'\n);\nconst unsetSelectedConnector = model.assign(\n  (_context) => ({\n    selectedConnector: undefined,\n  }),\n  'deselectConnector'\n);\n\nexport const connectorsPageMachine = model.createMachine(\n  {\n    id: 'connectors',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  Connector,\n                  {},\n                  ConnectorMachineActorRef\n                >(\n                  fetchConnectors(context),\n                  (connector) =>\n                    // eslint-disable-next-line xstate/spawn-usage\n                    spawn(\n                      makeConnectorMachine({\n                        accessToken: context.accessToken,\n                        connectorsApiBasePath: context.connectorsApiBasePath,\n                        connector,\n                      }),\n                      `connector-${connector.id}`\n                    ),\n                  {\n                    pollingEnabled: true,\n                    onBeforeSetResponse: (data) => {\n                      if (data) {\n                        data.forEach((d) => {\n                          if (d && d.stop) {\n                            d.stop();\n                          }\n                        });\n                      }\n                    },\n                  }\n                ),\n            },\n            states: {\n              idle: {\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n              },\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.error': {\n                actions: 'notifyError',\n              },\n              selectConnector: {\n                actions: setSelectedConnector,\n              },\n              deselectConnector: {\n                actions: unsetSelectedConnector,\n              },\n            },\n          },\n          listing: {},\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      notifyError: (context, event) => {\n        console.log(context, event);\n        if (event.type === 'api.error' && context.onError) {\n          context.onError(event.error);\n        }\n      },\n    },\n  }\n);\n\nexport type ConnectorsMachineInterpretType = InterpreterFrom<\n  typeof connectorsPageMachine\n>;\n","import { ConnectorMachineActorRef } from '@app/machines/Connector.machine';\nimport {\n  connectorsPageMachine,\n  ConnectorsMachineInterpretType,\n} from '@app/machines/ConnectorsPage.machine';\nimport {\n  usePaginationReturnValue,\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\n\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nconst ConnectorsPageContext =\n  createContext<ConnectorsMachineInterpretType | null>(null);\ntype ConnectorsPageProviderPropsType = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  onError: (error: string) => void;\n};\n\nexport const ConnectorsPageProvider: FunctionComponent<ConnectorsPageProviderPropsType> =\n  ({ children, accessToken, connectorsApiBasePath, onError }) => {\n    const service = useInterpret(connectorsPageMachine, {\n      context: { accessToken, connectorsApiBasePath, onError },\n      devTools: true,\n    });\n    return (\n      <ConnectorsPageContext.Provider value={service}>\n        {children}\n      </ConnectorsPageContext.Provider>\n    );\n  };\n\nexport const useConnectorsPageMachineService =\n  (): ConnectorsMachineInterpretType => {\n    const service = useContext(ConnectorsPageContext);\n    if (!service) {\n      throw new Error(\n        `useConnectorsMachineService() must be used in a child of <ConnectorsMachineProvider>`\n      );\n    }\n    return service;\n  };\n\nexport const useConnectorsPageIsReady = () => {\n  const service = useConnectorsPageMachineService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      [service]\n    )\n  );\n};\n\ntype useConnectorsMachineReturnType = usePaginationReturnValue<\n  {},\n  ConnectorMachineActorRef\n> & {\n  selectedConnector: Connector | undefined;\n  deselectConnector: () => void;\n  query: (props: PaginatedApiRequest<{}>) => void;\n};\n\nexport const useConnectorsMachine = (): useConnectorsMachineReturnType => {\n  const service = useConnectorsPageMachineService();\n\n  const apiData = usePagination<Connector, {}, ConnectorMachineActorRef>(\n    service.state.children[PAGINATED_MACHINE_ID] as PaginatedApiActorType<\n      Connector,\n      {},\n      ConnectorMachineActorRef\n    >\n  );\n  const { selectedConnector } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        selectedConnector: state.context.selectedConnector,\n      }),\n      [service]\n    )\n  );\n\n  const deselectConnector = useCallback(() => {\n    service.send({ type: 'deselectConnector' });\n  }, [service]);\n\n  const query = useCallback(\n    (props: PaginatedApiRequest<{}>) => {\n      service.send({ type: 'api.query', ...props });\n    },\n    [service]\n  );\n\n  return {\n    ...apiData,\n    selectedConnector,\n    deselectConnector,\n    query,\n  };\n};\n","import { ConnectorDrawer } from '@app/components/ConnectorDrawer/ConnectorDrawer';\nimport {\n  ConnectorsTable,\n  ConnectorsTableRow,\n} from '@app/components/ConnectorsTable/ConnectorsTable';\nimport { ConnectorsToolbar } from '@app/components/ConnectorsToolbar/ConnectorsToolbar';\nimport { DialogDeleteConnector } from '@app/components/DialogDeleteConnector/DialogDeleteConnector';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateGettingStarted } from '@app/components/EmptyStateGettingStarted/EmptyStateGettingStarted';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport {\n  ConnectorMachineActorRef,\n  useConnector,\n} from '@app/machines/Connector.machine';\nimport { useCos } from '@context/CosContext';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, PageSection, TextContent, Title } from '@patternfly/react-core';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\nimport { Connector } from '@rhoas/connector-management-sdk';\n\nimport {\n  ConnectorsPageProvider,\n  useConnectorsMachine,\n  useConnectorsPageIsReady,\n} from './ConnectorsPageContext';\n\ntype ConnectedConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\nexport const ConnectedConnectorsPage: FunctionComponent<ConnectedConnectorsPageProps> =\n  ({ onCreateConnector, onConnectorDetail }) => {\n    const { t } = useTranslation();\n    const alert = useAlert();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const onError = useCallback(\n      (description: string) => {\n        alert?.addAlert({\n          id: 'connectors-table-error',\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description,\n        });\n      },\n      [alert, t]\n    );\n\n    return (\n      <ConnectorsPageProvider\n        accessToken={getToken}\n        connectorsApiBasePath={connectorsApiBasePath}\n        onError={onError}\n      >\n        <ConnectorsPage\n          onCreateConnector={onCreateConnector}\n          onConnectorDetail={onConnectorDetail}\n        />\n      </ConnectorsPageProvider>\n    );\n  };\n\nexport type ConnectorsPageProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectorsPage: FunctionComponent<ConnectorsPageProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n}: ConnectorsPageProps) => {\n  const isReady = useConnectorsPageIsReady();\n  return isReady ? (\n    <ConnectorsPageBody\n      onCreateConnector={onCreateConnector}\n      onConnectorDetail={onConnectorDetail}\n    />\n  ) : (\n    <Loading />\n  );\n};\n\nexport type ConnectorsPageBodyProps = {\n  onCreateConnector: () => void;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectorsPageBody: FunctionComponent<ConnectorsPageBodyProps> = ({\n  onCreateConnector,\n  onConnectorDetail,\n}: ConnectorsPageBodyProps) => {\n  const {\n    loading,\n    error,\n    noResults,\n    queryEmpty,\n    firstRequest,\n    request,\n    response,\n    selectedConnector,\n    deselectConnector,\n    query,\n  } = useConnectorsMachine();\n\n  switch (true) {\n    case firstRequest:\n      return <Loading />;\n    case queryEmpty:\n      return (\n        <EmptyStateNoMatchesFound\n          onClear={() => query({ page: 1, size: 10 })}\n        />\n      );\n    case loading:\n      return (\n        <>\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <Card>\n              <ConnectorsToolbar\n                itemCount={response?.total || 0}\n                page={request.page}\n                perPage={request.size}\n                onChange={(page, size) => query({ page, size })}\n              />\n              <Loading />\n            </Card>\n          </PageSection>\n        </>\n      );\n    case noResults:\n      return (\n        <EmptyStateGettingStarted\n          onCreate={onCreateConnector}\n          onHelp={function (): void {\n            throw new Error('Function not implemented.');\n          }}\n        />\n      );\n    case error:\n      return <EmptyStateGenericError />;\n    default:\n      return (\n        <ConnectorDrawer\n          connector={selectedConnector}\n          onClose={deselectConnector}\n        >\n          <PageSection variant={'light'}>\n            <ConnectorsPageTitle />\n          </PageSection>\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <ConnectedTable onConnectorDetail={onConnectorDetail} />\n          </PageSection>\n        </ConnectorDrawer>\n      );\n  }\n};\n\nconst ConnectorsPageTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">{t('Connectors')}</Title>\n    </TextContent>\n  );\n};\nexport type ConnectorsTableProps = {\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\n\nexport const ConnectedTable: FunctionComponent<ConnectorsTableProps> = ({\n  onConnectorDetail,\n}) => {\n  const { request, response, selectedConnector, query } =\n    useConnectorsMachine();\n  return (\n    <Card className={'pf-u-pb-xl'}>\n      <ConnectorsToolbar\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n      />\n      <div className={'pf-u-p-md'}>\n        <ConnectorsTable>\n          {response?.items?.map((ref) => (\n            <ConnectedRow\n              connectorRef={ref}\n              key={ref.id}\n              selectedConnector={selectedConnector}\n              onConnectorDetail={onConnectorDetail}\n            />\n          ))}\n        </ConnectorsTable>\n      </div>\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => query({ page, size })}\n        isCompact={false}\n      />\n    </Card>\n  );\n};\n\ntype ConnectedRowProps = {\n  connectorRef: ConnectorMachineActorRef;\n  selectedConnector?: Connector;\n  onConnectorDetail: (id: string, goToConnectorDetails: string) => void;\n};\nconst ConnectedRow: FunctionComponent<ConnectedRowProps> = ({\n  connectorRef,\n  selectedConnector,\n  onConnectorDetail,\n}) => {\n  const {\n    connector,\n    canStart,\n    canStop,\n    canDelete,\n    onStart,\n    onStop,\n    onDelete,\n    onSelect,\n  } = useConnector(connectorRef);\n\n  const [showDeleteConnectorConfirm, setShowDeleteConnectorConfirm] =\n    useState(false);\n\n  const editConnector = (targetTab: string) => {\n    onConnectorDetail(connector.id!, targetTab);\n  };\n\n  const doCancelDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n  };\n\n  const doDeleteConnector = () => {\n    setShowDeleteConnectorConfirm(false);\n    onDelete();\n  };\n\n  return (\n    <>\n      <DialogDeleteConnector\n        connectorName={connector.name}\n        showDialog={showDeleteConnectorConfirm}\n        onCancel={doCancelDeleteConnector}\n        onConfirm={doDeleteConnector}\n      />\n      <ConnectorsTableRow\n        connectorId={connector.id!}\n        name={connector.name!}\n        type={connector.connector_type_id!}\n        category={'TODO: MISSING'}\n        status={connector.status?.state!}\n        isSelected={selectedConnector?.id === connector.id}\n        canStart={canStart}\n        canStop={canStop}\n        canDelete={canDelete}\n        onStart={onStart}\n        onStop={onStop}\n        onSelect={onSelect}\n        openDetail={editConnector}\n        onDelete={() => setShowDeleteConnectorConfirm(true)}\n      />\n    </>\n  );\n};\n","import React, { Component, HTMLProps, ReactNode } from 'react';\n\nimport {\n  Button,\n  ButtonVariant,\n  KEY_CODES,\n  Modal,\n  ModalVariant,\n  PickOptional,\n  WizardContextProvider,\n  WizardHeader,\n  WizardNav,\n  WizardNavItem,\n  WizardNavItemProps,\n  WizardToggle,\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nexport function getFlattenedSteps(steps: WizardStep[]): WizardStep[] {\n  const flattenedSteps: WizardStep[] = [];\n  for (const step of steps) {\n    if (step.steps) {\n      for (const childStep of step.steps) {\n        flattenedSteps.push(childStep);\n      }\n    } else {\n      flattenedSteps.push(step);\n    }\n  }\n  return flattenedSteps;\n}\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?:\n    | HTMLProps<HTMLButtonElement | HTMLAnchorElement>\n    | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: ReactNode },\n  prevStep: { prevId?: string | number; prevName: ReactNode }\n) => void;\n\nexport interface WizardProps extends HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: ReactNode;\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  currentStep: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext: () => void;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack: () => void;\n  goToStep: (index: number) => void;\n  goToStepById: (id: number | string) => void;\n  goToStepByName: (name: string) => void;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n}\n\ninterface WizardState {\n  isNavOpen: boolean;\n}\n\nexport class UncontrolledWizard extends Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: undefined,\n    description: '',\n    className: '',\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: undefined,\n    navAriaLabelledBy: undefined,\n    mainAriaLabel: undefined,\n    mainAriaLabelledBy: undefined,\n    hasNoBodyPadding: false,\n    onGoToStep: undefined,\n    width: undefined,\n    height: undefined,\n    footer: undefined,\n    appendTo: undefined,\n    isOpen: undefined,\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = UncontrolledWizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId =\n      props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      isNavOpen: false,\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen && this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  // private goToStep = (step: number): void => {\n  //   const { onGoToStep } = this.props;\n  //   const { currentStep } = this.state;\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   const maxSteps = flattenedSteps.length;\n  //   if (step < 1) {\n  //     step = 1;\n  //   } else if (step > maxSteps) {\n  //     step = maxSteps;\n  //   }\n  //   this.setState({ currentStep: step, isNavOpen: false });\n  //   const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n  //   const { id, name } = flattenedSteps[step - 1];\n  //   return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  // };\n\n  // private goToStepById = (stepId: number | string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].id === stepId) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  // private goToStepByName = (stepName: string): void => {\n  //   const flattenedSteps = this.getFlattenedSteps();\n  //   let step;\n  //   for (let i = 0; i < flattenedSteps.length; i++) {\n  //     if (flattenedSteps[i].name === stepName) {\n  //       step = i + 1;\n  //       break;\n  //     }\n  //   }\n  //   if (step) {\n  //     this.setState({ currentStep: step });\n  //   }\n  // };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    return getFlattenedSteps(steps);\n  };\n\n  private getFlattenedStepsIndex = (\n    flattenedSteps: WizardStep[],\n    stepName: ReactNode\n  ): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps!.length; j++) {\n          steps[i].steps![j] = Object.assign(\n            { canJumpTo: true },\n            steps[i].steps![j]\n          );\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      goToStep,\n      goToStepById,\n      goToStepByName,\n      className,\n      steps,\n      currentStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep =\n      flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid =\n      activeStep && activeStep.enableNext !== undefined\n        ? activeStep.enableNext\n        : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby':\n          (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId),\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return null;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(\n                flattenedSteps,\n                step.steps[0].name\n              );\n              return (\n                <WizardNavItem\n                  key={index}\n                  content={step.name}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map(\n                      (childStep: WizardStep, indexChild: number) => {\n                        if (childStep.isFinishedStep) {\n                          // Don't show finished step in the side nav\n                          return null;\n                        }\n                        navItemStep = this.getFlattenedStepsIndex(\n                          flattenedSteps,\n                          childStep.name\n                        );\n                        enabled = childStep.canJumpTo;\n                        return (\n                          <WizardNavItem\n                            key={`child_${indexChild}`}\n                            content={childStep.name}\n                            isCurrent={activeStep.name === childStep.name}\n                            isDisabled={!enabled}\n                            step={navItemStep}\n                            onNavItemClick={goToStep}\n                          />\n                        );\n                      }\n                    )}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(\n              flattenedSteps,\n              step.name\n            );\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById,\n      goToStepByName,\n      onNext,\n      onBack,\n      onClose,\n      activeStep,\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {}),\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(\n            styles.wizard,\n            activeStep && activeStep.isFinishedStep && 'pf-m-finished',\n            className\n          )}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={\n              (title || mainAriaLabelledBy) &&\n              (mainAriaLabelledBy || this.titleId)\n            }\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={(isNavOpen) => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding!}\n          >\n            {footer || (\n              <footer className={css(styles.wizardFooter)}>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={onNext}\n                  isDisabled={!isValid}\n                >\n                  {(activeStep && activeStep.nextButtonText) || nextButtonText}\n                </Button>\n                {!activeStep.hideBackButton && (\n                  <Button\n                    variant={ButtonVariant.secondary}\n                    onClick={onBack}\n                    className={css(firstStep && 'pf-m-disabled')}\n                  >\n                    {backButtonText}\n                  </Button>\n                )}\n                {!activeStep.hideCancelButton && (\n                  <div className={styles.wizardFooterCancel}>\n                    <Button variant={ButtonVariant.link} onClick={onClose}>\n                      {cancelButtonText}\n                    </Button>\n                  </div>\n                )}\n              </footer>\n              // <WizardFooterInternal\n              //   onNext={this.onNext}\n              //   onBack={this.onBack}\n              //   onClose={onClose}\n              //   isValid={isValid}\n              //   firstStep={firstStep}\n              //   activeStep={activeStep}\n              //   nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n              //   backButtonText={backButtonText}\n              //   cancelButtonText={cancelButtonText}\n              // />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n","import { UserProvidedServiceAccount } from '@apis/api';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\ntype Context = {\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n};\n\nconst model = createModel(\n  {\n    name: '',\n  } as Context,\n  {\n    events: {\n      setName: (payload: { name: string }) => payload,\n      setServiceAccount: (payload: {\n        serviceAccount: UserProvidedServiceAccount | undefined;\n      }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\nconst setName = model.assign(\n  {\n    name: (_, event) => event.name,\n  },\n  'setName'\n);\nconst setServiceAccount = model.assign(\n  (_, event) => ({\n    userServiceAccount: event.serviceAccount,\n  }),\n  'setServiceAccount'\n);\n\nexport const basicMachine = model.createMachine(\n  {\n    id: 'configureBasic',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isBasicConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setName: {\n            target: 'verify',\n            actions: setName,\n          },\n          setServiceAccount: {\n            target: 'verify',\n            actions: setServiceAccount,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isBasicConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          name: (context: Context) => context.name,\n          userServiceAccount: (context: Context) => context.userServiceAccount,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId.length > 0 &&\n            context.userServiceAccount.clientSecret.length > 0,\n    },\n  }\n);\n\nexport type BasicMachineActorRef = ActorRefFrom<typeof basicMachine>;\n","import { fetchClusters } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorCluster } from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorCluster>;\n  selectedCluster?: ConnectorCluster;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    clusters: undefined,\n    selectedCluster: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectCluster: (payload: { selectedCluster: string }) => ({\n        ...payload,\n      }),\n      deselectCluster: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<ConnectorCluster, {}, ConnectorCluster>(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectCluster = model.assign(\n  {\n    selectedCluster: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedCluster\n      );\n    },\n  },\n  'selectCluster'\n);\nconst reset = model.assign(\n  {\n    selectedCluster: undefined,\n  },\n  'deselectCluster'\n);\n\nexport const clustersMachine = model.createMachine(\n  {\n    id: 'clusters',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<ConnectorCluster, {}, ConnectorCluster>(\n                  fetchClusters(context),\n                  (i) => i\n                ),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noClusterSelected' },\n                  { target: 'valid', cond: 'clusterSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectCluster: {\n                    target: 'valid',\n                    actions: selectCluster,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectCluster: {\n                    target: 'verify',\n                    actions: selectCluster,\n                    cond: (_, event) => event.selectedCluster !== undefined,\n                  },\n                  deselectCluster: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'clusterSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedCluster: (context: Context) => context.selectedCluster,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      clusterSelected: (context) => context.selectedCluster !== undefined,\n      noClusterSelected: (context) => context.selectedCluster === undefined,\n    },\n  }\n);\n\nexport type ClustersMachineActorRef = ActorRefFrom<typeof clustersMachine>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  steps: string[];\n  activeStep: number;\n  isActiveStepValid: boolean;\n  configuration: unknown;\n};\n\nconst model = createModel(\n  {\n    connector: {\n      id: 'something',\n      name: 'something',\n      version: '0.1',\n      schema: {},\n    },\n    steps: [],\n    activeStep: 0,\n    isActiveStepValid: false,\n    configuration: undefined,\n  } as Context,\n  {\n    events: {\n      entry: () => ({}),\n      change: ({\n        configuration,\n        isValid,\n      }: {\n        configuration: unknown;\n        isValid: boolean;\n      }) => ({ configuration, isValid }),\n      next: () => ({}),\n      prev: () => ({}),\n      complete: () => ({}),\n    },\n    actions: {\n      changedStep: () => ({}),\n    },\n  }\n);\n\nconst nextStep = model.assign(\n  (context) => ({\n    activeStep: Math.min(context.activeStep + 1, context.steps.length - 1),\n    isActiveStepValid: false,\n  }),\n  'next'\n);\nconst prevStep = model.assign(\n  (context) => ({\n    activeStep: Math.max(context.activeStep - 1, 0),\n    isActiveStepValid: false,\n  }),\n  'prev'\n);\nconst change = model.assign(\n  (_, event) => ({\n    configuration: event.configuration,\n    isActiveStepValid: event.isValid,\n  }),\n  'change'\n);\n\nexport const configuratorMachine = model.createMachine(\n  {\n    id: 'configurator',\n    initial: 'configuring',\n    context: {\n      connector: {\n        id: 'something',\n        name: 'something',\n        version: '0.1',\n        schema: {},\n      },\n      steps: ['one', 'two', 'three'],\n      activeStep: 0,\n      isActiveStepValid: false,\n      configuration: undefined,\n    },\n    states: {\n      configuring: {\n        entry: sendParent('isInvalid'),\n        always: [{ target: 'valid', cond: 'activeStepValid' }],\n      },\n      valid: {\n        id: 'valid',\n        initial: 'determineStep',\n        entry: sendParent('isValid'),\n        states: {\n          determineStep: {\n            always: [\n              { target: '#valid.lastStep', cond: 'isLastStep' },\n              { target: '#valid.hasNextStep' },\n            ],\n          },\n          hasNextStep: {\n            on: {\n              next: {\n                target: '#configurator.configuring',\n                actions: [nextStep, 'changedStep'],\n              },\n            },\n          },\n          lastStep: {\n            on: {\n              next: '#configurator.configured',\n            },\n          },\n        },\n      },\n      configured: {\n        type: 'final',\n        data: ({ configuration }) => ({ configuration }),\n      },\n    },\n    on: {\n      change: {\n        target: 'configuring',\n        actions: change,\n      },\n      prev: {\n        target: 'configuring',\n        actions: [prevStep, 'changedStep'],\n      },\n    },\n  },\n  {\n    actions: {\n      changedStep: sendParent((context) => ({\n        type: 'changedStep',\n        step: context.activeStep,\n      })),\n    },\n    guards: {\n      isLastStep: (context) => context.activeStep === context.steps.length - 1,\n      activeStepValid: (context) => context.isActiveStepValid,\n    },\n  }\n);\n\nexport type ConfiguratorActorRef = ActorRefFrom<typeof configuratorMachine>;\n","import { ComponentType } from 'react';\n\nimport { assign, createSchema } from 'xstate';\nimport { escalate } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\nexport type ConnectorConfiguratorProps = {\n  activeStep?: number;\n  connector: ConnectorType;\n  isViewMode?: boolean;\n  configuration?: unknown;\n  onChange: (configuration: Map<string, unknown>, isValid: boolean) => void;\n};\n\nexport type ConnectorConfiguratorComponent =\n  ComponentType<ConnectorConfiguratorProps>;\nexport type ConnectorConfiguratorType = ConnectorConfiguratorComponent | false;\n\nexport type ConnectorConfiguratorResponse = {\n  Configurator: ConnectorConfiguratorType;\n  steps: string[] | false;\n};\n\ntype Context = {\n  connector: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  steps?: string[] | false;\n  error?: string;\n};\n\nconst configuratorLoaderMachineSchema = {\n  context: createSchema<Context>(),\n};\n\nconst configuratorLoaderMachineModel = createModel({\n  connector: { id: 'something', name: 'something', version: '0.1' },\n  Configurator: undefined,\n  steps: undefined,\n  error: undefined,\n} as Context);\n\nexport const configuratorLoaderMachine =\n  configuratorLoaderMachineModel.createMachine({\n    schema: configuratorLoaderMachineSchema,\n    id: 'configurator',\n    initial: 'loading',\n    context: configuratorLoaderMachineModel.initialContext,\n    states: {\n      loading: {\n        invoke: {\n          id: 'fetchConfigurator',\n          src: 'fetchConfigurator',\n          onDone: {\n            target: 'success',\n            actions: assign((_context, event) => event.data),\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_context, event) => event.data,\n            }),\n          },\n        },\n      },\n      failure: {\n        entry: escalate((context) => ({ message: context.error })),\n      },\n      success: {\n        type: 'final',\n        data: ({ Configurator, steps }: Context) => ({\n          Configurator: Configurator!,\n          steps: steps as string[] | false,\n        }),\n      },\n    },\n  });\n","import { ConnectorTypesQuery, fetchConnectorTypes } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nimport {\n  ApiSuccessResponse,\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  response?: ApiSuccessResponse<ConnectorType>;\n  selectedConnector?: ConnectorType;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    connectorsApiBasePath: '',\n    response: undefined,\n    selectedConnector: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectConnector: (payload: { selectedConnector: string }) => ({\n        ...payload,\n      }),\n      deselectConnector: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        ConnectorType,\n        ConnectorTypesQuery,\n        ConnectorType\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectConnector = model.assign(\n  {\n    selectedConnector: (context, event) => {\n      return context.response?.items?.find(\n        (i) => (i as ObjectReference).id === event.selectedConnector\n      );\n    },\n  },\n  'selectConnector'\n);\nconst reset = model.assign(\n  {\n    selectedConnector: undefined,\n  },\n  'deselectConnector'\n);\n\nexport const connectorTypesMachine = model.createMachine(\n  {\n    context: model.initialContext,\n    id: 'connectors',\n    initial: 'root',\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  ConnectorType,\n                  ConnectorTypesQuery,\n                  ConnectorType\n                >(fetchConnectorTypes(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send(\n                  {\n                    type: 'api.query',\n                    query: { categories: ['sink', 'source'] },\n                  },\n                  { to: PAGINATED_MACHINE_ID }\n                ),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noConnectorSelected' },\n                  { target: 'valid', cond: 'connectorSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectConnector: {\n                    target: 'valid',\n                    actions: selectConnector,\n                    cond: (_, event) => event.selectedConnector !== undefined,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectConnector: {\n                    target: 'verify',\n                    actions: selectConnector,\n                  },\n                  deselectConnector: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'connectorSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedConnector: (context: Context) => context.selectedConnector,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      connectorSelected: (context) => context.selectedConnector !== undefined,\n      noConnectorSelected: (context) => context.selectedConnector === undefined,\n    },\n  }\n);\n\nexport type ConnectorTypesMachineActorRef = ActorRefFrom<\n  typeof connectorTypesMachine\n>;\n","import { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport { ConnectorType } from '@rhoas/connector-management-sdk';\n\ntype Context = {\n  connector: ConnectorType;\n  topic: string;\n  userErrorHandler?: any;\n};\n\nconst model = createModel(\n  {\n    topic: '',\n    userErrorHandler: '',\n  } as Context,\n  {\n    events: {\n      setTopic: (payload: { topic: string }) => payload,\n      setErrorHandler: (payload: { errorHandler: any | undefined }) => payload,\n      confirm: () => ({}),\n    },\n  }\n);\n\nconst setTopic = model.assign(\n  {\n    topic: (_, event) => event.topic,\n  },\n  'setTopic'\n);\n\nconst setErrorHandler = model.assign(\n  (_, event) => ({\n    userErrorHandler: event.errorHandler,\n  }),\n  'setErrorHandler'\n);\n\nexport const errorHandlingMachine = model.createMachine(\n  {\n    id: 'configureErrorHandler',\n    initial: 'verify',\n    states: {\n      verify: {\n        always: [\n          { target: 'valid', cond: 'isErrorHandlerConfigured' },\n          { target: 'typing' },\n        ],\n      },\n      typing: {\n        entry: sendParent('isInvalid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n        },\n      },\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          setTopic: {\n            target: 'verify',\n            actions: setTopic,\n          },\n          setErrorHandler: {\n            target: 'verify',\n            actions: setErrorHandler,\n          },\n          confirm: {\n            target: '#done',\n            cond: 'isErrorHandlerConfigured',\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          topic: (context: Context) => context.topic,\n          userErrorHandler: (context: Context) => context.userErrorHandler,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n    },\n  }\n);\n\nexport type ErrorHandlingMachineActorRef = ActorRefFrom<\n  typeof errorHandlingMachine\n>;\n","import { KafkasQuery, fetchKafkaInstances } from '@apis/api';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\n\nimport { ActorRefFrom, send } from 'xstate';\nimport { sendParent } from 'xstate/lib/actions';\nimport { createModel } from 'xstate/lib/model';\n\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nimport {\n  getPaginatedApiMachineEvents,\n  makePaginatedApiMachine,\n  PaginatedApiResponse,\n} from './PaginatedResponse.machine';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  kafkaManagementBasePath: string;\n  response?: PaginatedApiResponse<KafkaRequest>;\n  selectedInstance?: KafkaRequest;\n  error?: Object;\n};\n\nconst model = createModel(\n  {\n    accessToken: () => Promise.resolve(''),\n    kafkaManagementBasePath: '',\n    instances: undefined,\n    selectedInstance: undefined,\n    error: undefined,\n  } as Context,\n  {\n    events: {\n      selectInstance: (payload: { selectedInstance: string }) => ({\n        ...payload,\n      }),\n      deselectInstance: () => ({}),\n      confirm: () => ({}),\n      ...getPaginatedApiMachineEvents<\n        KafkaRequest,\n        KafkasQuery,\n        KafkaRequest\n      >(),\n    },\n  }\n);\n\nconst success = model.assign((_context, event) => {\n  const { type, ...response } = event;\n  return {\n    response,\n  };\n}, 'api.success');\nconst selectInstance = model.assign(\n  {\n    selectedInstance: (context, event) => {\n      return context.response?.items?.find(\n        (i) => i.id === event.selectedInstance\n      );\n    },\n  },\n  'selectInstance'\n);\nconst reset = model.assign(\n  {\n    selectedInstance: undefined,\n  },\n  'deselectInstance'\n);\n\nexport const kafkasMachine = model.createMachine(\n  {\n    id: 'kafkas',\n    initial: 'root',\n    context: model.initialContext,\n    states: {\n      root: {\n        type: 'parallel',\n        states: {\n          api: {\n            initial: 'idle',\n            invoke: {\n              id: PAGINATED_MACHINE_ID,\n              src: (context) =>\n                makePaginatedApiMachine<\n                  KafkaRequest,\n                  KafkasQuery,\n                  KafkaRequest\n                >(fetchKafkaInstances(context), (i) => i),\n            },\n            states: {\n              idle: {\n                entry: send('api.query', { to: PAGINATED_MACHINE_ID }),\n                on: {\n                  'api.ready': 'ready',\n                },\n              },\n              ready: {},\n            },\n            on: {\n              'api.refresh': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.nextPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.prevPage': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.query': {\n                actions: send((_, e) => e, { to: PAGINATED_MACHINE_ID }),\n              },\n              'api.success': { actions: success },\n            },\n          },\n          selection: {\n            id: 'selection',\n            initial: 'verify',\n            states: {\n              verify: {\n                always: [\n                  { target: 'selecting', cond: 'noInstanceSelected' },\n                  { target: 'valid', cond: 'instanceSelected' },\n                ],\n              },\n              selecting: {\n                entry: sendParent('isInvalid'),\n                on: {\n                  selectInstance: {\n                    target: 'valid',\n                    actions: selectInstance,\n                  },\n                },\n              },\n              valid: {\n                entry: sendParent('isValid'),\n                on: {\n                  selectInstance: {\n                    target: 'verify',\n                    actions: selectInstance,\n                    cond: (_, event) => event.selectedInstance !== undefined,\n                  },\n                  deselectInstance: {\n                    target: 'verify',\n                    actions: reset,\n                  },\n                  confirm: {\n                    target: '#done',\n                    cond: 'instanceSelected',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      done: {\n        id: 'done',\n        type: 'final',\n        data: {\n          selectedInstance: (context: Context) => context.selectedInstance,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      instanceSelected: (context) => context.selectedInstance !== undefined,\n      noInstanceSelected: (context) => context.selectedInstance === undefined,\n    },\n  }\n);\n\nexport type KafkaMachineActorRef = ActorRefFrom<typeof kafkasMachine>;\n","import { saveConnector, UserProvidedServiceAccount } from '@apis/api';\nimport { mapToObject } from '@utils/shared';\n\nimport { ActorRefFrom, sendParent } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n\n  kafka: KafkaRequest;\n  cluster: ConnectorCluster;\n  connectorType: ConnectorType;\n\n  initialConfiguration: unknown;\n\n  name: string;\n  userServiceAccount?: UserProvidedServiceAccount;\n\n  topic: string;\n  userErrorHandler: string;\n\n  configString: string;\n  configStringError?: string;\n  configStringWarnings?: string[];\n  savingError?: string;\n};\n\nconst model = createModel(\n  {\n    initialConfiguration: undefined,\n    configString: '',\n    name: '',\n  } as Context,\n  {\n    events: {\n      save: () => ({}),\n      success: () => ({}),\n      failure: (payload: { message: string }) => payload,\n    },\n  }\n);\n\nconst initialize = model.assign((context) => ({\n  kafka: context.kafka,\n  cluster: context.cluster,\n  connectorType: context.connectorType,\n\n  name: context.name,\n  userServiceAccount: context.userServiceAccount,\n\n  topic: context.topic,\n  userErrorHandler: context.userErrorHandler,\n\n  configString: dataToPrettyString(context.initialConfiguration),\n}));\n\nconst setSavingError = model.assign(\n  (_, event) => ({\n    savingError: event.message,\n  }),\n  'failure'\n);\n\nexport const reviewMachine = model.createMachine(\n  {\n    id: 'review',\n    initial: 'verify',\n    context: model.initialContext,\n    entry: initialize,\n    states: {\n      verify: {\n        always: [{ target: 'valid', cond: 'isAllConfigured' }],\n      },\n\n      valid: {\n        id: 'valid',\n        entry: sendParent('isValid'),\n        on: {\n          save: 'saving',\n        },\n      },\n      saving: {\n        invoke: {\n          src: (context) =>\n            saveConnector({\n              accessToken: context.accessToken,\n              connectorsApiBasePath: context.connectorsApiBasePath,\n              kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n              kafka: context.kafka,\n              cluster: context.cluster,\n              connectorType: context.connectorType,\n              configuration: JSON.parse(context.configString),\n              name: context.name,\n              userServiceAccount: context.userServiceAccount,\n              topic: context.topic,\n              userErrorHandler: context.userErrorHandler,\n            }),\n        },\n        on: {\n          success: 'saved',\n          failure: {\n            target: 'valid',\n            actions: setSavingError,\n          },\n        },\n        tags: ['saving'],\n      },\n      saved: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      isAllConfigured: (context) => context.configString !== undefined,\n    },\n  }\n);\n\nfunction dataToPrettyString(data: unknown) {\n  const dataVal = data instanceof Map ? mapToObject(data) : data;\n  try {\n    return JSON.stringify(dataVal, null, 2);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport type ReviewMachineActorRef = ActorRefFrom<typeof reviewMachine>;\n","import { UserProvidedServiceAccount } from '@apis/api';\nimport { basicMachine } from '@app/machines/StepBasic.machine';\nimport { clustersMachine } from '@app/machines/StepClusters.machine';\nimport { configuratorMachine } from '@app/machines/StepConfigurator.machine';\nimport {\n  configuratorLoaderMachine,\n  ConnectorConfiguratorType,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { connectorTypesMachine } from '@app/machines/StepConnectorTypes.machine';\nimport { errorHandlingMachine } from '@app/machines/StepErrorHandling.machine';\nimport { kafkasMachine } from '@app/machines/StepKafkas.machine';\nimport { reviewMachine } from '@app/machines/StepReview.machine';\n\nimport { assign, InterpreterFrom, send } from 'xstate';\nimport { createModel } from 'xstate/lib/model';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype Context = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n  selectedKafkaInstance?: KafkaRequest;\n  selectedCluster?: ConnectorCluster;\n  selectedConnector?: ConnectorType;\n  Configurator?: ConnectorConfiguratorType;\n  configurationSteps?: string[] | false;\n  activeConfigurationStep?: number;\n  isConfigurationValid?: boolean;\n  connectorConfiguration?: unknown;\n  name: string;\n  topic: string;\n  userServiceAccount: UserProvidedServiceAccount;\n  userErrorHandler: string;\n  onSave?: () => void;\n};\n\nconst model = createModel({} as Context, {\n  events: {\n    isValid: () => ({}),\n    isInvalid: () => ({}),\n    prev: () => ({}),\n    next: () => ({}),\n    changedStep: ({ step }: { step: number }) => ({ step }),\n    jumpToSelectKafka: () => ({}),\n    jumpToSelectCluster: () => ({}),\n    jumpToSelectConnector: () => ({}),\n    jumpToConfigureConnector: ({ subStep }: { subStep?: number }) => ({\n      subStep,\n    }),\n    jumpToBasicConfiguration: () => ({}),\n    jumpToErrorConfiguration: () => ({}),\n    jumpToReviewConfiguration: () => ({}),\n  },\n  actions: {\n    notifySave: () => ({}),\n  },\n});\n\nexport const creationWizardMachine = model.createMachine(\n  {\n    id: 'creationWizard',\n    initial: 'selectConnector',\n    context: model.initialContext,\n    states: {\n      selectConnector: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectConnectorRef',\n          src: connectorTypesMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedConnector: context.selectedConnector,\n          }),\n          onDone: {\n            target: 'selectKafka',\n            actions: assign((_context, event) => ({\n              selectedConnector: event.data.selectedConnector,\n              connectorConfiguration: false,\n              activeConfigurationStep: 0,\n              isConfigurationValid: false,\n              configurationSteps: false,\n            })),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectConnectorRef' }),\n              },\n            },\n          },\n        },\n      },\n      selectKafka: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectKafkaInstanceRef',\n          src: kafkasMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedInstance: context.selectedKafkaInstance,\n            request: {\n              page: 1,\n              size: 10,\n            },\n          }),\n          onDone: {\n            target: 'selectCluster',\n            actions: assign({\n              selectedKafkaInstance: (_, event) => event.data.selectedInstance,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectKafkaInstanceRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectConnector',\n        },\n      },\n      selectCluster: {\n        initial: 'selecting',\n        invoke: {\n          id: 'selectClusterRef',\n          src: clustersMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            selectedCluster: context.selectedCluster,\n          }),\n          onDone: {\n            target: 'basicConfiguration',\n            actions: assign({\n              selectedCluster: (_, event) => event.data.selectedCluster,\n            }),\n          },\n          onError: '.error',\n        },\n        states: {\n          error: {},\n          selecting: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'selecting',\n              next: {\n                actions: send('confirm', { to: 'selectClusterRef' }),\n              },\n            },\n          },\n        },\n        on: {\n          prev: 'selectKafka',\n        },\n      },\n      configureConnector: {\n        initial: 'loadConfigurator',\n        states: {\n          loadConfigurator: {\n            invoke: {\n              id: 'configuratorLoader',\n              src: 'makeConfiguratorLoaderMachine',\n              data: (context) => ({\n                connector: context.selectedConnector,\n              }),\n              onDone: {\n                target: 'configure',\n                actions: assign((_context, event) => ({\n                  Configurator: event.data.Configurator,\n                  configurationSteps: event.data.steps,\n                })),\n              },\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n          },\n          configure: {\n            id: 'configure',\n            initial: 'submittable',\n            invoke: {\n              id: 'configuratorRef',\n              src: configuratorMachine,\n              data: (context) => ({\n                connector: context.selectedConnector,\n                configuration: context.connectorConfiguration,\n                steps: context.configurationSteps || ['single step'],\n                activeStep: context.activeConfigurationStep || 0,\n                isActiveStepValid: context.connectorConfiguration !== false,\n              }),\n              onDone: [\n                {\n                  target: '#creationWizard.reviewConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                  cond: (context) => {\n                    if (context.configurationSteps) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  },\n                },\n                {\n                  target: '#creationWizard.errorConfiguration',\n                  actions: assign((_, event) => ({\n                    connectorConfiguration: event.data.configuration || true,\n                  })),\n                },\n              ],\n              onError: {\n                actions: (_context, event) => console.error(event.data.message),\n              },\n            },\n            states: {\n              submittable: {\n                on: {\n                  isInvalid: 'invalid',\n                  next: {\n                    actions: send('next', { to: 'configuratorRef' }),\n                  },\n                },\n              },\n              invalid: {\n                on: {\n                  isValid: 'submittable',\n                },\n              },\n            },\n            on: {\n              prev: [\n                {\n                  actions: send('prev', { to: 'configuratorRef' }),\n                  cond: 'areThereSubsteps',\n                },\n                { target: '#creationWizard.basicConfiguration' },\n              ],\n              changedStep: {\n                actions: assign({\n                  activeConfigurationStep: (_, event) => event.step,\n                }),\n              },\n            },\n          },\n        },\n      },\n      basicConfiguration: {\n        id: 'configureBasic',\n        initial: 'submittable',\n        invoke: {\n          id: 'basicRef',\n          src: basicMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'configureConnector',\n            actions: [\n              assign((_, event) => ({\n                name: event.data.name,\n                userServiceAccount: event.data.userServiceAccount,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'basicRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'selectCluster',\n        },\n      },\n      errorConfiguration: {\n        id: 'configureErrorHandler',\n        initial: 'submittable',\n        invoke: {\n          id: 'errorRef',\n          src: errorHandlingMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connector: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: 'reviewConfiguration',\n            actions: [\n              assign((_, event) => ({\n                topic: event.data.topic,\n                userErrorHandler: event.data.userErrorHandler,\n              })),\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          submittable: {\n            on: {\n              isInvalid: 'invalid',\n              next: {\n                actions: send('confirm', { to: 'errorRef' }),\n              },\n            },\n          },\n          invalid: {\n            on: {\n              isValid: 'submittable',\n            },\n          },\n        },\n        on: {\n          prev: 'configureConnector',\n        },\n      },\n      reviewConfiguration: {\n        id: 'review',\n        initial: 'reviewing',\n        invoke: {\n          id: 'reviewRef',\n          src: reviewMachine,\n          data: (context) => ({\n            accessToken: context.accessToken,\n            connectorsApiBasePath: context.connectorsApiBasePath,\n            kafkaManagementApiBasePath: context.kafkaManagementApiBasePath,\n            kafka: context.selectedKafkaInstance,\n            cluster: context.selectedCluster,\n            connectorType: context.selectedConnector,\n            initialConfiguration: context.connectorConfiguration,\n            name: context.name,\n            userServiceAccount: context.userServiceAccount,\n            topic: context.topic,\n            userErrorHandler: context.userErrorHandler,\n          }),\n          onDone: {\n            target: '#creationWizard.saved',\n            actions: [\n              assign((_, event) => ({\n                connectorConfiguration: event.data,\n              })),\n              'notifySave',\n            ],\n          },\n          onError: {\n            actions: (_context, event) => console.error(event.data.message),\n          },\n        },\n        states: {\n          reviewing: {\n            on: {\n              isValid: 'valid',\n            },\n          },\n          valid: {\n            on: {\n              isInvalid: 'reviewing',\n              next: {\n                actions: send('save', { to: 'reviewRef' }),\n              },\n            },\n          },\n        },\n\n        on: {\n          prev: [\n            {\n              target: '#creationWizard.configureConnector',\n              cond: (context) => {\n                if (context.configurationSteps) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            },\n            { target: '#creationWizard.errorConfiguration' },\n          ],\n        },\n      },\n      saved: {\n        id: 'saved',\n        type: 'final',\n      },\n    },\n    on: {\n      jumpToSelectConnector: {\n        target: 'selectConnector',\n      },\n      jumpToSelectKafka: {\n        target: 'selectKafka',\n        cond: 'isConnectorSelected',\n      },\n      jumpToSelectCluster: {\n        target: 'selectCluster',\n        cond: 'isKafkaInstanceSelected',\n      },\n      jumpToBasicConfiguration: {\n        target: 'basicConfiguration',\n        cond: 'isClusterSelected',\n      },\n      jumpToConfigureConnector: {\n        target: 'configureConnector',\n        cond: 'isBasicConfigured',\n        actions: assign((_, event) => ({\n          activeConfigurationStep: event.subStep || 0,\n        })),\n      },\n      jumpToErrorConfiguration: {\n        target: 'errorConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n      jumpToReviewConfiguration: {\n        target: 'reviewConfiguration',\n        cond: 'isConnectorConfigured',\n      },\n    },\n  },\n  {\n    guards: {\n      isKafkaInstanceSelected: (context) =>\n        context.selectedKafkaInstance !== undefined,\n      isClusterSelected: (context) => context.selectedCluster !== undefined,\n      isConnectorSelected: (context, event) => {\n        const subStep = (event as { subStep?: number }).subStep;\n        if (subStep) {\n          return (\n            context.selectedConnector !== undefined &&\n            (context.connectorConfiguration !== undefined ||\n              subStep <= context.activeConfigurationStep!)\n          );\n        }\n        return context.selectedConnector !== undefined;\n      },\n      isConnectorConfigured: (context) => {\n        if (!context.configurationSteps) {\n          return (\n            context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false\n          );\n        }\n        return (\n          (context.connectorConfiguration !== undefined &&\n            context.connectorConfiguration !== false) ||\n          (context.activeConfigurationStep ===\n            context.configurationSteps.length - 1 &&\n            context.isConfigurationValid === true)\n        );\n      },\n      isBasicConfigured: (context) =>\n        context.userServiceAccount === undefined\n          ? context.name !== undefined && context.name.length > 0\n          : context.name !== undefined &&\n            context.name.length > 0 &&\n            context.userServiceAccount.clientId?.length > 0 &&\n            context.userServiceAccount.clientSecret?.length > 0,\n\n      isErrorHandlerConfigured: (context) =>\n        context.userErrorHandler !== undefined &&\n        context.userErrorHandler === 'dead_letter_queue'\n          ? context.topic !== undefined && context.topic.length > 0\n          : (context.topic !== undefined && context.topic.length > 0) ||\n            context.userErrorHandler !== undefined,\n\n      areThereSubsteps: (context) => context.activeConfigurationStep! > 0,\n    },\n    actions: {\n      notifySave: (context) => {\n        if (context.onSave) {\n          context.onSave();\n        }\n      },\n    },\n    services: {\n      makeConfiguratorLoaderMachine: () => configuratorLoaderMachine,\n    },\n  }\n);\n\nexport type CreationWizardMachineInterpreterFromType = InterpreterFrom<\n  typeof creationWizardMachine\n>;\n","import {\n  ConnectorTypesQuery,\n  KafkasQuery,\n  UserProvidedServiceAccount,\n} from '@apis/api';\nimport {\n  CreationWizardMachineInterpreterFromType,\n  creationWizardMachine,\n} from '@app/machines/CreateConnectorWizard.machine';\nimport {\n  usePagination,\n  PaginatedApiActorType,\n  PaginatedApiRequest,\n} from '@app/machines/PaginatedResponse.machine';\nimport { BasicMachineActorRef } from '@app/machines/StepBasic.machine';\nimport { ClustersMachineActorRef } from '@app/machines/StepClusters.machine';\nimport {\n  ConnectorConfiguratorResponse,\n  configuratorLoaderMachine,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport { ConnectorTypesMachineActorRef } from '@app/machines/StepConnectorTypes.machine';\nimport { ErrorHandlingMachineActorRef } from '@app/machines/StepErrorHandling.machine';\nimport { KafkaMachineActorRef } from '@app/machines/StepKafkas.machine';\nimport { ReviewMachineActorRef } from '@app/machines/StepReview.machine';\nimport { PAGINATED_MACHINE_ID } from '@constants/constants';\nimport React, {\n  createContext,\n  FunctionComponent,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { useInterpret, useSelector } from '@xstate/react';\nimport { ActorRef } from 'xstate';\n\nimport {\n  ConnectorCluster,\n  ConnectorType,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type EmittedFrom<T> = T extends ActorRef<any, infer TEmitted>\n  ? TEmitted\n  : never;\n\nconst CreateConnectorWizardMachineService =\n  createContext<CreationWizardMachineInterpreterFromType | null>(null);\n\ntype CreateConnectorWizardProviderProps = {\n  accessToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  fetchConfigurator: (\n    connector: ConnectorType\n  ) => Promise<ConnectorConfiguratorResponse>;\n  onSave: () => void;\n};\n\nexport const CreateConnectorWizardProvider: FunctionComponent<CreateConnectorWizardProviderProps> =\n  ({\n    children,\n    accessToken,\n    connectorsApiBasePath,\n    fetchConfigurator,\n    onSave,\n  }) => {\n    const makeConfiguratorLoaderMachine = useCallback(\n      () =>\n        configuratorLoaderMachine.withConfig({\n          services: {\n            fetchConfigurator: (context) =>\n              fetchConfigurator(context.connector),\n          },\n        }),\n      [fetchConfigurator]\n    );\n    const service = useInterpret(creationWizardMachine, {\n      devTools: true,\n      context: {\n        accessToken,\n        connectorsApiBasePath,\n        onSave,\n      },\n      services: {\n        makeConfiguratorLoaderMachine,\n      },\n    });\n    return (\n      <CreateConnectorWizardMachineService.Provider value={service}>\n        {children}\n      </CreateConnectorWizardMachineService.Provider>\n    );\n  };\n\nexport const useCreateConnectorWizardService = () => {\n  const service = useContext(CreateConnectorWizardMachineService);\n  if (!service) {\n    throw new Error(\n      `useCreationWizardMachineService() must be used in a child of <CreationWizardMachineProvider>`\n    );\n  }\n  return service;\n};\n\nexport const useCreateConnectorWizard = (): {\n  connectorTypeRef: ConnectorTypesMachineActorRef;\n  kafkaRef: KafkaMachineActorRef;\n  clusterRef: ClustersMachineActorRef;\n  basicRef: BasicMachineActorRef;\n  errorRef: ErrorHandlingMachineActorRef;\n  reviewRef: ReviewMachineActorRef;\n} => {\n  const service = useCreateConnectorWizardService();\n  return useSelector(\n    service,\n    useCallback(\n      (state: EmittedFrom<typeof service>) => ({\n        connectorTypeRef: state.children\n          .selectConnectorRef as ConnectorTypesMachineActorRef,\n        kafkaRef: state.children.selectKafkaInstanceRef as KafkaMachineActorRef,\n        clusterRef: state.children.selectClusterRef as ClustersMachineActorRef,\n        basicRef: state.children.basicRef as BasicMachineActorRef,\n        errorRef: state.children.errorRef as ErrorHandlingMachineActorRef,\n        reviewRef: state.children.reviewRef as ReviewMachineActorRef,\n      }),\n      []\n    )\n  );\n};\n\nexport const useClustersMachineIsReady = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  return useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [clusterRef]\n    )\n  );\n};\n\nexport const useClustersMachine = () => {\n  const { clusterRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorCluster, {}, ConnectorCluster>(\n    clusterRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<ConnectorCluster, {}, ConnectorCluster>\n  );\n  const { selectedId } = useSelector(\n    clusterRef,\n    useCallback(\n      (state: EmittedFrom<typeof clusterRef>) => ({\n        selectedId: state.context.selectedCluster?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedCluster: string) => {\n      clusterRef.send({ type: 'selectCluster', selectedCluster });\n    },\n    [clusterRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<{}>) => {\n      clusterRef.send({ type: 'api.query', ...request });\n    },\n    [clusterRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useConnectorTypesMachineIsReady = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  return useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [connectorTypeRef]\n    )\n  );\n};\n\nexport const useConnectorTypesMachine = () => {\n  const { connectorTypeRef } = useCreateConnectorWizard();\n  const api = usePagination<ConnectorType, ConnectorTypesQuery, ConnectorType>(\n    connectorTypeRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<\n      ConnectorType,\n      ConnectorTypesQuery,\n      ConnectorType\n    >\n  );\n  const { selectedId } = useSelector(\n    connectorTypeRef,\n    useCallback(\n      (state: EmittedFrom<typeof connectorTypeRef>) => ({\n        selectedId: (state.context.selectedConnector as ObjectReference)?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedConnector: string) => {\n      connectorTypeRef.send({ type: 'selectConnector', selectedConnector });\n    },\n    [connectorTypeRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<ConnectorTypesQuery>) => {\n      connectorTypeRef.send({ type: 'api.query', ...request });\n    },\n    [connectorTypeRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useKafkasMachineIsReady = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  return useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => {\n        return state.matches({ root: { api: 'ready' } });\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [kafkaRef]\n    )\n  );\n};\n\nexport const useKafkasMachine = () => {\n  const { kafkaRef } = useCreateConnectorWizard();\n  const api = usePagination<KafkaRequest, KafkasQuery, KafkaRequest>(\n    kafkaRef.getSnapshot()?.children[\n      PAGINATED_MACHINE_ID\n    ] as PaginatedApiActorType<KafkaRequest, KafkasQuery, KafkaRequest>\n  );\n  const { selectedId } = useSelector(\n    kafkaRef,\n    useCallback(\n      (state: EmittedFrom<typeof kafkaRef>) => ({\n        selectedId: state.context.selectedInstance?.id,\n      }),\n      []\n    )\n  );\n  const onSelect = useCallback(\n    (selectedInstance: string) => {\n      kafkaRef.send({ type: 'selectInstance', selectedInstance });\n    },\n    [kafkaRef]\n  );\n  const onQuery = useCallback(\n    (request: PaginatedApiRequest<KafkasQuery>) => {\n      kafkaRef.send({ type: 'api.query', ...request });\n    },\n    [kafkaRef]\n  );\n  return {\n    ...api,\n    selectedId,\n    onSelect,\n    onQuery,\n  };\n};\n\nexport const useBasicMachine = () => {\n  const { basicRef } = useCreateConnectorWizard();\n  const { name, serviceAccount } = useSelector(\n    basicRef,\n    useCallback(\n      (state: EmittedFrom<typeof basicRef>) => ({\n        name: state.context.name,\n        serviceAccount: state.context.userServiceAccount,\n      }),\n      []\n    )\n  );\n  const onSetName = useCallback(\n    (name: string) => {\n      basicRef.send({ type: 'setName', name });\n    },\n    [basicRef]\n  );\n\n  const onSetServiceAccount = useCallback(\n    (serviceAccount: UserProvidedServiceAccount | undefined) => {\n      basicRef.send({ type: 'setServiceAccount', serviceAccount });\n    },\n    [basicRef]\n  );\n  return {\n    serviceAccount,\n    name,\n    onSetName,\n    onSetServiceAccount,\n  };\n};\n\nexport const useReviewMachine = () => {\n  const { reviewRef } = useCreateConnectorWizard();\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  } = useSelector(\n    reviewRef,\n    useCallback(\n      (state: EmittedFrom<typeof reviewRef>) => ({\n        kafka: state.context.kafka,\n        cluster: state.context.cluster,\n        connectorType: state.context.connectorType,\n        name: state.context.name,\n        userServiceAccount: state.context.userServiceAccount,\n        topic: state.context.topic,\n        userErrorHandler: state.context.userErrorHandler,\n        configString: state.context.configString,\n        isSaving: state.hasTag('saving'),\n        savingError: state.context.savingError,\n      }),\n      []\n    )\n  );\n\n  return {\n    kafka,\n    cluster,\n    connectorType,\n    topic,\n    userErrorHandler,\n    name,\n    userServiceAccount,\n    configString,\n    isSaving,\n    savingError,\n  };\n};\n\nexport const useErrorHandlingMachine = () => {\n  const { errorRef } = useCreateConnectorWizard();\n\n  const { connector, topic, errorHandler } = useSelector(\n    errorRef,\n    useCallback(\n      (state: EmittedFrom<typeof errorRef>) => ({\n        topic: state.context.topic,\n        errorHandler: state.context.userErrorHandler,\n        connector: state.context.connector,\n      }),\n      []\n    )\n  );\n\n  const onSetTopic = useCallback(\n    (topic: string) => {\n      errorRef.send({ type: 'setTopic', topic });\n    },\n    [errorRef]\n  );\n\n  const onSetErrorHandler = useCallback(\n    (errorHandler: string) => {\n      errorRef.send({ type: 'setErrorHandler', errorHandler });\n    },\n    [errorRef]\n  );\n\n  return {\n    errorHandler,\n    topic,\n    onSetErrorHandler,\n    onSetTopic,\n    connector,\n  };\n};\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Level, LevelItem, Title } from '@patternfly/react-core';\n\nimport './StepBodyLayout.css';\n\ntype CreateConnectorWizardBodyLayoutProps = {\n  title: string;\n  component?: ReactNode;\n  description?: ReactNode;\n};\nexport const StepBodyLayout: FunctionComponent<CreateConnectorWizardBodyLayoutProps> =\n  ({ title, description, component, children }) => (\n    <div className={'pf-l-stack'}>\n      <div className={'pf-l-stack__item pf-u-p-md'}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h2\">{title}</Title>\n          </LevelItem>\n          <LevelItem>{component}</LevelItem>\n        </Level>\n        {(() => {\n          switch (typeof description) {\n            case 'string':\n              return <p className=\"wizard-step__description\">{description}</p>;\n            default:\n              return description;\n          }\n        })()}\n      </div>\n      <div className=\"pf-l-stack__item pf-l-stack pf-m-fill pf-u-pl-md pf-u-pr-md  pf-u-pb-md\">\n        {children}\n      </div>\n    </div>\n  );\n","import { useBasicMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  Radio,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport function Basic() {\n  const { t } = useTranslation();\n  const { name, serviceAccount, onSetName, onSetServiceAccount } =\n    useBasicMachine();\n\n  return (\n    <StepBodyLayout title={t('Common')} description={t('basicStepDescription')}>\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label=\"Name\"\n            isRequired\n            fieldId=\"name\"\n            helperText=\"Please provide a unique name for the connector\"\n            className=\"pf-u-mb-0\"\n          >\n            <TextInput value={name} onChange={onSetName} id=\"name\" />\n          </FormGroup>\n          <FormGroup\n            label=\"Service account\"\n            isRequired\n            fieldId=\"service-account\"\n            className=\"pf-u-mb-0\"\n          >\n            <Radio\n              isChecked={serviceAccount === undefined}\n              name=\"service-account\"\n              onChange={() => onSetServiceAccount(undefined)}\n              label=\"Automatically create a service account for this connector.\"\n              id=\"service-account-automatic\"\n              value=\"automatic\"\n            />\n            <Radio\n              isChecked={serviceAccount !== undefined}\n              name=\"service-account\"\n              onChange={() =>\n                onSetServiceAccount({ clientId: '', clientSecret: '' })\n              }\n              label=\"Provide the credentials manually.\"\n              id=\"service-account-user\"\n              value=\"user\"\n            />\n            {serviceAccount !== undefined && (\n              <>\n                <FormGroup\n                  label=\"Client ID\"\n                  isRequired\n                  fieldId=\"clientId\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientId}\n                    onChange={(clientId) =>\n                      onSetServiceAccount({ ...serviceAccount, clientId })\n                    }\n                    id=\"clientId\"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label=\"Client Secret\"\n                  isRequired\n                  fieldId=\"clientSecret\"\n                  className=\"pf-u-mb-0\"\n                >\n                  <TextInput\n                    value={serviceAccount.clientSecret}\n                    onChange={(clientSecret) =>\n                      onSetServiceAccount({ ...serviceAccount, clientSecret })\n                    }\n                    id=\"clientSecret\"\n                  />\n                </FormGroup>\n              </>\n            )}\n          </FormGroup>\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ClusterIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoOSDClusterProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoOSDCluster: FunctionComponent<EmptyStateNoOSDClusterProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={ClusterIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No OSD Cluster available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useClustersMachineIsReady,\n  useClustersMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { EmptyStateNoOSDCluster } from '@app/components/EmptyStateNoOSDCluster/EmptyStateNoOSDCluster';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { useDebounce } from '@utils/useDebounce';\nimport React, { FunctionComponent, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  TextInput,\n  Toolbar,\n  ToolbarContent, // ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport function SelectCluster() {\n  const isReady = useClustersMachineIsReady();\n\n  return isReady ? <ClustersGallery /> : null;\n}\n\nconst ClustersGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const history = useHistory();\n  const {\n    response,\n    selectedId,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useClustersMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('OSD cluster')}\n      description={t('clusterStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ClustersToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoOSDCluster\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <ClustersToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ClustersToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst ClustersToolbar: FunctionComponent = () => {\n  // const { t } = useTranslation();\n  const { request, onQuery } = useClustersMachine();\n\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  // const [statuses, setStatuses] = useState<string[]>([\n  //   'Pending',\n  //   'Created',\n  //   'Cancelled',\n  // ]);\n  // const [statusesToggled, setStatusesToggled] = useState(false);\n  // const clearAllFilters = useCallback(() => {\n  //   setSearchValue('');\n  //   setStatuses([]);\n  // }, []);\n  // const toggleStatuses = useCallback(\n  //   () => setStatusesToggled(prev => !prev),\n  //   []\n  // );\n  // const onSelectStatus = useCallback(\n  //   (_, status) =>\n  //     setStatuses(prev =>\n  //       prev.includes(status)\n  //         ? prev.filter(s => s !== status)\n  //         : [...prev, status]\n  //     ),\n  //   []\n  // );\n\n  // const statusMenuItems = [\n  //   <SelectOption key=\"statusPending\" value=\"Pending\" />,\n  //   <SelectOption key=\"statusCreated\" value=\"Created\" />,\n  //   <SelectOption key=\"statusCancelled\" value=\"Cancelled\" />,\n  // ];\n\n  // ensure the search input value reflects what's specified in the request object\n  // useEffect(() => {\n  //   if (searchInputRef.current) {\n  //     searchInputRef.current.value = (request.name as string | undefined) || '';\n  //   }\n  // }, [searchInputRef, request]);\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"textInput2\"\n            id=\"textInput2\"\n            type=\"search\"\n            aria-label=\"search input example\"\n            onChange={(value) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                name: value,\n              })\n            }\n            ref={searchInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      {/* <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={statuses}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => setStatuses([])}\n          categoryName=\"Status\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Status\"\n            onToggle={toggleStatuses}\n            onSelect={onSelectStatus}\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText=\"Status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup> */}\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      {/* <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('createClustersInstance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup> */}\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ClustersPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      // clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ClustersPaginationProps = {\n  isCompact?: boolean;\n};\nconst ClustersPagination: FunctionComponent<ClustersPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useClustersMachine();\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useCreateConnectorWizardService } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { JsonSchemaConfigurator } from '@app/components/JsonSchemaConfigurator/JsonSchemaConfigurator';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport {\n  ConnectorConfiguratorComponent,\n  ConnectorConfiguratorProps,\n} from '@app/machines/StepConfiguratorLoader.machine';\nimport React, { ComponentType, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector } from '@xstate/react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nconst ConnectedCustomConfigurator: FunctionComponent<{\n  Configurator: ConnectorConfiguratorComponent;\n  actor: ConfiguratorActorRef;\n}> = ({ actor, Configurator }) => {\n  const { activeStep, configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        activeStep: state.context.activeStep,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <Configurator\n      activeStep={activeStep}\n      configuration={configuration}\n      connector={connector}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nconst ConnectedJsonSchemaConfigurator: FunctionComponent<{\n  actor: ConfiguratorActorRef;\n}> = ({ actor }) => {\n  const { configuration, connector } = useSelector(\n    actor,\n    useCallback(\n      (state: typeof actor.state) => ({\n        connector: state.context.connector,\n        configuration: state.context.configuration,\n      }),\n      [actor]\n    )\n  );\n\n  return (\n    <JsonSchemaConfigurator\n      schema={(connector as ConnectorTypeAllOf).schema!}\n      configuration={configuration || {}}\n      onChange={(configuration, isValid) =>\n        actor.send({ type: 'change', configuration, isValid })\n      }\n    />\n  );\n};\n\nexport type ConfiguratorStepProps = {\n  Configurator: ComponentType<ConnectorConfiguratorProps> | false;\n};\n\nexport const ConfiguratorStep: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const {\n    isLoading,\n    hasErrors,\n    Configurator,\n    configuratorRef,\n    hasCustomConfigurator,\n  } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => {\n        const isLoading = state.matches({\n          configureConnector: 'loadConfigurator',\n        });\n        const hasErrors = state.matches('failure');\n        const hasCustomConfigurator =\n          state.context.Configurator !== false &&\n          state.context.Configurator !== undefined;\n        return {\n          isLoading,\n          hasErrors,\n          hasCustomConfigurator,\n          configuration: state.context.connectorConfiguration,\n          Configurator: state.context.Configurator,\n          configuratorRef: state.children\n            .configuratorRef as ConfiguratorActorRef,\n        };\n      },\n      [service]\n    )\n  );\n\n  return (\n    <StepBodyLayout\n      title={t('Configurations')}\n      description={t('configurationStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <EmptyState>\n                <EmptyStateIcon variant=\"container\" component={Spinner} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  {t('loading')}\n                </Title>\n              </EmptyState>\n            );\n          case hasErrors:\n            return (\n              <EmptyState>\n                <EmptyStateIcon icon={ExclamationCircleIcon} />\n                <Title size=\"lg\" headingLevel=\"h4\">\n                  Error message\n                </Title>\n              </EmptyState>\n            );\n          case hasCustomConfigurator:\n            return (\n              <React.Suspense fallback={null}>\n                <ConnectedCustomConfigurator\n                  actor={configuratorRef}\n                  Configurator={Configurator as ConnectorConfiguratorComponent}\n                />\n              </React.Suspense>\n            );\n          default:\n            return <ConnectedJsonSchemaConfigurator actor={configuratorRef} />;\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n","import { ToolbarChip } from '@patternfly/react-core';\n\nexport const stringToChip = (\n  value: string,\n  t: (key: string) => string\n): ToolbarChip => ({ key: value, node: t(value) });\n","import {\n  useConnectorTypesMachine,\n  useConnectorTypesMachineIsReady,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateGenericError } from '@app/components/EmptyStateGenericError/EmptyStateGenericError';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport {\n  ConnectorTypeAllOf,\n  ObjectReference,\n} from '@rhoas/connector-management-sdk';\n\nexport function SelectConnectorType() {\n  const isReady = useConnectorTypesMachineIsReady();\n\n  return isReady ? <ConnectorTypesGallery /> : null;\n}\n\nexport function ConnectorTypesGallery() {\n  const { t } = useTranslation();\n  const {\n    response,\n    loading,\n    error,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    selectedId,\n    onSelect,\n    onQuery,\n  } = useConnectorTypesMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Connector')}\n      description={t('connectorTypeStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return <EmptyStateGenericError />;\n          case loading:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <ConnectorTypesToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((c) => (\n                      <Card\n                        isHoverable\n                        key={(c as ObjectReference).id}\n                        isSelectable\n                        isSelected={selectedId === (c as ObjectReference).id}\n                        onClick={() => onSelect((c as ObjectReference).id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>\n                            {(c as ConnectorTypeAllOf).name}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).description}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Version</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ConnectorTypeAllOf).version}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>ID</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {(c as ObjectReference).id}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n}\n\nconst ConnectorTypesToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { request, onQuery } = useConnectorTypesMachine();\n  const [categoriesToggled, setCategoriesToggled] = useState(false);\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const { name, categories = [] } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const toggleCategories = useCallback(\n    () => setCategoriesToggled((prev) => !prev),\n    []\n  );\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectCategory = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('categories', categories, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n  }, [nameInputRef, name]);\n\n  const typeMenuItems = [\n    <SelectOption key=\"sink\" value=\"sink\">\n      {t('sink')}\n    </SelectOption>,\n    <SelectOption key=\"source\" value=\"source\">\n      {t('source')}\n    </SelectOption>,\n  ];\n  const toggleGroupItems = (\n    <>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"name\"\n            type=\"search\"\n            aria-label=\"filter by connector name\"\n            onChange={(name) =>\n              debouncedOnQuery({\n                size: request.size,\n                page: 1,\n                query: {\n                  ...request.query,\n                  name,\n                },\n              })\n            }\n            ref={nameInputRef}\n          />\n          <Button\n            variant={'control'}\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={categories.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCategory}\n          deleteChipGroup={() => onDeleteQueryGroup('categories')}\n          categoryName=\"Connector type\"\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label=\"Connector type\"\n            onToggle={toggleCategories}\n            onSelect={(_, v) =>\n              onSelectCategory('', stringToChip(v as string, t))\n            }\n            selections={categories}\n            isOpen={categoriesToggled}\n            placeholderText=\"Connector type\"\n          >\n            {typeMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <ConnectorTypesPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent className={'pf-m-no-padding'}>\n        {toolbarItems}\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype ConnectorTypesPaginationProps = {\n  isCompact?: boolean;\n};\nconst ConnectorTypesPagination: FunctionComponent<ConnectorTypesPaginationProps> =\n  ({ isCompact = false }) => {\n    const { request, response, onQuery } = useConnectorTypesMachine();\n    return (\n      <Pagination\n        itemCount={response?.total || 0}\n        page={request.page}\n        perPage={request.size}\n        onChange={(page, size) => onQuery({ page, size })}\n        isCompact={isCompact}\n      />\n    );\n  };\n","import { useErrorHandlingMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { createValidator } from '@utils/createValidator';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { JSONSchemaBridge } from 'uniforms-bridge-json-schema';\n\nimport {\n  Grid,\n  Form,\n  FormGroup,\n  TextInput,\n  SelectOption,\n  Select,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport const StepErrorHandling: FunctionComponent = () => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const { connector, topic, errorHandler, onSetTopic, onSetErrorHandler } =\n    useErrorHandlingMachine();\n\n  const onToggle = useCallback(() => setOpen((isOpen) => !isOpen), []);\n  const onSelect = useCallback((_: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setOpen(false);\n      onSetTopic('');\n      onSetErrorHandler(selection);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const schemaValidator = createValidator(\n    (connector as ConnectorTypeAllOf).schema!\n  );\n  const bridge = new JSONSchemaBridge(\n    (connector as ConnectorTypeAllOf).schema!,\n    schemaValidator\n  );\n  const { error_handler } = bridge.schema?.properties;\n  const oneOf = error_handler['oneOf'];\n\n  const dropdownItems = oneOf.map((item: any) => {\n    const keys = Object.keys(item.properties);\n    return <SelectOption key={keys[0]} value={keys[0]} />;\n  });\n\n  return (\n    <StepBodyLayout\n      title={t('Error handler')}\n      description={t(\n        'Configure error handling stop, log and dead letter queues'\n      )}\n    >\n      <Grid hasGutter>\n        <Form className=\"pf-m-9-col-on-lg\">\n          <FormGroup\n            label={t('Error handler')}\n            fieldId=\"error-handler_strategy\"\n            className=\"error-handler_strategy pf-u-mb-0\"\n          >\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Error handler\"\n              onToggle={onToggle}\n              onSelect={onSelect}\n              selections={errorHandler}\n              isOpen={isOpen}\n              placeholderText=\"Select type\"\n            >\n              {dropdownItems}\n            </Select>\n          </FormGroup>\n          {errorHandler === 'dead_letter_queue' && (\n            <FormGroup\n              label=\"Dead Letter Topic Name\"\n              isRequired\n              fieldId=\"topic\"\n              helperText=\"The name of the Kafka topic used as dead letter queue\"\n            >\n              <TextInput value={topic} onChange={onSetTopic} id=\"topic\" />\n            </FormGroup>\n          )}\n        </Form>\n      </Grid>\n    </StepBodyLayout>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { SpaceShuttleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\ntype EmptyStateNoKafkaInstancesProps = {\n  onHelp: () => void;\n};\n\nexport const EmptyStateNoKafkaInstances: FunctionComponent<EmptyStateNoKafkaInstancesProps> =\n  ({ onHelp }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        variant={EmptyStateVariant.xl}\n        className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md')}\n      >\n        <EmptyStateIcon icon={SpaceShuttleIcon} />\n        <Title headingLevel={'h1'} size={TitleSizes['4xl']}>\n          {t('No Kafka instance available')}\n        </Title>\n        <EmptyStateBody>\n          <Trans>\n            Development preview instances are available for creation. For help\n            getting started, access the{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              onClick={onHelp}\n            >\n              quick start guide.\n            </Button>\n          </Trans>\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  };\n","import {\n  useKafkasMachineIsReady,\n  useKafkasMachine,\n} from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { EmptyStateNoKafkaInstances } from '@app/components/EmptyStateNoKafkaInstances/EmptyStateNoKafkaInstances';\nimport { EmptyStateNoMatchesFound } from '@app/components/EmptyStateNoMatchesFound/EmptyStateNoMatchesFound';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { Pagination } from '@app/components/Pagination/Pagination';\n// import { useBasename } from '@rhoas/app-services-ui-shared';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport React, {\n  FunctionComponent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { stringToChip } from 'src/utils/stringToChip';\nimport { useDebounce } from 'src/utils/useDebounce';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Gallery,\n  InputGroup,\n  Select,\n  SelectOption,\n  TextInput,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nexport const SelectKafkaInstance: FunctionComponent = () => {\n  const isReady = useKafkasMachineIsReady();\n  return isReady ? <KafkasGallery /> : null;\n};\nconst KafkasGallery: FunctionComponent = () => {\n  const { t } = useTranslation();\n  // const basename = useBasename();\n  const {\n    response,\n    loading,\n    error,\n    selectedId,\n    noResults,\n    // results,\n    queryEmpty,\n    // queryResults,\n    firstRequest,\n    onSelect,\n    onQuery,\n  } = useKafkasMachine();\n\n  return (\n    <StepBodyLayout\n      title={t('Kafka instance')}\n      description={t('kafkaStepDescription')}\n    >\n      {(() => {\n        switch (true) {\n          case firstRequest:\n            return <Loading />;\n          case queryEmpty:\n            return (\n              <>\n                <KafkaToolbar />\n                <EmptyStateNoMatchesFound\n                  onClear={() => onQuery({ page: 1, size: 10 })}\n                />\n              </>\n            );\n          case noResults || error:\n            return (\n              <EmptyStateNoKafkaInstances\n                onHelp={function (): void {\n                  throw new Error('Function not implemented.');\n                }}\n              />\n            );\n          case loading:\n            return (\n              <>\n                <KafkaToolbar />\n                <Loading />\n              </>\n            );\n          default:\n            return (\n              <>\n                <KafkaToolbar />\n                <div className={'pf-l-stack__item pf-m-fill'}>\n                  <Gallery hasGutter>\n                    {response?.items?.map((i) => (\n                      <Card\n                        isHoverable\n                        key={i.id}\n                        isSelectable\n                        isSelected={selectedId === i.id}\n                        onClick={() => onSelect(i.id!)}\n                      >\n                        <CardHeader>\n                          <CardTitle>{i.name}</CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                          <DescriptionList>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Region</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.region}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Owner</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.owner}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                            <DescriptionListGroup>\n                              <DescriptionListTerm>Created</DescriptionListTerm>\n                              <DescriptionListDescription>\n                                {i.created_at}\n                              </DescriptionListDescription>\n                            </DescriptionListGroup>\n                          </DescriptionList>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </Gallery>\n                </div>\n              </>\n            );\n        }\n      })()}\n    </StepBodyLayout>\n  );\n};\n\nconst KafkaToolbar: FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const { request, onQuery } = useKafkasMachine();\n\n  const [statusesToggled, setStatusesToggled] = useState(false);\n  const [cloudProvidersToggled, setCloudProvidersToggled] = useState(false);\n  const [regionsToggled, setRegionsToggled] = useState(false);\n  const [categoryToggled, setCategoryToggled] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('Name');\n  const onToggleStatuses = useCallback(\n    () => setStatusesToggled((prev) => !prev),\n    []\n  );\n  const onToggleCloudProviders = useCallback(\n    () => setCloudProvidersToggled((prev) => !prev),\n    []\n  );\n  const onToggleRegions = useCallback(\n    () => setRegionsToggled((prev) => !prev),\n    []\n  );\n  const onFilterCategoryToggle = useCallback(\n    () => setCategoryToggled((prev) => !prev),\n    []\n  );\n\n  const debouncedOnQuery = useDebounce(onQuery, 1000);\n\n  const {\n    name,\n    owner,\n    cloudProviders = [],\n    regions = [],\n    statuses = [],\n  } = request.query || {};\n\n  const clearAllFilters = useCallback(\n    () => onQuery({ page: 1, size: request.size }),\n    [onQuery, request.size]\n  );\n\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const ownerInputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectFilter = (category: string, values: string[], value: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: values.includes(value)\n          ? values.filter((s) => s !== value)\n          : [...(values || []), value],\n      },\n    });\n\n  const onSelectStatus = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('statuses', statuses, (value as ToolbarChip).key);\n  };\n\n  const onSelectCloudProvider = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter(\n      'cloudProviders',\n      cloudProviders,\n      (value as ToolbarChip).key\n    );\n  };\n\n  const onSelectRegion = (\n    _category: string | ToolbarChipGroup,\n    value: string | ToolbarChip\n  ) => {\n    onSelectFilter('regions', regions, (value as ToolbarChip).key);\n  };\n\n  const onDeleteQueryGroup = (category: string) =>\n    onQuery({\n      ...request,\n      query: {\n        ...(request.query || {}),\n        [category]: undefined,\n      },\n    });\n\n  const selectCategory = useCallback(\n    (event?: SyntheticEvent<HTMLDivElement, Event> | undefined) => {\n      const eventTarget = event?.target as HTMLElement;\n      const selectedCategory = eventTarget.innerText;\n      setSelectedCategory(selectedCategory);\n      setCategoryToggled((prev) => !prev);\n    },\n    []\n  );\n\n  // ensure the search input value reflects what's specified in the request object\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.value = name || '';\n    }\n    if (ownerInputRef.current) {\n      ownerInputRef.current.value = owner || '';\n    }\n  }, [nameInputRef, name, owner]);\n\n  const filterCategoryMenuItems = filterCategoryOptions.map(\n    ({ value, label }) => <DropdownItem key={value}>{label}</DropdownItem>\n  );\n  const statusMenuItems = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map(({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  const cloudProviderMenuItems = cloudProviderOptions.map(\n    ({ value, label }) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    )\n  );\n  const regionMenuItems = regionOptions.map(({ value, label }) => (\n    <SelectOption key={value} value={value}>\n      {label}\n    </SelectOption>\n  ));\n\n  const filterCategoryDropdown = (\n    <ToolbarItem>\n      <Dropdown\n        onSelect={(event) => selectCategory(event)}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            onToggle={onFilterCategoryToggle}\n            style={{ width: '100%' }}\n          >\n            <FilterIcon size=\"sm\" /> {selectedCategory}\n          </DropdownToggle>\n        }\n        isOpen={categoryToggled}\n        dropdownItems={filterCategoryMenuItems}\n        style={{ width: '100%' }}\n      ></Dropdown>\n    </ToolbarItem>\n  );\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        {filterCategoryDropdown}\n\n        <ToolbarFilter\n          chips={statuses.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectStatus}\n          deleteChipGroup={() => onDeleteQueryGroup('statuses')}\n          categoryName={t('status')}\n          showToolbarItem={selectedCategory === t('status')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('status')}\n            onToggle={onToggleStatuses}\n            onSelect={(_, v) =>\n              onSelectStatus('', stringToChip(v as string, t))\n            }\n            selections={statuses}\n            isOpen={statusesToggled}\n            placeholderText={t('Filter by status')}\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={cloudProviders.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectCloudProvider}\n          deleteChipGroup={() => onDeleteQueryGroup('cloudProviders')}\n          categoryName={t('CloudProvider')}\n          showToolbarItem={selectedCategory === t('CloudProvider')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('CloudProvider')}\n            onToggle={onToggleCloudProviders}\n            onSelect={(_, v) =>\n              onSelectCloudProvider('', stringToChip(v as string, t))\n            }\n            selections={cloudProviders}\n            isOpen={cloudProvidersToggled}\n            placeholderText={t('Filter by cloud provider')}\n          >\n            {cloudProviderMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={regions.map((v) => stringToChip(v, t))}\n          deleteChip={onSelectRegion}\n          deleteChipGroup={() => onDeleteQueryGroup('regions')}\n          categoryName={t('region')}\n          showToolbarItem={selectedCategory === t('region')}\n        >\n          <Select\n            variant={'checkbox'}\n            aria-label={t('region')}\n            onToggle={onToggleRegions}\n            onSelect={(_, v) =>\n              onSelectRegion('', stringToChip(v as string, t))\n            }\n            selections={regions}\n            isOpen={regionsToggled}\n            placeholderText={t('Filter by region')}\n          >\n            {regionMenuItems}\n          </Select>\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={name ? [name] : []}\n          deleteChip={() => onDeleteQueryGroup('name')}\n          categoryName={t('name')}\n        >\n          {selectedCategory === t('name') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('name')}\n                  id={t('name')}\n                  type=\"search\"\n                  placeholder={t('nameSearchPlaceholder')}\n                  aria-label={t('nameSearchPlaceholder')}\n                  onChange={(name) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name,\n                      },\n                    })\n                  }\n                  ref={nameInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for name input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        name: nameInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n\n        <ToolbarFilter\n          chips={owner ? [owner] : []}\n          deleteChip={() => onDeleteQueryGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {selectedCategory === t('owner') && (\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={t('owner')}\n                  id={t('owner')}\n                  type=\"search\"\n                  placeholder={t('ownerSearchPlaceholder')}\n                  aria-label={t('ownerSearchPlaceholder')}\n                  onChange={(owner) =>\n                    debouncedOnQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner,\n                      },\n                    })\n                  }\n                  ref={ownerInputRef}\n                />\n                <Button\n                  variant={'control'}\n                  aria-label=\"search button for owner input\"\n                  onClick={() =>\n                    onQuery({\n                      size: request.size,\n                      page: 1,\n                      query: {\n                        ...request.query,\n                        owner: ownerInputRef.current?.value || '',\n                      },\n                    })\n                  }\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n  const toolbarItems = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n      <ToolbarGroup variant=\"icon-button-group\">\n        <ToolbarItem>\n          <Button variant=\"primary\">{t('Create Kafka instance')}</Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n        <KafkasPagination isCompact />\n      </ToolbarItem>\n    </>\n  );\n  return (\n    <Toolbar\n      id=\"toolbar-group-types\"\n      collapseListedFiltersBreakpoint=\"xl\"\n      clearAllFilters={clearAllFilters}\n    >\n      <ToolbarContent>{toolbarItems}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\n// enum InstanceStatus {\n//   READY = 'ready',\n//   ACCEPTED = 'accepted',\n//   PREPARING = 'preparing',\n//   PROVISIONING = 'provisioning',\n//   FAILED = 'failed',\n//   DEPROVISION = 'deprovision',\n//   DELETED = 'deleted',\n// }\n\nconst filterCategoryOptions: KeyValueOptions[] = [\n  { value: 'name', label: 'Name' },\n  { value: 'status', label: 'Status' },\n  { value: 'cloudprovider', label: 'Cloud Provider' },\n  { value: 'region', label: 'Region' },\n  { value: 'owner', label: 'Owner' },\n];\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\nconst regionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n];\n\ntype KafkasPaginationProps = {\n  isCompact?: boolean;\n};\nconst KafkasPagination: FunctionComponent<KafkasPaginationProps> = ({\n  isCompact = false,\n}) => {\n  const { request, response, onQuery } = useKafkasMachine();\n\n  return (\n    <Pagination\n      itemCount={response?.total || 0}\n      page={request.page}\n      perPage={request.size}\n      onChange={(page, size) => onQuery({ page, size })}\n      isCompact={isCompact}\n    />\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n  Button,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  EyeIcon,\n  EyeSlashIcon,\n  FileDownloadIcon,\n} from '@patternfly/react-icons';\n\nexport const ViewJSONFormat: FunctionComponent = () => {\n  const [copied, setCopied] = React.useState<boolean>(false);\n  const [showServiceAccount, setShowServiceAccount] =\n    React.useState<boolean>(false);\n\n  const downloadTooltipRef = React.useRef();\n  const showTooltipRef = React.useRef();\n  let timer: any;\n\n  const { configString } = useReviewMachine();\n\n  function maskPropertyValues(inputObj: any) {\n    const dataToHide = ['secretKey', 'accessKey'];\n    const json = JSON.stringify(\n      inputObj,\n      (key, value) => {\n        return dataToHide.indexOf(key) === -1\n          ? value\n          : '*'.repeat(value.length);\n      },\n      2\n    );\n    return json;\n  }\n\n  const getJson = (properties: any, showHiddenFields: boolean) => {\n    return showHiddenFields\n      ? properties\n      : maskPropertyValues(JSON.parse(properties));\n  };\n\n  const clipboardCopyFunc = (event: any, text: string) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n  };\n\n  const onClick = (event: any, text: string) => {\n    if (timer) {\n      window.clearTimeout(timer);\n      setCopied(false);\n    }\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const downloadFile = async (event: any, data: any) => {\n    const downloadJson = event.currentTarget.parentElement;\n    const file = 'connectorConfig.json';\n    const json = data;\n    const blob = new Blob([json], { type: 'application/json' });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = file;\n    downloadJson.appendChild(link);\n    link.click();\n    downloadJson.removeChild(link);\n  };\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={showTooltipRef}\n          aria-label=\"show hidden fields icon\"\n          onClick={() => setShowServiceAccount(!showServiceAccount)}\n        >\n          {showServiceAccount ? <EyeSlashIcon /> : <EyeIcon />}\n        </Button>\n        <Tooltip\n          content={\n            <div>\n              {showServiceAccount\n                ? 'Hide service account'\n                : 'Show service account'}\n            </div>\n          }\n          reference={showTooltipRef}\n        />\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          id=\"copy-button\"\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onClick(e, getJson(configString, showServiceAccount))}\n          exitDelay={600}\n          maxWidth=\"110px\"\n          variant=\"plain\"\n        >\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n      <CodeBlockAction>\n        <Button\n          variant=\"plain\"\n          ref={downloadTooltipRef}\n          aria-label=\"Download icon\"\n          onClick={(e) =>\n            downloadFile(e, getJson(configString, showServiceAccount))\n          }\n        >\n          <FileDownloadIcon />\n        </Button>\n        <Tooltip\n          content={<div>Download JSON</div>}\n          reference={downloadTooltipRef}\n        />\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {getJson(configString, showServiceAccount)}\n      </CodeBlockCode>\n    </CodeBlock>\n  );\n};\n","import { useReviewMachine } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { StepBodyLayout } from '@app/components/StepBodyLayout/StepBodyLayout';\nimport { ViewJSONFormat } from '@app/components/ViewJSONFormat/ViewJSONFormat';\nimport _ from 'lodash';\nimport React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  Switch,\n  Grid,\n  GridItem,\n  Title,\n  TitleSizes,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nimport { ConnectorTypeAllOf } from '@rhoas/connector-management-sdk';\n\nexport function Review() {\n  const { t } = useTranslation();\n  const [toggleView, setToggleView] = useState(false);\n  const [toggleMaskView, setToggleMaskView] = useState<{\n    [key: string]: boolean;\n  }>({\n    clientId: true,\n    clientSecret: true,\n    accessKey: true,\n    secretKey: true,\n  });\n\n  const updateMaskView = (ele: any) => {\n    let updatedState = { ...toggleMaskView };\n    switch (ele.currentTarget.id) {\n      case 'clientId':\n        updatedState.clientId = !toggleMaskView.clientId;\n        setToggleMaskView(updatedState);\n        break;\n      case 'clientSecret':\n        updatedState.clientSecret = !toggleMaskView.clientSecret;\n        setToggleMaskView(updatedState);\n        break;\n      case 'accessKey':\n        updatedState.accessKey = !toggleMaskView.accessKey;\n        setToggleMaskView(updatedState);\n        break;\n      case 'secretKey':\n        updatedState.secretKey = !toggleMaskView.secretKey;\n        setToggleMaskView(updatedState);\n        break;\n    }\n  };\n  const {\n    kafka,\n    cluster,\n    connectorType,\n    name,\n    topic,\n    userErrorHandler,\n    userServiceAccount,\n    configString,\n    savingError,\n  } = useReviewMachine();\n\n  const onToggleJSONView = useCallback(\n    () => setToggleView((prev) => !prev),\n    []\n  );\n\n  const config = JSON.parse(configString);\n  const connector = JSON.parse(configString).connector;\n  const kafkaTopic = JSON.parse(configString).kafka;\n\n  const modifiedObject = _.mapKeys(config, (_, key) => {\n    return (key = key.replace(/\\./g, '_'));\n  });\n\n  const maskValue = (value: any) => {\n    return '*'.repeat(value.length);\n  };\n\n  return (\n    <StepBodyLayout\n      title={t('Review')}\n      description={\n        !toggleView\n          ? t('reviewStepDescription')\n          : t('reviewJSONStepDescription')\n      }\n      component={\n        <Switch\n          id=\"toggle-json-view\"\n          label={t('ViewJSONFormat')}\n          labelOff={t('ViewJSONFormat')}\n          isChecked={toggleView}\n          onChange={onToggleJSONView}\n        />\n      }\n    >\n      <Form>\n        {savingError && (\n          <FormAlert>\n            <Alert\n              variant=\"danger\"\n              title={savingError}\n              aria-live=\"polite\"\n              isInline\n            />\n          </FormAlert>\n        )}\n        {toggleView ? (\n          <ViewJSONFormat />\n        ) : (\n          <>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Connector category')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).description}\n              </GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Kafka instance')}</strong>\n              </GridItem>\n              <GridItem span={8}>{kafka.name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('OSD Cluster')}</strong>\n              </GridItem>\n              <GridItem span={8}>{cluster.name}</GridItem>\n            </Grid>\n\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('Basic')}\n            </Title>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Connector name')}</strong>\n              </GridItem>\n              <GridItem span={8}>{name}</GridItem>\n            </Grid>\n            <Grid>\n              <GridItem span={4}>\n                <strong>{t('Type')}</strong>\n              </GridItem>\n              <GridItem span={8}>\n                {(connectorType as ConnectorTypeAllOf).labels?.map(\n                  (type) => type\n                )}\n              </GridItem>\n            </Grid>\n            {userServiceAccount?.clientId && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('Client ID')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientId\n                        ? maskValue(userServiceAccount?.clientId)\n                        : userServiceAccount?.clientId}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientId\">\n                      {toggleMaskView.clientId ? <EyeIcon /> : <EyeSlashIcon />}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            {userServiceAccount?.clientSecret && (\n              <Grid>\n                <GridItem span={4}>\n                  <strong>{t('Client Secret')}</strong>\n                </GridItem>\n                <GridItem span={8}>\n                  <Flex>\n                    <FlexItem>\n                      {toggleMaskView.clientSecret\n                        ? maskValue(userServiceAccount?.clientSecret)\n                        : userServiceAccount?.clientSecret}\n                      {}\n                    </FlexItem>\n                    <FlexItem onClick={updateMaskView} id=\"clientSecret\">\n                      {toggleMaskView.clientSecret ? (\n                        <EyeIcon />\n                      ) : (\n                        <EyeSlashIcon />\n                      )}\n                    </FlexItem>\n                  </Flex>\n                </GridItem>\n              </Grid>\n            )}\n            <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n              {t('Connector specific')}\n            </Title>\n            {connector &&\n              Object.keys(connector).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('Access Key') ||\n                      _.startCase(el) === t('Secret Key') ? (\n                        <Flex>\n                          <FlexItem>\n                            {toggleMaskView[el]\n                              ? maskValue(connector[el])\n                              : connector[el]}\n                            {}\n                          </FlexItem>\n                          <FlexItem onClick={updateMaskView} id={el}>\n                            {toggleMaskView[el] ? (\n                              <EyeIcon />\n                            ) : (\n                              <EyeSlashIcon />\n                            )}\n                          </FlexItem>\n                        </Flex>\n                      ) : (\n                        connector[el]\n                      )}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {kafkaTopic &&\n              Object.keys(kafkaTopic).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{kafkaTopic[el]}</GridItem>\n                  </Grid>\n                );\n              })}\n            {connector === undefined &&\n              Object.keys(modifiedObject).map((el) => {\n                return (\n                  <Grid key={el}>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(el)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>\n                      {_.startCase(el) === t('Database Password') ||\n                      _.startCase(el) === t('Password')\n                        ? maskValue(modifiedObject[el])\n                        : typeof modifiedObject[el] === 'object'\n                        ? JSON.stringify(modifiedObject[el])\n                        : modifiedObject[el]}\n                    </GridItem>\n                  </Grid>\n                );\n              })}\n            {userErrorHandler && (\n              <>\n                <Title headingLevel=\"h3\" size={TitleSizes['2xl']}>\n                  {t('Error handling')}\n                </Title>\n                <Grid>\n                  <GridItem span={4}>\n                    <strong>{t('Error handling')}</strong>\n                  </GridItem>\n                  <GridItem span={8}>{userErrorHandler}</GridItem>\n                </Grid>\n                {topic && (\n                  <Grid>\n                    <GridItem span={4}>\n                      <strong>{_.startCase(topic)}</strong>\n                    </GridItem>\n                    <GridItem span={8}>{topic}</GridItem>\n                  </Grid>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    </StepBodyLayout>\n  );\n}\n","import { StepErrorBoundary } from '@app/components/StepErrorBoundary/StepErrorBoundary';\nimport {\n  getFlattenedSteps,\n  UncontrolledWizard,\n  WizardStep,\n} from '@app/components/UncontrolledWizard/UncontrolledWizard';\nimport { creationWizardMachine } from '@app/machines/CreateConnectorWizard.machine';\nimport { ConfiguratorActorRef } from '@app/machines/StepConfigurator.machine';\nimport { Basic } from '@app/pages/CreateConnectorPage/StepBasic';\nimport { SelectCluster } from '@app/pages/CreateConnectorPage/StepClusters';\nimport { ConfiguratorStep } from '@app/pages/CreateConnectorPage/StepConfigurator';\nimport { SelectConnectorType } from '@app/pages/CreateConnectorPage/StepConnectorTypes';\nimport { StepErrorHandling } from '@app/pages/CreateConnectorPage/StepErrorHandling';\nimport { SelectKafkaInstance } from '@app/pages/CreateConnectorPage/StepKafkas';\nimport { Review } from '@app/pages/CreateConnectorPage/StepReview';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSelector, useActor } from '@xstate/react';\n\nimport './CreateConnectorWizard.css';\nimport { useCreateConnectorWizardService } from './CreateConnectorWizardContext';\n\nfunction useKafkaInstanceStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('selectKafka'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectKafka')\n            .changed || state.matches('selectKafka'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Kafka instance'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <SelectKafkaInstance />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useBasicStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Common'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <Basic />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useConnectorSpecificStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('configureConnector'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToConfigureConnector')\n            .changed || state.matches('configureConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Connector Specific'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <ConfiguratorStep />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nfunction useErrorHandlingStep() {\n  const { t } = useTranslation();\n  const service = useCreateConnectorWizardService();\n  const { isActive, canJumpTo, enableNext } = useSelector(\n    service,\n    useCallback(\n      (state: typeof service.state) => ({\n        isActive: state.matches('errorConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToErrorConfiguration')\n            .changed || state.matches('errorConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        activeStep: state.context.activeConfigurationStep,\n      }),\n      [service]\n    )\n  );\n  return {\n    name: t('Error handling'),\n    isActive,\n    component: (\n      <StepErrorBoundary>\n        <StepErrorHandling />\n      </StepErrorBoundary>\n    ),\n    canJumpTo,\n    enableNext,\n  };\n}\n\nexport type CreateConnectorWizardProps = {\n  onClose: () => void;\n};\n\nexport const CreateConnectorWizard: FunctionComponent<CreateConnectorWizardProps> =\n  ({ onClose }) => {\n    const { t } = useTranslation();\n\n    const service = useCreateConnectorWizardService();\n    const [state, send] = useActor(service);\n\n    let { hasCustomConfigurator, activeStep, configureSteps } = useSelector(\n      service,\n      useCallback(\n        (state: typeof service.state) => {\n          const isLoading = state.matches({\n            configureConnector: 'loadConfigurator',\n          });\n          const hasErrors = state.matches('failure');\n          const hasCustomConfigurator =\n            state.context.Configurator !== false &&\n            state.context.Configurator !== undefined;\n\n          return {\n            isLoading,\n            hasErrors,\n            hasCustomConfigurator,\n            activeStep: state.context.activeConfigurationStep,\n            configuration: state.context.connectorConfiguration,\n            configureSteps: state.context.configurationSteps,\n            Configurator: state.context.Configurator,\n            configuratorRef: state.children\n              .configuratorRef as ConfiguratorActorRef,\n          };\n        },\n        [service]\n      )\n    );\n    const kafkaInstanceStep = useKafkaInstanceStep();\n    const basicStep = useBasicStep();\n    const connectorSpecificStep = useConnectorSpecificStep();\n    const errorHandlingStep = useErrorHandlingStep();\n\n    if (state.value === 'saved') return null;\n    const canJumpToStep = (idx: number) => {\n      return creationWizardMachine.transition(state, {\n        type: 'jumpToConfigureConnector',\n        subStep: idx,\n      }).changed;\n    };\n\n    const loadSubSteps = () => {\n      let finalSteps: any = [basicStep];\n      if (hasCustomConfigurator && configureSteps !== undefined) {\n        configureSteps\n          ? configureSteps.map((step, idx) => {\n              finalSteps.push({\n                name: step,\n                isActive:\n                  state.matches('configureConnector') && activeStep === idx,\n                component: (\n                  <StepErrorBoundary>\n                    <ConfiguratorStep />\n                  </StepErrorBoundary>\n                ),\n                canJumpTo: canJumpToStep(idx + 1),\n                enableNext: creationWizardMachine.transition(state, 'next')\n                  .changed,\n              });\n            })\n          : undefined;\n      }\n      if (\n        (!hasCustomConfigurator && configureSteps === undefined) ||\n        configureSteps === false\n      ) {\n        finalSteps.push(connectorSpecificStep);\n        finalSteps.push(errorHandlingStep);\n      }\n      return finalSteps;\n    };\n\n    const steps = [\n      {\n        name: t('Connector'),\n        isActive: state.matches('selectConnector'),\n        component: (\n          <StepErrorBoundary>\n            <SelectConnectorType />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectConnector')\n            .changed || state.matches('selectConnector'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      kafkaInstanceStep,\n      {\n        name: t('OSD cluster'),\n        isActive: state.matches('selectCluster'),\n        component: (\n          <StepErrorBoundary>\n            <SelectCluster />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToSelectCluster')\n            .changed || state.matches('selectCluster'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n      },\n      {\n        name: t('Configurations'),\n        isActive: state.matches('basicConfiguration'),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToBasicConfiguration')\n            .changed || state.matches('basicConfiguration'),\n\n        steps: loadSubSteps(),\n      },\n      {\n        name: t('Review'),\n        isActive: state.matches('reviewConfiguration'),\n        component: (\n          <StepErrorBoundary>\n            <Review />\n          </StepErrorBoundary>\n        ),\n        canJumpTo:\n          creationWizardMachine.transition(state, 'jumpToReviewConfiguration')\n            .changed || state.matches('reviewConfiguration'),\n        enableNext: creationWizardMachine.transition(state, 'next').changed,\n        nextButtonText: 'Create connector',\n      },\n    ];\n\n    const flattenedSteps = getFlattenedSteps(steps) as Array<\n      WizardStep & { isActive: boolean }\n    >;\n    const currentStep =\n      flattenedSteps.reduceRight<number>(\n        (idx, s, currentIdx) =>\n          s.isActive && currentIdx > idx ? currentIdx : idx,\n        -1\n      ) + 1;\n\n    const onNext = () => send('next');\n    const onBack = () => send('prev');\n    const goToStep = (stepIndex: number) => {\n      switch (stepIndex) {\n        case 1:\n          send('jumpToSelectConnector');\n          break;\n        case 2:\n          send('jumpToSelectKafka');\n          break;\n        case 3:\n          send('jumpToSelectCluster');\n          break;\n        case 4:\n          send('jumpToBasicConfiguration');\n          break;\n        case 5:\n          send('jumpToConfigureConnector');\n          break;\n        case 6:\n          send('jumpToErrorConfiguration');\n          break;\n        case flattenedSteps.length:\n          send('jumpToReviewConfiguration');\n          break;\n        default:\n          if (stepIndex < flattenedSteps.length) {\n            send({ type: 'jumpToConfigureConnector', subStep: stepIndex - 6 });\n          }\n      }\n    };\n    const goToStepById = (...args: any[]) => console.log('goToStepById', args);\n    const goToStepByName = (...args: any[]) =>\n      console.log('goToStepByName', args);\n\n    return (\n      <UncontrolledWizard\n        className=\"cos\"\n        steps={steps}\n        currentStep={currentStep}\n        onNext={onNext}\n        onBack={onBack}\n        onClose={onClose}\n        onSave={() => false}\n        goToStep={goToStep}\n        goToStepById={goToStepById}\n        goToStepByName={goToStepByName}\n        hasNoBodyPadding={true}\n      />\n    );\n  };\n","import { CreateConnectorWizard } from '@app/components/CreateConnectorWizard/CreateConnectorWizard';\nimport { CreateConnectorWizardProvider } from '@app/components/CreateConnectorWizard/CreateConnectorWizardContext';\nimport { useCos } from '@context/CosContext';\nimport { fetchConfigurator } from '@utils/loadFederatedConfigurator';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Level,\n  Modal,\n  PageSection,\n  Title,\n} from '@patternfly/react-core';\n\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\n\ntype CreateConnectorPageProps = {\n  onSave: () => void;\n  onClose: () => void;\n};\nexport const CreateConnectorPage: FunctionComponent<CreateConnectorPageProps> =\n  ({ onSave, onClose }) => {\n    const { t } = useTranslation();\n    const config = useConfig();\n    const basename = useBasename();\n    const { connectorsApiBasePath, getToken } = useCos();\n    const [askForLeaveConfirm, setAskForLeaveConfirm] = useState(false);\n    const openLeaveConfirm = () => setAskForLeaveConfirm(true);\n    const closeLeaveConfirm = () => setAskForLeaveConfirm(false);\n    return (\n      <>\n        <PageSection variant={'light'} hasShadowBottom>\n          <Breadcrumb>\n            <BreadcrumbItem to={basename?.getBasename()}>\n              {t('Connectors')}\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{t('Create connector')}</BreadcrumbItem>\n          </Breadcrumb>\n          <Level className={'pf-u-pt-md pf-u-pb-md'}>\n            <Title headingLevel=\"h1\">{t('Create connector')}</Title>\n          </Level>\n        </PageSection>\n        <PageSection\n          padding={{ default: 'noPadding' }}\n          style={{ zIndex: 0 }}\n          type={'wizard'}\n        >\n          <CreateConnectorWizardProvider\n            accessToken={getToken}\n            connectorsApiBasePath={connectorsApiBasePath}\n            fetchConfigurator={(connector) =>\n              fetchConfigurator(connector, config?.cos.configurators || {})\n            }\n            onSave={onSave}\n          >\n            <CreateConnectorWizard onClose={openLeaveConfirm} />\n            <Modal\n              title={t('Leave page?')}\n              variant={'small'}\n              isOpen={askForLeaveConfirm}\n              onClose={closeLeaveConfirm}\n              actions={[\n                <Button key=\"confirm\" variant=\"primary\" onClick={onClose}>\n                  Confirm\n                </Button>,\n                <Button key=\"cancel\" variant=\"link\" onClick={closeLeaveConfirm}>\n                  Cancel\n                </Button>,\n              ]}\n            >\n              {t(\n                'Changes you have made will be lost and no connector will be created.'\n              )}\n            </Modal>\n          </CreateConnectorWizardProvider>\n        </PageSection>\n      </>\n    );\n  };\n","import { ConnectorDetailsPage } from '@app/pages/ConnectorDetailsPage/ConnectorDetailsPage';\nimport { ConnectedConnectorsPage } from '@app/pages/ConnectorsPage/ConnectorsPage';\nimport { CreateConnectorPage } from '@app/pages/CreateConnectorPage/CreateConnectorPage';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport { AlertVariant, useAlert } from '@rhoas/app-services-ui-shared';\n\nimport { CosContextProvider } from './context/CosContext';\n\ntype CosRoutesProps = {\n  getToken: () => Promise<string>;\n  connectorsApiBasePath: string;\n  kafkaManagementApiBasePath: string;\n};\n\nexport const CosRoutes: FunctionComponent<CosRoutesProps> = ({\n  getToken,\n  connectorsApiBasePath,\n  kafkaManagementApiBasePath,\n}) => {\n  const { t } = useTranslation();\n  const alert = useAlert();\n  const history = useHistory();\n  const goToConnectorsList = useCallback(() => history.push('/'), [history]);\n  const goToCreateConnector = useCallback(\n    () => history.push('/create-connector'),\n    [history]\n  );\n\n  const goToConnectorDetails = useCallback(\n    (id: string, targetTab: string) =>\n      history.push({\n        pathname: `/${id}`,\n        hash: `#${targetTab}`,\n      }),\n    [history]\n  );\n\n  const onConnectorSave = useCallback(() => {\n    alert?.addAlert({\n      id: 'connector-created',\n      variant: AlertVariant.success,\n      title: t('wizard.creation-success'),\n    });\n    goToConnectorsList();\n  }, [alert, goToConnectorsList, t]);\n  return (\n    <CosContextProvider\n      getToken={getToken}\n      connectorsApiBasePath={connectorsApiBasePath}\n      kafkaManagementApiBasePath={kafkaManagementApiBasePath}\n    >\n      <Switch>\n        <Route path={'/'} exact>\n          <ConnectedConnectorsPage\n            onCreateConnector={goToCreateConnector}\n            onConnectorDetail={goToConnectorDetails}\n          />\n        </Route>\n        <Route path={'/create-connector'}>\n          <CreateConnectorPage\n            onSave={onConnectorSave}\n            onClose={goToConnectorsList}\n          />\n        </Route>\n        <Route path={'/:id/'}>\n          <ConnectorDetailsPage onSave={goToConnectorsList} />\n        </Route>\n      </Switch>\n    </CosContextProvider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nexport const Loading: FunctionComponent = () => (\n  <EmptyState>\n    <EmptyStateIcon variant=\"container\" component={Spinner} />\n    <Title size=\"lg\" headingLevel=\"h4\">\n      Loading\n    </Title>\n  </EmptyState>\n);\n","import {\n  format as formatDate,\n  formatDistance,\n  formatRelative,\n  isDate,\n} from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// import all locales we need\n\nconst locales: { [key: string]: any } = {\n  en: enUS,\n}; // used to look up the required locale\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // Commenting it as we have fallbackLng for case of language detected as en-GB or en-US\n    // supportedLngs: ['en','it'],\n    backend: {\n      loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: 'en',\n    load: 'all',\n    debug: true,\n    // add any namespaces you're using here for loading purposes\n    ns: ['public'],\n    defaultNS: 'public',\n    nsSeparator: ':',\n    keySeparator: '.',\n\n    interpolation: {\n      defaultVariables: undefined,\n      escapeValue: false, // not needed for react as it escapes by default\n      format: (value, format, lng) => {\n        if (isDate(value) && format) {\n          const locale = lng ? locales[lng] : enUS;\n          if (format === 'short') return formatDate(value, 'P', { locale });\n          if (format === 'long') return formatDate(value, 'PPPP', { locale });\n          if (format === 'relative')\n            return formatRelative(value, new Date(), { locale });\n          if (format === 'ago')\n            return formatDistance(value, new Date(), {\n              locale,\n              addSuffix: true,\n            });\n\n          return formatDate(value, format, { locale });\n        }\n        return value;\n      },\n    },\n  });\n\nexport default i18n;\n"],"names":["saveConnector","accessToken","connectorsApiBasePath","kafkaManagementApiBasePath","kafka","cluster","connectorType","configuration","name","userServiceAccount","userErrorHandler","topic","connectorsAPI","ConnectorsApi","Configuration","basePath","securityAPI","SecurityApi","callback","source","Promise","resolve","response","createServiceAccount","id","replaceAll","Date","now","cancelToken","token","clientId","data","client_id","clientSecret","client_secret","getOrCreateServiceAccount","then","connectorConfiguration","error_handler","connector","kind","channel","Channel","deployment_location","cluster_id","desired_state","ConnectorDesiredState","connector_type_id","url","bootstrap_server_host","service_account","createConnector","type","catch","error","message","reason","cancel","ConnectorStatus","status","label","t","useTranslation","statusOptions","value","ConnectorStatuses","Ready","Failed","Assigning","Assigned","Updating","Provisioning","Deleting","Deleted","find","s","useConnectorStatusLabel","Flex","FlexItem","spacer","default","ConnectorStatusIcon","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","size","PAGINATED_MACHINE_ID","CONNECTOR_DETAILS_TABS","CosContext","createContext","CosContextProvider","getToken","children","Provider","useCos","context","useContext","Error","ErrorFallback","role","StepErrorBoundary","ErrorBoundary","FallbackComponent","resetKeys","fetchConfigurator","config","defaultConfig","steps","Configurator","federatedConfigurator","maybeGetFederatedConfiguratorForConnector","injectFederatedModuleScript","remoteEntry","scope","module","container","window","init","federatedConfigurationConfig","get","console","log","loadFederatedConfigurator","e","maybeConfiguration","split","maybeConf","reject","element","document","createElement","src","async","onload","head","removeChild","onerror","appendChild","mapToObject","inputMap","obj","forEach","key","CommonStep","editMode","changeIsValid","onUpdateConfiguration","Title","headingLevel","TitleSizes","Form","FormGroup","isRequired","fieldId","labelIcon","Popover","bodyContent","onClick","preventDefault","HelpIcon","noVerticalAlign","TextInput","onChange","val","onNameChange","Text","component","TextVariants","ClipboardCopy","isReadOnly","hoverTip","clickTip","getLabelIcon","content","Translation","undefined","CustomJsonSchemaBridge","constructor","schema","validator","super","getField","field","description","example","title","props","helperText","exampleText","ajv","allErrors","useDefaults","strict","strictSchema","createValidator","compile","model","errors","length","details","resolver","Resolver","JsonSchemaConfigurator","editCase","properties","schemaValidator","bridge","required","onChangeWizard","isValid","copiedModel","JSON","parse","stringify","dataShapePointer","data_shape","copiedBridge","Object","entries","dataShapeReolved","jsonPointer","result","getDataShape","keys","map","defaultValue","format","requiredEntries","r","assign","compareRequiredEntriesKeys","aKeys","sort","bKeys","slice","Grid","hasGutter","KameletForm","onChangeModel","includes","AutoField","disabled","oneOf","Auto","parent","_","AutoForm","ValidatedQuickForm","ConfigurationStep","formConfiguration","filter","replace","ErrorHandlerStep","isOpen","setOpen","useState","setTopic","errorHandler","setErrorHandler","clearSelection","useEffect","dead_letter_queue","JSONSchemaBridge","dropdownItems","item","SelectOption","Select","variant","SelectVariant","onToggle","onSelect","selection","isPlaceholder","selections","placeholderText","getEditPayload","newConfiguration","oldConfiguration","newConfig","oldConfig","push","diff","reduce","acc","ConfigurationPage","onSave","updateEditMode","connectorData","connectorTypeDetails","alert","useAlert","useConfig","askForLeaveConfirm","setAskForLeaveConfirm","userTouched","setUserTouched","activeTabKey","setActiveTabKey","commonConfiguration","setCommonConfiguration","setConnectorConfiguration","errHandlerConfiguration","setErrHandlerConfiguration","configurator","setConfigurator","isEditValid","setIsEditValid","closeLeaveConfirm","useCallback","update","onError","addAlert","AlertVariant","onSuccess","initialize","onCancelEdit","updateFedConfiguration","cos","configurators","err","PageSection","PageSectionVariants","style","paddingBottom","GridItem","span","Tabs","activeKey","_event","tabIndex","isVertical","Tab","eventKey","TabTitleText","step","index","fallback","Loading","ConnectedCustomConfigurator","isEditMode","Button","hasShadowTop","connectorUpdate","connectorId","updatedName","patchConnector","headers","updateConnector","Map","isDisabled","Modal","onClose","actions","activeStep","isViewMode","textListItem","TextListItem","TextListItemVariants","OverviewPage","TextContent","TextList","TextListVariants","owner","created_at","modified_at","getTab","hash","substr","indexOf","ConnectorDetailsPage","useParams","useLocation","history","useHistory","setEditMode","setConnectorData","setConnectorTypeDetails","getConnectorData","getConnectorTypeInfo","editEnable","getConnector","connectorTypeId","ConnectorTypesApi","getConnectorTypeByID","getConnectorTypeDetail","ConnectorDetailsHeader","padding","zIndex","Overview","basename","useBasename","hasShadowBottom","Breadcrumb","BreadcrumbItem","to","getBasename","isActive","Level","LevelItem","state","ConnectorDrawer","Drawer","isExpanded","DrawerContent","panelContent","ConnectorDrawerPanelContent","bootstrapServer","kafkaId","createdAt","modifiedAt","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","date","dateTime","toISOString","ConnectorsTable","TableComposable","css","Thead","Tr","Th","Tbody","ConnectorsTableRow","isSelected","canStart","canStop","canDelete","onStart","onStop","onDelete","openDetail","isSeparator","event","target","Td","dataLabel","isVisitedLink","items","Pagination","itemCount","page","perPage","isCompact","perPageOptions","onSetPage","onPerPageSelect","useDebounce","fnToDebounce","durationInMs","isNaN","TypeError","ConnectorsToolbar","searchInputRef","useRef","debouncedOnChange","toggleGroupItems","ToolbarItem","InputGroup","ref","SearchIcon","toolbarItems","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","NavLink","alignment","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","DialogDeleteConnector","connectorName","onCancel","onConfirm","showDialog","nameValue","setNameValue","ModalVariant","titleIconVariant","Stack","StackItem","Trans","EmptyStateGenericError","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","EmptyStateBody","EmptyStateGettingStarted","onHelp","onCreate","ButtonVariant","isSmall","isInline","EmptyStateNoMatchesFound","onClear","createModel","events","payload","notifySuccess","notifyError","notifySelect","updateState","_context","connectorMachine","createMachine","initial","initialContext","states","verify","always","cond","ready","on","stopped","deleted","startingConnector","invoke","startConnector","stoppingConnector","stopConnector","deletingConnector","deleteConnector","guards","isReady","isStopped","isDeleted","sendParent","makePaginatedApiMachine","service","dataTransformer","options","request","pollingEnabled","onBeforeSetResponse","notifyReady","notifyLoading","forwardUnknownEventsToParent","setResponse","i","total","fetch","actor","stop","spawn","callApi","setError","increasePage","decreasePage","query","api","idle","entry","success","queryEmpty","tags","queryResults","empty","results","loading","polling","after","INTERVAL","delays","pure","meta","isNotFirstPage","isNotLastPage","Math","ceil","isTotalZero","isQuerySuccesful","isQueryEmpty","isPollingEnabled","usePagination","useSelector","hasTag","noResults","firstRequest","selectedConnector","selectConnector","deselectConnector","setSelectedConnector","unsetSelectedConnector","connectorsPageMachine","root","listConnectors","fetchConnectors","withContext","makeConnectorMachine","d","send","listing","ConnectorsPageContext","ConnectorsPageProvider","useInterpret","devTools","useConnectorsPageMachineService","useConnectorsMachine","apiData","ConnectedConnectorsPage","onCreateConnector","onConnectorDetail","ConnectorsPage","matches","useConnectorsPageIsReady","ConnectorsPageBody","ConnectorsPageTitle","isFilled","Card","ConnectedTable","ConnectedRow","connectorRef","transition","changed","useConnector","showDeleteConnectorConfirm","setShowDeleteConnectorConfirm","category","targetTab","getFlattenedSteps","flattenedSteps","childStep","UncontrolledWizard","Component","handleKeyClicks","keyCode","KEY_CODES","this","isNavOpen","setState","getFlattenedStepsIndex","stepName","initSteps","j","canJumpTo","getElement","appendTo","body","newId","currentId","titleId","descriptionId","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","width","height","onBack","onNext","onGoToStep","goToStep","goToStepById","goToStepByName","currentStep","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","rest","adjustedStep","computedSteps","firstStep","enableNext","divStyles","wizard","WizardContextProvider","isFinishedStep","WizardHeader","WizardToggle","isInPage","onNavToggle","nav","isWizardNavOpen","wizNavAProps","WizardNav","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","WizardNavItem","isCurrent","onNavItemClick","returnList","indexChild","stepNavItemProps","hideBackButton","hideCancelButton","showClose","hasNoBodyWrapper","displayName","defaultProps","setName","setServiceAccount","confirm","serviceAccount","basicMachine","typing","valid","done","isBasicConfigured","clusters","selectedCluster","selectCluster","deselectCluster","clustersMachine","ConnectorClustersApi","listConnectorClusters","fetchClusters","selecting","clusterSelected","noClusterSelected","version","isActiveStepValid","change","next","prev","complete","changedStep","nextStep","min","prevStep","max","configuratorMachine","configuring","determineStep","hasNextStep","lastStep","configured","isLastStep","activeStepValid","configuratorLoaderMachineSchema","createSchema","configuratorLoaderMachineModel","configuratorLoaderMachine","onDone","failure","escalate","connectorTypesMachine","categories","getConnectorTypes","lcName","rawItems","filteredItems","c","labels","l","offset","fetchConnectorTypes","connectorSelected","noConnectorSelected","errorHandlingMachine","isErrorHandlerConfigured","kafkaManagementBasePath","instances","selectedInstance","selectInstance","deselectInstance","kafkasMachine","DefaultApi","statuses","cloudProviders","regions","search","join","Boolean","getKafkas","fetchKafkaInstances","instanceSelected","noInstanceSelected","initialConfiguration","configString","save","dataToPrettyString","setSavingError","savingError","reviewMachine","saving","saved","isAllConfigured","dataVal","isInvalid","jumpToSelectKafka","jumpToSelectCluster","jumpToSelectConnector","jumpToConfigureConnector","jumpToBasicConfiguration","jumpToErrorConfiguration","jumpToReviewConfiguration","notifySave","creationWizardMachine","activeConfigurationStep","isConfigurationValid","configurationSteps","selectKafka","selectedKafkaInstance","configureConnector","loadConfigurator","configure","submittable","invalid","basicConfiguration","errorConfiguration","reviewConfiguration","reviewing","isKafkaInstanceSelected","isClusterSelected","isConnectorSelected","isConnectorConfigured","areThereSubsteps","services","makeConfiguratorLoaderMachine","CreateConnectorWizardMachineService","CreateConnectorWizardProvider","withConfig","useCreateConnectorWizardService","useCreateConnectorWizard","connectorTypeRef","selectConnectorRef","kafkaRef","selectKafkaInstanceRef","clusterRef","selectClusterRef","basicRef","errorRef","reviewRef","useClustersMachine","getSnapshot","selectedId","onQuery","useConnectorTypesMachine","useKafkasMachine","useReviewMachine","isSaving","StepBodyLayout","Basic","onSetName","onSetServiceAccount","useBasicMachine","Radio","isChecked","EmptyStateNoOSDCluster","ClusterIcon","SelectCluster","useClustersMachineIsReady","ClustersGallery","ClustersToolbar","Gallery","isHoverable","isSelectable","CardHeader","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","debouncedOnQuery","ClustersPagination","ConnectedJsonSchemaConfigurator","ConfiguratorStep","isLoading","hasErrors","configuratorRef","hasCustomConfigurator","stringToChip","node","SelectConnectorType","useConnectorTypesMachineIsReady","ConnectorTypesGallery","ConnectorTypesToolbar","categoriesToggled","setCategoriesToggled","nameInputRef","clearAllFilters","toggleCategories","onSelectCategory","_category","values","onSelectFilter","current","typeMenuItems","ToolbarFilter","chips","v","deleteChip","deleteChipGroup","onDeleteQueryGroup","categoryName","ConnectorTypesPagination","StepErrorHandling","onSetTopic","onSetErrorHandler","useErrorHandlingMachine","EmptyStateNoKafkaInstances","SpaceShuttleIcon","SelectKafkaInstance","useKafkasMachineIsReady","KafkasGallery","KafkaToolbar","region","statusesToggled","setStatusesToggled","cloudProvidersToggled","setCloudProvidersToggled","regionsToggled","setRegionsToggled","categoryToggled","setCategoryToggled","selectedCategory","setSelectedCategory","onToggleStatuses","onToggleCloudProviders","onToggleRegions","onFilterCategoryToggle","ownerInputRef","onSelectStatus","onSelectCloudProvider","onSelectRegion","selectCategory","innerText","filterCategoryMenuItems","filterCategoryOptions","DropdownItem","statusMenuItems","option","cloudProviderMenuItems","cloudProviderOptions","regionMenuItems","regionOptions","filterCategoryDropdown","Dropdown","position","DropdownPosition","toggle","DropdownToggle","showToolbarItem","placeholder","KafkasPagination","ViewJSONFormat","copied","setCopied","showServiceAccount","setShowServiceAccount","downloadTooltipRef","showTooltipRef","getJson","showHiddenFields","inputObj","dataToHide","repeat","maskPropertyValues","text","clipboard","currentTarget","parentElement","el","toString","select","execCommand","clipboardCopyFunc","CodeBlockAction","EyeSlashIcon","EyeIcon","Tooltip","reference","ClipboardCopyButton","textId","exitDelay","maxWidth","downloadFile","downloadJson","blob","Blob","href","URL","createObjectURL","link","download","click","FileDownloadIcon","CodeBlock","CodeBlockCode","Review","toggleView","setToggleView","toggleMaskView","setToggleMaskView","accessKey","secretKey","updateMaskView","ele","updatedState","onToggleJSONView","kafkaTopic","modifiedObject","maskValue","Switch","labelOff","FormAlert","Alert","CreateConnectorWizard","useActor","configureSteps","kafkaInstanceStep","useKafkaInstanceStep","basicStep","useBasicStep","connectorSpecificStep","useConnectorSpecificStep","errorHandlingStep","useErrorHandlingStep","canJumpToStep","idx","finalSteps","loadSubSteps","reduceRight","currentIdx","stepIndex","args","CreateConnectorPage","CosRoutes","goToConnectorsList","goToCreateConnector","goToConnectorDetails","pathname","onConnectorSave","Route","path","exact","locales","en","use","initReactI18next","backend","loadPath","fallbackLng","load","debug","ns","defaultNS","nsSeparator","keySeparator","interpolation","defaultVariables","escapeValue","lng","isDate","locale","formatRelative","formatDistance","addSuffix"],"sourceRoot":""}